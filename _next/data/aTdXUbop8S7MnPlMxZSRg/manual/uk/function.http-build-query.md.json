{"pageProps":{"page":{"slug":"function.http-build-query.md","content":"# http\\_build\\_query\n\n(PHP 5, PHP 7, PHP 8)\n\nhttp\\_build\\_query — Генерує URL-кодований рядок запиту\n\n### Опис\n\n```methodsynopsis\nhttp_build_query(    array|object $data,    string $numeric_prefix = \"\",    ?string $arg_separator = null,    int $encoding_type = PHP_QUERY_RFC1738): string\n```\n\nГенерує URL-кодований рядок запиту наданого асоціативного (або індексованого) масиву.\n\n### Список параметрів\n\n`data`\n\nМоже бути масив чи об'єкт, що містить властивості.\n\nЯкщо `data` масив, то він може бути простою одномірною структурою або масивом масивів (який, у свою чергу, може містити інші масиви).\n\nЯкщо `data` об'єкт, тоді лише загальнодоступні властивості будуть включені до результату.\n\n`numeric_prefix`\n\nЯкщо числові індекси використовуються в базовому масиві і цей параметр вказано, він буде доданий до числового індексу для елементів тільки в базовому масиві.\n\nЦе дозволяє забезпечити допустимі імена змінних, які пізніше дані будуть декодовані PHP або іншим CGI-додатком.\n\n`arg_separator`\n\nРозділювач аргументів. Якщо не заданий або **`null`**, то для поділу аргументів використовується [arg\\_separator.output](ini.core.md#ini.arg-separator.output)\n\n`encoding_type`\n\nПо умолчанию\\*\\*`PHP_QUERY_RFC1738`\\*\\*\n\nЯкщо `encoding_type`равен\\*\\*`PHP_QUERY_RFC1738`\\*\\*, тогда кодирование осуществляется по[» RFC 1738](http://www.faqs.org/rfcs/rfc1738)и типу контента`application/x-www-form-urlencoded`що передбачає, що пробіли кодуються як символи \"плюс\" (`+`\n\nЯкщо `enc_type`равен\\*\\*`PHP_QUERY_RFC3986`\\*\\*, тоді кодування здійснюється відповідно до [» RFC 3986](http://www.faqs.org/rfcs/rfc3986), а пробіли будуть закодовані у відсотках (`%20`\n\n### Значення, що повертаються\n\nПовертає URL-кодований рядок.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Параметр`arg_separator` тепер припускає значення **`null`** |\n\n### Приклади\n\n**Приклад #1 Простий приклад використання **http\\_build\\_query()****\n\n```php\n<?php\n$data = array(\n    'foo' => 'bar',\n    'baz' => 'boom',\n    'cow' => 'milk',\n    'null' => null,\n    'php' => 'hypertext processor'\n);\n\necho http_build_query($data) . \"\\n\";\necho http_build_query($data, '', '&amp;');\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nfoo=bar&baz=boom&cow=milk&php=hypertext+processor\nfoo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor\n```\n\n**Приклад #2 Приклад використання** http\\_build\\_query()\\*\\* із числовими індексами елементів.\\*\\*\n\n```php\n<?php\n$data = array('foo', 'bar', 'baz', null, 'boom', 'cow' => 'milk', 'php' => 'hypertext processor');\n\necho http_build_query($data) . \"\\n\";\necho http_build_query($data, 'myvar_');\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n0=foo&1=bar&2=baz&4=boom&cow=milk&php=hypertext+processor\nmyvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_4=boom&cow=milk&php=hypertext+processor\n```\n\n**Приклад #3 Приклад використання** http\\_build\\_query()\\*\\* з багатовимірними масивами\\*\\*\n\n```php\n<?php\n$data = array(\n    'user' => array(\n        'name' => 'Bob Smith',\n        'age'  => 47,\n        'sex'  => 'M',\n        'dob'  => '5/12/1956'\n    ),\n    'pastimes' => array('golf', 'opera', 'poker', 'rap'),\n    'children' => array(\n        'bobby' => array('age'=>12, 'sex'=>'M'),\n        'sally' => array('age'=>8, 'sex'=>'F')\n    ),\n    'CEO'\n);\n\necho http_build_query($data, 'flags_');\n?>\n```\n\nРезультат виконання даних прикладів: (символи перенесені для зручності читання)\n\n```\nuser%5Bname%5D=Bob+Smith&user%5Bage%5D=47&user%5Bsex%5D=M&\nuser%5Bdob%5D=5%2F12%2F1956&pastimes%5B0%5D=golf&pastimes%5B1%5D=opera&\npastimes%5B2%5D=poker&pastimes%5B3%5D=rap&children%5Bbobby%5D%5Bage%5D=12&\nchildren%5Bbobby%5D%5Bsex%5D=M&children%5Bsally%5D%5Bage%5D=8&\nchildren%5Bsally%5D%5Bsex%5D=F&flags_0=CEO\n```\n\n> **Зауваження** :\n> \n> Тільки числовий індексований елемент CEO в базовому масиві отримав префікс. Інші числові індекси, знайдені в pastimes, не вимагають рядкового префікса, щоб бути допустимими іменами змінних.\n\n**Приклад #4 Приклад використання** http\\_build\\_query()\\*\\* з об'єктом\\*\\*\n\n```php\n<?php\nclass parentClass {\n    public    $pub      = 'publicParent';\n    protected $prot     = 'protectedParent';\n    private   $priv     = 'privateParent';\n    public    $pub_bar  = null;\n    protected $prot_bar = null;\n    private   $priv_bar = null;\n\n    public function __construct(){\n        $this->pub_bar  = new childClass();\n        $this->prot_bar = new childClass();\n        $this->priv_bar = new childClass();\n    }\n}\n\nclass childClass {\n    public    $pub  = 'publicChild';\n    protected $prot = 'protectedChild';\n    private   $priv = 'privateChild';\n}\n\n$parent = new parentClass();\n\necho http_build_query($parent);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\npub=publicParent&pub_bar%5Bpub%5D=publicChild\n```\n\n### Дивіться також\n\n-   [parse\\_str()](function.parse-str.md) \\- Розбирає рядок у змінні\n-   [parse\\_url()](function.parse-url.md) \\- Розбирає URL та повертає його компоненти\n-   [urlencode()](function.urlencode.md) \\- URL-кодування рядка\n-   [array\\_walk()](function.array-walk.md) \\- Застосовує задану користувачем функцію кожного елемента масиву\n","title":"http\\_build\\_query","contentType":2,"navigation":[{"function.get-meta-tags.md":"« get\\_meta\\_tags"},{"function.parse-url.md":"parse\\_url »"},{"index.md":"PHP Manual"},{"ref.url.md":"Функції URL"}]}},"__N_SSG":true}