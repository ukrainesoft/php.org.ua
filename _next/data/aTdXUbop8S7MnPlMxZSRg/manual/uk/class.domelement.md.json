{"pageProps":{"page":{"slug":"class.domelement.md","content":"# Клас DOMElement\n\n(PHP 5, PHP 7, PHP 8)\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class DOMElement\n    \n\n    \n     extends\n      DOMNode\n    \n\n    \n     implements\n      DOMParentNode,\n\n     DOMChildNode {\n\n    /* Свойства */\n    \n     public\n     readonly\n     string\n      $tagName;\n\n    public\n     string\n      $className;\n\n    public\n     string\n      $id;\n\n    public\n     readonly\n     mixed\n      $schemaTypeInfo = null;\n\n    public\n     readonly\n     ?DOMElement\n      $firstElementChild;\n\n    public\n     readonly\n     ?DOMElement\n      $lastElementChild;\n\n    public\n     readonly\n     int\n      $childElementCount;\n\n    public\n     readonly\n     ?DOMElement\n      $previousElementSibling;\n\n    public\n     readonly\n     ?DOMElement\n      $nextElementSibling;\n\n\n    /* Наследуемые свойства */\n    public\n     readonly\n     string\n      $nodeName;\npublic\n     ?string\n      $nodeValue;\npublic\n     readonly\n     int\n      $nodeType;\npublic\n     readonly\n     ?DOMNode\n      $parentNode;\npublic\n     readonly\n     ?DOMElement\n      $parentElement;\npublic\n     readonly\n     DOMNodeList\n      $childNodes;\npublic\n     readonly\n     ?DOMNode\n      $firstChild;\npublic\n     readonly\n     ?DOMNode\n      $lastChild;\npublic\n     readonly\n     ?DOMNode\n      $previousSibling;\npublic\n     readonly\n     ?DOMNode\n      $nextSibling;\npublic\n     readonly\n     ?DOMNamedNodeMap\n      $attributes;\npublic\n     readonly\n     bool\n      $isConnected;\npublic\n     readonly\n     ?DOMDocument\n      $ownerDocument;\npublic\n     readonly\n     ?string\n      $namespaceURI;\npublic\n     string\n      $prefix;\npublic\n     readonly\n     ?string\n      $localName;\npublic\n     readonly\n     ?string\n      $baseURI;\npublic\n     string\n      $textContent;\n\n\n    /* Методы */\n    \n   public __construct(string $qualifiedName, ?string $value = null, string $namespace = \"\")\n\n    public after(DOMNode|string ...$nodes): void\npublic append(DOMNode|string ...$nodes): void\npublic before(DOMNode|string ...$nodes): void\npublic getAttribute(string $qualifiedName): string\npublic getAttributeNames(): array\npublic getAttributeNode(string $qualifiedName): DOMAttr|DOMNameSpaceNode|false\npublic getAttributeNodeNS(?string $namespace, string $localName): DOMAttr|DOMNameSpaceNode|null\npublic getAttributeNS(?string $namespace, string $localName): string\npublic getElementsByTagName(string $qualifiedName): DOMNodeList\npublic getElementsByTagNameNS(?string $namespace, string $localName): DOMNodeList\npublic hasAttribute(string $qualifiedName): bool\npublic hasAttributeNS(?string $namespace, string $localName): bool\npublic insertAdjacentElement(string $where, DOMElement $element): ?DOMElement\npublic insertAdjacentText(string $where, string $data): void\npublic prepend(DOMNode|string ...$nodes): void\npublic remove(): void\npublic removeAttribute(string $qualifiedName): bool\npublic removeAttributeNode(DOMAttr $attr): DOMAttr|false\npublic removeAttributeNS(?string $namespace, string $localName): void\npublic replaceChildren(DOMNode|string ...$nodes): void\npublic replaceWith(DOMNode|string ...$nodes): void\npublic setAttribute(string $qualifiedName, string $value): DOMAttr|bool\npublic setAttributeNode(DOMAttr $attr): DOMAttr|null|false\npublic setAttributeNodeNS(DOMAttr $attr): DOMAttr|null|false\npublic setAttributeNS(?string $namespace, string $qualifiedName, string $value): void\npublic setIdAttribute(string $qualifiedName, bool $isId): void\npublic setIdAttributeNode(DOMAttr $attr, bool $isId): void\npublic setIdAttributeNS(string $namespace, string $qualifiedName, bool $isId): void\npublic toggleAttribute(string $qualifiedName, ?bool $force = null): bool\n\n\n    /* Наследуемые методы */\n    public DOMNode::appendChild(DOMNode $node): DOMNode|false\npublic DOMNode::C14N(    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): string|false\npublic DOMNode::C14NFile(    string $uri,    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): int|false\npublic DOMNode::cloneNode(bool $deep = false): DOMNode|false\npublic DOMNode::contains(DOMNode|DOMNameSpaceNode|null $other): bool\npublic DOMNode::getLineNo(): int\npublic DOMNode::getNodePath(): ?string\npublic DOMNode::getRootNode(array $options = null): DOMNode\npublic DOMNode::hasAttributes(): bool\npublic DOMNode::hasChildNodes(): bool\npublic DOMNode::insertBefore(DOMNode $node, ?DOMNode $child = null): DOMNode|false\npublic DOMNode::isDefaultNamespace(string $namespace): bool\npublic DOMNode::isEqualNode(?DOMNode $otherNode): bool\npublic DOMNode::isSameNode(DOMNode $otherNode): bool\npublic DOMNode::isSupported(string $feature, string $version): bool\npublic DOMNode::lookupNamespaceURI(?string $prefix): ?string\npublic DOMNode::lookupPrefix(string $namespace): ?string\npublic DOMNode::normalize(): void\npublic DOMNode::removeChild(DOMNode $child): DOMNode|false\npublic DOMNode::replaceChild(DOMNode $node, DOMNode $child): DOMNode|false\n\n   }\n```\n\n## Властивості\n\nchildElementCount\n\nКількість дочірніх елементів.\n\nfirstElementChild\n\nПерший дочірній елемент або **`null`**\n\nlastElementChild\n\nОстанній дочірній елемент або **`null`**\n\nnextElementSibling\n\nЕлемент, що прямує безпосередньо за елементом, або **`null`**\n\npreviousElementSibling\n\nЕлемент, що передує елементу, або **`null`**\n\nschemaTypeInfo\n\nПоки що не реалізовано, завжди повертає **`null`**\n\ntagName\n\nІм'я елемента\n\nclassName\n\nРядок, що представляє розділені коми класи елемента\n\nid\n\nІдентифікатор елемента\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Додані властивості першихелементівChild, LastElementChild, ChildElementCount, попереднійElementSibling і NextElementSibling. |\n| 8.0.0 | Класс**DOMElement** тепер реалізує інтерфейси [DOMParentNode](class.domparentnode.md) і [DOMChildNode](class.domchildnode.md) |\n\n## Примітки\n\n> **Зауваження** :\n> \n> Модуль DOM працює з кодуванням UTF-8. Для роботи з іншими кодуваннями користуються функціями [mb\\_convert\\_encoding()](function.mb-convert-encoding.md) [UConverter::transcode()](uconverter.transcode.md) або [iconv()](function.iconv.md)\n\n## Зміст\n\n-   [DOMElement::after](domelement.after.md)— Додає вузли після елемента\n-   [DOMElement::append](domelement.append.md)— Додає вузли після останнього дочірнього вузла\n-   [DOMElement::before](domelement.before.md)— Додає вузли перед елементом\n-   [DOMElement::\\_\\_construct](domelement.construct.md)— Створює новий екземпляр класу DOMElement\n-   [DOMElement::getAttribute](domelement.getattribute.md)— Повертає значення атрибуту\n-   [DOMElement::getAttributeNames](domelement.getattributenames.md)— Отримує імена атрибутів\n-   [DOMElement::getAttributeNode](domelement.getattributenode.md) \\- Повертає вузол атрибуту\n-   [DOMElement::getAttributeNodeNS](domelement.getattributenodens.md) \\- Повертає вузол атрибуту\n-   [DOMElement::getAttributeNS](domelement.getattributens.md)— Повертає значення атрибуту\n-   [DOMElement::getElementsByTagName](domelement.getelementsbytagname.md)— Повертає елементи на ім'я тега\n-   [DOMElement::getElementsByTagNameNS](domelement.getelementsbytagnamens.md)— Отримує елементи локального імені в заданому просторі імен\n-   [DOMElement::hasAttribute](domelement.hasattribute.md)— Перевіряє, чи існує атрибут\n-   [DOMElement::hasAttributeNS](domelement.hasattributens.md) \\- Перевіряє, чи існує заданий атрибут\n-   [DOMElement::insertAdjacentElement](domelement.insertadjacentelement.md) \\- Додає сусідній елемент\n-   [DOMElement::insertAdjacentText](domelement.insertadjacenttext.md)— Додає сусідній текст\n-   [DOMElement::prepend](domelement.prepend.md) \\- Додає вузли перед першим дочірнім вузлом\n-   [DOMElement::remove](domelement.remove.md) \\- Видаляє елемент\n-   [DOMElement::removeAttribute](domelement.removeattribute.md) \\- Видаляє атрибут\n-   [DOMElement::removeAttributeNode](domelement.removeattributenode.md) \\- Видаляє атрибут\n-   [DOMElement::removeAttributeNS](domelement.removeattributens.md) \\- Видаляє атрибут\n-   [DOMElement::replaceChildren](domelement.replacechildren.md)— Замінює дочірні елементи елемента\n-   [DOMElement::replaceWith](domelement.replacewith.md)— Замінює елемент новими вузлами\n-   [DOMElement::setAttribute](domelement.setattribute.md)— Додає новий або змінює існуючий атрибут\n-   [DOMElement::setAttributeNode](domelement.setattributenode.md)— Додає новий вузол атрибуту до елементу\n-   [DOMElement::setAttributeNodeNS](domelement.setattributenodens.md)— Додає новий атрибут елемент\n-   [DOMElement::setAttributeNS](domelement.setattributens.md) \\- Додає новий атрибут\n-   [DOMElement::setIdAttribute](domelement.setidattribute.md)— Оголошує атрибут із зазначеним ім'ям тип ID\n-   [DOMElement::setIdAttributeNode](domelement.setidattributenode.md)— Оголошує зазначений сайт атрибута тип ID\n-   [DOMElement::setIdAttributeNS](domelement.setidattributens.md)— Оголошує атрибуту із зазначеними локальним ім'ям та URI простору імен тип ID\n-   [DOMElement::toggleAttribute](domelement.toggleattribute.md) \\- Перемикає атрибут\n","title":"Клас DOMElement","contentType":2,"navigation":[{"class.domdocumenttype.md":"« DOMDocumentType"},{"domelement.after.md":"DOMElement::after »"},{"index.md":"PHP Manual"},{"book.dom.md":"DOM"}]}},"__N_SSG":true}