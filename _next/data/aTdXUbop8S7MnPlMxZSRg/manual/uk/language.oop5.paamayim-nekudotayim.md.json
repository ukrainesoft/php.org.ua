{"pageProps":{"page":{"slug":"language.oop5.paamayim-nekudotayim.md","content":"## Оператор роздільної здатності видимості (::)\n\nОператор роздільної здатності області видимості (названий також Paamayim Nekudotayim) або, простіше кажучи, «подвійна двокрапка» - це лексема, що дозволяє звертатися до [константі](language.oop5.constants.md) [статичному](language.oop5.static.md)свойству или[статичному](language.oop5.static.md) методу класу чи одному з його батьків. Крім цього, статичні властивості або методи дозволено перевизначати через [пізніше статичне зв'язування](language.oop5.late-static-bindings.md)\n\nПри зверненні до цих елементів ззовні класу вказують ім'я класу.\n\nМожна звертатись до класу через змінну. Значення змінної не повинно бути ключовим словом (наприклад, `self` `parent`или`static`\n\nPaamayim Nekudotayim тільки спочатку здається дивним словосполученням для позначення подвійного двокрапки. Однак, поки писав двигун Zend Engine версії 0.5 (який входив в PHP3), команда Zend вирішила так і назвати його. Взагалі-то воно й означає «подвійну двокрапку» — на івриті!\n\n**Приклад #1 Використання :: поза оголошенням класу**\n\n```php\n<?php\nclass MyClass {\n    const CONST_VALUE = 'Значение константы';\n}\n\n$classname = 'MyClass';\necho $classname::CONST_VALUE;\n\necho MyClass::CONST_VALUE;\n?>\n```\n\nДо властивостей і методів усередині класу звертаються через ключові слова self, parent і static.\n\n**Приклад #2 Використання :: всередині оголошення класу**\n\n```php\n<?php\nclass OtherClass extends MyClass\n{\n    public static $my_static = 'статическая переменная';\n\n    public static function doubleColon() {\n        echo parent::CONST_VALUE . \"\\n\";\n        echo self::$my_static . \"\\n\";\n    }\n}\n\n$classname = 'OtherClass';\n$classname::doubleColon();\n\nOtherClass::doubleColon();\n?>\n```\n\nКоли дочірній клас перевизначає методи батьківського класу, PHP автоматично не викликає методи батьківського класу. Чи буде викликано метод батьківського класу, залежить від дочірнього. Це правило також поширюється на [конструктори та деструктори](language.oop5.decon.md) [перевантажені](language.oop5.overloading.md)и «[магічні](language.oop5.magic.md)методи.\n\n**Приклад #3 Звернення до методу батьківського класу**\n\n```php\n<?php\nclass MyClass\n{\n    protected function myFunc() {\n        echo \"MyClass::myFunc()\\n\";\n    }\n}\n\nclass OtherClass extends MyClass\n{\n    // Переопределить родительское определение\n    public function myFunc()\n    {\n        // Но всё ещё вызываем родительскую функцию\n        parent::myFunc();\n        echo \"OtherClass::myFunc()\\n\";\n    }\n}\n\n$class = new OtherClass();\n$class->myFunc();\n?>\n```\n\nСмотрите также[деякі приклади статичних викликів](language.oop5.basic.md#language.oop5.basic.class.this)\n","title":"Оператор роздільної здатності видимості (::)","contentType":2,"navigation":[{"language.oop5.inheritance.md":"« Спадкування"},{"language.oop5.static.md":"Ключове слово static »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}