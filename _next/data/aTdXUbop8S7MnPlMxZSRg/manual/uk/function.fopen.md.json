{"pageProps":{"page":{"slug":"function.fopen.md","content":"# fopen\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nfopen — Відкриває файл або URL\n\n### Опис\n\n```methodsynopsis\nfopen(    string $filename,    string $mode,    bool $use_include_path = false,    ?resource $context = null): resource|false\n```\n\n**fopen()** закріплює іменований ресурс, вказаний у аргументі `filename`за потоком.\n\n### Список параметрів\n\n`filename`\n\nЯкщо `filename` передано у формі \"scheme://...\", він вважається URL і PHP проведе пошук обробника протоколу (також відомого як \"обертка\") для цієї схеми. Якщо жодна обгортка не закріплена за протоколом, PHP видасть зауваження, щоб допомогти вам відстежити потенційну проблему у вашому скрипті і потім продовжить виконання, начебто `filename` вказував на звичайний файл.\n\nЕсли PHP установлено, что`filename` вказує на локальний файл, тоді намагається відкрити потік до цього файлу. Файл повинен бути доступний PHP, так що вам слід переконатися, що права доступу до файлу це дозволяють. Якщо ви увімкнули [open\\_basedir](ini.core.md#ini.open-basedir), накладаються подальші обмеження.\n\nЯкщо PHP встановив, що `filename` вказує на зареєстрований протокол і цей протокол зареєстрований як мережна URL, PHP виконує перевірку стану директиви [allow\\_url\\_fopen](filesystem.configuration.md#ini.allow-url-fopen). Якщо вона вимкнена, PHP видасть попередження та виклик fopen закінчиться невдачею.\n\n> **Зауваження** :\n> \n> Список підтримуваних протоколів доступний у розділі [Підтримувані протоколи та обгортки](wrappers.md). Деякі протоколи (`обгортки`) поддерживают`контекст` та/або опції php.ini. Зверніться до відповідної сторінки з описом протоколу для отримання списку опцій, які можуть бути встановлені. (наприклад, значення php.ini `user_agent` використовується обгорткою `http`\n\nНа платформі Windows необхідно екранувати всі зворотні сліші на шляху до файлу або використовувати прямі сліші.\n\n```php\n<?php\n$handle = fopen(\"c:\\\\folder\\\\resource.txt\", \"r\");\n?>\n```\n\n`mode`\n\nПараметр`mode` вказує тип доступу, який ви просите потоку. Він може бути одним із наступних варіантів:\n\n**Список можливих режимів для **fopen()**, используя`mode`**\n\n| `mode` | Опис |\n| --- | --- |\n| `'r'` | Відкриває файл лише для читання; поміщає покажчик на початок файлу. |\n| `'r+'` | Відкриває файл для читання та запису; поміщає покажчик на початок файлу. |\n| `'w'` | Відкриває файл для запису; в іншому випадку поводиться так само, як і `'w+'` |\n| `'w+'` | Відкриває файл для читання та запису; поміщає покажчик на початок файлу і обрізає файл до нульової довжини. Якщо файл не існує – намагається його створити. |\n| `'a'` | Відкриває файл для запису; поміщає покажчик у кінець файлу. Якщо файл не існує – намагається його створити. У цьому режимі функція [fseek()](function.fseek.md) не застосовується, записи завжди додаються до кінця. |\n| `'a+'` | Відкриває файл для читання та запису; поміщає покажчик у кінець файлу. Якщо файл не існує – намагається його створити. У цьому режимі функція [fseek()](function.fseek.md) впливає лише на позицію читання, записи завжди додаються до кінця. |\n| `'x'` | Створює та відкриває тільки для запису; поміщає покажчик на початок файлу. Якщо файл вже існує, виклик **fopen()** закінчиться невдачею, поверне **`false`** та видасть помилку рівня **`E_WARNING`**. . Якщо файл не існує, він спробує його створити. Це еквівалентно вказівкам прапорів \\`O\\_EXCL |\n| `'x+'` | Створює та відкриває для читання та запису; в іншому має ту ж поведінку, що і`'x'` |\n| `'c'` | Відкриває файл лише для запису. Якщо файл не існує, він створюється. Якщо файл існує, то він не обрізається (на відміну від `'w'`), і виклик до цієї функції не викликає помилку (так само як і у випадку з `'x'`). Вказівник на файл буде встановлений на початок файлу. Це може бути корисним за бажанням заблокувати файл (див. [flock()](function.flock.md)) перед зміною, оскільки використання `'w'` може обрізати файл ще до того, як було отримано блокування (якщо ви хочете обрізати файл, можна використовувати функцію [ftruncate()](function.ftruncate.md) після запиту на блокування). |\n| `'c+'` | Відкриває файл для читання та запису; в іншому має ту ж поведінку, що і `'c'` |\n| `'e'` | Встановити прапор close-on-exec (закрити під час запуску) на відкритий файловий дескриптор. Доступно тільки в PHP скомпілюваному на системах, що підтримують POSIX.1-2008. |\n\n> **Зауваження** :\n> \n> Різні сімейства операційних систем мають різні угоди щодо закінчення рядків. Коли ви пишете текст і хочете вставити розрив рядка, ви повинні використовувати правильні символи (або символ) для операційної системи. Системи сімейства Unix використовують `\\n` як символ кінця рядка, системи сімейства Windows використовують `\\r\\n` як символи закінчення рядка та системи сімейства Macintosh (Mac OS Classic) використовують `\\r`в качестве символа конца строки.\n> \n> Якщо ви використовуєте неправильний символ кінця рядка під час редагування файлів, ви можете виявити, що при відкритті ці файли \"дивно виглядають\".\n> \n> Windows пропонує прапор режиму текстової трансляції (`'t'`), який автоматично переведе `\\n`в`\\r\\n` під час роботи із файлом. І навпаки - ви також можете використати `'b'`, щоб примусово увімкнути бінарний режим, у якому ваші дані не будуть перетворюватися. Щоб використати ці режими, вкажіть `'b'`или`'t'`последней буквой параметра`mode`\n> \n> Прапором трансляції за замовчуванням є `'b'`. Ви можете використовувати режим `'t'`, якщо працюєте з текстовими файлами та використовуєте `\\n` для позначення кінця рядка у вашому скрипті, але при цьому припускаєте, що ваші файли будуть використовуватися в таких додатках, як Блокнот (у застарілих версіях). У всіх інших випадках використовуйте прапор `'b'`\n> \n> Якщо ви вкажете прапор 't' під час роботи з бінарними файлами, ви можете зіткнутися з дивними проблемами з вашими даними, включаючи пошкоджені файли зображень та проблеми із символами `\\r\\n`\n\n> **Зауваження** :\n> \n> Знову ж таки з міркувань портованості вкрай рекомендується переписати старий код, який покладається на режим `'t'`, щоб замість цього він використовував правильні кінці рядків та режим `'b'`\n\n> **Зауваження**: Параметр`mode` ігнорується під час роботи з обгортками потоку php://output, php://input, php://stdin, php://stdout, php://stderr та php://fd.\n\n`use_include_path`\n\nНеобов'язковий третій параметр `use_include_path` може бути встановлений у '1' або **`true`**, якщо ви також хочете провести пошук файлу в [include\\_path](ini.core.md#ini.include-path)\n\n`context`\n\nРесурс (resource) с[контекстом потоку](stream.contexts.md)\n\n### Значення, що повертаються\n\nПовертає покажчик на файл у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки\n\n### Помилки\n\nУ разі невдалого завершення роботи генерується помилка рівня **`E_WARNING`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.0.16, 7.1.2 | Добавлена опция`'e'` |\n\n### Приклади\n\n**Приклад #1 Приклади використання **fopen()****\n\n```php\n<?php\n$handle = fopen(\"/home/rasmus/file.txt\", \"r\");\n$handle = fopen(\"/home/rasmus/file.gif\", \"wb\");\n$handle = fopen(\"http://www.example.com/\", \"r\");\n$handle = fopen(\"ftp://user:password@example.com/somefile.txt\", \"w\");\n?>\n```\n\n### Примітки\n\n**Увага**\n\nПри використанні SSL Microsoft IIS порушує протокол, закриваючи з'єднання без надсилання індикатора `close_notify`. PHP повідомить про це як \"SSL: Fatal Protocol Error\" в той момент, коли буде досягнуто кінця даних. Щоб обійти це, потрібно встановити директиву [error\\_reporting](errorfunc.configuration.md#ini.error-reporting)на уровень, исключающий E\\_WARNING. PHP вміє визначати, що на стороні сервера проблемний IIS при відкритті потоку обгорткою `https://` та не виводить попередження. Якщо розробник створює сокет `ssl://` через виклик функції [fsockopen()](function.fsockopen.md), він сам відповідає за визначення та придушення цього попередження.\n\n> **Зауваження** :\n> \n> Якщо ви стикаєтеся з проблемами під час читання або запису файлів, і ви використовуєте PHP у вигляді серверного модуля, переконайтеся в тому, що процес сервера має доступ до файлів і директорій, які ви використовуєте.\n\n> **Зауваження** :\n> \n> Ця функція також може приймати директорії як параметр `filename`. Якщо ви не знаєте, чи є `filename` файлом або директорією, то вам може знадобитися використовувати функцію [is\\_dir()](function.is-dir.md) до виклику функції **fopen()**\n\n### Дивіться також\n\n-   [Підтримувані протоколи та обгортки](wrappers.md)\n-   [fclose()](function.fclose.md) \\- Закриває відкритий дескриптор файлу\n-   [fgets()](function.fgets.md) \\- Читає рядок із файлу\n-   [fread()](function.fread.md) \\- Бінарно-безпечне читання файлу\n-   [fwrite()](function.fwrite.md) \\- Бінарно-безпечний запис у файл\n-   [fsockopen()](function.fsockopen.md) \\- Відкриває з'єднання з інтернет-сокетом або доменним сокетом Unix\n-   [file()](function.file.md) \\- Читає вміст файлу та поміщає його в масив\n-   [file\\_exists()](function.file-exists.md) \\- Перевіряє існування вказаного файлу чи каталогу\n-   [is\\_readable()](function.is-readable.md) \\- Визначає існування файлу і чи він доступний для читання\n-   [stream\\_set\\_timeout()](function.stream-set-timeout.md) \\- Встановити значення часу очікування потоку\n-   [popen()](function.popen.md) \\- Відкриває файловий покажчик процесу\n-   [stream\\_context\\_create()](function.stream-context-create.md) \\- Створює контекст потоку\n-   [umask()](function.umask.md) \\- Змінює поточну маску прав доступу для новостворених файлів та каталогів (umask)\n-   [SplFileObject](class.splfileobject.md)\n","title":"fopen","contentType":2,"navigation":[{"function.fnmatch.md":"« fnmatch"},{"function.fpassthru.md":"fpassthru »"},{"index.md":"PHP Manual"},{"ref.filesystem.md":"Функції файлової системи"}]}},"__N_SSG":true}