{"pageProps":{"page":{"slug":"dateinterval.format.md","content":"# DateInterval::format\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nDateInterval::format — Форматує інтервал\n\n### Опис\n\n```methodsynopsis\npublic DateInterval::format(string $format): string\n```\n\nФорматує інтервал.\n\n### Список параметрів\n\n`format`\n\n**В рядку `format` розпізнаються такі символи. Кожному такому символу має передувати знак відсотка (`%`** Символ у рядку`format`Опис Приклад значения`%`Символ`%` `%` `Y` Роки, число, щонайменше дві цифри з провідними нулями `01` `03` `y` Роки, число `3` `M` Місяці, число, щонайменше дві цифри з провідними нулями `01` `03` `12` `m` Місяці, число `3` `12` `D` Дні, число, мінімум дві цифри з провідними нулями `01` `03` `31` `d`Дни, число `3` `31` `a` Загальна кількість днів як результат виконання [DateTime::diff()](datetime.diff.md), либо`unknown` `4` `18` `8123` `H` Годинник, число, мінімум дві цифри з провідними нулями `01` `03` `23` `h` Годинник, число `3` `23` `I` Хвилини, число, щонайменше дві цифри з провідними нулями `01` `03` `59` `i` Хвилини, число `3` `59` `S` Секунди, число, щонайменше дві цифри з провідними нулями `01` `03` `57` `s` Секунди, число `3` `57` `F` Мікросекунди, число як мінімум 6 цифр з ведучим 0 `007701` `052738` `428291` `f` Мікросекунди, число `7701` `52738` `428291` `R` Знак`-`\"при негативному числі,\"`+` при позитивному `-` `+` `r` Знак`-`при негативному числі, порожньо при позитивному `-`,\n\n### Значення, що повертаються\n\nПовертає відформатований інтервал.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.2.12 | Формат`F`и`f` тепер завжди буде позитивним. |\n| 7.1.0 | Додані символи, що форматують. `F`и`f` |\n\n### Приклади\n\n**Приклад #1 Приклад использования[DateInterval](class.dateinterval.md)**\n\n```php\n<?php\n\n$interval = new DateInterval('P2Y4DT6H8M');\necho $interval->format('%d days');\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n4 days\n```\n\n**Приклад #2[DateInterval](class.dateinterval.md)и перенос единиц**\n\n```php\n<?php\n\n$interval = new DateInterval('P32D');\necho $interval->format('%d days');\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n32 days\n```\n\n**Приклад #3[DateInterval](class.dateinterval.md) і [DateTime::diff()](datetime.diff.md) з модифікаторами %a та %d**\n\n```php\n<?php\n\n$january = new DateTime('2010-01-01');\n$february = new DateTime('2010-02-01');\n$interval = $february->diff($january);\n\n// %a выведет общее количество дней.\necho $interval->format('%a total days').\"\\n\";\n\n// В то время как %d выведет только число дней, не покрытых месяцем\necho $interval->format('%m month, %d days');\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n31 total days\n1 month, 0 days\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Метод**DateInterval::format()** не робить перерахунку та перенесення одиниць часу при переповненні значень дат. Це очікувана поведінка, оскільки неможливо реалізувати перенесення при значеннях, наприклад, `\"32 дні\"`, які можуть інтерпретуватися по-різному, починаючи `\"1 місяць та 4 дні\"` та закінчуючи `\"1 місяць та 1 день\"`\n\n### Дивіться також\n\n-   [DateTime::diff()](datetime.diff.md) \\- Повертає різницю між двома об'єктами DateTime\n","title":"DateInterval::format","contentType":2,"navigation":[{"dateinterval.createfromdatestring.md":"« DateInterval::createFromDateString"},{"class.dateperiod.md":"DatePeriod »"},{"index.md":"PHP Manual"},{"class.dateinterval.md":"DateInterval"}]}},"__N_SSG":true}