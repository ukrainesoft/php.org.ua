{"pageProps":{"page":{"slug":"imagick.examples-1.md","content":"## Базове використання\n\nУ PHP дуже легко керувати об'єктом Imagick, використовуючи об'єктно-орієнтований інтерфейс. Ось невеликий приклад, як зробити мініатюру:\n\n**Приклад #1 Створення мініатюри в Imagick**\n\n```php\n<?php\n\nheader('Content-type: image/jpeg');\n\n$image = new Imagick('image.jpg');\n\n// Если в качестве ширины или высоты передан 0,\n// то сохраняется соотношение сторон\n$image->thumbnailImage(100, 0);\n\necho $image;\n\n?>\n```\n\nЗ використанням SPL та інших об'єктно-орієнтованих функцій, що підтримуються в Imagick, можна дуже легко змінити розміри всіх файлів у директорії (корисно для пакетної зміни великих зображень з цифрової камери для перегляду в Web). Тут ми використовуємо зміну розміру, використовуючи певні мета-дані:\n\n**Приклад #2 Створення мініатюр для всіх JPG файлів у директорії**\n\n```php\n<?php\n\n$images = new Imagick(glob('images/*.JPG'));\n\nforeach($images as $image) {\n\n    // Передаём 0 в thumbnailImage для сохранения соотношения сторон\n    $image->thumbnailImage(1024,0);\n\n}\n\n$images->writeImages();\n\n?>\n```\n\nЦей приклад створює відображення зображення. Відображення створюється дзеркальним відображенням та накладенням градієнта на ньому. Потім оригінальне зображення та його відображення накладаються на полотно.\n\n**Приклад #3 Створення відображення**\n\n```php\n<?php\n/* Чтение изображения */\n$im = new Imagick(\"test.png\");\n\n/* Миниатюра изображения */\n$im->thumbnailImage(200, null);\n\n/* Создание рамки для изображения */\n$im->borderImage(new ImagickPixel(\"white\"), 5, 5);\n\n/* Клонируем изображение и зеркально поворачиваем его */\n$reflection = $im->clone();\n$reflection->flipImage();\n\n/* Создаём градиент. Это будет наложением для отражения */\n$gradient = new Imagick();\n\n/* Градиент должен быть достаточно большой для изображения и его рамки */\n$gradient->newPseudoImage($reflection->getImageWidth() + 10, $reflection->getImageHeight() + 10, \"gradient:transparent-black\");\n\n/* Наложение градиента на отражение */\n$reflection->compositeImage($gradient, imagick::COMPOSITE_OVER, 0, 0);\n\n/* Добавляем прозрачность. Требуется ImageMagick 6.2.9 или выше */\n$reflection->setImageOpacity( 0.3 );\n\n/* Создаём пустой холст */\n$canvas = new Imagick();\n\n/* Холст должен быть достаточно большой, чтобы вместить оба изображения */\n$width = $im->getImageWidth() + 40;\n$height = ($im->getImageHeight() * 2) + 30;\n$canvas->newImage($width, $height, new ImagickPixel(\"black\"));\n$canvas->setImageFormat(\"png\");\n\n/* Наложение оригинального изображения и отражения на холст */\n$canvas->compositeImage($im, imagick::COMPOSITE_OVER, 20, 10);\n$canvas->compositeImage($reflection, imagick::COMPOSITE_OVER, 20, $im->getImageHeight() + 10);\n\n/* Вывод изображения */\nheader(\"Content-Type: image/png\");\necho $canvas;\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n![Приклад висновку: Створення відображення зображення](images/c0d23d2d6769e53e24a1b3136c064577-hello_world_reflection.png)\n\nЦей приклад ілюструє використання заливки під час малювання.\n\n**Приклад #4 Заливка тексту градієнтом**\n\n```php\n<?php\n\n/* Создание нового объекта imagick */\n$im = new Imagick();\n\n/* Создание нового изображения. Будет использоваться как шаблон заливки */\n$im->newPseudoImage(50, 50, \"gradient:red-black\");\n\n/* Создаём объект imagickdraw */\n$draw = new ImagickDraw();\n\n/* Запускаем новый шаблон с названием \"gradient\" */\n$draw->pushPattern('gradient', 0, 0, 50, 50);\n\n/* Смешиваем градиент с шаблоном */\n$draw->composite(Imagick::COMPOSITE_OVER, 0, 0, 50, 50, $im);\n\n/* Закрываем шаблон */\n$draw->popPattern();\n\n/* Используем шаблон с названием \"gradient\" для заливки */\n$draw->setFillPatternURL('#gradient');\n\n/* Устанавливаем размер шрифта в 52 */\n$draw->setFontSize(52);\n\n/* Добавляем свой текст */\n$draw->annotation(20, 50, \"Hello World!\");\n\n/* Создаём новый объект холста и белое изображение */\n$canvas = new Imagick();\n$canvas->newImage(350, 70, \"white\");\n\n/* Рисуем ImagickDraw на холсте */\n$canvas->drawImage($draw);\n\n/* устанавливаем чёрную рамку шириной 1px вокруг изображения */\n$canvas->borderImage('black', 1, 1);\n\n/* Устанавливаем формат PNG */\n$canvas->setImageFormat('png');\n\n/* Вывод изображения */\nheader(\"Content-Type: image/png\");\necho $canvas;\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n![Приклад виведення: Заливка тексту градієнтом](images/c0d23d2d6769e53e24a1b3136c064577-hello_world.png)\n\nРобота з анімованими GIF-зображеннями\n\n**Приклад #5 Читання GIF зображення та зміна розміру всіх кадрів**\n\n```php\n<?php\n\n/* Создание нового объекта imagick и чтение в GIF */\n$im = new Imagick(\"example.gif\");\n\n/* Изменение размера всех фреймов */\nforeach ($im as $frame) {\n    /* фреймы 50x50 */\n    $frame->thumbnailImage(50, 50);\n\n    /* Устанавливаем виртуальный холст для коррекции размера */\n    $frame->setImagePage(50, 50, 0, 0);\n}\n\n/* Обратите внимание, writeImages вместо writeImage */\n$im->writeImages(\"example_small.gif\", true);\n?>\n```\n\nРобота з примітивом \"еліпс\" та користувальницькими шрифтами\n\n**Приклад #6 Create a PHP logo**\n\n```php\n<?php\n/* Установка ширины и высоты в пропорции логотипа PHP */\n$width = 400;\n$height = 210;\n\n/* Создание объекта Imagick с поддержкой прозрачности */\n$img = new Imagick();\n$img->newImage($width, $height, new ImagickPixel('transparent'));\n\n/* Новый объект ImagickDraw  для отрисовки эллипса */\n$draw = new ImagickDraw();\n/* Установка пурпурного цвета заливки для эллипса */\n$draw->setFillColor('#777bb4');\n/* Задание размеров эллипса */\n$draw->ellipse($width / 2, $height / 2, $width / 2, $height / 2, 0, 360);\n/* Отрисовка эллипса */\n$img->drawImage($draw);\n\n/* Сброс цвета заливки с пурпурного на чёрный для текста (заметьте, что мы используем объект ImagickDraw повторно) */\n$draw->setFillColor('black');\n/* Задание обводки границы белым цветом */\n$draw->setStrokeColor('white');\n/* Задание толщины обводки */\n$draw->setStrokeWidth(2);\n/* Задание кернинга (отрицательные значения означают, что буквы будут ближе друг к другу) */\n$draw->setTextKerning(-8);\n/* Задание шрифта и его размера, которые используются в логотипе PHP */\n$draw->setFont('Handel Gothic.ttf');\n$draw->setFontSize(150);\n/* Центрирование текста вертикально и горизонтально */\n$draw->setGravity(Imagick::GRAVITY_CENTER);\n\n/* Добавление текста \"php\" со смещением по Y на -10 на холст (внутри эллипса) */\n$img->annotateImage($draw, 0, -10, 0, 'php');\n$img->setImageFormat('png');\n\n/* Установка соответвующего заголовка для PNG и вывод изображения */\nheader('Content-Type: image/png');\necho $img;\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n![Приклад виведення : Створюється логотип PHP за допомогою Imagick](images/c0d23d2d6769e53e24a1b3136c064577-php_logo.png)\n","title":"Базове використання","contentType":2,"navigation":[{"imagick.examples.md":"« Приклади"},{"class.imagick.md":"Imagick »"},{"index.md":"PHP Manual"},{"imagick.examples.md":"Приклади"}]}},"__N_SSG":true}