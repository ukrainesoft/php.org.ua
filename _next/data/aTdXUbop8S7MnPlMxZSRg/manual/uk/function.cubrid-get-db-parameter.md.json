{"pageProps":{"page":{"slug":"function.cubrid-get-db-parameter.md","content":"# cubrid\\_get\\_db\\_parameter\n\n(PECL CUBRID >= 8.3.0)\n\ncubrid\\_get\\_db\\_parameter — Повертає параметри бази даних CUBRID\n\n### Опис\n\n```methodsynopsis\ncubrid_get_db_parameter(resource $conn_identifier): array\n```\n\nФункція повертає параметри бази даних CUBRID або **`false`** у разі виникнення помилки. Повертається асоціативний масив із значеннями наступних параметрів:\n\n-   **`PARAM_ISOLATION_LEVEL`**\n-   **`PARAM_LOCK_TIMEOUT`**\n-   **`PARAM_MAX_STRING_LENGTH`**\n-   **`PARAM_AUTO_COMMIT`**\n\n**Параметри бази даних**\n\n| Параметр | Опис |\n| --- | --- |\n| PARAM\\_ISOLATION\\_LEVEL | Рівень ізоляції транзакції. |\n| LOCK\\_TIMEOUT | CUBRID надає функцію часу очікування блокування, яка встановлює час очікування (у секундах) для блокування доти, доки не буде дозволено налаштування блокування транзакції. Значення за промовчанням для lock\\_timeout\\_in\\_secs дорівнює -1, що означає, що клієнт програми чекатиме нескінченно, поки блокування транзакції не буде дозволено. |\n| PARAM\\_AUTO\\_COMMIT | У CUBRID PHP режим автоматичної фіксації вимкнено за умовчанням для керування транзакціями. Його можна встановити за допомогою [cubrid\\_set\\_autocommit()](function.cubrid-set-autocommit.md) |\n\nУ наступній таблиці показані рівні ізоляції від 1 до 6. Вона складається зі схеми (рядка) таблиці та рівня ізоляції:\n\n**Рівні ізоляції, які підтримує CUBRID**\n\n| Имя | Опис |\n| --- | --- |\n| SERIALIZABLE (6) | На цьому рівні ізоляції проблем, пов'язаних з паралелізмом (наприклад, брудне читання, неповторне читання, фантомне читання тощо) не виникає. |\n| REPEATABLE READ CLASS з REPEATABLE READ INSTANCES (5) | Інша транзакція T2 не може оновити схему таблиці A, поки транзакція T1 переглядає таблицю A. Транзакція T1 може відчувати фантомне читання для запису R, яка була вставлена ​​іншою транзакцією T2, коли вона повторно отримує певний запис. |\n| REPEATABLE READ CLASS з READ COMMITTED INSTANCES (або CURSOR STABILITY) (4) | Інша транзакція T2 не може оновити схему таблиці A, поки транзакція T1 переглядає таблицю A. Транзакція T1 може відчувати читання R (неповторне читання), яке було оновлено та зафіксовано іншою транзакцією T2, коли вона повторно отримує запис R. |\n| REPEATABLE READ CLASS з READ UNCOMMITTED INSTANCES (3) | Рівень ізоляції за промовчанням. Інша транзакція T2 не може оновити схему таблиці A, доки транзакція T1 переглядає таблицю A. У транзакції T1 може відбутися читання R (брудне читання) для запису, який був оновлений, але не зафіксований іншою транзакцією T2. |\n| READ COMMITTED CLASS з READ COMMITTED INSTANCES (2) | Транзакція T1 може випробовувати читання A' (неповторюване читання) для таблиці, яка була оновлена ​​та зафіксована іншою транзакцією T2, доки вона переглядає таблицю A кілька разів. Транзакція T1 може відчувати читання R' (неповторюване читання) для запису, яка була оновлена ​​та зафіксована іншою транзакцією T2, доки вона повторно отримує запис R. |\n| READ COMMITTED CLASS з READ UNCOMMITTED INSTANCES (1) | Транзакція T1 може відчувати читання A' (неповторюване читання) для таблиці, яка була оновлена ​​та зафіксована іншою транзакцією T2, в той час як вона багаторазово переглядає таблицю A. Транзакція T1 може відчувати читання R' (брудне читання) для запису, яка була але не зафіксована іншою транзакцією T2. |\n\n### Список параметрів\n\n`conn_identifier`\n\nЗ'єднання CUBRID. Якщо ідентифікатор з'єднання не вказано, передбачається останнє посилання, відкрите [cubrid\\_connect()](function.cubrid-connect.md)\n\n### Значення, що повертаються\n\nАсоціативний масив з параметрами бази даних CUBRID у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.4.0 | В результаті змінився LOCK\\_TIMEOUT на PARAM\\_LOCK\\_TIMEOUT та MAX\\_STRING\\_LENGTH на PARAM\\_MAX\\_STRING\\_LENGTH. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** cubrid\\_get\\_db\\_parameter()\\*\\*\\*\\*\n\n```php\n<?php\nprintf(\"%-30s %s\\n\", \"Версия CUBRID PHP:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33088, \"demodb\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Информация о сервере:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Информация о клиенте:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"Кодировка CUBRID:\", $charset);\n\ncubrid_disconnect($conn);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nВерсия CUBRID PHP:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nИнформация о сервере:             9.1.0.0212\nИнформация о клиенте:             9.1.0\n\nКодировка CUBRID:                iso8859-1\n```\n\n### Дивіться також\n\n-   [cubrid\\_set\\_db\\_parameter()](function.cubrid-set-db-parameter.md) \\- Встановлює параметри бази даних CUBRID\n-   [cubrid\\_get\\_autocommit()](function.cubrid-get-autocommit.md) \\- Повертає налаштування авто-комміту для з'єднання\n","title":"cubrid\\_get\\_db\\_parameter","contentType":2,"navigation":[{"function.cubrid-get-client-info.md":"« cubrid\\_get\\_client\\_info"},{"function.cubrid-get-query-timeout.md":"cubrid\\_get\\_query\\_timeout »"},{"index.md":"PHP Manual"},{"ref.cubrid.md":"Функції CUBRID"}]}},"__N_SSG":true}