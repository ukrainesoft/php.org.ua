{"pageProps":{"page":{"slug":"opcache.preloading.md","content":"# Preloading\n\nПочинаючи з PHP 7.4.0, можна налаштувати передзавантаження скриптів в opcache в момент старту PHP. Будь-які функції, класи, інтерфейси або трейти (але не константи) у цих файлах будуть глобально доступні для всіх запитів без їх явного завантаження. Таке попереднє завантаження дозволяє досягти більшої зручності та продуктивності (бо код завжди доступний) за рахунок використання більшої кількості пам'яті. Також, при внесенні змін у завантажені скрипти, щоб ці зміни стали доступними, доведеться перезавантажити PHP. З цього випливає, що передзавантаження є сенс використовувати тільки у виробничому оточенні, але не в оточенні розробки.\n\nЗверніть увагу, що баланс підвищення продуктивності та споживання пам'яті залежить від програми. «Передзавантаження всього на світі» може бути найпростішою стратегією, але не обов'язково кращою. Також, передзавантаження працюватиме лише у випадку, коли PHP працює в режимі обслуговування запитів без перезавантаження. Таким чином, хоч передзавантаження можна використовувати в режимі CLI з включеним opcache, але в більшості випадків безглуздо. Винятком є ​​використання передзавантаження з [бібліотеками FFI](ffi.examples-complete.md)\n\n> **Зауваження** :\n> \n> Завантаження не підтримується у Windows.\n\nНалаштування передзавантаження складається з двох етапів і вимагає ввімкненого opcache. Для початку, налаштуйте [opcache.preload](opcache.configuration.md#ini.opcache.preload)в php.ini:\n\nopcache.preload=preload.php\n\nФайл preload.php - це обов'язковий файл, який буде запущено один раз під час старту сервера (PHP-FPM, mod\\_php, etc.) і який завантажить код на постійну пам'ять. У серверах, які запускаються від імені root перед перемиканням на непривілейованого користувача системи або якщо PHP запускається від імені root (не рекомендується), значення [opcache.preload\\_user](opcache.configuration.md#ini.opcache.preload-user) може вказувати системного користувача для запуску попереднього завантаження. Запуск попереднього завантаження від імені root за промовчанням заборонено. Встановіть `opcache.preload_user=root`, щоб явно це дозволити.\n\nУ скрипті preload.php будь-який файл, вказаний у виразах [include](function.include.md) [include\\_once](function.include-once.md) [require](function.require.md) [require\\_once](function.require-once.md) або [opcache\\_compile\\_file()](function.opcache-compile-file.md), буде завантажено в постійну пам'ять. У наступному прикладі будуть завантажені всі файли .php в директорії src, якщо вони не містять `Test`в имени.\n\n```php\n<?php\n$directory = new RecursiveDirectoryIterator(__DIR__ . '/src');\n$fullTree = new RecursiveIteratorIterator($directory);\n$phpFiles = new RegexIterator($fullTree, '/.+((?<!Test)+\\.php$)/i', RecursiveRegexIterator::GET_MATCH);\n\nforeach ($phpFiles as $key => $file) {\n    require_once $file[0];\n}\n?>\n```\n\nИ[include](function.include.md) і [opcache\\_compile\\_file()](function.opcache-compile-file.md) будуть працювати, але при цьому будуть трохи по-різному оброблені.\n\n-   Вираз [include](function.include.md)запустить код із файлу, а[opcache\\_compile\\_file()](function.opcache-compile-file.md)ні. Це вплине лише на умовні декларації (функції, оголошені в блоках if).\n-   Через те що[include](function.include.md)запустить код, вкладені[include](function.include.md)також будуть оброблені та передзавантажені.\n-   Функция[opcache\\_compile\\_file()](function.opcache-compile-file.md)може завантажувати файли у будь-якому порядку. Тобто якщо файл a.php визначає клас`A`та b.php визначає клас`B`, який є спадкоємцем`A`, то функция[opcache\\_compile\\_file()](function.opcache-compile-file.md)може завантажити ці два файли у будь-якому порядку. При використанні виразу[include](function.include.md), з іншого боку, файл a.php*повинен бути*завантажений першим.\n-   У будь-якому випадку, якщо якийсь скрипт надалі запросить включення вже завантаженого скрипта, то він буде виконаний, але сутності перетворюватися не будуть. Використання виразу[include\\_once](function.include-once.md)не запобігає повторному увімкненню файлу. Може знадобитися завантажити файл знову, щоб увімкнути певні глобальні константи, оскільки вони не обробляються попереднім завантаженням.\n\nЯкий підхід використовувати залежить від бажаної поведінки. Для коду, який використовує автозавантажувач, підхід із викликом функції [opcache\\_compile\\_file()](function.opcache-compile-file.md) дасть більше гнучкості. З кодом, який завантажуватиметься вручну, варіант з виразом [include](function.include.md) може бути надійнішим.\n","title":"Preloading","contentType":2,"navigation":[{"opcache.resources.md":"« Типи ресурсів"},{"ref.opcache.md":"Функції OPcache »"},{"index.md":"PHP Manual"},{"book.opcache.md":"OPcache"}]}},"__N_SSG":true}