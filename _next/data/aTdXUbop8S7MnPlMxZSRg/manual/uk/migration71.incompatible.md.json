{"pageProps":{"page":{"slug":"migration71.incompatible.md","content":"## Зміни, що ламають зворотну сумісність\n\n### Виклик виключення під час передачі функції недостатньої кількості аргументів\n\nРаніше, якщо функція користувача викликалася з недостатньою кількістю аргументів, видавалося попередження. Тепер замість попередження буде викликатися виняток класу Error. Ця зміна зачіпає лише функції користувача і не впливає на вбудовані. Наприклад:\n\n```php\n<?php\nfunction test($param){}\ntest();\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nFatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d\n```\n\n### Заборона динамічного виклику функцій інтроспекції області видимості\n\nДинамічні виклики певних функцій були заборонені (у вигляді `$func()`или`array_map('extract', ...)`, і т.д.) Ці функції перевіряють або модифікують об'єкти іншої області видимості, чим викликають неоднозначну та невизначену поведінку. Список таких функцій:\n\n-   [assert()](function.assert.md) \\- з рядком як перший аргумент\n-   [compact()](function.compact.md)\n-   [extract()](function.extract.md)\n-   [func\\_get\\_args()](function.func-get-args.md)\n-   [func\\_get\\_arg()](function.func-get-arg.md)\n-   [func\\_num\\_args()](function.func-num-args.md)\n-   [get\\_defined\\_vars()](function.get-defined-vars.md)\n-   [mb\\_parse\\_str()](function.mb-parse-str.md) \\- з одним аргументом\n-   [parse\\_str()](function.parse-str.md) \\- з одним аргументом\n\n```php\n<?php\n(function () {\n    $func = 'func_num_args';\n    $func();\n})();\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nWarning: Cannot call func_num_args() dynamically in %s on line %d\n```\n\n### Некоректні імена класів, інтерфейсів та трейтів\n\nНаступні імена не можна використовувати як класи, інтерфейси або трейти:\n\n-   void\n-   [iterable](language.types.iterable.md)\n\n### Перетворення числових рядків тепер враховує наукову нотацію\n\nЦілочисельні операції та конвертації числових рядків тепер враховують наукову нотацію, включаючи приведення `(int)`и следующие функции:[intval()](function.intval.md) (З базою 10), [settype()](function.settype.md) [decbin()](function.decbin.md) [decoct()](function.decoct.md) і [dechex()](function.dechex.md)\n\n### Исправление алгоритма[mt\\_rand()](function.mt-rand.md)\n\n[mt\\_rand()](function.mt-rand.md) тепер за умовчанням використовує зафіксовану версію алгоритму \"Вихор Мерсена\". Якщо ви покладалися на детермінований висновок [mt\\_srand()](function.mt-srand.md), можна використовувати константу **`MT_RAND_PHP`** як другий, необов'язковий, параметр [mt\\_srand()](function.mt-srand.md) задля збереження старої (неправильної) реалізації.\n\n### [rand()](function.rand.md)псевдоним для[mt\\_rand()](function.mt-rand.md) і [srand()](function.srand.md)псевдоним для[mt\\_srand()](function.mt-srand.md)\n\n[rand()](function.rand.md) і [srand()](function.srand.md) тепер є просто синонімами для [mt\\_rand()](function.mt-rand.md) і [mt\\_srand()](function.mt-srand.md). Це означає, що виведення наступних функцій змінилося: [rand()](function.rand.md) [shuffle()](function.shuffle.md) [str\\_shuffle()](function.str-shuffle.md) і [array\\_rand()](function.array-rand.md)\n\n### Заборона використовувати символ видалення з таблиці ASCII в ідентифікаторах\n\nСимвол видалення ASCII (`0x7F`) більше не можна використовувати в ідентифікаторах, не обгорнутих у лапки.\n\n### Значение`error_log`изменено на`syslog`\n\nЕсли ini-параметр`error_log`установлен как`syslog`, то рівні помилок PHP проектуються на рівні помилок \"syslog\". Це дозволяє більш тонко логувати події, а не як раніше, коли вони записувалися з рівнем \"notice\".\n\n### Деструктори не викликаються на незавершених об'єктах\n\nТепер деструктори ніколи не викликаються, якщо було викликано виключення у конструкторі об'єкта. Раніше ця поведінка залежала від того, чи було посилання на об'єкт поза конструктором (наприклад, у трасуванні виключення).\n\n### [call\\_user\\_func()](function.call-user-func.md) обробляє посилання на аргументи\n\nТепер [call\\_user\\_func()](function.call-user-func.md) завжди викликає попередження, якщо викликається функція, що очікує посилання як параметри. Раніше це залежало від того, чи виклик був цілком певним.\n\nКрім того, [call\\_user\\_func()](function.call-user-func.md) і [call\\_user\\_func\\_array()](function.call-user-func-array.md) більше не припиняють виконання функції у разі. Попередження \"expected reference\" буде викликано, але функція продовжить виконання.\n\n### Оператор порожнього індексу більше не застосовується до рядків\n\nЗастосування оператора порожнього індексу до рядка (`$str[] = $x`) викликає фатальну помилку замість тихого перетворення змінної до масиву.\n\n### Присвоєння через механізм доступу до елемента рядка за індексом стосовно порожнього рядка\n\nМодифікація символу в порожньому рядку тепер працює так само, як і для не порожній. Тобто. запис по неіснуючому зміщенню призведе до перетворення не цілого чисельного зсуву до цілого числа, доповнення рядка до потрібної довжини символами пропуску і використання тільки першого символу з рядка, що присвоюється. Раніше в такій ситуації порожній рядок розглядався як порожній масив.\n\n```php\n<?php\n$a = '';\n$a[10] = 'foo';\nvar_dump($a);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 7.0:\n\n```\narray(1) {\n  [10]=>\n  string(3) \"foo\"\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7.1:\n\n```\nstring(11) \"          f\"\n```\n\n### Віддалені ini-директиви\n\nНаступні ini-директиви були видалені:\n\n-   `session.entropy_file`\n-   `session.entropy_length`\n-   `session.hash_function`\n-   `session.hash_bits_per_character`\n\n### Порядок масиву, коли елементи створені автоматично через присвоєння посилання, було змінено\n\nПорядок розташування елементів масиву, створюваних присвоєнням за посиланням не створених на момент присвоєння елементів, було змінено. Наприклад:\n\n```php\n<?php\n$array = [];\n$array[\"a\"] =& $array[\"b\"];\n$array[\"b\"] = 1;\nvar_dump($array);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 7.0:\n\n```\narray(2) {\n  [\"a\"]=>\n  &int(1)\n  [\"b\"]=>\n  &int(1)\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7.1:\n\n```\narray(2) {\n  [\"b\"]=>\n  &int(1)\n  [\"a\"]=>\n  &int(1)\n}\n```\n\n### Порядок сортування еквівалентних елементів\n\nВнутрішній алгоритм сортування був покращений, що може призвести до відмінності у порядку розташування еквівалентних елементів після сортування порівняно з попередніми версіями PHP.\n\n> **Зауваження** :\n> \n> Не покладайтеся на порядок розташування еквівалентних елементів, оскільки він може змінитися будь-якої миті.\n\n### Повідомлення для помилок E\\_RECOVERABLE\n\nПовідомлення для помилок E\\_RECOVERABLE змінено з \"Catchable fatal error\" на \"Recoverable fatal error\".\n\n### Параметр $options функції unserialize()\n\nТепер елемент `allowed_classes`параметра $options функции[unserialize()](function.unserialize.md) строго типізований, тобто якщо передати значення з типом, відмінним від array та bool, то unserialize() поверне **`false`** та викличе помилку рівня **`E_WARNING`**\n\n### Конструктор DateTime використовує мікросекунди.\n\nТепер [DateTime](class.datetime.md) і [DateTimeImmutable](class.datetimeimmutable.md) використовують мікросекунди при створенні з поточним часом, або у явному вигляді, або з рядком відносного часу (наприклад, `\"first day of next month\"`). Це означає, що порівняння двох поспіль створених екземплярів класу швидше повертатиме **`false`** ніж **`true`** :\n\n```php\n<?php\nnew DateTime() == new DateTime();\n?>\n```\n\n### Виклик винятків [Error](class.error.md) замість фатальних помилок\n\nДля модуля Date при некоректних даних серіалізації класів [DateTime](class.datetime.md) або [DatePeriod](class.dateperiod.md), або помилки ініціалізації часового поясу із серіалізованих даних, викидатиметься виняток [Error](class.error.md)из методов\\*\\*\\_\\_wakeup()** або **\\_\\_set\\_state()\\*\\*замість виклику фатальної помилки.\n\nУ модулі DBA функції маніпулювання даними (такі як [dba\\_insert()](function.dba-insert.md)) тепер викидатимуть виняток [Error](class.error.md) замість виклику фатальної помилки, що відловлюється, якщо ключ не містить рівно двох елементів.\n\nУ модулі DOM некоректна перевірка контексту схеми чи RelaxNG тепер викидатимуть виняток [Error](class.error.md) замість виклику фатальної помилки. Аналогічно, спроби зареєструвати клас вузла, який не розширює правильний базовий клас, спроби прочитати некоректну властивість або перезаписати властивість доступну тільки для читання викидатимуть виняток [Error](class.error.md)\n\nУ модулі IMAP адреса email довша 16385 байт тепер викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nМодуль Intl у разі виникнення помилки виклику батьківського конструктора у класі, що успадковує [Collator](class.collator.md) до виклику батьківських методів тепер викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки. Крім того, клонування об'єкта [Transliterator](class.transliterator.md) тепер викидатиме виняток [Error](class.error.md) у разі виникнення помилки клонування внутрішнього transliterator замість виклику фатальної помилки.\n\nМодуль LDAP при вказівці невідомого типу модифікації в **ldap\\_batch\\_modify()** тепер викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nВ модуле mbstring функции[mb\\_ereg()](function.mb-ereg.md) і [mb\\_eregi()](function.mb-eregi.md) тепер викидатимуть виняток [ParseError](class.parseerror.md) у разі некоректного регулярного вираження або у разі використання опції 'e'.\n\nУ модулі Mcrypt [mcrypt\\_encrypt()](function.mcrypt-encrypt.md) і [mcrypt\\_decrypt()](function.mcrypt-decrypt.md) тепер викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки, якщо mcrypt не ініціалізовано.\n\nУ модулі mysqli спроби прочитати некоректну властивість або перезаписати властивість доступну тільки для читання будуть викидати виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nУ модулі Reflection невдале вилучення відображеного об'єкта або властивості об'єкта викидатимуть виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nУ модулі сесій користувальницькі обробники сесії, які не повертають рядок для ідентифікатора сесії, викидатимуть виняток [Error](class.error.md) замість виклику фатальної помилки, коли буде викликано функцію для генерації ідентифікатора.\n\nУ модулі SimpleXML спроба створення безіменного чи дублюючого атрибуту викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nУ модулі SPL спроба клонувати об'єкт **SplDirectory** викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки. Аналогічно, виклик [ArrayIterator::append()](arrayiterator.append.md) коли ітерація об'єкта закінчена викидатиме виняток [Error](class.error.md)\n\nФункция[assert()](function.assert.md), коли їй переданий рядковий аргумент першим параметром, тепер викидатиме виняток [ParseError](class.parseerror.md) замість виклику фатальної помилки, що відловлюється, якщо PHP-код некоректний. Аналогічно, виклик [forward\\_static\\_call()](function.forward-static-call.md) за межами простору класу викидатиме виняток [Error](class.error.md)\n\nВ модуле Tidy ручное создание[tidyNode](class.tidynode.md) викидатиме виняток [Error](class.error.md)\n\nУ модулі WDDX циклічні посилання серіалізації викидатимуть виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nУ модулі XML-RPC циклічні посилання серіалізації будуть викидати виняток [Error](class.error.md) замість виклику фатальної помилки.\n\nВ модуле Zip метод[ZipArchive::addGlob()](ziparchive.addglob.md) викидатиме виняток [Error](class.error.md) замість виклику фатальної помилки, якщо відсутня підтримка glob.\n\n### Лексично пов'язані змінні не можуть перевикористовувати імена\n\nЗмінні, прив'язані до [замиканню](functions.anonymous.md) через конструкцію `use`, не можуть використовувати ті ж імена, що і будь-які [superglobals](language.variables.predefined.md), $this або параметри. Наприклад, всі наведені функції викликають фатальну помилку:\n\n```php\n<?php\n$f = function () use ($_SERVER) {};\n$f = function () use ($this) {};\n$f = function ($param) use ($param) {};\n```\n\n### Змінено тип параметра long2ip()\n\nТепер [long2ip()](function.long2ip.md)ожидает параметр типа int а не string.\n\n### Кодування та декодування JSON\n\nINI-настройка`serialize_precision`определяет точность сериализации при кодировании значений типа float.\n\nТепер декодування порожнього ключа призводить до появи властивості з пустим ім'ям, раніше ім'я властивості призводилося до значення `_empty_`\n\n```php\n<?php\nvar_dump(json_decode(json_encode(['' => 1])));\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(stdClass)#1 (1) {\n  [\"\"]=>\n  int(1)\n}\n```\n\nПри передаче флага\\*\\*`JSON_UNESCAPED_UNICODE`\\*\\* у функцію [json\\_encode()](function.json-encode.md) послідовності U+2028 та U+2029 будуть екрановані.\n\n### Изменение в семантике параметров[mb\\_ereg()](function.mb-ereg.md) і [mb\\_eregi()](function.mb-eregi.md)\n\nТретий параметр функций[mb\\_ereg()](function.mb-ereg.md) і [mb\\_eregi()](function.mb-eregi.md) `regs`) тепер встановлюється рівним порожньому масиву, якщо не було знайдено збігів. Раніше параметр залишався незмінним.\n\n### Видалено підтримку потоку sslv2\n\nПідтримка потоку sslv2 у OpenSSL видалена.\n\n### Заборонено \"return;\" для типізованих повернень вже під час компіляції\n\nОператори повернення без аргументів у функціях, які оголошують тип значення, що повертається, тепер викликають **`E_COMPILE_ERROR`** (якщо тип повернення не оголошено як void), навіть якщо оператора повернення ніколи не буде досягнуто.\n","title":"Зміни, що ламають зворотну сумісність","contentType":2,"navigation":[{"migration71.constants.md":"« Нові глобальні константи"},{"migration71.deprecated.md":"Функціонал, оголошений застарілим у PHP 7.1.x"},{"index.md":"PHP Manual"},{"migration71.md":"Міграція з PHP 7.0.x на PHP 7.1.x"}]}},"__N_SSG":true}