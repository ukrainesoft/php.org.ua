{"pageProps":{"page":{"slug":"quickhashstringinthash.delete.md","content":"# QuickHashStringIntHash::delete\n\n(No version information available, might only be in Git)\n\nQuickHashStringIntHash::delete — Метод видаляє запис із хешу\n\n### Опис\n\n```methodsynopsis\npublic QuickHashStringIntHash::delete(string $key): bool\n```\n\nМетод видаляє запис з хешу і повертає, чи цей запис видалено чи ні. Відповідні структури пам'яті буде звільнено не відразу, а при звільненні самого хеша.\n\nЕлементи не можна видалити, якщо хеш використовується в ітераторі. Метод не викине виняток, а просто поверне **`false`** як це сталося б за будь-якої іншої помилки видалення.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, який потрібно видалити.\n\n### Значення, що повертаються\n\nМетод возвращает\\*\\*`true`\\*\\*, якщо запис було видалено та **`false`**, якщо запис не видалено.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashStringIntHash::delete()\\*\\*\\*\\*\n\n```php\n<?php\n$hash = new QuickHashStringIntHash( 1024 );\nvar_dump( $hash->exists( 'four' ) );\nvar_dump( $hash->add( 'four', 5 ) );\nvar_dump( $hash->get( 'four' ) );\nvar_dump( $hash->delete( 'four' ) );\nvar_dump( $hash->exists( 'four' ) );\nvar_dump( $hash->get( 'four' ) );\nvar_dump( $hash->delete( 'four' ) );\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nbool(false)\nbool(true)\nint(5)\nbool(true)\nbool(false)\nbool(false)\nbool(false)\n```\n","title":"QuickHashStringIntHash::delete","contentType":2,"navigation":[{"quickhashstringinthash.construct.md":"« QuickHashStringIntHash::\\_\\_construct"},{"quickhashstringinthash.exists.md":"QuickHashStringIntHash::exists »"},{"index.md":"PHP Manual"},{"class.quickhashstringinthash.md":"QuickHashStringIntHash"}]}},"__N_SSG":true}