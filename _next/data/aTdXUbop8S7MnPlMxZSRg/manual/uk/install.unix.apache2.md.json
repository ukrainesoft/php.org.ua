{"pageProps":{"page":{"slug":"install.unix.apache2.md","content":"## Apache 2.x на Unix системах\n\nЦей розділ описує інсталяцію PHP з Apache 2.x на Unix системах.\n\n**Увага**\n\nМи не рекомендуємо використовувати потоковий MPM у промисловому середовищі разом з Apache 2. Замість цього використовуйте prefork MPM, що використовується за умовчанням в Apache 2.0 та 2.2. Детальну інформацію з цього питання ви можете знайти у відповідному розділі FAQ [Apache2 та потоковий MPM](faq.installation.md#faq.installation.apache2)\n\nНайавторитетнішим джерелом інформації з Apache 2.x є [» документація Apache](http://httpd.apache.org/docs/current/). Більш детальну інформацію про налаштування під час встановлення можна знайти там.\n\nОстання версія Apache Http Server може бути отримана на [» сторінці завантаження Apache](http://httpd.apache.org/), а адреса відповідної версії PHP була вказана вище. Цей короткий посібник визначає лише базову установку Apache 2.x і PHP. Для отримання більш детальної інформації прочитайте [» документацію Apache](http://httpd.apache.org/docs/current/). . В інструкції нижче опущені номери версій - замініть 'NN' на номер, що відповідає завантаженій вами версії Apache.\n\nНа даний момент є дві версії Apache 2.x – 2.4 та 2.2. Хоча для вибору кожної з них існують окремі докази, 2.4 є найсвіжішою та рекомендованою версією, якщо вас влаштовує такий вибір. Проте, ці інструкції будуть працювати як для 2.4, так і для 2.2. Зверніть увагу, що Apache httpd 2.2 офіційно більше не підтримується, тому подальша розробка не буде продовжуватися, як і прийматися нові патчі.\n\n1.  Завантажте Apache HTTP server як було зазначено вище та розпакуйте його:\n    \n    ```\n    tar -xzf httpd-2.x.NN.tar.gz\n    ```\n    \n2.  Аналогічно, скачайте та розпакуйте вихідні коди PHP:\n    \n    ```\n    tar -xzf php-NN.tar.gz\n    ```\n    \n3.  Скомпілюйте та встановіть Apache. Докладнішу інформацію про збірку Apache дивіться у документації.\n    \n    ```\n    cd httpd-2_x_NN\n    ./configure --enable-so\n    make\n    make install\n    ```\n    \n4.  Тепер ваш Apache 2.x.NN доступний як /usr/local/apache2, налаштований з підтримкою модулів, що підвантажуються, і стандартним мульти-процесним модулем (MPM) prefork. Щоб протестувати правильність установки, використовуйте стандартну процедуру запуску Apache, таку як:\n    \n    ```\n    /usr/local/apache2/bin/apachectl start\n    ```\n    \n    Потім зупиніть сервер, щоб налаштувати та встановити PHP:\n    \n    ```\n    /usr/local/apache2/bin/apachectl stop\n    ```\n    \n5.  Тепер ми налаштуємо та зберемо PHP. Тут ви можете налаштувати інсталяцію PHP за допомогою різних опцій, які вказують, наприклад, які модулі потрібно увімкнути. Перегляньте виведення команди ./configure --help для отримання повного списку параметрів конфігурації. У нашому прикладі ми налаштуємо PHP дуже просто - з підтримкою Apache та MySQL.\n    \n    Якщо ви збирали Apache з вихідних, як було описано вище, то використовуйте шлях до apxs як зазначено в наступному прикладі, інакше коригуйте цей шлях відповідним вашій установці чином. Врахуйте також, що деякі дистрибутиви apxs можуть мати ім'я apxs2.\n    \n    ```\n    cd ../php-NN\n    ./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-pdo-mysql\n    make\n    make install\n    ```\n    \n    Якщо ви вирішите змінити параметри конфігурації після встановлення, вам потрібно буде повторити лише три останні кроки (configure, make, make install). Вам потрібно буде лише перезапустити Apache, щоб нові модулі підвантажилися та почали працювати. Перекомпіляція Apache для цього не потрібна.\n    \n    Зверніть увагу, що якщо не вказано зворотне, то 'make install' встановить так само PEAR, різні інструменти PHP - такі як phpize, версію PHP для командного рядка (PHP CLI) і т.д.\n    \n6.  Налаштування вашого php.ini\n    \n    ```\n    cp php.ini-development /usr/local/lib/php.ini\n    ```\n    \n    Ймовірно, ви захочете змінити деякі налаштування у php.ini. Якщо ви хочете тримати файл php.ini в іншому місці, використовуйте параметр --with-config-file-path=/some/path у кроці 5.\n    \n    Якщо ж ви використовуєте php.ini-production, прочитайте його, щоб знати, які зміни в поведінці PHP це спричинить.\n    \n7.  Відредагуйте httpd.conf, щоб Apache завантажував модуль PHP. Шлях у правій частині вказівки LoadModule повинен вказувати на модуль PHP. Команда make install може додати цю інструкцію автоматично, але цього може і не статися, тому перевірте, щоб переконатися.\n    \n    Для PHP 8:\n    \n    LoadModule php\\_module modules/libphp.so\n    \n    Для PHP 7:\n    \n    LoadModule php7\\_module modules/libphp7.so\n    \n8.  Тепер слід налаштувати Apache, щоб він передавав файли з деякими розширеннями на обробку PHP модуля. У прикладі зробимо це для .php файлів. Замість звичайного використання директиви Apache AddType, ми хочемо уникнути інтерпретації як PHP потенційно небезпечних завантажень та файлів на зразок exploit.php.jpg. За допомогою цього прикладу можна вказати для інтерпретації PHP будь-які розширення, просто додавши їх до кінця списку. Продемонструємо це на розширенні .php.\n    \n    <FilesMatch \\\\.php$> SetHandler application/x-httpd-php\n    \n    Або, якщо ми хочемо додати розширення .php, .php2, .php3, .php4, .php5, .php6 та .phtml, це можна записати так:\n    \n    <FilesMatch \"\\\\.ph(p\\[2-6\\]?|tml)$\"> SetHandler application/x-httpd-php\n    \n    Щоб PHP відображав вміст .phps з підсвічуванням синтаксису, потрібно внести відповідну директиву\n    \n    <FilesMatch \"\\\\.phps$\"> SetHandler application/x-httpd-php-source\n    \n    Можна використовувати mod\\_rewrite для відображення будь-якого .php файлу з підсвічуванням синтаксису, без потреби його перейменування в .phps:\n    \n    RewriteEngine On RewriteRule (.\\*\\\\.php)s$ $1\\[H=application/x-httpd-php-source\\]\n    \n    Цей фільтр, який відображає вихідний код, повинен бути вимкнений у промисловому використанні, оскільки він може відкрити конфіденційну або іншу важливу інформацію, включену до вихідного коду.\n    \n9.  Використовуйте стандартну процедуру запуску Apache, наприклад:\n    \n    ```\n    /usr/local/apache2/bin/apachectl start\n    ```\n    \n    АБО\n    \n    ```\n    service httpd restart\n    ```\n    \n\nЯкщо ви дотримувалися інструкцій вище, то на даному етапі повинні мати запущений веб-сервер Apache2 з підтримкою PHP як модуля `SAPI`. Звичайно, для PHP і Apache є набагато більше параметрів конфігурації. Використовуйте **./configure --help** у відповідній папці з вихідними кодами, щоб отримати повний список параметрів конфігурації.\n\nЯкщо ви бажаєте зібрати багатопотокову версію Apache, то при складанні вам слід вказати модуль MPM worker замість стандартного модуля MPM prefork. Щоб зробити це, потрібно додати наступний аргумент до ./configure на кроці 3:\n\n```\n--with-mpm=worker\n```\n\nНе слід бездумно використовувати це налаштування, використовуйте його лише якщо ви розумієте всі наслідки цього рішення. Документація Apache з [» модулям MPM](http://httpd.apache.org/docs/current/mpm.md) значно глибше розкриває цю тему.\n\n> **Зауваження** :\n> \n> Якщо ви хочете використовувати залежний контент (content negotiation), прочитайте [Apache MultiViews FAQ](faq.installation.md#faq.installation.apache.multiviews)\n\n> **Зауваження** :\n> \n> Для складання багатопоточної версії Apache, ваша система має підтримувати потоки. Це також передбачає збірку PHP з підтримкою Zend Thread Safety (ZTS). І, як наслідок, не всі PHP модулі зможуть працювати. Рекомендується встановлення Apache з модулем MPM за промовчанням - prefork.\n","title":"Apache 2.x на Unix системах","contentType":2,"navigation":[{"install.unix.md":"« Установка на Unix-системи"},{"install.unix.nginx.md":"Установка Nginx 1.4.x на систему Unix »"},{"index.md":"PHP Manual"},{"install.unix.md":"Встановлення на Unix-системи"}]}},"__N_SSG":true}