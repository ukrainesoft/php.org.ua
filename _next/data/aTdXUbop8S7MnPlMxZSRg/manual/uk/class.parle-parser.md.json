{"pageProps":{"page":{"slug":"class.parle-parser.md","content":"# Клас Parle\\\\Parser\n\n(PECL parle >= 0.5.1)\n\n## Вступ\n\nКлас парсеру. Правила можна визначати на льоту. Після завершення потрібен екземпляр [Parle\\\\Lexer](class.parle-lexer.md)для доставки потока токенов.\n\n## Огляд класів\n\n```classsynopsis\n\n\n\n    \n     \n      class Parle\\Parser\n     \n     {\n\n    /* Константы */\n    \n     const\n     int\n      ACTION_ERROR = 0;\n\n    const\n     int\n      ACTION_SHIFT = 1;\n\n    const\n     int\n      ACTION_REDUCE = 2;\n\n    const\n     int\n      ACTION_GOTO = 3;\n\n    const\n     int\n      ACTION_ACCEPT = 4;\n\n    const\n     int\n      ERROR_SYNTAX = 0;\n\n    const\n     int\n      ERROR_NON_ASSOCIATIVE = 1;\n\n    const\n     int\n      ERROR_UNKNOWN_TOKEN = 2;\n\n\n    /* Свойства */\n    public\n     int\n      $action = 0;\n\n    public\n     int\n      $reduceId = 0;\n\n\n    /* Методы */\n    \n   public advance(): void\npublic build(): void\npublic consume(string $data, Parle\\Lexer $lexer): void\npublic dump(): void\npublic errorInfo(): Parle\\ErrorInfo\npublic left(string $tok): void\npublic nonassoc(string $tok): void\npublic precedence(string $tok): void\npublic push(string $name, string $rule): int\npublic reset(int $tokenId = ?): void\npublic right(string $tok): void\npublic sigil(int $idx): string\npublic sigilCount(): int\npublic sigilName(int $idx): string\npublic token(string $tok): void\npublic tokenId(string $tok): int\npublic trace(): string\npublic validate(string $data, Parle\\Lexer $lexer): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`Parle\\Parser::ACTION_ERROR`**\n\n**`Parle\\Parser::ACTION_SHIFT`**\n\n**`Parle\\Parser::ACTION_REDUCE`**\n\n**`Parle\\Parser::ACTION_GOTO`**\n\n**`Parle\\Parser::ACTION_ACCEPT`**\n\n**`Parle\\Parser::ERROR_SYNTAX`**\n\n**`Parle\\Parser::ERROR_NON_ASSOCIATIVE`**\n\n**`Parle\\Parser::ERROR_UNKNOWN_TOKEN`**\n\n## Властивості\n\naction\n\nПоточна дія синтаксичного аналізатора, яка відповідає одній з констант класу дії, тільки для читання.\n\nreduceId\n\nІдентифікатор правила граматики, щойно оброблений у дії скорочення. Значення відповідає токену чи виробничому ідентифікатору. Лише для читання.\n\n## Зміст\n\n-   [Parle\\\\Parser::advance](parle-parser.advance.md) \\- Обробляє наступне правило парсера\n-   [Parle\\\\Parser::build](parle-parser.build.md) \\- Завершує граматичні правила\n-   [Parle\\\\Parser::consume](parle-parser.consume.md)— Використовує дані для обробки\n-   [Parle\\\\Parser::dump](parle-parser.dump.md) \\- Виводить граматику\n-   [Parle\\\\Parser::errorInfo](parle-parser.errorinfo.md)— Отримує інформацію про помилку\n-   [Parle\\\\Parser::left](parle-parser.left.md) \\- Оголошує токен з лівою асоціативністю\n-   [Parle\\\\Parser::nonassoc](parle-parser.nonassoc.md) \\- Оголошує токен без асоціативності\n-   [Parle\\\\Parser::precedence](parle-parser.precedence.md)— Оголошує правило пріоритету\n-   [Parle\\\\Parser::push](parle-parser.push.md)— Додає граматичне правило\n-   [Parle\\\\Parser::reset](parle-parser.reset.md)— скидає стан парсера\n-   [Parle\\\\Parser::right](parle-parser.right.md)— Оголошує токен із правою асоціативністю\n-   [Parle\\\\Parser::sigil](parle-parser.sigil.md)— Витягує частину збігу за правилом\n-   [Parle\\\\Parser::sigilCount](parle-parser.sigilcount.md)— Отримує кількість елементів у відповідному правилі\n-   [Parle\\\\Parser::sigilName](parle-parser.sigilname.md)— Отримує ім'я правила чи токена\n-   [Parle\\\\Parser::token](parle-parser.token.md) \\- Оголошує токен\n-   [Parle\\\\Parser::tokenId](parle-parser.tokenid.md)— Отримує ідентифікатор токена\n-   [Parle\\\\Parser::trace](parle-parser.trace.md)— Слідкує за роботою парсера\n-   [Parle\\\\Parser::validate](parle-parser.validate.md) \\- Перевіряє вхідні дані\n","title":"Клас Parle\\\\Parser","contentType":2,"navigation":[{"parle-rlexer.reset.md":"« Parle\\\\RLexer::reset"},{"parle-parser.advance.md":"Parle\\\\Parser::advance »"},{"index.md":"PHP Manual"},{"book.parle.md":"Parle"}]}},"__N_SSG":true}