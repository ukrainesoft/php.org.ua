{"pageProps":{"page":{"slug":"class.ds-priorityqueue.md","content":"# Клас PriorityQueue\n\n(PECL ds >= 1.0.0)\n\n## Вступ\n\nЧерга з пріоритетом дуже схожа на звичайну чергу. Значення додаються в чергу із заданим пріоритетом, і значення з вищим пріоритетом завжди будуть ближче до початку.\n\nРеалізовано з використанням максимальної купи.\n\n> **Зауваження** :\n> \n> Порядок FIFO зберігається у значень із однаковим пріоритетом.\n\n> **Зауваження** :\n> \n> Ітерація через чергу відбувається із видаленням взятого елемента. Еквівалентно використанню оператора pop, доки черга не стане порожньою.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      class Ds\\PriorityQueue\n     \n\n     implements \n       Ds\\Collection {\n    \n    /* Константы */\n    \n     const\n     int\n      MIN_CAPACITY = 8;\n\n\n    /* Методы */\n    \n   public allocate(int $capacity): void\npublic capacity(): int\npublic clear(): void\npublic copy(): Ds\\PriorityQueue\npublic isEmpty(): bool\npublic peek(): mixed\npublic pop(): mixed\npublic push(mixed $value, int $priority): void\npublic toArray(): array\n\n   }\n```\n\n## Обумовлені константи\n\n**`Ds\\PriorityQueue::MIN_CAPACITY`**\n\n## Зміст\n\n-   [Ds\\\\PriorityQueue::allocate](ds-priorityqueue.allocate.md)— Виділяє пам'ять під зазначену місткість\n-   [Ds\\\\PriorityQueue::capacity](ds-priorityqueue.capacity.md)— Повертає поточну місткість\n-   [Ds\\\\PriorityQueue::clear](ds-priorityqueue.clear.md) \\- Видаляє всі значення\n-   [Ds\\\\PriorityQueue::\\_\\_construct](ds-priorityqueue.construct.md) \\- Створює новий екземпляр\n-   [Ds\\\\PriorityQueue::copy](ds-priorityqueue.copy.md)— Повертає поверхневу копію черги\n-   [Ds\\\\PriorityQueue::count](ds-priorityqueue.count.md)— Повертає кількість елементів у черзі\n-   [Ds\\\\PriorityQueue::isEmpty](ds-priorityqueue.isempty.md)— Перевіряє, чи колекція порожня.\n-   [Ds\\\\PriorityQueue::jsonSerialize](ds-priorityqueue.jsonserialize.md)— Повертає колекцію в JSON-виставу\n-   [Ds\\\\PriorityQueue::peek](ds-priorityqueue.peek.md)— Повертає значення з початку черги\n-   [Ds\\\\PriorityQueue::pop](ds-priorityqueue.pop.md)— Видаляє та повертає значення з найвищим пріоритетом\n-   [Ds\\\\PriorityQueue::push](ds-priorityqueue.push.md)— Додає значення у чергу\n-   [Ds\\\\PriorityQueue::toArray](ds-priorityqueue.toarray.md) \\- Перетворює чергу на масив (array)\n","title":"Клас PriorityQueue","contentType":2,"navigation":[{"ds-queue.toarray.md":"« Ds\\\\Queue::toArray"},{"ds-priorityqueue.allocate.md":"Ds\\\\PriorityQueue::allocate »"},{"index.md":"PHP Manual"},{"book.ds.md":"Структури даних"}]}},"__N_SSG":true}