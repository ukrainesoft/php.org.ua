{"pageProps":{"page":{"slug":"class.phardata.md","content":"# Клас PharData\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 2.0.0)\n\n## Вступ\n\nКлас PharData надає високорівневий інтерфейс доступу і створення tar-і zip-архівів, що не виконуються. Оскільки архіви цих типів не містять заглушку і не можуть бути виконані модулем Phar, є можливість створювати та обробляти звичайні zip- та tar-файли, використовуючи клас PharData, навіть якщо параметр `phar.readonly`в php.ini равен\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class PharData\n    \n\n    \n     extends\n      RecursiveDirectoryIterator\n    \n\n    \n     implements\n      Countable,\n\n     ArrayAccess {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      FilesystemIterator::CURRENT_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_PATHNAME;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_FILEINFO;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_SELF;\npublic\n     const\n     int\n      FilesystemIterator::KEY_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::KEY_AS_PATHNAME;\npublic\n     const\n     int\n      FilesystemIterator::FOLLOW_SYMLINKS;\npublic\n     const\n     int\n      FilesystemIterator::KEY_AS_FILENAME;\npublic\n     const\n     int\n      FilesystemIterator::NEW_CURRENT_AND_KEY;\npublic\n     const\n     int\n      FilesystemIterator::OTHER_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::SKIP_DOTS;\npublic\n     const\n     int\n      FilesystemIterator::UNIX_PATHS;\n\n\n    /* Методы */\n    \n   public __construct(    string $filename,    int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS,    ?string $alias = null,    int $format = 0)\n\n    public addEmptyDir(string $directory): void\npublic addFile(string $filename, ?string $localName = null): void\npublic addFromString(string $localName, string $contents): void\npublic buildFromDirectory(string $directory, string $pattern = \"\"): array\npublic buildFromIterator(Traversable $iterator, ?string $baseDirectory = null): array\npublic compress(int $compression, ?string $extension = null): ?PharData\npublic compressFiles(int $compression): void\npublic convertToData(?int $format = null, ?int $compression = null, ?string $extension = null): ?PharData\npublic convertToExecutable(?int $format = null, ?int $compression = null, ?string $extension = null): ?Phar\npublic copy(string $from, string $to): bool\npublic decompress(?string $extension = null): ?PharData\npublic decompressFiles(): bool\npublic delMetadata(): bool\npublic delete(string $localName): bool\npublic extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool\npublic isWritable(): bool\npublic offsetSet(string $localName, resource|string $value): void\npublic offsetUnset(string $localName): void\npublic setAlias(string $alias): bool\npublic setDefaultStub(?string $index = null, ?string $webIndex = null): bool\npublic setMetadata(mixed $metadata): void\npublic setSignatureAlgorithm(int $algo, ?string $privateKey = null): void\npublic setStub(string $stub, int $len = -1): bool\n\n    public __destruct()\n\n\n    /* Наследуемые методы */\n    public RecursiveDirectoryIterator::getChildren(): RecursiveDirectoryIterator\npublic RecursiveDirectoryIterator::getSubPath(): string\npublic RecursiveDirectoryIterator::getSubPathname(): string\npublic RecursiveDirectoryIterator::hasChildren(bool $allowLinks = false): bool\npublic RecursiveDirectoryIterator::key(): string\npublic RecursiveDirectoryIterator::next(): void\npublic RecursiveDirectoryIterator::rewind(): void\n\n    public FilesystemIterator::current(): string|SplFileInfo|FilesystemIterator\npublic FilesystemIterator::getFlags(): int\npublic FilesystemIterator::key(): string\npublic FilesystemIterator::next(): void\npublic FilesystemIterator::rewind(): void\npublic FilesystemIterator::setFlags(int $flags): void\n\n    public DirectoryIterator::current(): mixed\npublic DirectoryIterator::getBasename(string $suffix = \"\"): string\npublic DirectoryIterator::getExtension(): string\npublic DirectoryIterator::getFilename(): string\npublic DirectoryIterator::isDot(): bool\npublic DirectoryIterator::key(): mixed\npublic DirectoryIterator::next(): void\npublic DirectoryIterator::rewind(): void\npublic DirectoryIterator::seek(int $offset): void\npublic DirectoryIterator::__toString(): string\npublic DirectoryIterator::valid(): bool\n\n    public SplFileInfo::getATime(): int|false\npublic SplFileInfo::getBasename(string $suffix = \"\"): string\npublic SplFileInfo::getCTime(): int|false\npublic SplFileInfo::getExtension(): string\npublic SplFileInfo::getFileInfo(?string $class = null): SplFileInfo\npublic SplFileInfo::getFilename(): string\npublic SplFileInfo::getGroup(): int|false\npublic SplFileInfo::getInode(): int|false\npublic SplFileInfo::getLinkTarget(): string|false\npublic SplFileInfo::getMTime(): int|false\npublic SplFileInfo::getOwner(): int|false\npublic SplFileInfo::getPath(): string\npublic SplFileInfo::getPathInfo(?string $class = null): ?SplFileInfo\npublic SplFileInfo::getPathname(): string\npublic SplFileInfo::getPerms(): int|false\npublic SplFileInfo::getRealPath(): string|false\npublic SplFileInfo::getSize(): int|false\npublic SplFileInfo::getType(): string|false\npublic SplFileInfo::isDir(): bool\npublic SplFileInfo::isExecutable(): bool\npublic SplFileInfo::isFile(): bool\npublic SplFileInfo::isLink(): bool\npublic SplFileInfo::isReadable(): bool\npublic SplFileInfo::isWritable(): bool\npublic SplFileInfo::openFile(string $mode = \"r\", bool $useIncludePath = false, ?resource $context = null): SplFileObject\npublic SplFileInfo::setFileClass(string $class = SplFileObject::class): void\npublic SplFileInfo::setInfoClass(string $class = SplFileInfo::class): void\npublic SplFileInfo::__toString(): string\n\n   }\n```\n\n## Зміст\n\n-   [PharData::addEmptyDir](phardata.addemptydir.md)— Додати порожню директорію до tar/zip-архіву\n-   [PharData::addFile](phardata.addfile.md)— Додати існуючі файли до tar/zip-архіву\n-   [PharData::addFromString](phardata.addfromstring.md)— Додає файл із рядка до архіву tar/zip\n-   [PharData::buildFromDirectory](phardata.buildfromdirectory.md)— Створює tar/zip-архів із файлів у директорії\n-   [PharData::buildFromIterator](phardata.buildfromiterator.md)— Створення tar/zip-архіву за допомогою ітератора\n-   [PharData::compress](phardata.compress.md)— Стискає весь архів tar/zip, використовуючи стиск Gzip або Bzip2\n-   [PharData::compressFiles](phardata.compressfiles.md)— Стиснути всі файли у поточному tar/zip-архіві\n-   [PharData::\\_\\_construct](phardata.construct.md) \\- Конструктор об'єкта PharData\n-   [PharData::convertToData](phardata.converttodata.md)— Конвертація phar-архіву в tar/zip-архів, що не запускається.\n-   [PharData::convertToExecutable](phardata.converttoexecutable.md)— Конвертація tar/zip-архіву з даними в phar-архів, що запускається\n-   [PharData::copy](phardata.copy.md)— Скопіювати файл із tar/zip-архіву в новий файл усередині нього ж\n-   [PharData::decompress](phardata.decompress.md) \\- Розпакувати весь Phar-архів\n-   [PharData::decompressFiles](phardata.decompressfiles.md)— Розпакувати всі файли у поточному zip-архіві\n-   [PharData::delMetadata](phardata.delmetadata.md)— Видалити глобальні метадані для zip-архіву\n-   [PharData::delete](phardata.delete.md)— Видалити файл із tar/zip-архіву\n-   [PharData::\\_\\_destruct](phardata.destruct.md)— Знищує об'єкт архіву tar або zip, що не виконується.\n-   [PharData::extractTo](phardata.extractto.md)— Витягти вміст tar/zip-архіву в директорію\n-   [PharData::isWritable](phardata.iswritable.md)— Перевірити, чи можна модифікувати tar/zip-архів\n-   [PharData::offsetSet](phardata.offsetset.md)— Зміна вмісту файлу\n-   [PharData::offsetUnset](phardata.offsetunset.md)— Видалити файл із tar/zip-архіву\n-   [PharData::setAlias](phardata.setalias.md)— Функція заглушка (Phar::setAlias ​​не можна використовувати для PharData)\n-   [PharData::setDefaultStub](phardata.setdefaultstub.md)— Функція заглушка (Phar::setDefaultStub не можна використовувати для PharData)\n-   [PharData::setMetadata](phardata.setmetadata.md)— Встановити метадані phar-архіву\n-   [PharData::setSignatureAlgorithm](phardata.setsignaturealgorithm.md)— Встановити алгоритм підписання phar-архіву та застосування його\n-   [PharData::setStub](phardata.setstub.md)— Функція заглушка (Phar::setStub не можна використовувати для PharData)\n","title":"Клас PharData","contentType":2,"navigation":[{"phar.webphar.md":"« Phar::webPhar"},{"phardata.addemptydir.md":"PharData::addEmptyDir »"},{"index.md":"PHP Manual"},{"book.phar.md":"Phar"}]}},"__N_SSG":true}