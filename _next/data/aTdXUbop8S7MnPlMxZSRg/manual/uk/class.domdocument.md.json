{"pageProps":{"page":{"slug":"class.domdocument.md","content":"# Клас DOMDocument\n\n(PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nПодає весь HTML- або XML-документ; корінь дерева документа.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class DOMDocument\n    \n\n    \n     extends\n      DOMNode\n    \n\n    \n     implements\n      DOMParentNode {\n\n    /* Свойства */\n    \n     public\n     readonly\n     ?DOMDocumentType\n      $doctype;\n\n    public\n     readonly\n     DOMImplementation\n      $implementation;\n\n    public\n     readonly\n     ?DOMElement\n      $documentElement;\n\n    public\n     readonly\n     ?string\n      $actualEncoding;\n\n    public\n     ?string\n      $encoding;\n\n    public\n     readonly\n     ?string\n      $xmlEncoding;\n\n    public\n     bool\n      $standalone;\n\n    public\n     bool\n      $xmlStandalone;\n\n    public\n     ?string\n      $version;\n\n    public\n     ?string\n      $xmlVersion;\n\n    public\n     bool\n      $strictErrorChecking;\n\n    public\n     ?string\n      $documentURI;\n\n    public\n     readonly\n     mixed\n      $config;\n\n    public\n     bool\n      $formatOutput;\n\n    public\n     bool\n      $validateOnParse;\n\n    public\n     bool\n      $resolveExternals;\n\n    public\n     bool\n      $preserveWhiteSpace;\n\n    public\n     bool\n      $recover;\n\n    public\n     bool\n      $substituteEntities;\n\n    public\n     readonly\n     ?DOMElement\n      $firstElementChild;\n\n    public\n     readonly\n     ?DOMElement\n      $lastElementChild;\n\n    public\n     readonly\n     int\n      $childElementCount;\n\n\n    /* Наследуемые свойства */\n    public\n     readonly\n     string\n      $nodeName;\npublic\n     ?string\n      $nodeValue;\npublic\n     readonly\n     int\n      $nodeType;\npublic\n     readonly\n     ?DOMNode\n      $parentNode;\npublic\n     readonly\n     ?DOMElement\n      $parentElement;\npublic\n     readonly\n     DOMNodeList\n      $childNodes;\npublic\n     readonly\n     ?DOMNode\n      $firstChild;\npublic\n     readonly\n     ?DOMNode\n      $lastChild;\npublic\n     readonly\n     ?DOMNode\n      $previousSibling;\npublic\n     readonly\n     ?DOMNode\n      $nextSibling;\npublic\n     readonly\n     ?DOMNamedNodeMap\n      $attributes;\npublic\n     readonly\n     bool\n      $isConnected;\npublic\n     readonly\n     ?DOMDocument\n      $ownerDocument;\npublic\n     readonly\n     ?string\n      $namespaceURI;\npublic\n     string\n      $prefix;\npublic\n     readonly\n     ?string\n      $localName;\npublic\n     readonly\n     ?string\n      $baseURI;\npublic\n     string\n      $textContent;\n\n\n    /* Методы */\n    \n   public __construct(string $version = \"1.0\", string $encoding = \"\")\n\n    public adoptNode(DOMNode $node): DOMNode|false\npublic append(DOMNode|string ...$nodes): void\npublic createAttribute(string $localName): DOMAttr|false\npublic createAttributeNS(?string $namespace, string $qualifiedName): DOMAttr|false\npublic createCDATASection(string $data): DOMCdataSection|false\npublic createComment(string $data): DOMComment\npublic createDocumentFragment(): DOMDocumentFragment\npublic createElement(string $localName, string $value = \"\"): DOMElement|false\npublic createElementNS(?string $namespace, string $qualifiedName, string $value = \"\"): DOMElement|false\npublic createEntityReference(string $name): DOMEntityReference|false\npublic createProcessingInstruction(string $target, string $data = \"\"): DOMProcessingInstruction|false\npublic createTextNode(string $data): DOMText\npublic getElementById(string $elementId): ?DOMElement\npublic getElementsByTagName(string $qualifiedName): DOMNodeList\npublic getElementsByTagNameNS(?string $namespace, string $localName): DOMNodeList\npublic importNode(DOMNode $node, bool $deep = false): DOMNode|false\npublic load(string $filename, int $options = 0): bool\npublic loadHTML(string $source, int $options = 0): bool\npublic loadHTMLFile(string $filename, int $options = 0): bool\npublic loadXML(string $source, int $options = 0): bool\npublic normalizeDocument(): void\npublic prepend(DOMNode|string ...$nodes): void\npublic registerNodeClass(string $baseClass, ?string $extendedClass): bool\npublic relaxNGValidate(string $filename): bool\npublic relaxNGValidateSource(string $source): bool\npublic replaceChildren(DOMNode|string ...$nodes): void\npublic save(string $filename, int $options = 0): int|false\npublic saveHTML(?DOMNode $node = null): string|false\npublic saveHTMLFile(string $filename): int|false\npublic saveXML(?DOMNode $node = null, int $options = 0): string|false\npublic schemaValidate(string $filename, int $flags = 0): bool\npublic schemaValidateSource(string $source, int $flags = 0): bool\npublic validate(): bool\npublic xinclude(int $options = 0): int|false\n\n\n    /* Наследуемые методы */\n    public DOMNode::appendChild(DOMNode $node): DOMNode|false\npublic DOMNode::C14N(    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): string|false\npublic DOMNode::C14NFile(    string $uri,    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): int|false\npublic DOMNode::cloneNode(bool $deep = false): DOMNode|false\npublic DOMNode::contains(DOMNode|DOMNameSpaceNode|null $other): bool\npublic DOMNode::getLineNo(): int\npublic DOMNode::getNodePath(): ?string\npublic DOMNode::getRootNode(array $options = null): DOMNode\npublic DOMNode::hasAttributes(): bool\npublic DOMNode::hasChildNodes(): bool\npublic DOMNode::insertBefore(DOMNode $node, ?DOMNode $child = null): DOMNode|false\npublic DOMNode::isDefaultNamespace(string $namespace): bool\npublic DOMNode::isEqualNode(?DOMNode $otherNode): bool\npublic DOMNode::isSameNode(DOMNode $otherNode): bool\npublic DOMNode::isSupported(string $feature, string $version): bool\npublic DOMNode::lookupNamespaceURI(?string $prefix): ?string\npublic DOMNode::lookupPrefix(string $namespace): ?string\npublic DOMNode::normalize(): void\npublic DOMNode::removeChild(DOMNode $child): DOMNode|false\npublic DOMNode::replaceChild(DOMNode $node, DOMNode $child): DOMNode|false\n\n   }\n```\n\n## Властивості\n\nactualEncoding\n\n*Застаріло*. Кодування документа – доступний лише для читання еквівалент якості encoding.\n\nchildElementCount\n\nКількість дочірніх елементів.\n\nconfig\n\n*Застаріло*. Конфігурація, яка буде використана під час виклику методу [DOMDocument::normalizeDocument()](domdocument.normalizedocument.md)\n\ndoctype\n\nОголошення типу документа, який відповідає цьому документу.\n\ndocumentElement\n\nОб'єкт [DOMElement](class.domelement.md) - Перший елемент документа. Якщо не знайдено, оцінюється як **`null`**. Зручний атрибут, який дає прямий доступ до дочірнього вузла як елемент документа. Значення \\*\\*`null`\\*\\*якщо не існує.\n\ndocumentURI\n\nРасположение документа или\\*\\*`null`\\*\\*якщо воно не визначено.\n\nencoding\n\nКодування документа, як зазначено у оголошенні XML. Цього атрибуту немає в останній специфікації DOM Level 3, але він єдиний спосіб маніпулювання кодуванням XML-документа в цій реалізації.\n\nfirstElementChild\n\nПерший дочірній елемент або **`null`**\n\nformatOutput\n\nФорматує висновок, додаючи відступи та додаткові прогалини. Не працює, якщо документ був завантажений з увімкненою властивістю preservewhitespace.\n\nimplementation\n\nОб'єкт класу [DOMImplementation](class.domimplementation.md), що обробляє цей документ.\n\nlastElementChild\n\nОстанній дочірній елемент або **`null`**\n\npreserveWhiteSpace\n\nВказівка ​​не прибирати зайві прогалини та відступи. За замовчуванням **`true`**. Встановлення цього значення **`false`** дає той самий ефект, як і передача константи **`LIBXML_NOBLANKS`** як параметр `option`в метод[DOMDocument::load()](domdocument.load.md)и т. д.\n\nrecover\n\n*Пропрієтарна властивість*. Включає режим відновлення, тобто намагається розібрати некоректно складені документи. Цей атрибут не входить до специфікації DOM і специфічний для модуля libxml.\n\nresolveExternals\n\nУстанавливают в\\*\\*`true`\\*\\* для завантаження зовнішніх елементів із оголошення типу документа. Корисний при включенні елементів із символьними даними у документ XML.\n\nstandalone\n\n*Застаріло*. Вказівка, що документ не залежить від інших документів XML, як зазначено в декларації XML, відповідає властивості xmlStandalone.\n\nstrictErrorChecking\n\nВикидає виняток [DOMException](class.domexception.md)в случае ошибок. По умолчанию\\*\\*`true`\\*\\*\n\nsubstituteEntities\n\n*Патентована властивість*. Вказує, чи замінювати елементи документа. Цей атрибут не входить до специфікації DOM і специфічний для модуля libxml. За замовчуванням **`false`**\n\n**Застереження**\n\nУвімкнення підміни сутностей сприяє атакам XML External Entity (XXE).\n\nvalidateOnParse\n\nЗавантажує DTD та перевіряє документ на відповідність. За замовчуванням **`false`**\n\n**Застереження**\n\nУвімкнення перевірки DTD сприяє атакам XML External Entity (XXE).\n\nversion\n\n*Застаріло*. Версія XML відповідає xmlVersion.\n\nxmlEncoding\n\nАтрибут визначає як частину XML-оголошення кодування документа. Значення дорівнює **`null`**, якщо вона не вказана або коли значення невідоме, наприклад, коли документ було створено у пам'яті.\n\nxmlStandalone\n\nАтрибут визначає як частину XML-оголошення, що документ автономний. Приймає значення **`false`**, якщо не вказано.\n\nxmlVersion\n\nАтрибут, який визначає як частину XML-оголошення номер версії цього документа. Якщо оголошення в документі немає, але є підтримка всіх особливостей XML, значення дорівнює 1.0.\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Класс**DOMDocument** тепер реалізує інтерфейс [DOMParentNode](class.domparentnode.md) |\n| 8.0.0 | Нереалізований метод \\*\\*DOMDocument::renameNode()\\*\\*був видалений. |\n\n## Примітки\n\n> **Зауваження** :\n> \n> Модуль DOM працює з кодуванням UTF-8. Для роботи з іншими кодуваннями користуються функціями [mb\\_convert\\_encoding()](function.mb-convert-encoding.md) [UConverter::transcode()](uconverter.transcode.md) або [iconv()](function.iconv.md)\n\n> **Зауваження** :\n> \n> При использовании[json\\_encode()](function.json-encode.md) для об'єкту **DOMDocument** буде отримано результат кодування порожнього об'єкта.\n\n## Дивіться також\n\n-   [» Специфікація W3C для інтерфейсу Document](http://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/DOM3-Core.md#core-i-Document)\n\n## Зміст\n\n-   [DOMDocument::adoptNode](domdocument.adoptnode.md)— Переносить вузол із іншого документа\n-   [DOMDocument::append](domdocument.append.md)— Додає вузли після останнього дочірнього вузла\n-   [DOMDocument::\\_\\_construct](domdocument.construct.md)— Створює новий об'єкт DOMDocument\n-   [DOMDocument::createAttribute](domdocument.createattribute.md) \\- Створює новий атрибут\n-   [DOMDocument::createAttributeNS](domdocument.createattributens.md)— Створює новий атрибут вузла із відповідним простором імен\n-   [DOMDocument::createCDATASection](domdocument.createcdatasection.md) \\- Створює новий вузол cdata\n-   [DOMDocument::createComment](domdocument.createcomment.md) \\- Створити новий вузол коментаря\n-   [DOMDocument::createDocumentFragment](domdocument.createdocumentfragment.md) \\- Створює новий фрагмент документа\n-   [DOMDocument::createElement](domdocument.createelement.md) \\- Створює новий вузол елемента\n-   [DOMDocument::createElementNS](domdocument.createelementns.md)— Створити новий вузол елемента із відповідним простором імен\n-   [DOMDocument::createEntityReference](domdocument.createentityreference.md) \\- Створити новий вузол посилання на сутність\n-   [DOMDocument::createProcessingInstruction](domdocument.createprocessinginstruction.md) \\- Створити новий PI-вузол\n-   [DOMDocument::createTextNode](domdocument.createtextnode.md) \\- Створити новий текстовий вузол\n-   [DOMDocument::getElementById](domdocument.getelementbyid.md)— Шукає елемент із певним ідентифікатором\n-   [DOMDocument::getElementsByTagName](domdocument.getelementsbytagname.md)— Шукає всі елементи із заданим локальним ім'ям\n-   [DOMDocument::getElementsByTagNameNS](domdocument.getelementsbytagnamens.md)— Шукає всі елементи із заданим ім'ям у вказаному просторі імен\n-   [DOMDocument::importNode](domdocument.importnode.md)— Імпортувати вузол у поточний документ\n-   [DOMDocument::load](domdocument.load.md)— Завантаження XML із файлу\n-   [DOMDocument::loadHTML](domdocument.loadhtml.md)— Завантаження HTML із рядка\n-   [DOMDocument::loadHTMLFile](domdocument.loadhtmlfile.md)— Завантаження HTML із файлу\n-   [DOMDocument::loadXML](domdocument.loadxml.md)— Завантаження XML із рядка\n-   [DOMDocument::normalizeDocument](domdocument.normalizedocument.md) \\- Нормалізує документ\n-   [DOMDocument::prepend](domdocument.prepend.md) \\- Додає вузли перед першим дочірнім вузлом\n-   [DOMDocument::registerNodeClass](domdocument.registernodeclass.md)— Реєстрація розширеного класу, який використовується для створення типу базового вузла\n-   [DOMDocument::relaxNGValidate](domdocument.relaxngvalidate.md) \\- Здійснює перевірку документа на правильність побудови за допомогою relaxNG\n-   [DOMDocument::relaxNGValidateSource](domdocument.relaxngvalidatesource.md) \\- Перевіряє документ за допомогою relaxNG\n-   [DOMDocument::replaceChildren](domdocument.replacechildren.md)— Замінює дочірні вузли у документі\n-   [DOMDocument::save](domdocument.save.md)— Зберігає XML-дерево із внутрішнього подання до файлу\n-   [DOMDocument::saveHTML](domdocument.savehtml.md)— Зберігає документ із внутрішнього подання до рядка, використовуючи форматування HTML\n-   [DOMDocument::saveHTMLFile](domdocument.savehtmlfile.md)— Зберігає документ із внутрішнього подання до файлу, використовуючи форматування HTML\n-   [DOMDocument::saveXML](domdocument.savexml.md)— Зберігає XML-дерево з внутрішньої вистави у вигляді рядка\n-   [DOMDocument::schemaValidate](domdocument.schemavalidate.md)— Перевіряє дійсність документа, ґрунтуючись на заданій схемі. Підтримується лише XML-схема 1.0.\n-   [DOMDocument::schemaValidateSource](domdocument.schemavalidatesource.md)— Перевіряє дійсність документа, ґрунтуючись на схемі\n-   [DOMDocument::validate](domdocument.validate.md)— Перевіряє документ на відповідність його DTD\n-   [DOMDocument::xinclude](domdocument.xinclude.md)— Вставляє XInclude в об'єкті DOMDocument.\n","title":"Клас DOMDocument","contentType":2,"navigation":[{"domcomment.construct.md":"« DOMComment::\\_\\_construct"},{"domdocument.adoptnode.md":"DOMDocument::adoptNode »"},{"index.md":"PHP Manual"},{"book.dom.md":"DOM"}]}},"__N_SSG":true}