{"pageProps":{"page":{"slug":"mysqli.begin-transaction.md","content":"# mysqli::begin\\_transaction\n\n# mysqli\\_begin\\_transaction\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\nmysqli::begin\\_transaction -- mysqli\\_begin\\_transaction - Стартує транзакцію\n\n### Опис\n\nОб'єктно-орієнтований стиль\n\n```methodsynopsis\npublic mysqli::begin_transaction(int $flags = 0, ?string $name = null): bool\n```\n\nПроцедурний стиль:\n\n```methodsynopsis\nmysqli_begin_transaction(mysqli $mysql, int $flags = 0, ?string $name = null): bool\n```\n\nСтартує транзакцію. Потрібно InnoDB (дозволено за замовчуванням). Для додаткової інформації, як працюють транзакції у MySQL, читайте [» http://dev.mysql.com/doc/mysql/en/commit.md](http://dev.mysql.com/doc/mysql/en/commit.md)\n\n### Список параметрів\n\n`mysql`\n\nТільки для процедурного стилю: об'єкт [mysqli](class.mysqli.md), який повернула функція [mysqli\\_connect()](function.mysqli-connect.md)или функция[mysqli\\_init()](mysqli.init.md)\n\n`flags`\n\nКоректні прапори:\n\n-   **`MYSQLI_TRANS_START_READ_ONLY`**: Стартувати транзакцію як \"START TRANSACTION READ ONLY\" Потрібно MySQL 5.6 або вище.\n    \n-   **`MYSQLI_TRANS_START_READ_WRITE`**: Стартувати транзакцію як \"START TRANSACTION READ WRITE\" Потрібно MySQL 5.6 або вище.\n    \n-   **`MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT`**: Стартувати транзакцію як \"START TRANSACTION WITH CONSISTENT SNAPSHOT\"\n    \n\n`name`\n\nКрапка збереження транзакції.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `name` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** mysqli::begin\\_transaction()\\*\\*\\*\\*\n\nОб'єктно-орієнтований стиль\n\n```php\n<?php\n\n/* Указать mysqli выбрасывать исключение в случае возникновения ошибки */\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n/* Движок таблиц должен поддерживать транзакции */\n$mysqli->query(\"CREATE TABLE IF NOT EXISTS language (\n    Code text NOT NULL,\n    Speakers int(11) NOT NULL\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\");\n\n/* Начало транзакции */\n$mysqli->begin_transaction();\n\ntry {\n    /* Добавление каких-то значений */\n    $mysqli->query(\"INSERT INTO language(Code, Speakers) VALUES ('DE', 42000123)\");\n\n    /* Попытка добавить недопустимые значения */\n    $language_code = 'FR';\n    $native_speakers = 'Unknown';\n    $stmt = $mysqli->prepare('INSERT INTO language(Code, Speakers) VALUES (?,?)');\n    $stmt->bind_param('ss', $language_code, $native_speakers);\n    $stmt->execute();\n\n    /* Если код достигает этой точки без ошибок, фиксируем данные в базе данных. */\n    $mysqli->commit();\n} catch (mysqli_sql_exception $exception) {\n    $mysqli->rollback();\n\n    throw $exception;\n}\n```\n\nПроцедурний стиль\n\n```php\n<?php\n\n/* Указать mysqli выбрасывать исключение в случае возникновения ошибки */\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n\n$mysqli = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n/* Движок таблиц должен поддерживать транзакции */\nmysqli_query($mysqli, \"CREATE TABLE IF NOT EXISTS language (\n    Code text NOT NULL,\n    Speakers int(11) NOT NULL\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\");\n\n/* Начало транзакции */\nmysqli_begin_transaction($mysqli);\n\ntry {\n    /* Добавление каких-то значений */\n    mysqli_query($mysqli, \"INSERT INTO language(Code, Speakers) VALUES ('DE', 42000123)\");\n\n    /* Попытка добавить недопустимые значения */\n    $language_code = 'FR';\n    $native_speakers = 'Unknown';\n    $stmt = mysqli_prepare($mysqli, 'INSERT INTO language(Code, Speakers) VALUES (?,?)');\n    mysqli_stmt_bind_param($stmt, 'ss', $language_code, $native_speakers);\n    mysqli_stmt_execute($stmt);\n\n    /* Если код достигает этой точки без ошибок, фиксируем данные в базе данных. */\n    mysqli_commit($mysqli);\n} catch (mysqli_sql_exception $exception) {\n    mysqli_rollback($mysqli);\n\n    throw $exception;\n}\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Функція не працює з нетранзакційними типами таблиць (наприклад, MyISAM або ISAM).\n\n### Дивіться також\n\n-   [mysqli\\_autocommit()](mysqli.autocommit.md) \\- Вмикає або вимикає автоматичну фіксацію змін бази даних\n-   [mysqli\\_commit()](mysqli.commit.md) \\- Фіксує поточну транзакцію\n-   [mysqli\\_rollback()](mysqli.rollback.md) \\- Відкат поточної транзакції\n","title":"mysqli::begin\\_transaction","contentType":2,"navigation":[{"mysqli.autocommit.md":"« mysqli::autocommit"},{"mysqli.change-user.md":"mysqli::change\\_user »"},{"index.md":"PHP Manual"},{"class.mysqli.md":"mysqli"}]}},"__N_SSG":true}