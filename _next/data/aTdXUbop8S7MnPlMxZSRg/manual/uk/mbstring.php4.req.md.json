{"pageProps":{"page":{"slug":"mbstring.php4.req.md","content":"# Вимоги до кодування символів у PHP\n\nТипи кодувань, використання яких у PHP безпечне.\n\n-   Однобайтове кодування,\n    \n    -   мають ASCII-сумісну (сумісну з ISO646) розмітку в діапазоні з`00h`по`7fh`\n-   Багатобайтове кодування,\n    \n    -   мають ASCII-сумісну розмітку в діапазоні з`00h`по`7fh`\n    -   що не використовують escape-послідовності ISO2022.\n    -   не використовують значення в байтах з`00h`по`7fh`окремо, коли ці байти є одним символом.\n\nДалі наведено приклади кодувань, використання яких у PHP небажане.\n\n```\nJIS, SJIS, ISO-2022-JP, BIG-5\n```\n\nНавіть якщо PHP-скрипт написаний в кодуванні, що рекомендується, він може виявитися непрацездатним. Найчастіше так відбувається, коли кодовані рядки з'являються в скрипті як ідентифікатори або літерали. Можна виключити більшість таких ситуацій шляхом використання функції фільтрації кодувань у вхідних HTTP-запитах (функція є в модулі `mbstring`\n\n> **Зауваження** :\n> \n> Вкрай не рекомендується використовувати SJIS, BIG5, CP936, CP949 і GB18030 як внутрішні кодування, якщо ви недостатньо розумієтеся на пристрої парсера, сканера та кодування.\n\n> **Зауваження** :\n> \n> Якщо ви підключаєтеся до бази даних засобами PHP, рекомендується використовувати однакові кодування для бази даних і як `внутрішнього кодування`. Це полегшить розробку та підвищить швидкодію.\n> \n> Якщо ви використовуєте PostgreSQL, збіг кодувань у базі даних і використовуваної в PHP необов'язково, оскільки PostgreSQL підтримує автоматичне перетворення кодувань між СУБД та клієнтом.\n","title":"Вимоги до кодування символів у PHP","contentType":2,"navigation":[{"mbstring.overload.md":"Механізм навантаження функцій"},{"ref.mbstring.md":"Функції для роботи з багатобайтовими рядками."},{"index.md":"PHP Manual"},{"book.mbstring.md":"Багатобайтові рядки"}]}},"__N_SSG":true}