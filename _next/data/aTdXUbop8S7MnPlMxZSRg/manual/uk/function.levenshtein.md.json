{"pageProps":{"page":{"slug":"function.levenshtein.md","content":"# levenshtein\n\n(PHP 4 >= 4.0.1, PHP 5, PHP 7, PHP 8)\n\nlevenshtein — Обчислює відстань Левенштейна між двома рядками\n\n### Опис\n\n```methodsynopsis\nlevenshtein(    string $string1,    string $string2,    int $insertion_cost = 1,    int $replacement_cost = 1,    int $deletion_cost = 1): int\n```\n\nВідстань Левенштейна - це мінімальна кількість вставок, замін та видалень символів, необхідна для перетворення `string1`в`string2`. Складність алгоритму дорівнює `O(m*n)`, где`n`и`m` - Довжини рядків `string1`и`string2`(неплохо по сравнению с[similar\\_text()](function.similar-text.md), що має складність `O(max(n,m)**3)`, Але все ж таки досить багато).\n\nЯкщо `insertion_cost` `replacement_cost`и/или`deletion_cost` не рівні алгоритм адаптується для вибору найдешевших перетворень. Наприклад. якщо `$insertion_cost + $deletion_cost < $replacement_cost`, заміни не будуть виконуватися, натомість будуть виконуватися вставки та видалення.\n\n### Список параметрів\n\n`string1`\n\nОдин із рядків, для яких обчислюється відстань Левенштейна.\n\n`string2`\n\nОдин із рядків, для яких обчислюється відстань Левенштейна.\n\n`insertion_cost`\n\nВизначає вартість вставки.\n\n`replacement_cost`\n\nВизначає вартість заміни.\n\n`deletion_cost`\n\nВизначає вартість видалення.\n\n### Значення, що повертаються\n\nЦя функція повертає відстань Левенштейна між двома рядками.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | До цієї версії **levenshtein()** треба було викликати із двома чи п'ятьма аргументами. |\n| 8.0.0 | До цієї версії, **levenshtein()** повертала значення `-1`якщо один з рядків аргументу більше 255 символів. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** levenshtein()\\*\\*\\*\\*\n\n```php\n<?php\n// введённое слово с опечаткой\n$input = 'carrrot';\n\n// массив сверяемых слов\n$words  = array('apple','pineapple','banana','orange',\n                'radish','carrot','pea','bean','potato');\n\n// кратчайшее расстояние пока ещё не найдено\n$shortest = -1;\n\n// проходим по словам для нахождения самого близкого варианта\nforeach ($words as $word) {\n\n    // вычисляем расстояние между входным словом и текущим\n    $lev = levenshtein($input, $word);\n\n    // проверяем полное совпадение\n    if ($lev == 0) {\n\n        // это ближайшее слово (точное совпадение)\n        $closest = $word;\n        $shortest = 0;\n\n        // выходим из цикла - мы нашли точное совпадение\n        break;\n    }\n\n    // если это расстояние меньше следующего наименьшего расстояния\n    // ИЛИ если следующее самое короткое слово ещё не было найдено\n    if ($lev <= $shortest || $shortest < 0) {\n        // устанивливаем ближайшее совпадение и кратчайшее расстояние\n        $closest  = $word;\n        $shortest = $lev;\n    }\n}\n\necho \"Вы ввели: $input\\n\";\nif ($shortest == 0) {\n    echo \"Найдено точное совпадение: $closest\\n\";\n} else {\n    echo \"Вы не имели в виду: $closest?\\n\";\n}\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nВы ввели: carrrot\nВы не имели в виду: carrot?\n```\n\n### Дивіться також\n\n-   [soundex()](function.soundex.md) \\- Повертає ключ soundex для рядка\n-   [similar\\_text()](function.similar-text.md) \\- обчислює ступінь схожості двох рядків\n-   [metaphone()](function.metaphone.md) \\- Повертає ключ metaphone для рядка\n","title":"levenshtein","contentType":2,"navigation":[{"function.lcfirst.md":"« lcfirst"},{"function.localeconv.md":"localeconv »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}