{"pageProps":{"page":{"slug":"quickhashintstringhash.update.md","content":"# QuickHashIntStringHash::update\n\n(PECL quickhash >= Unknown)\n\nQuickHashIntStringHash::update — Метод оновлює запис у хеші новим значенням\n\n### Опис\n\n```methodsynopsis\npublic QuickHashIntStringHash::update(int $key, string $value): bool\n```\n\nМетод оновлює запис новим значенням і повертає, чи запис оновлено. Якщо є дублікати ключів, лише перший знайдений елемент набуде оновленого значення. Використовуйте константу **`QuickHashIntStringHash::CHECK_FOR_DUPES`** під час створення хешу, щоб запобігти попаданню дублюючих ключів у хеш.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, що оновлюється.\n\n`value`\n\nНове значення запису. Якщо передається нестрокове значення, воно буде автоматично перетворено на рядок, якщо це можливо.\n\n### Значення, що повертаються\n\nМетод возвращает\\*\\*`true`\\*\\*, якщо запис було знайдено та оновлено та **`false`**, якщо запис був частиною хеша.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashIntStringHash::update()\\*\\*\\*\\*\n\n```php\n<?php\n$hash->add( 161803398, \"--\" );\n$hash->add( 314159265, \"множество\" );\n\necho $hash->get( 161803398 ), \"\\n\";\necho $hash->get( 314159265 ), \"\\n\";\n\nvar_dump( $hash->update( 314159265, \"множество плюс один\" ) );\nvar_dump( $hash->update( 314159999, \"множество плюс один\" ) );\n\necho $hash->get( 161803398 ), \"\\n\";\necho $hash->get( 314159265 ), \"\\n\";\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n--\nмножество\nbool(true)\nbool(false)\n--\nмножество плюс один\n```\n","title":"QuickHashIntStringHash::update","contentType":2,"navigation":[{"quickhashintstringhash.set.md":"« QuickHashIntStringHash::set"},{"book.reflection.md":"Reflection »"},{"index.md":"PHP Manual"},{"class.quickhashintstringhash.md":"QuickHashIntStringHash"}]}},"__N_SSG":true}