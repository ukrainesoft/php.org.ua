{"pageProps":{"page":{"slug":"class.evprepare.md","content":"# Клас EvPrepare\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nСпостерігачі **EvPrepare**и[EvCheck](class.evcheck.md) зазвичай використовуються у парі. Спостерігач **EvPrepare** викликається до блокування процесу, потім викликається [EvCheck](class.evcheck.md)\n\nНе дозволяється викликати [EvLoop::run()](evloop.run.md) або аналогічні методи чи функції, введені в поточний цикл подій іншими спостерігачами **EvPrepare**или[EvCheck](class.evcheck.md). Однак інші цикли подій, які не поточні, можуть. Сенс у цьому, що поточному не потрібно перевіряти рекурсію у таких спостерігачах, тобто. завжди буде послідовність: **EvPrepare** -> блокування -> [EvCheck](class.evcheck.md), так що спостерігача кожного виду завжди будуть викликати в парах, захоплюючи блокуючий виклик.\n\nОсновна мета полягає в інтеграції інших подійових механізмів у *libev* та покращене їх використання. Вони можуть бути використані, наприклад, при відстеженні зміні змінних, при реалізації спостерігачів, при інтегруванні NET-SNMP або співпрограм бібліотеки і багато іншого. Вони також іноді корисні при кешуванні даних та при очищенні даних до блокування.\n\nРекомендується встановлювати спостерігачам [EvCheck](class.evcheck.md) найвищий пріоритет (**`Ev::MAXPRI`**), щоб забезпечити можливість їх запуску раніше за будь-які інші спостерігачі після опитування (це не має значення для спостерігачів **EvPrepare**\n\nКрім того, спостерігачі [EvCheck](class.evcheck.md) не зможуть активувати/подавати події. Бувай *libev* повністю підтримує все це, вони можуть виконуватися раніше, ніж інші спостерігачі [EvCheck](class.evcheck.md) виконають свою роботу.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvPrepare\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    \n    /* Наследуемые свойства */\n    \n     public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(\n    string\n     $callback\n   , \n    string\n     $data\n    = ?, \n    string\n     $priority\n    = ?)\n\n    final\n   public\n   static\n   createStopped(\n    callable\n     $callback\n   , \n    mixed\n     $data\n     = null\n   , \n    int\n     $priority\n     = 0\n   ): EvPrepare\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Зміст\n\n-   [EvPrepare::\\_\\_construct](evprepare.construct.md) \\- Конструктор спостерігача EvPrepare\n-   [EvPrepare::createStopped](evprepare.createstopped.md) \\- Створити об'єкт класу EvPrepare, але не стартувати його\n","title":"Клас EvPrepare","contentType":2,"navigation":[{"evperiodic.set.md":"« EvPeriodic::set"},{"evprepare.construct.md":"EvPrepare::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}