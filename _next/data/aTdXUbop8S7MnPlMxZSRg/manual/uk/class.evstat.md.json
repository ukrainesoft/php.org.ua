{"pageProps":{"page":{"slug":"class.evstat.md","content":"# Клас EvStat\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\n**EvStat** спостерігає за зміною атрибутів об'єкта заданим шляхом у файловій системі. Це досягається шляхом регулярного запуску *stat()* для цього шляху (або шляхом отримання сигналу про зміну від операційної системи) та порівняння отриманих даних з результатами попереднього виклику. У разі виявлення зміни атрибутів викликається callback-функція.\n\nШлях не обов'язково має існувати насправді. Зміна статусу з \"шлях існує\" на \"шлях не існує\" - це така ж зміна, як і будь-яке інше. Стан \"шлях не існує\" визначається за значенням **`'nlink'`** рівним 0 (яке повертається методом [EvStat::attr()](evstat.attr.md)\n\nШлях не повинен закінчуватися слішем або містити спеціальні компоненти, такі як \\*\\*`'.'`\\*\\*или **`.. .`** . Шлях має бути абсолютним. Якщо задати відносний шлях і змінити робочий каталог, поведінка буде невизначеною.\n\nТак як немає інтерфейсу сповіщення про зміни, що переноситься, переносна реалізація просто викликає *stat()* через рівні проміжки часу і дивиться, чи не змінилося чогось. Тому рекомендується ставити інтервал опитування. Якщо інтервал опитування заданий рівним **`0.0`** (що вкрай рекомендується), то використовуватиметься значення за умовчанням (якого ніхто не знає, але передбачається, що десь близько 5 секунд, але при цьому може динамічно змінюватися) . *libev* має обмеження на мінімальне значення інтервалу, яке зараз дорівнює приблизно \\*\\*`0.1`\\*\\*Але такий інтервал - це стрілянина з гармати по горобцях.\n\nНе рекомендується використовувати велику кількість одночасно працюючих спостерігачів **EvStat**оскільки це може сильно вплинути на споживання ресурсів у зв'язку з використанням механізмів оповіщення операційної системи.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvStat\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $path;\n\n    public\n      $interval;\n\n    /* Наследуемые свойства */\n    public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    string\n     $path\n   ,    \n    float\n     $interval\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   )\n\n    public\n   attr(): array\nfinal\n   public\n   static\n   createStopped(    \n    string\n     $path\n   ,    \n    float\n     $interval\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): void\npublic\n   prev(): void\npublic\n   set(\n    string\n     $path\n   , \n    float\n     $interval\n   ): void\npublic\n   stat(): bool\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Властивості\n\ninterval\n\n*Тільки читання*. Показує, наскільки часто відбуваються опитування статусу і зазвичай **`0.0`**, що дозволяє *libev* самостійно визначати інтервал.\n\npath\n\n*Тільки читання*. Шлях, для якого відстежуються зміни.\n\n## Зміст\n\n-   [EvStat::attr](evstat.attr.md)— Повертає значення, нещодавно виявлені Ev\n-   [EvStat::\\_\\_construct](evstat.construct.md) \\- Створює об'єкт спостерігача EvStat\n-   [EvStat::createStopped](evstat.createstopped.md) \\- Створює зупинений об'єкт спостерігача EvStat\n-   [EvStat::prev](evstat.prev.md)— Повертає попередній набір значень, які повертаються EvStat::attr\n-   [EvStat::set](evstat.set.md)— Налаштовує спостерігача\n-   [EvStat::stat](evstat.stat.md) \\- Ініціює виклик статистики\n","title":"Клас EvStat","contentType":2,"navigation":[{"evsignal.set.md":"« EvSignal::set"},{"evstat.attr.md":"EvStat::attr »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}