{"pageProps":{"page":{"slug":"class.callbackfilteriterator.md","content":"# Клас CallbackFilterIterator\n\n(PHP 5 >= 5.4.0, PHP 7, PHP 8)\n\n## Вступ\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class CallbackFilterIterator\n    \n\n    \n     extends\n      FilterIterator\n     {\n\n    /* Методы */\n    \n   public __construct(Iterator $iterator, callable $callback)\n\n    public accept(): bool\n\n\n    /* Наследуемые методы */\n    public FilterIterator::accept(): bool\npublic FilterIterator::current(): mixed\npublic FilterIterator::key(): mixed\npublic FilterIterator::next(): void\npublic FilterIterator::rewind(): void\npublic FilterIterator::valid(): bool\n\n    public IteratorIterator::current(): mixed\npublic IteratorIterator::getInnerIterator(): ?Iterator\npublic IteratorIterator::key(): mixed\npublic IteratorIterator::next(): void\npublic IteratorIterator::rewind(): void\npublic IteratorIterator::valid(): bool\n\n   }\n```\n\n## Приклади\n\nCallback-функція може приймати до трьох аргументів: поточний елемент, поточний ключ та ітератор відповідно.\n\n**Приклад #1 Доступні аргументи зворотного виклику**\n\n```php\n<?php\n\n/**\n * Callback-функция для CallbackFilterIterator\n *\n * @param $current   Значение текущего элемента\n * @param $key       Ключ текущего элемента\n * @param $iterator  Фильтруемый итератор\n * @return boolean   TRUE для принятия текущего элемента, иначе - FALSE\n */\nfunction my_callback($current, $key, $iterator) {\n    // Код фильтрации\n}\n\n?>\n```\n\nБудь-яка callback-функція типу [callable](language.types.callable.md) може бути використана. Наприклад, рядок, який містить ім'я функції, масив для методу або анонімна функція.\n\n**Приклад #2 Основні приклади зворотного виклику**\n\n```php\n<?php\n\n$dir = new FilesystemIterator(__DIR__);\n\n// Фильтр больших файлов ( > 100MB)\nfunction is_large_file($current) {\n    return $current->isFile() && $current->getSize() > 104857600;\n}\n$large_files = new CallbackFilterIterator($dir, 'is_large_file');\n\n// Фильтр каталогов\n$files = new CallbackFilterIterator($dir, function ($current, $key, $iterator) {\n    return $current->isDir() && ! $iterator->isDot();\n});\n\n?>\n```\n\n## Зміст\n\n-   [CallbackFilterIterator::accept](callbackfilteriterator.accept.md)— Викликає callback-функцію та передає їй як аргументи поточне значення, поточний ключ та внутрішній покажчик\n-   [CallbackFilterIterator::\\_\\_construct](callbackfilteriterator.construct.md)— Створює ітератор, що фільтрує, на основі іншого ітератора.\n","title":"Клас CallbackFilterIterator","contentType":2,"navigation":[{"cachingiterator.valid.md":"« CachingIterator::valid"},{"callbackfilteriterator.accept.md":"CallbackFilterIterator::accept »"},{"index.md":"PHP Manual"},{"spl.iterators.md":"Ітератори"}]}},"__N_SSG":true}