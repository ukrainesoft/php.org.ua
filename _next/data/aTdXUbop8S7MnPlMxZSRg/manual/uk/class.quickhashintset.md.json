{"pageProps":{"page":{"slug":"class.quickhashintset.md","content":"# Клас QuickHashIntSet\n\n(PECL quickhash >= Unknown)\n\n## Вступ\n\nКлас обгортка над набором цілих чисел.\n\nКлас реалізує інтерфейс [Iterator](class.iterator.md)що дає можливість перебору за допомогою конструкції [`foreach`](control-structures.foreach.md). Порядок проходження елементів не гарантується.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      class QuickHashIntSet\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      CHECK_FOR_DUPES = 1;\n\n    const\n     int\n      DO_NOT_USE_ZEND_ALLOC = 2;\n\n    const\n     int\n      HASHER_NO_HASH = 256;\n\n    const\n     int\n      HASHER_JENKINS1 = 512;\n\n    const\n     int\n      HASHER_JENKINS2 = 1024;\n\n\n    /* Методы */\n    \n   public add(int $key): bool\npublic __construct(int $size, int $options = ?)\npublic delete(int $key): bool\npublic exists(int $key): bool\npublicgetSize(): int\npublic static loadFromFile(string $filename, int $size = ?, int $options = ?): QuickHashIntSet\npublic static loadFromString(string $contents, int $size = ?, int $options = ?): QuickHashIntSet\npublic saveToFile(string $filename): void\npublic saveToString(): string\n\n   }\n```\n\n## Обумовлені константи\n\n**`QuickHashIntSet::CHECK_FOR_DUPES`**\n\nЯкщо увімкнено, то додавання повторюваних елементів до набору (за допомогою методів [QuickHashIntSet::add()](quickhashintset.add.md) або [QuickHashIntSet::loadFromFile()](quickhashintset.loadfromfile.md)) призведе до відкидання цих елементів. Ця функціональність дещо уповільнює роботу, так що має використовуватися лише якщо дійсно необхідний.\n\n**`QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC`**\n\nЗабороняє використання вбудованого в PHP менеджера пам'яті внутрішніх структур. Якщо увімкнено цю опцію, то пам'ять, що використовується, не враховуватиметься налаштуванням [memory\\_limit](ini.core.md#ini.memory-limit)\n\n**`QuickHashIntSet::HASHER_NO_HASH`**\n\nВказує, що не потрібно використовувати хешування, а замість неї для пошуку індексу в ланцюжку використовувати модуль. Це не швидше за звичайне хешування і породжує більше колізій.\n\n**`QuickHashIntSet::HASHER_JENKINS1`**\n\nФункція, що хешує, за замовчуванням.\n\n**`QuickHashIntHash::HASHER_JENKINS2`**\n\nІнший хешуючий алгоритм.\n\n## Зміст\n\n-   [QuickHashIntSet::add](quickhashintset.add.md)— Метод додає новий запис до набору\n-   [QuickHashIntSet::\\_\\_construct](quickhashintset.construct.md)— Створює новий об'єкт QuickHashIntSet\n-   [QuickHashIntSet::delete](quickhashintset.delete.md)— Метод видаляє запис із набору\n-   [QuickHashIntSet::exists](quickhashintset.exists.md)— Метод перевіряє, чи є ключем частиною набору\n-   [QuickHashIntSet::getSize](quickhashintset.getsize.md)— Повертає кількість елементів у наборі\n-   [QuickHashIntSet::loadFromFile](quickhashintset.loadfromfile.md)— Фабричний метод створює набір із файлу\n-   [QuickHashIntSet::loadFromString](quickhashintset.loadfromstring.md)— Фабричний метод створює набір із рядка\n-   [QuickHashIntSet::saveToFile](quickhashintset.savetofile.md)— Метод зберігає набір у пам'яті на диску\n-   [QuickHashIntSet::saveToString](quickhashintset.savetostring.md)— Метод повертає серіалізовану версію набору\n","title":"Клас QuickHashIntSet","contentType":2,"navigation":[{"quickhash.examples.md":"« Приклади"},{"quickhashintset.add.md":"QuickHashIntSet::add »"},{"index.md":"PHP Manual"},{"book.quickhash.md":"Quickhash"}]}},"__N_SSG":true}