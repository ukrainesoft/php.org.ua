{"pageProps":{"page":{"slug":"migration80.new-features.md","content":"## Нова функціональність\n\n### Ядро PHP\n\n#### Іменовані аргументи\n\nДобавлена поддержка[іменованих аргументів](functions.arguments.md#functions.named-arguments)\n\n#### Атрибути\n\nДобавлена поддержка[атрибутів](language.attributes.md)\n\n#### Оголошення властивостей у конструкторі\n\nДобавлена поддержка[визначення властивостей у конструкторі](language.oop5.decon.md#language.oop5.decon.constructor.promotion) (Оголошення властивостей у сигнатурі конструктора).\n\n#### Об'єднання типів\n\nДобавлена поддержка[об'єднання типів](language.types.declarations.md#language.types.declarations.composite.union)\n\n#### Вираз Match\n\nДобавлена поддержка[вирази `match`](control-structures.match.md)\n\n#### Оператор Nullsafe\n\nДобавлена поддержка[оператора Nullsafe](language.oop5.basic.md#language.oop5.basic.nullsafe) `?->`\n\n#### Інші нові функції\n\n-   Добавлен класс[WeakMap](class.weakmap.md)\n    \n-   Добавлен класс[ValueError](class.valueerror.md)\n    \n-   Будь-яка кількість параметрів функції тепер може бути замінена варіативним аргументом за сумісності типів. Наприклад, тепер наступний код є допустимим:\n    \n    ```php\n    <?php\n    class A {\n         public function method(int $many, string $parameters, $here) {}\n    }\n    class B extends A {\n         public function method(...$everything) {}\n    }\n    ?>\n    ```\n    \n-   static (як у \"пізнім статичному зв'язуванні\") тепер можна використовувати як тип, що повертається:\n    \n    ```php\n    <?php\n    class Test {\n         public function create(): static {\n              return new static();\n         }\n    }\n    ?>\n    ```\n    \n-   Тепер можна отримати ім'я класу об'єкта за допомогою`$object::class`. Результат такий самий, що й`get_class($object)`\n    \n-   [`new`](language.oop5.basic.md#language.oop5.basic.new) і [`instanceof`](language.operators.type.md)тепер можна використовувати з довільними виразами, використовуючи`new (expression)(...$args)`и`$obj instanceof (expression)`\n    \n-   Було внесено деякі виправлення узгодженості до синтаксису змінних, наприклад, тепер дозволено запис`Foo::BAR::$baz`\n    \n-   Доданий інтерфейс[Stringable](class.stringable.md), який автоматично реалізується, якщо в класі визначено метод[\\_\\_toString()](language.oop5.magic.md#object.tostring)\n    \n-   Тепер трейти можуть визначити абстрактні закриті методи. Такі методи мають бути реалізовані класом за допомогою трейту.\n    \n-   `throw`тепер можна використовувати як вираз. Це означає, що тепер можливе таке:\n    \n    ```php\n    <?php\n    $fn = fn() => throw new Exception('Виключення у стрілочній функції');\n    $user = $session->user ?? throw new Exception('Має бути користувач');\n    ```\n    \n-   У списках параметрів тепер дозволена необов'язкова завершальна кома.\n    \n    ```php\n    <?php\n    function functionWithLongSignature(\n        Type1 $parameter1,\n        Type2 $parameter2, // <-- Ця кома тепер дозволена.\n    ) {\n    }\n    ```\n    \n-   Тепер можна написати`catch (Exception)`для перехоплення виключення, не зберігаючи їх у змінній.\n    \n-   Додана підтримка типу[mixed](language.types.declarations.md#language.types.declarations.mixed)\n    \n-   Закриті методи, оголошені в батьківському класі, більше не застосовують жодних правил успадкування для методів дочірнього класу (за винятком остаточних закритих конструкторів). У наступному прикладі показано, які обмеження було знято:\n    \n    ```php\n    <?php\n    class ParentClass {\n        private function method1() {}\n        private function method2() {}\n        private static function method3() {}\n        // Видає попередження, тому що \"final\" більше не має значення:\n        private final function method4() {}\n    }\n    class ChildClass extends ParentClass {\n        // Тепер все наступне дозволено, хоча модифікатори не такі ж,\n        // як закритих методів у батьківському класі.\n        public abstract function method1() {}\n        public static function method2() {}\n        public function method3() {}\n        public function method4() {}\n    }\n    ?>\n    ```\n    \n-   Добавлена функция[get\\_resource\\_id()](function.get-resource-id.md), яка повертає те саме значення, що і`(int) $resource`. Принцип роботи такий самий, але з більш зрозумілим API.\n    \n-   Добавлен класс[InternalIterator](class.internaliterator.md)\n    \n\n### дата та час\n\n-   Були додані[DateTime::createFromInterface()](datetime.createfrominterface.md) і [DateTimeImmutable::createFromInterface()](datetimeimmutable.createfrominterface.md)\n    \n-   Додано специфікатор формату DateTime`p`, Який аналогічний`P`, але повертає`Z`, а не`+00:00`для UTC.\n    \n\n### DOM\n\nДодані [DOMParentNode](class.domparentnode.md) і [DOMChildNode](class.domchildnode.md) з новими API-інтерфейсами обходу та управління.\n\n### Фільтрування даних\n\n**`FILTER_VALIDATE_BOOL`** був доданий як псевдонім для **`FILTER_VALIDATE_BOOLEAN`**. Нове ім'я є доцільним, оскільки воно використовує ім'я канонічного типу.\n\n### Enchant\n\nДодані [enchant\\_dict\\_add()](function.enchant-dict-add.md) [enchant\\_dict\\_is\\_added()](function.enchant-dict-is-added.md)и\\*\\*`LIBENCHANT_VERSION`\\*\\*\n\n### FPM\n\nДобавлена новая опция`pm.status_listen`, що дає змогу отримувати статус з іншої кінцевої точки (наприклад, порту або файлу UDS). Це може стати в нагоді для отримання статусу, коли всі дочірні елементи зайняті обробкою довготривалих запитів.\n\n### Hash\n\nТепер об'єкти [HashContext](class.hashcontext.md) можна серіалізувати.\n\n### Функції інтернаціоналізації\n\nДодані константи **`IntlDateFormatter::RELATIVE_FULL`** **`IntlDateFormatter::RELATIVE_LONG`** **`IntlDateFormatter::RELATIVE_MEDIUM`** і **`IntlDateFormatter::RELATIVE_SHORT`**\n\n### LDAP\n\nДобавлена функция[ldap\\_count\\_references()](function.ldap-count-references.md), яка повертає кількість посилань у результатах пошуку.\n\n### OPcache\n\nЯкщо ini-параметр opcache.record\\_warnings включений, OPcache записуватиме попередження під час компіляції і відтворюватиме їх при наступному включенні, навіть якщо вони обслуговуються з кеша.\n\n### OpenSSL\n\nДодано підтримку синтаксису криптографічних повідомлень (CMS) ([» RFC 5652](http://www.faqs.org/rfcs/rfc5652)), що складається з функцій для шифрування, дешифрування, підпису, перевірки та читання. API схожий на API для функцій PKCS #7 з додаванням нових констант кодування: **`OPENSSL_ENCODING_DER`** **`OPENSSL_ENCODING_SMIME`** і **`OPENSSL_ENCODING_PEM`** :\n\n-   [openssl\\_cms\\_encrypt()](function.openssl-cms-encrypt.md)шифрує повідомлення у файлі із сертифікатами та виводить результат у наданий файл.\n-   [openssl\\_cms\\_decrypt()](function.openssl-cms-decrypt.md)розшифровує повідомлення S/MIME у файлі та виводить результати у наданий файл.\n-   [openssl\\_cms\\_read()](function.openssl-cms-read.md)експортує файл CMS до масиву сертифікатів PEM.\n-   [openssl\\_cms\\_sign()](function.openssl-cms-sign.md)підписує повідомлення MIME у файлі сертифікатом та ключем та виводить результат у наданий файл.\n-   [openssl\\_cms\\_verify()](function.openssl-cms-verify.md)перевіряє, що блок даних не пошкоджений, сторона, що підписує, є тим, ким вона є і повертає сертифікати сторін, що підписують.\n\n### Регулярні вирази (сумісні з Perl)\n\nДобавлена функция[preg\\_last\\_error\\_msg()](function.preg-last-error-msg.md), яка повертає людину читання повідомлення про останню помилку PCRE. Вона доповнює [preg\\_last\\_error()](function.preg-last-error.md), яка повертає ціле значення перерахування.\n\n### Reflection\n\n-   Наступні методи тепер можуть повертати інформацію про значення параметрів внутрішніх функцій за промовчанням:\n    \n    -   [ReflectionParameter::isDefaultValueAvailable()](reflectionparameter.isdefaultvalueavailable.md)\n    -   [ReflectionParameter::getDefaultValue()](reflectionparameter.getdefaultvalue.md)\n    -   [ReflectionParameter::isDefaultValueConstant()](reflectionparameter.isdefaultvalueconstant.md)\n    -   [ReflectionParameter::getDefaultValueConstantName()](reflectionparameter.getdefaultvalueconstantname.md)\n\n### SQLite3\n\n[SQLite3::setAuthorizer()](sqlite3.setauthorizer.md) і відповідні константи класів були додані, за допомогою яких можна встановити власну callback-функцію для авторизації або заборони дії в базі даних.\n\n### Бібліотека стандартних функцій\n\n-   Додані функції [str\\_contains()](function.str-contains.md) [str\\_starts\\_with()](function.str-starts-with.md) і [str\\_ends\\_with()](function.str-ends-with.md), які перевіряють, чи містить`haystack`, починається або закінчується`needle`соответственно.\n    \n-   Добавлена функция[fdiv()](function.fdiv.md), яка виконує поділ з плаваючою точкою відповідно до IEEE 754. Поділ на нуль суворо визначено і повертає одне з значень`Inf` `-Inf`или`NaN`\n    \n-   Добавлена функция[get\\_debug\\_type()](function.get-debug-type.md)яка повертає тип, який може використовуватися для генерацій повідомлень про помилки. На відміну від[gettype()](function.gettype.md), вона використовує канонічні імена типів, повертає імена класів об'єктів та повідомляє про тип ресурсів.\n    \n-   [printf()](function.printf.md)та її похідні тепер підтримують специфікатори формату`%h`и`%H`. Вони працюють як`%g`и`%G`, але завжди використовують`\".\"`як десятковий роздільник, а не визначають його за допомогою локалі\\*\\*`LC_NUMERIC`\\*\\*\n    \n-   [printf()](function.printf.md)та її похідні тепер підтримують використання`\"*\"`як ширина або точність, і в цьому випадку ширина/точність передається як аргумент printf. Це також дозволяє використовувати точність`-1`с`%g` `%G` `%h`и`%H`. Наприклад, наступний код можна використовувати для відтворення форматування з плаваючою точкою за промовчанням PHP:\n    \n    ```php\n    <?php\n    printf(\"%.*H\", (int) ini_get(\"precision\"), $float);\n    printf(\"%.*H\", (int) ini_get(\"serialize_precision\"), $float);\n    ?>\n    ```\n    \n-   [proc\\_open()](function.proc-open.md)Тепер підтримує дескриптори псевдотерміналу (PTY). Наступний код приєднує`stdin` `stdout`и`stderr`до того самого PTY:\n    \n    ```php\n    <?php\n    $proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);\n    ?>\n    ```\n    \n-   [proc\\_open()](function.proc-open.md)Тепер підтримує дескриптори пари сокетів. Наступний код приєднує окрему пару сокетів до`stdin` `stdout`и`stderr` :\n    \n    ```php\n    <?php\n    $proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);\n    ?>\n    ```\n    \n    На відміну від каналів, у сокетів немає проблем із блокуванням введення-виведення у Windows. Однак не всі програми можуть коректно працювати із сокетами stdio.\n    \n-   Функції сортування тепер використовують стійке сортування, це означає, що елементи, що порівнюються, збережуть вихідний порядок.\n    \n-   [array\\_diff()](function.array-diff.md) [array\\_intersect()](function.array-intersect.md)та їх похідні тепер можуть використовуватися з одним масивом як аргумент. Це означає, що тепер можливе таке:\n    \n    ```php\n    <?php\n    // Працює, навіть якщо $excludes порожній:\n    array_diff($array, ...$excludes);\n    // Працює, навіть якщо $array містить лише один масив:\n    array_intersect(...$arrays);\n    ?>\n    ```\n    \n-   Параметр`flag` у функції [ob\\_implicit\\_flush()](function.ob-implicit-flush.md)був змінений, і тепер набуває логічного значення (bool), а не ціле число (int).\n    \n\n### Лексер (Tokenizer)\n\n[PhpToken](class.phptoken.md) додає об'єктно-орієнтований інтерфейс до PHP-лексера (tokenizer). Він забезпечує більш одноманітне та ергономічне уявлення, водночас ефективніше та швидше.\n\n### Zip\n\n-   Модуль Zip оновлено до версії 1.19.1.\n    \n-   Нові методи[ZipArchive::setMtimeName()](ziparchive.setmtimename.md) і [ZipArchive::setMtimeIndex()](ziparchive.setmtimeindex.md)для встановлення часу зміни запису.\n    \n-   Новий метод [ZipArchive::registerProgressCallback()](ziparchive.registerprogresscallback.md)для надання оновлень під час закриття архіву.\n    \n-   Новий метод [ZipArchive::registerCancelCallback()](ziparchive.registercancelcallback.md), щоб дозволити скасування під час закриття архіву.\n    \n-   Новий метод [ZipArchive::replaceFile()](ziparchive.replacefile.md)замінити вміст запису.\n    \n-   Новий метод [ZipArchive::isCompressionMethodSupported()](ziparchive.iscompressionmethoddupported.md), щоб перевірити додаткові можливості стиснення.\n    \n-   Новий метод [ZipArchive::isEncryptionMethodSupported()](ziparchive.isencryptionmethoddupported.md), щоб перевірити додаткові функції шифрування.\n    \n-   Додано властивість ZipArchive::lastId для отримання значення індексу останнього доданого запису.\n    \n-   Тепер помилки можна перевірити після закриття та за допомогою властивостей ZipArchive::status та ZipArchive::statusSys або методу[ZipArchive::getStatusString()](ziparchive.getstatusstring.md)\n    \n-   Параметр`'remove_path'`в[ZipArchive::addGlob()](ziparchive.addglob.md) і [ZipArchive::addPattern()](ziparchive.addpattern.md)тепер обробляється як довільний рядковий префікс (для узгодженості з`'add_path'`), тоді як раніше він інтерпретувався як ім'я каталогу.\n    \n-   Додаткові функції стиснення/шифрування тепер перелічені у phpinfo.\n","title":"Нова функціональність","contentType":2,"navigation":[{"migration80.md":"« Міграція з PHP 7.4.x на PHP 8.0.x"},{"migration80.incompatible.md":"Зміни, що ламають зворотну сумісність »"},{"index.md":"PHP Manual"},{"migration80.md":"Міграція з PHP 7.4.x на PHP 8.0.x"}]}},"__N_SSG":true}