{"pageProps":{"page":{"slug":"arrayobject.ksort.md","content":"# ArrayObject::ksort\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nArrayObject::ksort — Сортувати записи за ключами\n\n### Опис\n\n```methodsynopsis\npublic ArrayObject::ksort(int $flags = SORT_REGULAR): true\n```\n\nСортує масив за ключами, зберігаючи відносини між ключами та значеннями. Це корисно здебільшого до роботи з асоціативними масивами.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n### Список параметрів\n\n`flags`\n\nНеобов'язковий другий параметр `flags` змінює поведінку сортування і може набувати таких значень:\n\nПрапори типів сортування:\n\n-   \\*\\*`SORT_REGULAR`\\*\\*- Звичайне порівняння елементів; подробиці описані в розділі[оператори порівняння](language.operators.comparison.md)\n-   \\*\\*`SORT_NUMERIC`\\*\\*- Чисельне порівняння елементів\n-   \\*\\*`SORT_STRING`\\*\\*- рядкове порівняння елементів\n-   \\*\\*`SORT_LOCALE_STRING`\\*\\*— Порівняти елементи як рядки на основі поточного мовного стандарту. Прапор використовує мовний стандарт, який можна змінити функцією[setlocale()](function.setlocale.md)\n-   **`SORT_NATURAL`** - Порівняння елементів як рядки, використовуючи \"природний порядок\", наприклад [natsort()](function.natsort.md)\n-   \\*\\*`SORT_FLAG_CASE`**\\- можна об'єднувати (побітове АБО) з**`SORT_STRING`** або **`SORT_NATURAL`\\*\\*для сортування рядків без урахування регістру\n\n### Значення, що повертаються\n\nФункція завжди повертає **`true`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер **`true`**; раніше було bool. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ArrayObject::ksort()\\*\\*\\*\\*\n\n```php\n<?php\n$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\n$fruitArrayObject = new ArrayObject($fruits);\n$fruitArrayObject->ksort();\n\nforeach ($fruitArrayObject as $key => $val) {\n    echo \"$key = $val\\n\";\n}\n ?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\na = orange\nb = banana\nc = apple\nd = lemon\n```\n\n### Дивіться також\n\n-   [ArrayObject::asort()](arrayobject.asort.md) \\- Сортувати записи за значенням\n-   [ArrayObject::natsort()](arrayobject.natsort.md) - Сортувати масив, використовуючи алгоритм \"natural order\"\n-   [ArrayObject::natcasesort()](arrayobject.natcasesort.md) - Сортувати масив, використовуючи реєстронезалежний алгоритм \"natural order\"\n-   [ArrayObject::uasort()](arrayobject.uasort.md) \\- Сортувати записи, використовуючи функцію користувача для порівняння елементів і зберігаючи при цьому зв'язок ключ/значення\n-   [ArrayObject::uksort()](arrayobject.uksort.md) \\- Сортувати масив за ключами, використовуючи функцію користувача для порівняння\n-   [ksort()](function.ksort.md) \\- Сортує масив за ключом у порядку зростання\n","title":"ArrayObject::ksort","contentType":2,"navigation":[{"arrayobject.getiteratorclass.md":"« ArrayObject::getIteratorClass"},{"arrayobject.natcasesort.md":"ArrayObject::natcasesort »"},{"index.md":"PHP Manual"},{"class.arrayobject.md":"ArrayObject"}]}},"__N_SSG":true}