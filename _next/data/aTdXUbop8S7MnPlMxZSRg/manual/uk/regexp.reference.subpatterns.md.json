{"pageProps":{"page":{"slug":"regexp.reference.subpatterns.md","content":"## Підмаски\n\nПідмаски обмежуються круглими дужками, які можуть бути вкладеними. Використання частини шаблону як підмаски має такі функції:\n\n1.  Локалізує набір альтернатив. Наприклад, шаблон`cat(aract|erpillar|)`відповідає одному зі слів \"cat\", \"cataract\" або \"caterpillar\". Без використання дужок він відповідав би рядкам cataract, erpillar або порожньому рядку.\n    \n2.  Вказує на необхідність захоплення підрядка (як показано вище). У тому випадку, якщо відповідність шаблону було знайдено, підрядок, що відповідає підмаску, також передається назад, що викликає за допомогою аргументу*ovector* функції **pcre\\_exec()**. Круглі дужки, що відкривають, нумеруються зліва направо (починаючи з одиниці) і їх порядкові номери використовуються для нумерації відповідних підрядок в результаті.\n    \n\nНаприклад, якщо рядок the red king зіставляється з шаблоном `the ((red|white) (king|queen))`, будуть захоплені підрядки «red king», «red» та «king», з номерами 1, 2 та 3 відповідно.\n\nУ реальному житті виконання одночасно двох функцій може виявитися незручним. Трапляються випадки, коли необхідне угруповання альтернатив без захоплення рядка. Якщо після відкриття круглої дужки слід «?:», захоплення рядка не відбувається, і поточна підмаска не нумерується. Наприклад, якщо рядок the white queen зіставляється з шаблоном `the ((?:red|white) (king|queen))`, будуть захоплені підрядки \"white queen\" і \"queen\", і вони будуть пронумеровані 1 і 2 відповідно. Максимальна кількість захоплюючих підмасок — 65535. Такі великі шаблони можуть не скомпілюватися, залежно від налаштувань libpcre.\n\nЯкщо в незахоплюючій підмасці необхідно вказати додаткові опції, можна скористатися зручним скороченням: символ, що позначає опцію, що встановлюється, поміщається між «?» та «:». Таким чином, наступні два шаблони\n\n```\n(?i:saturday|sunday)\n(?:(?i)saturday|sunday)\n```\n\nвідповідають тому самому набору рядків. Оскільки альтернативні версії беруться ліворуч, і встановлені опції зберігають свою дію до кінця підмаски, опція, встановлена ​​в одній гілці, також має ефект у всіх наступних гілках. Тому наведені вище шаблони збігаються як з SUNDAY, так і з Saturday.\n\nТакож можна використовувати іменовані підмаски за допомогою синтаксису `(?P<name>pattern)`. Ця підмаска буде індексована в масиві збігів, крім звичайного числового індексу, ще й на ім'я name. Також існують два альтернативні синтаксиси: `(?<name>pattern)`и`(?'name'pattern)`\n\nІноді буває необхідно мати кілька збігів, що виключають одне одного. Зазвичай кожен такий збіг отримує свій власний номер, навіть якщо шаблон дозволяє збігтися тільки одному з них. Синтаксис `(?|` дозволяє обійти цю поведінку і прибрати номери, що дублюються. Розглянемо наступне регулярне вираз, зіставлене з рядком `Sunday` :\n\n```\n(?:(Sat)ur|(Sun))day\n```\n\nТут `Sun` зберігається на посиланні 2, тоді як посилання 1 порожня. В результаті зіставлення `Saturday` у зворотному посиланні 1 з'являється `Sat`, в той час як посилання 2 не існує. Використання `(?|` у шаблоні вирішує цю проблему:\n\n```\n(?|(Sat)ur|(Sun))day\n```\n\nУ цьому шаблоні обидві підмаски `Sun`и`Sat` буде збережено під номером 1.\n","title":"Підмаски","contentType":2,"navigation":[{"regexp.reference.internal-options.md":"« Встановлення внутрішніх опцій"},{"regexp.reference.repetition.md":"Повторення »"},{"index.md":"PHP Manual"},{"reference.pcre.pattern.syntax.md":"Опис синтаксису Perl-сумісних регулярних виразів"}]}},"__N_SSG":true}