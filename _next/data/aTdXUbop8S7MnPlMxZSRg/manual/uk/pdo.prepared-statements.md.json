{"pageProps":{"page":{"slug":"pdo.prepared-statements.md","content":"# Підготовлені запити та процедури, що зберігаються\n\nБільшість баз даних підтримують концепцію підготовлених запитів. Що це таке? Це можна описати, як вид скомпілюваного шаблону SQL запиту, який буде запускатися програмою і налаштовуватися за допомогою вхідних параметрів. Підготовлені запити мають дві головні переваги:\n\n-   Запит необхідно якось підготувати і потім його можна запускати стільки разів, скільки потрібно, причому як з тими ж, так і з параметрами, що відрізняються. Коли запит підготовлено, СУБД аналізує його, компілює та оптимізує план його виконання. У разі складних запитів цей процес може займати відчутний час і помітно уповільнити роботу програми, якщо потрібно багато разів виконувати запит із різними параметрами. При використанні підготовленого запиту СУБД аналізує/компілює/оптимізує запит будь-якої складності лише один раз, а програма запускає на виконання вже підготовлений шаблон. Таким чином, підготовлені запити споживають менше ресурсів і працюють швидше.\n-   Параметри підготовленого запиту не потрібно екранувати лапками; драйвер робить це автоматично. Якщо в додатку використовуються виключно підготовлені запити, розробник може бути впевнений, що ніяких SQL-ін'єкцій статися не може (проте, якщо інші частини тексту запиту створюються з неекранованим введенням, то ін'єкція SQL як і раніше можлива).\n\nПідготовлені запити також корисні тим, що PDO може емулювати їх, якщо драйвер бази даних немає подібної функціональності. Це означає, що програма може користуватися однією і тією ж методикою доступу до даних незалежно від можливостей СУБД.\n\n**Приклад #1 Вставки, що повторюються, в базу з використанням підготовлених запитів**\n\nУ цьому прикладі 2 рази виконується INSERT запит з різними значеннями `name`и`value`, які підставляються замість відповідних псевдозмінних:\n\n```php\n<?php\n$stmt = $dbh->prepare(\"INSERT INTO REGISTRY (name, value) VALUES (:name, :value)\");\n$stmt->bindParam(':name', $name);\n$stmt->bindParam(':value', $value);\n\n// вставим одну строку\n$name = 'one';\n$value = 1;\n$stmt->execute();\n\n// теперь другую строку с другими значениями\n$name = 'two';\n$value = 2;\n$stmt->execute();\n?>\n```\n\n**Приклад #2 Вставки в базу, що повторюються, з використанням підготовлених запитів**\n\nУ цьому прикладі 2 рази виконується INSERT запит з різними значеннями `name`и`value`, які підставляються замість псевдозмінних `?`\n\n```php\n<?php\n$stmt = $dbh->prepare(\"INSERT INTO REGISTRY (name, value) VALUES (?, ?)\");\n$stmt->bindParam(1, $name);\n$stmt->bindParam(2, $value);\n\n// вставим одну строку\n$name = 'one';\n$value = 1;\n$stmt->execute();\n\n// теперь другую строку с другими значениями\n$name = 'two';\n$value = 2;\n$stmt->execute();\n?>\n```\n\n**Приклад #3 Вибір даних з використанням підготовлених запитів**\n\nУ цьому прикладі проводиться вибірка з бази ключа, який вводить користувач через форму. Введення користувача автоматично полягає в лапки, тому немає ризику SQL ін'єкції.\n\n```php\n<?php\n$stmt = $dbh->prepare(\"SELECT * FROM REGISTRY where name = ?\");\n$stmt->execute([$_GET['name']]);\nforeach ($stmt as $row) {\n  print_r($row);\n}\n?>\n```\n\n**Приклад #4 Виклик збереженої процедури з вихідними параметрами**\n\nЯкщо СУБД підтримує вихідні параметри, програма може користуватися ними як і вхідними. Вихідні параметри зазвичай використовують для отримання даних зі збережених процедур. Користуватися вихідними параметрами дещо складніше, оскільки розробнику необхідно знати максимальний розмір значень, що витягуються, ще на етапі завдання цих параметрів. Якщо вилучене значення виявиться більшим, ніж передбачалося, буде викликана помилка.\n\n```php\n<?php\n$stmt = $dbh->prepare(\"CALL sp_returns_string(?)\");\n$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000);\n\n// вызов хранимой процедуры\n$stmt->execute();\n\nprint \"процедура вернула $return_value\\n\";\n?>\n```\n\n**Приклад #5 Виклик збереженої процедури з вхідним/вихідним параметром**\n\nМожна задати параметр одночасно вхідним та вихідним; синтаксис у своїй той самий, як і вихідних параметрів. У наступному прикладі рядок 'привіт' передається в процедуру, що зберігається, а потім цей рядок буде замінений повертається значенням.\n\n```php\n<?php\n$stmt = $dbh->prepare(\"CALL sp_takes_string_returns_string(?)\");\n$value = 'привет';\n$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000);\n\n// вызов хранимой процедуры\n$stmt->execute();\n\nprint \"процедура вернула $value\\n\";\n?>\n```\n\n**Приклад #6 Неправильне використання псевдозмінної**\n\n```php\n<?php\n$stmt = $dbh->prepare(\"SELECT * FROM REGISTRY where name LIKE '%?%'\");\n$stmt->execute([$_GET['name']]);\n\n// псевдопеременная может использоваться только в виде отдельного значения\n$stmt = $dbh->prepare(\"SELECT * FROM REGISTRY where name LIKE ?\");\n$stmt->execute([\"%$_GET[name]%\"]);\n?>\n```\n","title":"Підготовлені запити та процедури, що зберігаються","contentType":2,"navigation":[{"pdo.transactions.md":"« Транзакції та автоматична фіксація змін"},{"pdo.error-handling.md":"Помилки та їх обробка »"},{"index.md":"PHP Manual"},{"book.pdo.md":"PDO"}]}},"__N_SSG":true}