{"pageProps":{"page":{"slug":"function.sprintf.md","content":"# sprintf\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nsprintf — Повертає відформатований рядок\n\n### Опис\n\n```methodsynopsis\nsprintf(string $format, mixed ...$values): string\n```\n\nВозвращает строку, созданную с использованием строки формата`format`\n\n### Список параметрів\n\n`format`\n\nРядок формату складається з нуля або більше директив: звичайні символи (за винятком `%`), які просто виводяться без зміни та *специфікатори перетворення*, кожен із яких вимагає передачі свого параметра.\n\nСпецифікатори перетворення мають такий формат: `%[argnum$][flags][width][.precision]specifier`\n\n##### Argnum\n\nЦіло число, за яким слідує знак долара `$`, щоб вказати, який числовий аргумент обробляти під час перетворення.\n\n**Прапори**\n\n| Флаг | Опис |\n| --- | --- |\n| `-` | Вирівнювання по лівому краю в межах заданої ширини поля; За умовчанням вирівнювання відбувається праворуч. |\n| `+` | Друкує плюс `+` у не негативних чисел; За замовчуванням знак друкується лише у негативних чисел. |\n| (space) | Доповнює результат пробілами. Це стандартна поведінка. |\n|  | Доповнює числа нулями (тільки зліва). Зі специфікатором `s` також може доповнювати нулями праворуч. |\n| `'`(char) | Доповнює результат символом (char). |\n\n##### Ширина\n\nАбо ціле число, що вказує, скільки символів (мінімум) має вийти в результаті перетворення, або `*`Если указано значение`*`ширина задається як додаткове ціле значення, що передує значенню, відформатованому специфікатором.\n\n##### Точність\n\nКрапка , з наступним цілим числом, або `*`значення якого залежить від специфікатора:\n\n-   Для специфікаторів`e` `E` `f`и`F`: задає кількість цифр після десяткової коми (за замовчуванням 6).\n-   Для специфікаторів`g`,`G` `h`и`H`: задає максимальне значення значущих цифр.\n-   Для специфікатора`s`: визначає обмеження максимальної кількості символів у рядку, які будуть виведені.\n\n> **Зауваження**: Якщо вказана точка без наступного значення точності, то точність буде вважатися 0. Якщо вказано значення `*`, точність задається як додаткове значення, що передує значенню, відформатованому специфікатором.\n\n**Специфікатори**\n\n| Спецификатор | Опис |\n| --- | --- |\n| `%` | Відсоток символ. Аргументи не потрібні. |\n| `b` | Аргумент сприймається як ціле число і друкується у бінарному поданні. |\n| `c` | Аргумент розглядається як ціле число і друкується як символ таблиці ASCII з відповідним кодом. |\n| `d` | Аргумент сприймається як ціле число і друкується як ціле число зі знаком. |\n| `e` | Аргумент вважається за число у науковій нотації (тобто 1.2e+2). |\n| `E` | Аналогічно специфікатору `e`, але використовує великі символи (тобто 1.2E+2). |\n| `f` | Аргумент вважається за число з точкою, що плаває (з урахуванням локалі). |\n| `F` | Аргумент вважається за число з точкою, що плаває (без урахування локалі). |\n| `g` |  |\n| Загальний формат. |  |\n\nНехай P дорівнює точності, якщо вона не дорівнює нулю, 6 якщо точність не задана і 1, якщо точність задана як 0. Тоді, якщо перетворення зі стилем \"E\" матиме показник ступеня X:\n\nЯкщо P > X ≥ -4, перетворення буде в стилі \"f\" і точність буде P - (X + 1). У протилежному випадку перетворення буде в стилі \"e\" і точність буде P − 1.\n\n`G` | Аналогічно специфікатору `g`, але використовує `E`и`f`. `h` | Аналогічно специфікатору `g`, але використовує `F`Доступен с PHP 8.0.0. | |`H` | Аналогічно специфікатору `g`, але використовує `E`и`F`Доступен с PHP 8.0.0. | |`o` | Аргумент сприймається як ціле число і друкується у вісімковому поданні. | | `s` | Аргумент розглядається та друкується як рядок. | | `u` | Аргумент сприймається як ціле число і друкується як беззнакове ціле число. | | `x` | Аргумент розглядається як ціле число і друкується у шістнадцятковому поданні (літери будуть у нижньому регістрі). | | `X` | Аргумент розглядається як ціле число і друкується у шістнадцятковому поданні (літери будуть у верхньому регістрі). |\n\n**Увага**\n\nСпецифікатор `c` ігнорує значення ширини та доповнення\n\n**Увага**\n\nСпроба використовувати специфікатори із зазначенням ширини для рядка в багатобайтовому кодуванні може призвести до несподіваних результатів.\n\nЗмінні будуть приведені до відповідного для специфікатора типу:\n\n**Обробка типів**\n\n| Тип | Спецификатор |\n| --- | --- |\n| string | `s` |\n| int | `d` `u` `c` `o` `x` `X` `b` |\n| float | `e` `E` `f` `F` `g` `G` `h` `H` |\n\n`values`\n\n### Значення, що повертаються\n\nПовертає рядок, відформатований відповідно до формату `format`\n\n### Помилки\n\nПочинаючи з PHP 8.0.0, якщо кількість аргументів дорівнює нулю, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо `[width]` менше нуля чи більше **`PHP_INT_MAX`**, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо `[precision]` менше нуля чи більше **`PHP_INT_MAX`**, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо аргументів встановлено менше, ніж потрібно, викидається виняток [ArgumentCountError](class.argumentcounterror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Функція більше не повертає \\*\\*`false`\\*\\*в случае возникновения ошибки. |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md)якщо кількість аргументів дорівнює нулю; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md), якщо `[width]` менше нуля чи більше **`PHP_INT_MAX`**; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md), якщо `[precision]` менше нуля чи більше **`PHP_INT_MAX`**; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ArgumentCountError](class.argumentcounterror.md)якщо аргументів задано менше, ніж потрібно; раніше функція видавала помилку рівня **`E_WARNING`** |\n\n### Приклади\n\n**Приклад #1 Argument swapping**\n\nРядок формату підтримує нумерацію та перемішування аргументів.\n\n```php\n<?php\n$num = 5;\n$location = 'tree';\n\n$format = 'There are %d monkeys in the %s';\necho sprintf($format, $num, $location);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nThere are 5 monkeys in the tree\n```\n\nТепер уявімо, що рядок форматування задається у сторонньому файлі. Це звичайна практика за необхідності підтримки кількох мов. Уявімо, що рядок був переписаний таким чином:\n\n```php\n<?php\n$format = 'The %s contains %d monkeys';\necho sprintf($format, $num, $location);\n?>\n```\n\nУпс! У нас проблема – порядок специфікаторів перестав відповідати порядку аргументів. Так як нам дуже не хочеться змінювати код щоразу, коли змінюється формат рядка, то ми можемо використовувати нумеровані аргументи:\n\n```php\n<?php\n$format = 'The %2$s contains %1$d monkeys';\necho sprintf($format, $num, $location);\n?>\n```\n\nДодатковим приємним моментом є те, що ми можемо використовувати один параметр для кількох підстановок.\n\n```php\n<?php\n$format = 'The %2$s contains %1$d monkeys.\n           That\\'s a nice %2$s full of %1$d monkeys.';\necho sprintf($format, $num, $location);\n?>\n```\n\nПри використанні нумерованих аргументів, *специфікатор позиції* `n$`должен стоять сразу же за символом процента (`%`), до будь-якого іншого специфікатора, як показано нижче.\n\n**Приклад #2 Використання символу заповнення**\n\n```php\n<?php\necho sprintf(\"%'.9d\\n\", 123);\necho sprintf(\"%'.09d\\n\", 123);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n......123\n000000123\n```\n\n**Приклад #3 Специфікатор позиції у комбінації з іншими специфікаторами**\n\n```php\n<?php\n$format = 'The %2$s contains %1$04d monkeys';\necho sprintf($format, $num, $location);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nThe tree contains 0005 monkeys\n```\n\n**Приклад #4**sprintf()**: ціле з лідируючими нулями**\n\n```php\n<?php\n$isodate = sprintf(\"%04d-%02d-%02d\", $year, $month, $day);\n?>\n```\n\n**Приклад #5**sprintf()**: форматування грошових одиниць**\n\n```php\n<?php\n$money1 = 68.75;\n$money2 = 54.35;\n$money = $money1 + $money2;\necho $money;\necho \"\\n\";\n$formatted = sprintf(\"%01.2f\", $money);\necho $formatted;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n123.1\n123.10\n```\n\n**Приклад #6**sprintf()**: наукова нотація**\n\n```php\n<?php\n$number = 362525200;\n\necho sprintf(\"%.3e\", $number);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n3.625e+8\n```\n\n### Дивіться також\n\n-   [printf()](function.printf.md) \\- Виводить відформатований рядок\n-   [fprintf()](function.fprintf.md) \\- Записує відформатований рядок у потік\n-   [vprintf()](function.vprintf.md) \\- Виводить відформатований рядок\n-   [vsprintf()](function.vsprintf.md) \\- Повертає відформатований рядок\n-   [vfprintf()](function.vfprintf.md) \\- Записує відформатований рядок у потік\n-   [sscanf()](function.sscanf.md) \\- Розбирає рядок відповідно до заданого формату\n-   [fscanf()](function.fscanf.md) \\- Обробляє дані з файлу відповідно до формату\n-   [number\\_format()](function.number-format.md) \\- Форматує число з поділом груп\n-   [date()](function.date.md) \\- Форматує тимчасову мітку Unix\n","title":"sprintf","contentType":2,"navigation":[{"function.soundex.md":"« soundex"},{"function.sscanf.md":"sscanf »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}