{"pageProps":{"page":{"slug":"eventhttpconnection.setclosecallback.md","content":"# EventHttpConnection::setCloseCallback\n\n(PECL event >= 1.8.0)\n\nEventHttpConnection::setCloseCallback — Встановлює callback-функцію при закритті з'єднання\n\n### Опис\n\n```methodsynopsis\npublic\n   EventHttpConnection::setCloseCallback(\n    callable\n     $callback\n   , \n    mixed\n     $data\n    = ?): void\n```\n\nВстановлює callback-функцію при закритті з'єднання.\n\n### Список параметрів\n\n`callback`\n\nВстановлює callback-функцію при закритті з'єднання, яка повинна відповідати прототипу:\n\n```methodsynopsis\ncallback(\n       EventHttpConnection\n        $conn\n        = null\n      , \n       mixed\n        $arg\n        = null\n      ): void\n```\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання** EventHttpConnection::setCloseCallback()\\*\\*\\*\\*\n\n```php\n<?php\n/*\n * Устанавливаем callback-функцию, при закрытии соединения\n *\n * Скрипт обрабатывает закрытые соединения, используя HTTP API.\n *\n * Использование:\n * 1) Запустите сервер:\n * $ php examples/http_closecb.php 4242\n *\n * 2) Запустите клиента в другом терминале. Наподобие Telnet\n * Сессия должна выглядеть следующим образом:\n *\n * $ nc -t 127.0.0.1 4242\n * GET / HTTP/1.0\n * Connection: close\n *\n * Сервер выведет что-то похожее на следующее:\n *\n * HTTP/1.0 200 OK\n * Content-Type: multipart/x-mixed-replace;boundary=boundarydonotcross\n * Connection: close\n *\n * <html>\n *\n * 3) Завершите соединение с клиентом внезапно,\n * то есть завершите процесс, или просто нажмите Ctrl-C\n *\n * 4) Проверьте, вызывается ли _close_callback.\n * Скрипт должен вывести строку \"_close_callback\" стандартным выводом.\n *\n * 5) Проверьте, не имеет ли процесс сервера потерянных соединений,\n * наПриклад с утилитой `lsof`.\n */\n\nfunction _close_callback($conn)\n{\n    echo __FUNCTION__, PHP_EOL;\n}\n\nfunction _http_default($req, $dummy)\n{\n    $conn = $req->getConnection();\n    $conn->setCloseCallback('_close_callback', NULL);\n\n    /*\n    Включив Event::READ, мы защищаем сервер от незакрытых соединений.\n    Это особенность Libevent. Библиотека отключает события Event::READ для текущего соединения\n    и сервер не уведомляется о разорванных соединениях.\n\n    Таким образом, каждый раз, когда клиент прерывает соединение, мы получаем потерянное соединение.\n    НаПриклад, следующее является частью `lsof -p $PID | grep TCP` после того,\n    как клиент разорвал соединение:\n\n    57-php     15057 ruslan  6u  unix 0xffff8802fb59c780   0t0  125187 socket\n    58:php     15057 ruslan  7u  IPv4             125189   0t0     TCP *:4242 (LISTEN)\n    59:php     15057 ruslan  8u  IPv4             124342   0t0     TCP localhost:4242->localhost:37375 (CLOSE_WAIT)\n\n    где $PID – наш ID процесса.\n\n    Следующий блок кода исправляет такие потерянные соединения.\n     */\n    $bev = $req->getBufferEvent();\n    $bev->enable(Event::READ);\n    // Мы должны явно это освободить. Смотрите\n```\n\n[EventHttpRequest::getConnection()](eventhttprequest.getconnection.md)\n\n```php\n$bev->free(); // освобождаем\n\n    $req->addHeader(\n        'Content-Type',\n        'multipart/x-mixed-replace;boundary=boundarydonotcross',\n        EventHttpRequest::OUTPUT_HEADER\n    );\n\n    $buf = new EventBuffer();\n    $buf->add('<html>');\n\n    $req->sendReply(200, \"OK\");\n    $req->sendReplyChunk($buf);\n}\n\n$port = 4242;\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n\n$http->setDefaultCallback(\"_http_default\", NULL);\n$http->bind(\"0.0.0.0\", $port);\n$base->loop();\n\n?>\n```\n","title":"EventHttpConnection::setCloseCallback","contentType":2,"navigation":[{"eventhttpconnection.makerequest.md":"« EventHttpConnection::makeRequest"},{"eventhttpconnection.setlocaladdress.md":"EventHttpConnection::setLocalAddress »"},{"index.md":"PHP Manual"},{"class.eventhttpconnection.md":"EventHttpConnection"}]}},"__N_SSG":true}