{"pageProps":{"page":{"slug":"function.create-function.md","content":"# create\\_function\n\n(PHP 4 >= 4.0.1, PHP 5, PHP 7)\n\ncreate\\_function — Створює функцію динамічно, оцінюючи рядок коду\n\n**Увага**\n\nЦя функція оголошена *застарілої* починаючи з PHP 7.2.0 і була *ВИДАЛЕНО* у версії PHP 8.0.0. Використовувати цю функцію не рекомендується.\n\n### Опис\n\n```methodsynopsis\ncreate_function(string $args, string $code): string\n```\n\nСтворює функцію динамічно з переданих параметрів та повертає її унікальне ім'я.\n\n**Застереження**\n\nФункція всередині себе робить виклик функції [eval()](function.eval.md), а значить має такі ж проблеми з безпекою, як і [eval()](function.eval.md). Також у неї погані характеристики продуктивності та використання пам'яті, оскільки створені функції є глобальними і не можуть бути звільнені.\n\nИспользуйте[анонімні функції](functions.anonymous.md)\n\n### Список параметрів\n\nЗазвичай рекомендується передавати параметри у вигляді рядків [з одинарною лапкою](language.types.string.md#language.types.string.syntax.single)При использовании строк[з подвійною лапкою](language.types.string.md#language.types.string.syntax.double) імена змінних у коді повинні бути ретельно екрановані, наприклад, ось так: `\\$somevar`\n\n`args`\n\nАргументи функції у вигляді рядка, розділеного комами.\n\n`code`\n\nКод функції.\n\n### Значення, що повертаються\n\nПовертає унікальне ім'я функції у вигляді рядка або **`false`** у разі виникнення помилки. Зверніть увагу, що ім'я містить недрукований символ (`\"\\0\"`), тому слід бути обережним під час друку імені або включення його в будь-який інший рядок.\n\n### Приклади\n\n**Приклад #1 Створення функції динамічно за допомогою **create\\_function()** або анонімних функцій**\n\nВи можете використовувати динамічно створену функцію, щоб створити функцію на основі інформації, зібраної під час виконання. По-перше, використовуючи функцію **create\\_function()** :\n\n```php\n<?php\n$newfunc = create_function('$a,$b', 'return \"ln($a) + ln($b) = \" . log($a * $b);');\necho $newfunc(2, M_E) . \"\\n\";\n?>\n```\n\nТепер той же код, використовуючи [анонімну функцію](functions.anonymous.md); Зверніть увагу, що код та аргументи більше не містяться в рядках:\n\n```php\n<?php\n$newfunc = function($a,$b) { return \"ln($a) + ln($b) = \" . log($a * $b); };\necho $newfunc(2, M_E) . \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nln(2) + ln(2.718281828459) = 1.6931471805599\n```\n\n**Приклад #2 Создание общей функции-обработчика с помощью**create\\_function()\\*\\* або анонімних функцій\\*\\*\n\nІншим варіантом використання може бути загальна функція-обробник, яка може застосовувати набір операцій до списку параметрів:\n\n```php\n<?php\nfunction process($var1, $var2, $farr)\n{\n    foreach ($farr as $f) {\n        echo $f($var1, $var2) . \"\\n\";\n    }\n}\n\n// создаём кучу математических функций\n$farr = array(\n    create_function('$x,$y', 'return \"тригонометрия: \".(sin($x) + $x*cos($y));'),\n    create_function('$x,$y', 'return \"гипотенуза: \".sqrt($x*$x + $y*$y);'),\n    create_function('$a,$b', 'if ($a >=0) {return \"b*a^2 = \".$b*sqrt($a);} else {return false;}'),\n    create_function('$a,$b', \"return \\\"min(b^2+a, a^2,b) = \\\".min(\\$a*\\$a+\\$b,\\$b*\\$b+\\$a);\"),\n    create_function('$a,$b', 'if ($a > 0 && $b != 0) {return \"ln(a)/b = \".log($a)/$b; } else { return false; }')\n);\n\necho \"\\nИспользование первого массива динамических функций\\n\";\necho \"Параметры: 2.3445, M_PI\\n\";\nprocess(2.3445, M_PI, $farr);\n\n// теперь создаём кучу функций обработки строк\n$garr = array(\n    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return \"** \\\"$a\\\" '.\n        'и \\\"$b\\\"\\n** для меня одинаковы! (смотря по первым 3 символам)\";'),\n    create_function('$a,$b', 'return \"CRCs: \" . crc32($a) . \", \".crc32($b);'),\n    create_function('$a,$b', 'return \"similar(a,b) = \" . similar_text($a, $b, $p) . \"($p%)\";')\n);\necho \"\\nИспользование второго массива динамических функций\\n\";\nprocess(\"Варкалось. Хливкие шорьки пырялись по наве\", \"Варан ползёт\", $garr);\n?>\n```\n\nІ знову, той же код з використанням [анонімних функцій](functions.anonymous.md). Зверніть увагу, що імена змінних у коді більше не потрібно екранувати, оскільки вони не укладені в рядок.\n\n```php\n<?php\nfunction process($var1, $var2, $farr)\n{\n    foreach ($farr as $f) {\n        echo $f($var1, $var2) . \"\\n\";\n    }\n}\n\n// создаём кучу математических функций\n$farr = array(\n    function($x,$y) { return \"тригонометрия: \".(sin($x) + $x*cos($y)); },\n    function($x,$y) { return \"гипотенуза: \".sqrt($x*$x + $y*$y); },\n    function($a,$b) { if ($a >=0) {return \"b*a^2 = \".$b*sqrt($a);} else {return false;} },\n    function($a,$b) { return \"min(b^2+a, a^2,b) = \" . min($a*$a+$b, $b*$b+$a); },\n    function($a,$b) { if ($a > 0 && $b != 0) {return \"ln(a)/b = \".log($a)/$b; } else { return false; } }\n);\n\necho \"\\nИспользование первого массива динамических функций\\n\";\necho \"Параметры: 2.3445, M_PI\\n\";\nprocess(2.3445, M_PI, $farr);\n\n// теперь создаём кучу функций обработки строк\n$garr = array(\n    function($b,$a) { if (strncmp($a, $b, 3) == 0) return \"** \\\"$a\\\" \" .\n        \"и \\\"$b\\\"\\n** для меня одинаковы! (смотря по первым 3 символам)\"; },\n    function($a,$b) { return \"CRCs: \" . crc32($a) . \", \".crc32($b); },\n    function($a,$b) { return \"similar(a,b) = \" . similar_text($a, $b, $p) . \"($p%)\"; }\n);\necho \"\\nИспользование второго массива динамических функций\\n\";\nprocess(\"Варкалось. Хливкие шорьки пырялись по наве\", \"Варан ползёт\", $garr);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nИспользование первого массива динамических функций\nПараметры: 2.3445, M_PI\nтригонометрия: -1.6291725057799\nгипотенуза: 3.9199852871011\nb*a^2 = 4.8103313314525\nmin(b^2+a, a^2,b) = 8.6382729035898\nln(a)/b = 0.27122299212594\n\nИспользование второго массива динамических функций\n** \"Варан ползёт\" и \"Варкалось. Хливкие шорьки пырялись по наве\"\n** для меня одинаковы! (смотря по первым 3 символам)\nCRCs: 2672527412, 2269828269\nsimilar(a,b) = 16(31.683168316832%)\n```\n\n**Приклад #3 Використання динамічних функцій як callback-функцій**\n\nМожливо, найпоширенішим використанням динамічних функцій є передача їх як callback-функцій, наприклад, при використанні [array\\_walk()](function.array-walk.md) або [usort()](function.usort.md)\n\n```php\n<?php\n$av = array(\"the \", \"a \", \"that \", \"this \");\narray_walk($av, create_function('&$v,$k', '$v = $v . \"mango\";'));\nprint_r($av);\n?>\n```\n\nПеретворення наведеного вище коду в [анонімну функцію](functions.anonymous.md) :\n\n```php\n<?php\n$av = array(\"о, \", \"эх, \", \"то \", \"это \");\narray_walk($av, create_function('&$v,$k', '$v = $v . \"манго\";'));\nprint_r($av);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n  [0] => о, манго\n  [1] => эх, манго\n  [2] => то манго\n  [3] => это манго\n)\n```\n\nСортування рядків від найдовшого до найкоротшого за допомогою **create\\_function()** :\n\n```php\n<?php\n$sv = array(\"мало\", \"много\", \"большая строка\", \"строка строка строка\");\necho \"Оригинальный массив:\\n\";\nprint_r($sv);\necho \"Отсортированный:\\n\";\nusort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));\nprint_r($sv);\n?>\n```\n\nПеретворення наведеного вище коду в [анонімну функцію](functions.anonymous.md) :\n\n```php\n<?php\n$sv = array(\"мало\", \"много\", \"большая строка\", \"строка строка строка\");\necho \"Оригинальный массив:\\n\";\nprint_r($sv);\necho \"Отсортированный:\\n\";\nusort($sv, function($a,$b) { return strlen($b) - strlen($a); });\nprint_r($sv);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nОригинальный массив:\nArray\n(\n    [0] => мало\n    [1] => много\n    [2] => большая строка\n    [3] => строка строка строка\n)\nОтсортированный:\nArray\n(\n    [0] => строка строка строка\n    [1] => большая строка\n    [2] => много\n    [3] => мало\n)\n```\n\n### Дивіться також\n\n-   [Анонімні функції](functions.anonymous.md)\n","title":"create\\_function","contentType":2,"navigation":[{"function.call-user-func.md":"« call\\_user\\_func"},{"function.forward-static-call-array.md":"forward\\_static\\_call\\_array »"},{"index.md":"PHP Manual"},{"ref.funchand.md":"Функції керування функціями"}]}},"__N_SSG":true}