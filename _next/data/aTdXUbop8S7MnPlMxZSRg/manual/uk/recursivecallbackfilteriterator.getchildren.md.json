{"pageProps":{"page":{"slug":"recursivecallbackfilteriterator.getchildren.md","content":"# RecursiveCallbackFilterIterator::getChildren\n\n(PHP 5 >= 5.4.0, PHP 7, PHP 8)\n\nRecursiveCallbackFilterIterator::getChildren — Повертає дочірні елементи ітератора, що зберігається всередині RecursiveCallbackFilterIterator\n\n### Опис\n\n```methodsynopsis\npublic RecursiveCallbackFilterIterator::getChildren(): RecursiveCallbackFilterIterator\n```\n\nВибирає дочірні елементи внутрішнього ітератора, які підходять під фільтрові умови.\n\nПерш ніж викликати метод, необхідно впевнитись, що внутрішній ітератор містить дочірні елементи. Зробити це можна за допомогою методу [RecursiveCallbackFilterIterator::hasChildren()](recursivecallbackfilteriterator.haschildren.md)\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає об'єкт [RecursiveCallbackFilterIterator](class.recursivecallbackfilteriterator.md)містить дочірні елементи внутрішнього ітератора.\n\n### Дивіться також\n\n-   [Приклади використання RecursiveCallbackFilterIterator](class.recursivecallbackfilteriterator.md#recursivecallbackfilteriterator.examples)\n-   [RecursiveCallbackFilterIterator::\\_\\_construct()](recursivecallbackfilteriterator.construct.md) \\- Створює об'єкт класу RecursiveCallbackFilterIterator на основі об'єкта RecursiveIterator\n-   [RecursiveCallbackFilteriterator::hasChildren()](recursivecallbackfilteriterator.haschildren.md) \\- Перевіряє, чи містить поточний елемент внутрішнього ітератора дочірні елементи\n","title":"RecursiveCallbackFilterIterator::getChildren","contentType":2,"navigation":[{"recursivecallbackfilteriterator.construct.md":"« RecursiveCallbackFilterIterator::\\_\\_construct"},{"recursivecallbackfilteriterator.haschildren.md":"RecursiveCallbackFilterIterator::hasChildren »"},{"index.md":"PHP Manual"},{"class.recursivecallbackfilteriterator.md":"RecursiveCallbackFilterIterator"}]}},"__N_SSG":true}