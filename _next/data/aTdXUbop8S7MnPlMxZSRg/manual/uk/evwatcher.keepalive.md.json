{"pageProps":{"page":{"slug":"evwatcher.keepalive.md","content":"# EvWatcher::keepalive\n\n(PECL ev >= 0.2.0)\n\nEvWatcher::keepalive — Налаштовує, чи повертатиметься цикл\n\n### Опис\n\n```methodsynopsis\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\n```\n\nНалаштовує, чи повертатиметься цикл. Якщо `value`поддержания установлено\\*\\*`false`\\*\\*, спостерігач не перешкоджатиме поверненню [Ev::run()](ev.run.md) [EvLoop::run()](evloop.run.md)навіть якщо спостерігач активний.\n\nНаблюдатели по умолчанию имеют`value`поддержания\\*\\*`true`\\*\\*\n\nОчистка статуса поддержания полезна при возврате из[Ev::run()](ev.run.md) [EvLoop::run()](evloop.run.md) лише тому, що спостерігач небажаний. Це може бути працюючий спостерігач UDP-сокету або близько того.\n\n### Список параметрів\n\n`value`\n\nЯкщо `value`поддержания установлено\\*\\*`false`\\*\\*, спостерігач не перешкоджатиме поверненню [Ev::run()](ev.run.md) [EvLoop::run()](evloop.run.md)навіть якщо спостерігач активний.\n\n### Значення, що повертаються\n\nПовертає попередній стан.\n\n### Приклади\n\n**Приклад #1 Реєструємо спостерігач вводу-виводу для будь-якого UDP-сокету, але не перешкоджаємо запуску циклу подій тільки через цей спостерігач.**\n\n```php\n<?php\n$udp_socket = ...\n$udp_watcher = new EvIo($udp_socket, Ev::READ, function () { /* ... */ });\n$udp_watcher->keepalive(FALSE);\n?>\n```\n","title":"EvWatcher::keepalive","contentType":2,"navigation":[{"evwatcher.invoke.md":"« EvWatcher::invoke"},{"evwatcher.setcallback.md":"EvWatcher::setCallback »"},{"index.md":"PHP Manual"},{"class.evwatcher.md":"EvWatcher"}]}},"__N_SSG":true}