{"pageProps":{"page":{"slug":"class.cachingiterator.md","content":"# Клас CachingIterator\n\n(PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nЦей об'єкт підтримує кешування ітерації над іншим ітератором.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class CachingIterator\n    \n\n    \n     extends\n      IteratorIterator\n    \n\n    \n     implements\n      ArrayAccess,\n\n     Countable,\n\n     Stringable {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      CALL_TOSTRING;\n\n    public\n     const\n     int\n      CATCH_GET_CHILD;\n\n    public\n     const\n     int\n      TOSTRING_USE_KEY;\n\n    public\n     const\n     int\n      TOSTRING_USE_CURRENT;\n\n    public\n     const\n     int\n      TOSTRING_USE_INNER;\n\n    public\n     const\n     int\n      FULL_CACHE;\n\n\n    /* Методы */\n    \n   public __construct(Iterator $iterator, int $flags = CachingIterator::CALL_TOSTRING)\n\n    public count(): int\npublic current(): mixed\npublic getCache(): array\npublic getFlags(): void\npublic hasNext(): bool\npublic key(): scalar\npublic next(): void\npublic offsetExists(string $key): bool\npublic offsetGet(string $key): mixed\npublic offsetSet(string $key, mixed $value): void\npublic offsetUnset(string $key): void\npublic rewind(): void\npublic setFlags(int $flags): void\npublic __toString(): string\npublic valid(): bool\n\n\n    /* Наследуемые методы */\n    public IteratorIterator::current(): mixed\npublic IteratorIterator::getInnerIterator(): ?Iterator\npublic IteratorIterator::key(): mixed\npublic IteratorIterator::next(): void\npublic IteratorIterator::rewind(): void\npublic IteratorIterator::valid(): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`CachingIterator::CALL_TOSTRING`**\n\nПеретворює кожен елемент на рядок.\n\n**`CachingIterator::CATCH_GET_CHILD`**\n\nНе викидати виключення під час доступу до дочірніх елементів.\n\n**`CachingIterator::TOSTRING_USE_KEY`**\n\nВикористати [ключ](cachingiterator.key.md)при преобразовании в строку.\n\n**`CachingIterator::TOSTRING_USE_CURRENT`**\n\nВикористати [поточний елемент](cachingiterator.current.md)при преобразовании в строку.\n\n**`CachingIterator::TOSTRING_USE_INNER`**\n\nВикористати [внутрішній ітератор](iteratoriterator.getinneriterator.md)при преобразовании в строку.\n\n**`CachingIterator::FULL_CACHE`**\n\nКешування всієї прочитаної інформації.\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Класс**CachingIterator** тепер реалізує інтерфейс [Stringable](class.stringable.md) |\n\n## Зміст\n\n-   [CachingIterator::\\_\\_construct](cachingiterator.construct.md)— Створює новий об'єкт CachingIterator для ітератора\n-   [CachingIterator::count](cachingiterator.count.md)— Повертає кількість елементів в ітераторі\n-   [CachingIterator::current](cachingiterator.current.md)— Повертає поточний елемент\n-   [CachingIterator::getCache](cachingiterator.getcache.md)— Отримання вмісту кешу\n-   [CachingIterator::getFlags](cachingiterator.getflags.md)— Отримує прапори, що використовуються.\n-   [CachingIterator::hasNext](cachingiterator.hasnext.md)— Перевіряє, чи внутрішній ітератор має допустимий наступний елемент\n-   [CachingIterator::key](cachingiterator.key.md)— Повертає ключ до поточного елемента\n-   [CachingIterator::next](cachingiterator.next.md)— Переміщує ітератор до наступного елемента\n-   [CachingIterator::offsetExists](cachingiterator.offsetexists.md)— Призначення offsetExists\n-   [CachingIterator::offsetGet](cachingiterator.offsetget.md) \\- Призначення offsetGet\n-   [CachingIterator::offsetSet](cachingiterator.offsetset.md) \\- Призначення offsetSet\n-   [CachingIterator::offsetUnset](cachingiterator.offsetunset.md) \\- Призначення offsetUnset\n-   [CachingIterator::rewind](cachingiterator.rewind.md)— Повертає ітератор на початок\n-   [CachingIterator::setFlags](cachingiterator.setflags.md)— Встановлює прапори для об'єкта CachingIterator\n-   [CachingIterator::\\_\\_function toString() { \\[native code\\] }](cachingiterator.tostring.md)— Повертає строкове представлення поточного елемента\n-   [CachingIterator::valid](cachingiterator.valid.md)— Перевіряє, чи поточний елемент є допустимим\n","title":"Клас CachingIterator","contentType":2,"navigation":[{"arrayiterator.valid.md":"« ArrayIterator::valid"},{"cachingiterator.construct.md":"CachingIterator::\\_\\_construct »"},{"index.md":"PHP Manual"},{"spl.iterators.md":"Ітератори"}]}},"__N_SSG":true}