{"pageProps":{"page":{"slug":"function.mb-decode-numericentity.md","content":"# mb\\_decode\\_numericentity\n\n(PHP 4 >= 4.0.6, PHP 5, PHP 7, PHP 8)\n\nmb\\_decode\\_numericentity — Декодує посилання на числовий рядок HTML символ\n\n### Опис\n\n```methodsynopsis\nmb_decode_numericentity(string $string, array $map, ?string $encoding = null): string\n```\n\nПеретворює рядок чисел `string` (string) у заданому блоці символ.\n\n### Список параметрів\n\n`string`\n\nРядок (string) для декодування.\n\n`map`\n\nПараметр`map` - Масив (array), який задає область коду для перетворення.\n\n`encoding`\n\nПараметр`encoding` - Це кодування символів. Якщо він опущений або дорівнює **`null`**, для нього буде встановлено внутрішнє кодування символів.\n\n`is_hex`\n\nПараметр оголошено застарілим.\n\n### Значення, що повертаються\n\nПовертає перетворений рядок (string).\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер параметр `encoding` може набувати значення **`null`** |\n\n### Приклади\n\n**Приклад #1 Приклад использования параметра`map`**\n\n```php\n<?php\n$convmap = array (\n   int start_code1, int end_code1, int offset1, int mask1,\n   int start_code2, int end_code2, int offset2, int mask2,\n   ........\n   int start_codeN, int end_codeN, int offsetN, int maskN );\n// Задайте значения Юникода для start_codeN и end_codeN\n// Добавьте к значению offsetN и сложите побитово с maskN,\n// затем преобразуйте результат в число.\n?>\n```\n\n**Приклад #2 Приклад екранування рядка JavaScript через параметр `map`**\n\n```php\n<?php\nfunction escape_javascript_string($str) {\n  $map = [\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,0,0, // 49\n          0,0,0,0,0,0,0,0,1,1,\n          1,1,1,1,1,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,1,1,1,1,1,1,0,0,0, // 99\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, // 149\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, // 199\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, // 249\n          1,1,1,1,1,1,1, // 255\n          ];\n  // Кодировка символа UTF-8\n  $mblen = mb_strlen($str, 'UTF-8');\n  $utf32 = bin2hex(mb_convert_encoding($str, 'UTF-32', 'UTF-8'));\n  for ($i=0, $encoded=''; $i < $mblen; $i++) {\n      $u = substr($utf32, $i*8, 8);\n      $v = base_convert($u, 16, 10);\n      if ($v < 256 && $map[$v]) {\n        $encoded .= '\\\\x'.substr($u, 6,2);\n      } else if ($v == 2028) {\n        $encoded .= '\\\\u2028';\n      } else if ($v == 2029) {\n        $encoded .= '\\\\u2029';\n      } else {\n        $encoded .= mb_convert_encoding(hex2bin($u), 'UTF-8', 'UTF-32');\n      }\n   }\n   return $encoded;\n}\n\n// Данные для теста\n$convmap = [ 0x0, 0xffff, 0, 0xffff ];\n$msg = '';\nfor ($i=0; $i < 1000; $i++) {\n  // Функция chr() не может сгенерировать корректный символ UTF-8 больший, чем 128. Используем функцию mb_decode_numericentity().\n  $msg .= mb_decode_numericentity('&#'.$i.';', $convmap, 'UTF-8');\n}\n\n// var_dump($msg);\nvar_dump(escape_javascript_string($msg));\n```\n\n### Дивіться також\n\n-   [mb\\_encode\\_numericentity()](function.mb-encode-numericentity.md) \\- Кодує символ у числове HTML-посилання\n","title":"mb\\_decode\\_numericentity","contentType":2,"navigation":[{"function.mb-decode-mimeheader.md":"« mb\\_decode\\_mimeheader"},{"function.mb-detect-encoding.md":"mb\\_detect\\_encoding »"},{"index.md":"PHP Manual"},{"ref.mbstring.md":"Функції для роботи з багатобайтовими рядками"}]}},"__N_SSG":true}