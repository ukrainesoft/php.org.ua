{"pageProps":{"page":{"slug":"quickhashstringinthash.loadfromfile.md","content":"# QuickHashStringIntHash::loadFromFile\n\n(No version information available, might only be in Git)\n\nQuickHashStringIntHash::loadFromFile — Фабричний метод створює хеш із файлу\n\n### Опис\n\n```methodsynopsis\npublic static QuickHashStringIntHash::loadFromFile(string $filename, int $size = 0, int $options = 0): QuickHashStringIntHash\n```\n\nЦей фабричний метод створює новий хеш із файлу визначення на диску. Формат файлу складається із сигнатури `'QH\\0x21\\0'`кількості елементів у вигляді 32-бітного цілого числа зі знаком у системному порядку байтів, 32-бітного цілого числа без знака, що містить кількість даних елемента в символах. Дані цього елемента містять усі рядки. Далі слідує інше32-бітове ціле число зі знаком, що містить кількість списків. Після заголовка та рядків слідують елементи. Вони впорядковані за списком, тому ключі не потрібно хешувати, щоб відновити хеш. Для кожного списку зберігається наступна інформація (усі як 32-бітові цілі числа): індекс списку, кількість елементів у цьому списку, а потім парами по два 32-бітові цілі числа без знака - елементи, де перший - це індекс у рядковому списку, що містить ключі, а другий – значення. Прикладом може бути:\n\n**Приклад #1 Формат файлу QuickHash StringIntHash**\n\n```\n00000000  51 48 21 00 02 00 00 00  09 00 00 00 40 00 00 00  |QH!.........@...|\n00000010  4f 4e 45 00 4e 49 4e 45  00 07 00 00 00 01 00 00  |ONE.NINE........|\n00000020  00 00 00 00 00 01 00 00  00 2f 00 00 00 01 00 00  |........./......|\n00000030  00 04 00 00 00 03 00 00  00                       |.........|\n00000039\n```\n\n**Приклад #2 Формат файлу QuickHash IntHash**\n\n```\nheader signature ('QH'; key type: 2; value type: 1; filler: \\0x00)\n00000000  51 48 21 00\n\nnumber of elements:\n00000004  02 00 00 00\n\nlength of string values (9 characters):\n00000008  09 00 00 00\n\nnumber of hash bucket lists (this is configured for hashes as argument to the\nconstructor normally, 64 in this case):\n0000000C  40 00 00 00\n\nstring values:\n00000010  4f 4e 45 00 4e 49 4e 45  00\n\nbucket lists:\n  bucket list 1 (with key 7, and 1 element):\n    header:\n    07 00 00 00 01 00 00 00\n    elements (key index: 0 ('ONE'), value = 0):\n    00 00 00 00 01 00 00 00\n  bucket list 2 (with key 0x2f, and 1 element):\n    header:\n    2f 00 00 00 01 00 00 00\n    elements (key index: 4 ('NINE'), value = 3):\n    04 00 00 00 03 00 00 00\n```\n\n### Список параметрів\n\n`filename`\n\nІм'я файлу, з якого потрібно рахувати хеш.\n\n`size`\n\nКількість списків, які потрібно налаштувати. Передане число буде автоматично округлено до наступного ступеня 2. Воно також автоматично обмежується від `4`до`4194304`\n\n`options`\n\nТі самі параметри, які приймає конструктор класу; за винятком того, що ігнорується параметр `size`. Розмір зчитується з формату файлу (на відміну класів [QuickHashIntHash](class.quickhashinthash.md) і [QuickHashIntStringHash](class.quickhashintstringhash.md)де він автоматично обчислюється з кількості записів у хеші).\n\n### Значення, що повертаються\n\nПовертає новий об'єкт [QuickHashStringIntHash](class.quickhashstringinthash.md)\n\n### Приклади\n\n**Приклад #3 Приклад використання** QuickHashStringIntHash::loadFromFile()\\*\\*\\*\\*\n\n```php\n<?php\n$file = dirname( __FILE__ ) . \"/simple.hash.string\";\n$hash = QuickHashStringIntHash::loadFromFile(\n    $file,\n    QuickHashStringIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    $i = 48712 + $key * 1631;\n    $k = base_convert( $i, 10, 36 );\n    echo $k, ' => ', $hash->get( $k ), \"\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n11l4 => 48712\n12uf => 50343\n143q => 51974\n15d1 => 53605\n16mc => 55236\n17vn => 56867\n194y => 58498\n1ae9 => 60129\n1bnk => 61760\n1cwv => 63391\n1e66 => 65022\n1ffh => 66653\n1gos => 68284\n1hy3 => 69915\n1j7e => 71546\n1kgp => 73177\n```\n","title":"QuickHashStringIntHash::loadFromFile","contentType":2,"navigation":[{"quickhashstringinthash.getsize.md":"« QuickHashStringIntHash::getSize"},{"quickhashstringinthash.loadfromstring.md":"QuickHashStringIntHash::loadFromString »"},{"index.md":"PHP Manual"},{"class.quickhashstringinthash.md":"QuickHashStringIntHash"}]}},"__N_SSG":true}