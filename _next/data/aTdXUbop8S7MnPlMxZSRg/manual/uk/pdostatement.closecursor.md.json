{"pageProps":{"page":{"slug":"pdostatement.closecursor.md","content":"# PDOStatement::closeCursor\n\n(PHP 5 >= 5.1.0, PHP 7, PHP 8, PECL pdo >= 0.9.0)\n\nPDOStatement::closeCursor — Закриває курсор, переводячи запит у стан готовності до повторного запуску\n\n### Опис\n\n```methodsynopsis\npublic PDOStatement::closeCursor(): bool\n```\n\n**PDOStatement::closeCursor()** звільняє з'єднання із сервером, даючи можливість запускати інші SQL-запити. Метод залишає запит у стані готовності до повторного запуску.\n\nЦей метод корисний при використанні драйверів баз даних, які не дозволяють запустити PDOStatement, доки попередній об'єкт PDOStatement не вибере всі дані з результуючого набору. Якщо це обмеження поширюється на драйвер, буде викликана помилка порушення послідовності запитів (out-of-sequence error).\n\n**PDOStatement::closeCursor()** може бути реалізований як додатковий метод конкретного драйвера (що дозволяє досягти максимальної ефективності роботи), або як внутрішній метод PDO, якщо такої функції в драйвері немає. Реалізація внутрішнього методу PDO семантично схожа з наведеною нижче:\n\n```php\n<?php\ndo {\n    while ($stmt->fetch())\n        ;\n    if (!$stmt->nextRowset())\n        break;\n} while (true);\n?>\n```\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Помилки\n\nВидає помилку рівня **`E_WARNING`**, якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_WARNING`**\n\nВикидає виняток [PDOException](class.pdoexception.md), якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_EXCEPTION`**\n\n### Приклади\n\n**Приклад #1 Приклад використання** PDOStatement::closeCursor()\\*\\*\\*\\*\n\nУ наведеному прикладі, об'єкт PDOStatement $stmt повертає кілька рядків, проте програма зчитує лише перший з них, залишаючи об'єкт PDOStatement в стані, коли є ще невибрані рядки. Щоб бути впевненим у тому, що програма буде працювати з усіма драйверами баз даних, автор додав виклик методу **PDOStatement::closeCursor()** об'єкта $stmt перед тим, як запустити інший запит PDOStatement $otherStmt.\n\n```php\n<?php\n/* Создание объекта PDOStatement */\n$stmt = $dbh->prepare('SELECT foo FROM bar');\n\n/* Создание другого объекта PDOStatement */\n$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');\n\n/* Выполнение первого запроса */\n$stmt->execute();\n\n/* Выборка только первой строки результирующего набора первого запроса */\n$stmt->fetch();\n\n/* Следующий вызов closeCursor() может быть обязательным для некоторых драйверов */\n$stmt->closeCursor();\n\n/* теперь можно запускать второй запрос */\n$otherStmt->execute();\n?>\n```\n\n### Дивіться також\n\n-   [PDOStatement::execute()](pdostatement.execute.md) \\- Запускає підготовлений запит на виконання\n","title":"PDOStatement::closeCursor","contentType":2,"navigation":[{"pdostatement.bindvalue.md":"« PDOStatement::bindValue"},{"pdostatement.columncount.md":"PDOStatement::columnCount »"},{"index.md":"PHP Manual"},{"class.pdostatement.md":"PDOStatement"}]}},"__N_SSG":true}