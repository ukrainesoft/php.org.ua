{"pageProps":{"page":{"slug":"eventhttp.setdefaultcallback.md","content":"# EventHttp::setDefaultCallback\n\n(PECL event >= 1.4.0-beta)\n\nEventHttp::setDefaultCallback — Встановлює стандартну callback-функцію для обробки запитів, які не перехоплюються конкретними callback-функціями\n\n### Опис\n\n```methodsynopsis\npublic\n   EventHttp::setDefaultCallback(\n    string\n     $cb\n   , \n    string\n     $arg\n    = ?): void\n```\n\nВстановлює callback-функцію за промовчанням для обробки запитів, які не перехоплюються конкретними callback-функціями\n\n### Список параметрів\n\n`cb`\n\nCallback-функция[callable](language.types.callable.md). Повинна відповідати наступному прототипу:\n\n```methodsynopsis\ncallback(\n       EventHttpRequest\n        $req\n        = NULL\n      , \n       mixed\n        $arg\n        = NULL\n      ): void\n```\n\n`req`\n\nОб'єкт [EventHttpRequest](class.eventhttprequest.md)\n\n`arg`\n\nДані користувача.\n\n`arg`\n\nКористувальницькі дані, що передаються в callback-функцію.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад використання** EventHttp::setDefaultCallback()\\*\\*\\*\\*\n\n```php\n<?php\n$base = new EventBase();\n$http = new EventHttp($base);\n\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif (!$http->bind(\"127.0.0.1\", 8088)) {\n    exit(\"bind(1) failed\\n\");\n};\n\n$http->setDefaultCallback(function($req) {\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n});\n\n$base->dispatch();\n?>\n```\n\n### Дивіться також\n\n-   [EventHttp::setCallback()](eventhttp.setcallback.md) \\- Встановлює callback-функцію для зазначеного URI\n","title":"EventHttp::setDefaultCallback","contentType":2,"navigation":[{"eventhttp.setcallback.md":"« EventHttp::setCallback"},{"eventhttp.setmaxbodysize.md":"EventHttp::setMaxBodySize »"},{"index.md":"PHP Manual"},{"class.eventhttp.md":"EventHttp"}]}},"__N_SSG":true}