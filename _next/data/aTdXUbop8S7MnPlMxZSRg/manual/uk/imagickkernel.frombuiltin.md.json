{"pageProps":{"page":{"slug":"imagickkernel.frombuiltin.md","content":"# ImagickKernel::fromBuiltIn\n\n(PECL imagick >= 3.3.0)\n\nImagickKernel::fromBuiltIn — Створює ядро ​​із вбудованого ядра\n\n### Опис\n\n```methodsynopsis\npublic static ImagickKernel::fromBuiltin(int $kernelType, string $kernelString): ImagickKernel\n```\n\nСтворює ядро ​​із вбудованого ядра. Дивіться приклади [http://www.imagemagick.org/Usage/morphology/#kernel](http://www.imagemagick.org/Usage/morphology/#kernel). . В даний час символи обертання не підтримуються. Приклад: $diamondKernel = ImagickKernel::fromBuiltIn(\\\\Imagick::KERNEL\\_DIAMOND, \"2\");\n\n### Список параметрів\n\n`kerneltype`\n\nТип ядра для сборки, наПриклад,\\\\Imagick::KERNEL\\_DIAMOND\n\n`kernelString`\n\nРядок, що описує параметри, наприклад, \"4,2.5\"\n\n### Значення, що повертаються\n\n### Приклади\n\n**Приклад #1 Приклад використання** ImagickKernel::fromBuiltin()\\*\\*\\*\\*\n\n```php\n<?php\n\n\nfunction renderKernel(ImagickKernel $imagickKernel) {\n    $matrix = $imagickKernel->getMatrix();\n\n    $imageMargin = 20;\n\n    $tileSize = 20;\n    $tileSpace = 4;\n    $shadowSigma = 4;\n    $shadowDropX = 20;\n    $shadowDropY = 0;\n\n    $radius = ($tileSize / 2) * 0.9;\n\n    $rows = count($matrix);\n    $columns = count($matrix[0]);\n\n    $imagickDraw = new \\ImagickDraw();\n\n    $imagickDraw->setFillColor('#afafaf');\n    $imagickDraw->setStrokeColor('none');\n\n    $imagickDraw->translate($imageMargin, $imageMargin);\n    $imagickDraw->push();\n\n    ksort($matrix);\n\n    foreach ($matrix as $row) {\n        ksort($row);\n        $imagickDraw->push();\n        foreach ($row as $cell) {\n            if ($cell !== false) {\n                $color = intval(255 * $cell);\n                $colorString = sprintf(\"rgb(%f, %f, %f)\", $color, $color, $color);\n                $imagickDraw->setFillColor($colorString);\n                $imagickDraw->rectangle(0, 0, $tileSize, $tileSize);\n            }\n            $imagickDraw->translate(($tileSize + $tileSpace), 0);\n        }\n        $imagickDraw->pop();\n        $imagickDraw->translate(0, ($tileSize + $tileSpace));\n    }\n\n    $imagickDraw->pop();\n\n    $width = ($columns * $tileSize) + (($columns - 1) * $tileSpace);\n    $height = ($rows * $tileSize) + (($rows - 1) * $tileSpace);\n\n    $imagickDraw->push();\n    $imagickDraw->translate($width/2 , $height/2);\n    $imagickDraw->setFillColor('rgba(0, 0, 0, 0)');\n    $imagickDraw->setStrokeColor('white');\n    $imagickDraw->circle(0, 0, $radius - 1, 0);\n    $imagickDraw->setStrokeColor('black');\n    $imagickDraw->circle(0, 0, $radius, 0);\n    $imagickDraw->pop();\n\n    $canvasWidth = $width + (2 * $imageMargin);\n    $canvasHeight = $height + (2 * $imageMargin);\n\n    $kernel = new \\Imagick();\n    $kernel->newPseudoImage(\n        $canvasWidth,\n        $canvasHeight,\n        'canvas:none'\n    );\n\n    $kernel->setImageFormat('png');\n    $kernel->drawImage($imagickDraw);\n\n    /* создание тени на собственном слое */\n    $canvas = $kernel->clone();\n    $canvas->setImageBackgroundColor(new \\ImagickPixel('rgb(0, 0, 0)'));\n    $canvas->shadowImage(100, $shadowSigma, $shadowDropX, $shadowDropY);\n\n    $canvas->setImagePage($canvasWidth, $canvasHeight, -5, -5);\n    $canvas->cropImage($canvasWidth, $canvasHeight, 0, 0);\n\n    /* накладывает исходный text_layer на shadow_layer */\n    $canvas->compositeImage($kernel, \\Imagick::COMPOSITE_OVER, 0, 0);\n    $canvas->setImageFormat('png');\n\n    return $canvas;\n}\n\n\nfunction createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {\n    $string = '';\n\n    if ($kernelFirstTerm != false && strlen(trim($kernelFirstTerm)) != 0) {\n        $string .= $kernelFirstTerm;\n\n        if ($kernelSecondTerm != false && strlen(trim($kernelSecondTerm)) != 0) {\n            $string .= ','.$kernelSecondTerm;\n            if ($kernelThirdTerm != false && strlen(trim($kernelThirdTerm)) != 0) {\n                $string .= ','.$kernelThirdTerm;\n            }\n        }\n    }\n\n    $kernel = ImagickKernel::fromBuiltIn(\n        $kernelType,\n        $string\n    );\n\n    return $kernel;\n}\n\nfunction fromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {\n    $diamondKernel = createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm);\n    $imagick = renderKernel($diamondKernel);\n\n    header(\"Content-Type: image/png\");\n    echo $imagick->getImageBlob();\n}\n\nfromBuiltin(\\Imagick::KERNEL_DIAMOND, 2, false, false);\n\n\n?>\n```\n","title":"ImagickKernel::fromBuiltIn","contentType":2,"navigation":[{"imagickkernel.addunitykernel.md":"« ImagickKernel::addUnityKernel"},{"imagickkernel.frommatrix.md":"ImagickKernel::fromMatrix »"},{"index.md":"PHP Manual"},{"class.imagickkernel.md":"ImagickKernel"}]}},"__N_SSG":true}