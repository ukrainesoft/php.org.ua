{"pageProps":{"page":{"slug":"domdocument.createelement.md","content":"# DOMDocument::createElement\n\n(PHP 5, PHP 7, PHP 8)\n\nDOMDocument::createElement — Створює новий вузол елемента\n\n### Опис\n\n```methodsynopsis\npublic DOMDocument::createElement(string $localName, string $value = \"\"): DOMElement|false\n```\n\nЦя функція створює екземпляр класу [DOMElement](class.domelement.md). Цей вузол не відображатиметься в документі, доки він не буде вставлений, наприклад, функцією [DOMNode::appendChild()](domnode.appendchild.md)\n\n### Список параметрів\n\n`localName`\n\nІм'я тег елемент.\n\n`value`\n\nЗначення елемента. За промовчанням буде створено порожній елемент. Значення також може бути встановлене пізніше шляхом присвоювання при прямому зверненні до властивості [DOMElement::$nodeValue](class.domnode.md#domnode.props.nodevalue)\n\nЗначення буде встановлено дослівно, крім символів < і >, які будуть екрановані. Зверніть увагу, що символ & потрібно екранувати самому, інакше він розглядатиметься як початок посилання на суть. Символ кавчок також не буде екранований.\n\n### Значення, що повертаються\n\nПовертає новий об'єкт класу [DOMElement](class.domelement.md)или\\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Помилки\n\n**`DOM_INVALID_CHARACTER_ERR`**\n\nВиникає, якщо параметр `localName` містить неприпустимі символи.\n\n### Приклади\n\n**Приклад #1 Створення нового елемента та вставка його як кореневий**\n\n```php\n<?php\n\n$dom = new DOMDocument('1.0', 'utf-8');\n\n$element = $dom->createElement('test', 'Это корневой элемент!');\n\n// Вставляем новый элемент как корень (потомок документа)\n$dom->appendChild($element);\n\necho $dom->saveXML();\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>Это корневой элемент!</test>\n```\n\n**Приклад #2 Надсилання тексту, що містить неекранований & в `value`**\n\n```php\n<?php\n$dom = new DOMDocument('1.0', 'utf-8');\n$element = $dom->createElement('foo', 'я & ты');\n$dom->appendChild($element);\necho $dom->saveXML();\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nWarning: DOMDocument::createElement(): unterminated entity reference             you in /in/BjTCg on line 4\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<foo/>\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Значение`value` *не* буде екрановано. Використовуйте функцію [DOMDocument::createTextNode()](domdocument.createtextnode.md) для створення текстового вузла з *підтримкою екранування*\n\n### Дивіться також\n\n-   [DOMNode::appendChild()](domnode.appendchild.md) \\- Додає новий дочірній вузол до кінця списку нащадків\n-   [DOMDocument::createAttribute()](domdocument.createattribute.md) \\- Створює новий атрибут\n-   [DOMDocument::createAttributeNS()](domdocument.createattributens.md) \\- Створює новий атрибут вузла з відповідним простором імен\n-   [DOMDocument::createCDATASection()](domdocument.createcdatasection.md) \\- Створює новий вузол cdata\n-   [DOMDocument::createComment()](domdocument.createcomment.md) \\- Створити новий вузол коментаря\n-   [DOMDocument::createDocumentFragment()](domdocument.createdocumentfragment.md) \\- Створює новий фрагмент документа\n-   [DOMDocument::createElementNS()](domdocument.createelementns.md) \\- Створити новий вузол елемента з відповідним простором імен\n-   [DOMDocument::createEntityReference()](domdocument.createentityreference.md) \\- Створити новий вузол посилання на суть\n-   [DOMDocument::createProcessingInstruction()](domdocument.createprocessinginstruction.md) \\- Створити новий PI-вузол\n-   [DOMDocument::createTextNode()](domdocument.createtextnode.md) \\- Створити новий текстовий вузол\n","title":"DOMDocument::createElement","contentType":2,"navigation":[{"domdocument.createdocumentfragment.md":"« DOMDocument::createDocumentFragment"},{"domdocument.createelementns.md":"DOMDocument::createElementNS »"},{"index.md":"PHP Manual"},{"class.domdocument.md":"DOMDocument"}]}},"__N_SSG":true}