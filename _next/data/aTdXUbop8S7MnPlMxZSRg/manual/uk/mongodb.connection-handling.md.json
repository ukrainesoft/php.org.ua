{"pageProps":{"page":{"slug":"mongodb.connection-handling.md","content":"# Обробка з'єднання та сталість\n\n> **Зауваження**: На Unix, драйвер MongoDB чутливий до сценаріїв, які використовують системний виклик fork() без наступного exec(). Користувачам рекомендується не перевикористовувати екземпляр [MongoDB\\\\Driver\\\\Manager](class.mongodb-driver-manager.md)в дочернем процессе. child process.\n\n## Постійність підключення та топології (версія PHP починаючи з 1.2.0)\n\nУсі версії драйвера, починаючи з 1.2.0, зберігають клієнтський об'єкт. [» libmongoc](https://github.com/mongodb/mongo-c-driver) у робочому процесі PHP, що дозволяє йому повторно використовувати з'єднання з базою даних, стану аутентифікації *і* інформацію про топологію у кількох запитах.\n\nКоли викликається [MongoDB\\\\Driver\\\\Manager::\\_\\_construct()](mongodb-driver-manager.construct.md), З його аргументів створюється хеш (тобто рядок URI та параметри масиву). Драйвер спробує знайти раніше збережений клієнтський об'єкт [» libmongoc](https://github.com/mongodb/mongo-c-driver) для цього хеша. Якщо існуючий клієнт не може бути знайдений для хеша, буде створено новий клієнт та збережено для майбутнього використання. Цю поведінку можна вимкнути через параметр драйвера `\"disableClientPersistence\"`\n\nКожен клієнт містить свої власні підключення до бази даних та представлення топології сервера (наприклад, автономний, набір реплік, кластер сегментів). Зберігаючи клієнт між запитами PHP, драйвер може повторно використовувати встановлені підключення до бази даних та усувати потребу [» виявлення топології сервера](https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst)при каждом запросе.\n\nРозглянемо наступний приклад:\n\n```php\n<?php\n\n$managers = [\n    new MongoDB\\Driver\\Manager('mongodb://127.0.0.1'),\n    new MongoDB\\Driver\\Manager('mongodb://127.0.0.1'),\n    new MongoDB\\Driver\\Manager('mongodb://127.0.0.1:27017'),\n    new MongoDB\\Driver\\Manager('mongodb://rs1.example.com,rs2.example.com/', ['replicaSet' => 'myReplicaSet']),\n];\n\nforeach ($managers as $manager) {\n    $manager->executeCommand('test', new MongoDB\\Driver\\Command(['ping' => 1]));\n}\n\n?>\n```\n\nПерші два об'єкти Manager будуть використовувати один і той самий клієнт [» libmongoc](https://github.com/mongodb/mongo-c-driver)оскільки їх аргументи конструктора ідентичні. Третій та четвертий об'єкти будуть використовувати кожен свій клієнт. Усього буде створено три клієнти, і процес PHP, який виконує цей скрипт, відкриє два з'єднання з адресою `127.0.0.1` та одне з'єднання з кожною з адрес: `rs1.example.com`и`rs2.example.com`. Якщо драйвер виявляє додаткових членів набору реплік після виконання команд `hello`, також відкриває додаткові підключення до цих серверів.\n\nЯкщо цей процес знову виконає сценарій у другому запиті, ці три клієнти будуть використані повторно, а нових підключень встановлено не буде. Залежно від того, як давно було опрацьовано попередній запит, драйверу може знадобитися виконати додаткові команди. `hello`для обновления своего представления топологий.\n\n## Постійність сокетів (версії PHP до 1.2.0)\n\nВерсії драйвера PHP до 1.2.0 використовують PHP's Streams API для з'єднань з базою даних, використовуючи API модуля [» libmongoc](https://github.com/mongodb/mongo-c-driver) для визначення користувальницьких обробників для зв'язку із сокетами; однак новий клієнт libmongoc створюється для кожного екземпляра класу [MongoDB\\\\Driver\\\\Manager](class.mongodb-driver-manager.md). В результаті драйвер зберігає окремі з'єднання з базою даних, але не інформацію про стан автентифікації чи топології. Це означає, що драйвер повинен видавати команди на початку кожного запиту для автентифікації та [» виявлення топології сервера](https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst)\n\nЗ'єднання з базою даних зберігаються за допомогою хеша, отриманого з хоста, порту та рядка URI сервера, що використовується для побудови [MongoDB\\\\Driver\\\\Manager](class.mongodb-driver-manager.md). Параметри масиву конструктора не включені у цей хеш.\n\n> **Зауваження**: Версії драйвер >= 1.1.8 and < 1.2.0 не зберігають сокети для з'єднань SSL. Дивіться [» PHPC-720](https://jira.mongodb.org/browse/PHPC-720) для отримання додаткової інформації.\n\nНезважаючи на недоліки, пов'язані зі збереженням з'єднань SSL та інформацією про топологію, ця версія драйвера підтримує все [параметри контексту SSL](context.ssl.md), оскільки використовує PHP Streams API.\n","title":"Обробка з'єднання та сталість","contentType":2,"navigation":[{"mongodb.overview.md":"« Архітектура"},{"mongodb.persistence.md":"Постійні дані »"},{"index.md":"PHP Manual"},{"mongodb.architecture.md":"Архітектура та внутрішній пристрій драйвера"}]}},"__N_SSG":true}