{"pageProps":{"page":{"slug":"book.ds.md","content":"# Структури даних\n\n-   [Вступ](intro.ds.md)\n-   [Встановлення та налаштування](ds.setup.md)\n    -   [Вимоги](ds.requirements.md)\n    -   [Установка](ds.installation.md)\n-   [Обумовлені константи](ds.constants.md)\n-   [Приклади](ds.examples.md)\n-   [Ds\\\\Collection](class.ds-collection.md) \\- Інтерфейс Collection\n    -   [Ds\\\\Collection::clear](ds-collection.clear.md) \\- Видаляє всі значення\n    -   [Ds\\\\Collection::copy](ds-collection.copy.md)— Повертає копію колекції\n    -   [Ds\\\\Collection::isEmpty](ds-collection.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\Collection::toArray](ds-collection.toarray.md)— Перетворює колекцію на масив (array)\n-   [Ds\\\\Hashable](class.ds-hashable.md) \\- Інтерфейс Hashable\n    -   [Ds\\\\Hashable::equals](ds-hashable.equals.md)— Визначає, чи дорівнює поточний екземпляр переданому об'єкту\n    -   [Ds\\\\Hashable::hash](ds-hashable.hash.md)— Повертає скалярне значення для використання як значення хешу\n-   [Ds\\\\Sequence](class.ds-sequence.md) \\- Інтерфейс Sequence\n    -   [Ds\\\\Sequence::allocate](ds-sequence.allocate.md)— Виділення пам'яті під зазначену місткість\n    -   [Ds\\\\Sequence::apply](ds-sequence.apply.md)— Оновлення всіх значень застосуванням переданої callback-функції до них\n    -   [Ds\\\\Sequence::capacity](ds-sequence.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Sequence::contains](ds-sequence.contains.md)— Перевіряє, чи містяться в колекції задані значення\n    -   [Ds\\\\Sequence::filter](ds-sequence.filter.md)— Створює нову послідовність елементів, вибраних за допомогою заданої callback-функції\n    -   [Ds\\\\Sequence::find](ds-sequence.find.md) \\- Пошук індексу за значенням\n    -   [Ds\\\\Sequence::first](ds-sequence.first.md)— Повертає перший елемент колекції\n    -   [Ds\\\\Sequence::get](ds-sequence.get.md)— Повертає значення за індексом\n    -   [Ds\\\\Sequence::insert](ds-sequence.insert.md)— Вставляє значення за вказаним індексом\n    -   [Ds\\\\Sequence::join](ds-sequence.join.md) \\- Склеює всі значення в рядок\n    -   [Ds\\\\Sequence::last](ds-sequence.last.md)— Повертає останнє значення колекції\n    -   [Ds\\\\Sequence::map](ds-sequence.map.md)— Повертає результат застосування callback-функції до всіх значень колекції.\n    -   [Ds\\\\Sequence::merge](ds-sequence.merge.md)— Повертає результат додавання всіх заданих значень до колекції\n    -   [Ds\\\\Sequence::pop](ds-sequence.pop.md)— Видаляє та повертає останнє значення\n    -   [Ds\\\\Sequence::push](ds-sequence.push.md)— Додає значення до кінця послідовності\n    -   [Ds\\\\Sequence::reduce](ds-sequence.reduce.md) \\- Сплескує колекцію до одного значення використовуючи callback-функцію\n    -   [Ds\\\\Sequence::remove](ds-sequence.remove.md)— Видаляє та повертає значення за індексом\n    -   [Ds\\\\Sequence::reverse](ds-sequence.reverse.md)— Перевертає поточну колекцію\n    -   [Ds\\\\Sequence::reversed](ds-sequence.reversed.md)— Повертає перегорнуту копію колекції\n    -   [Ds\\\\Sequence::rotate](ds-sequence.rotate.md)— Перемотує послідовність на задану кількість значень\n    -   [Ds\\\\Sequence::set](ds-sequence.set.md)— Замінює значення за вказаним індексом\n    -   [Ds\\\\Sequence::shift](ds-sequence.shift.md)— Видаляє та повертає перше значення\n    -   [Ds\\\\Sequence::slice](ds-sequence.slice.md)— Повертає під-колекцію із заданого діапазону\n    -   [Ds\\\\Sequence::sort](ds-sequence.sort.md)— Сортує колекцію\n    -   [Ds\\\\Sequence::sorted](ds-sequence.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n    -   [Ds\\\\Sequence::sum](ds-sequence.sum.md)— Повертає суму всіх значень колекції\n    -   [Ds\\\\Sequence::unshift](ds-sequence.unshift.md)— Додає значення на початок послідовності\n-   [Ds\\\\Vector](class.ds-vector.md) \\- Клас Vector\n    -   [Ds\\\\Vector::allocate](ds-vector.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\Vector::apply](ds-vector.apply.md) \\- Оновлює всі значення, застосовуючи до них передану callback-функцію\n    -   [Ds\\\\Vector::capacity](ds-vector.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Vector::clear](ds-vector.clear.md) \\- Видаляє всі значення\n    -   [Ds\\\\Vector::\\_\\_construct](ds-vector.construct.md) \\- Створює новий екземпляр\n    -   [Ds\\\\Vector::contains](ds-vector.contains.md)— Перевіряє, чи міститься у векторі задані значення\n    -   [Ds\\\\Vector::copy](ds-vector.copy.md)— Повертає поверхневу копію вектора\n    -   [Ds\\\\Vector::count](ds-vector.count.md)— Повертає кількість елементів вектора\n    -   [Ds\\\\Vector::filter](ds-vector.filter.md)— Створює новий вектор із елементів, вибраних за допомогою заданої callback-функції\n    -   [Ds\\\\Vector::find](ds-vector.find.md) \\- Пошук індексу за значенням\n    -   [Ds\\\\Vector::first](ds-vector.first.md)— Повертає перший елемент вектора\n    -   [Ds\\\\Vector::get](ds-vector.get.md)— Повертає значення за індексом\n    -   [Ds\\\\Vector::insert](ds-vector.insert.md)— Вставляє значення за вказаним індексом\n    -   [Ds\\\\Vector::isEmpty](ds-vector.isempty.md)— Перевіряє, чи вектор порожній.\n    -   [Ds\\\\Vector::join](ds-vector.join.md) \\- Склеює всі значення в рядок\n    -   [Ds\\\\Vector::jsonSerialize](ds-vector.jsonserialize.md)— Повертає вектор у JSON-представництві\n    -   [Ds\\\\Vector::last](ds-vector.last.md)— Повертає останнє значення вектора\n    -   [Ds\\\\Vector::map](ds-vector.map.md)— Повертає результат застосування callback-функції до всіх значень вектора\n    -   [Ds\\\\Vector::merge](ds-vector.merge.md)— Повертає результат додавання всіх заданих значень у вектор.\n    -   [Ds\\\\Vector::pop](ds-vector.pop.md)— Видаляє та повертає останнє значення\n    -   [Ds\\\\Vector::push](ds-vector.push.md)— Додає значення до кінця вектора\n    -   [Ds\\\\Vector::reduce](ds-vector.reduce.md) \\- Зменшує вектор до одного значення, використовуючи callback-функцію\n    -   [Ds\\\\Vector::remove](ds-vector.remove.md)— Видаляє та повертає значення за індексом\n    -   [Ds\\\\Vector::reverse](ds-vector.reverse.md)— Перевертає поточний вектор\n    -   [Ds\\\\Vector::reversed](ds-vector.reversed.md)— Повертає перегорнуту копію вектора\n    -   [Ds\\\\Vector::rotate](ds-vector.rotate.md)— Перемотує вектор на задану кількість значень\n    -   [Ds\\\\Vector::set](ds-vector.set.md)— Замінює значення за вказаним індексом\n    -   [Ds\\\\Vector::shift](ds-vector.shift.md)— Видаляє та повертає перше значення\n    -   [Ds\\\\Vector::slice](ds-vector.slice.md)— Повертає підвектор із заданого діапазону\n    -   [Ds\\\\Vector::sort](ds-vector.sort.md)— Сортує вектор\n    -   [Ds\\\\Vector::sorted](ds-vector.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n    -   [Ds\\\\Vector::sum](ds-vector.sum.md)— Повертає суму всіх значень колекції\n    -   [Ds\\\\Vector::toArray](ds-vector.toarray.md)— Перетворює колекцію на масив (array)\n    -   [Ds\\\\Vector::unshift](ds-vector.unshift.md)— Додає значення на початок вектора\n-   [Ds\\\\Deque](class.ds-deque.md) \\- Клас Deque\n    -   [Ds\\\\Deque::allocate](ds-deque.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\Deque::apply](ds-deque.apply.md) \\- Оновлює всі значення, застосовуючи callback-функцію до кожного значення\n    -   [Ds\\\\Deque::capacity](ds-deque.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Deque::clear](ds-deque.clear.md)— Видаляє всі значення із двосторонньої черги\n    -   [Ds\\\\Deque::\\_\\_construct](ds-deque.construct.md) \\- Створює новий екземпляр\n    -   [Ds\\\\Deque::contains](ds-deque.contains.md)— Перевіряє, чи є у двосторонній черзі задані значення\n    -   [Ds\\\\Deque::copy](ds-deque.copy.md)— Повертає поверхневу копію колекції\n    -   [Ds\\\\Deque::count](ds-deque.count.md)— Повертає кількість елементів двосторонньої черги\n    -   [Ds\\\\Deque::filter](ds-deque.filter.md)— Створює нову двосторонню чергу з елементів, вибраних за допомогою заданої callback-функції\n    -   [Ds\\\\Deque::find](ds-deque.find.md) \\- Пошук індексу за значенням\n    -   [Ds\\\\Deque::first](ds-deque.first.md)— Повертає перший елемент двосторонньої черги\n    -   [Ds\\\\Deque::get](ds-deque.get.md)— Повертає значення за індексом\n    -   [Ds\\\\Deque::insert](ds-deque.insert.md)— Вставляє значення за вказаним індексом\n    -   [Ds\\\\Deque::isEmpty](ds-deque.isempty.md)— Перевіряє, чи порожня двостороння черга\n    -   [Ds\\\\Deque::join](ds-deque.join.md) \\- Склеює всі значення в рядок\n    -   [Ds\\\\Deque::jsonSerialize](ds-deque.jsonserialize.md)— Повертає колекцію в JSON-представництві\n    -   [Ds\\\\Deque::last](ds-deque.last.md)— Повертає останнє значення двосторонньої черги\n    -   [Ds\\\\Deque::map](ds-deque.map.md)— Повертає результат застосування callback-функції до всіх значень двосторонньої черги\n    -   [Ds\\\\Deque::merge](ds-deque.merge.md)— Повертає результат додавання всіх заданих значень у двосторонню чергу\n    -   [Ds\\\\Deque::pop](ds-deque.pop.md)— Видаляє та повертає останнє значення\n    -   [Ds\\\\Deque::push](ds-deque.push.md)— Додає значення наприкінці двосторонньої черги\n    -   [Ds\\\\Deque::reduce](ds-deque.reduce.md) \\- Зменшує колекцію до одного значення, використовуючи callback-функцію\n    -   [Ds\\\\Deque::remove](ds-deque.remove.md)— Видаляє та повертає значення за індексом\n    -   [Ds\\\\Deque::reverse](ds-deque.reverse.md)— Перевертає поточну двосторонню чергу\n    -   [Ds\\\\Deque::reversed](ds-deque.reversed.md)— Повертає перегорнуту копію двосторонньої черги\n    -   [Ds\\\\Deque::rotate](ds-deque.rotate.md)— Перемотує двосторонню чергу на задану кількість значень\n    -   [Ds\\\\Deque::set](ds-deque.set.md)— Замінює значення за вказаним індексом\n    -   [Ds\\\\Deque::shift](ds-deque.shift.md)— Видаляє та повертає перше значення\n    -   [Ds\\\\Deque::slice](ds-deque.slice.md)— Повертає почергово із заданого діапазону\n    -   [Ds\\\\Deque::sort](ds-deque.sort.md)— Сортує двосторонню чергу\n    -   [Ds\\\\Deque::sorted](ds-deque.sorted.md)— Повертає відсортовану за значенням копію двосторонньої черги\n    -   [Ds\\\\Deque::sum](ds-deque.sum.md)— Повертає суму всіх значень двосторонньої черги\n    -   [Ds\\\\Deque::toArray](ds-deque.toarray.md) \\- Перетворює двосторонню чергу на масив (array)\n    -   [Ds\\\\Deque::unshift](ds-deque.unshift.md)— Додає значення на початок двосторонньої черги\n-   [Ds\\\\Map](class.ds-map.md) \\- Клас Map\n    -   [Ds\\\\Map::allocate](ds-map.allocate.md)— Виділяє необхідну кількість пам'яті під потрібну місткість\n    -   [Ds\\\\Map::apply](ds-map.apply.md)— Оновлення всіх значень застосуванням переданої callback-функції до них\n    -   [Ds\\\\Map::capacity](ds-map.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Map::clear](ds-map.clear.md)— Видаляє всі значення з колекції\n    -   [Ds\\\\Map::\\_\\_construct](ds-map.construct.md) \\- Створює новий екземпляр\n    -   [Ds\\\\Map::copy](ds-map.copy.md)— Повертає поверхневу копію колекції\n    -   [Ds\\\\Map::count](ds-map.count.md)— Повертає кількість елементів колекції\n    -   [Ds\\\\Map::diff](ds-map.diff.md)— Створює нову колекцію пар із елементами, ключів яких немає в іншій колекції пар\n    -   [Ds\\\\Map::filter](ds-map.filter.md)— Створює нову колекцію пар із елементів, вибраних за допомогою заданої callback-функції\n    -   [Ds\\\\Map::first](ds-map.first.md)— Повертає перший елемент колекції\n    -   [Ds\\\\Map::get](ds-map.get.md)— Повертає значення за ключом\n    -   [Ds\\\\Map::hasKey](ds-map.haskey.md)— Перевіряє, чи колекція містить заданий ключ\n    -   [Ds\\\\Map::hasValue](ds-map.hasvalue.md)— Перевіряє, чи колекція містить задане значення\n    -   [Ds\\\\Map::intersect](ds-map.intersect.md)— Створює нову колекцію пар, створену перетином з іншою колекцією пар\n    -   [Ds\\\\Map::isEmpty](ds-map.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\Map::jsonSerialize](ds-map.jsonserialize.md)— Повертає колекцію в JSON-представництві\n    -   [Ds\\\\Map::keys](ds-map.keys.md)— Повертає набір ключів колекції\n    -   [Ds\\\\Map::ksort](ds-map.ksort.md)— Сортує поточну колекцію за ключами\n    -   [Ds\\\\Map::ksorted](ds-map.ksorted.md)— Повертає копію колекції, відсортованої за ключами\n    -   [Ds\\\\Map::last](ds-map.last.md)— Повертає останню пару колекції\n    -   [Ds\\\\Map::map](ds-map.map.md)— Повертає результат застосування callback-функції до всіх значень колекції.\n    -   [Ds\\\\Map::merge](ds-map.merge.md)— Повертає результат додавання всіх заданих елементів до колекції\n    -   [Ds\\\\Map::pairs](ds-map.pairs.md)— Повертає послідовність, яка містить усі пари колекції.\n    -   [Ds\\\\Map::put](ds-map.put.md)— Встановлення значення за заданим ключем\n    -   [Ds\\\\Map::putAll](ds-map.putall.md)— Зв'язує з колекцією всі пари ключ-значення з об'єкту класу traversable чи масиву\n    -   [Ds\\\\Map::reduce](ds-map.reduce.md) \\- Зменшує колекцію до одного значення, використовуючи callback-функцію\n    -   [Ds\\\\Map::remove](ds-map.remove.md)— Видаляє та повертає значення за ключом\n    -   [Ds\\\\Map::reverse](ds-map.reverse.md)— Перевертає поточну колекцію\n    -   [Ds\\\\Map::reversed](ds-map.reversed.md)— Повертає перегорнуту копію колекції\n    -   [Ds\\\\Map::skip](ds-map.skip.md)— Повертає пару за індексом позиції\n    -   [Ds\\\\Map::slice](ds-map.slice.md)— Повертає підмножину колекції із заданого діапазону\n    -   [Ds\\\\Map::sort](ds-map.sort.md)— Сортує колекцію за значеннями\n    -   [Ds\\\\Map::sorted](ds-map.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n    -   [Ds\\\\Map::sum](ds-map.sum.md)— Повертає суму всіх значень колекції\n    -   [Ds\\\\Map::toArray](ds-map.toarray.md)— Перетворює колекцію на масив (array)\n    -   [Ds\\\\Map::union](ds-map.union.md)— Створює нову колекцію пар із елементів двох колекцій\n    -   [Ds\\\\Map::values](ds-map.values.md)— Повертає послідовність значень колекції\n    -   [Ds\\\\Map::xor](ds-map.xor.md)— Створює нову колекцію пар із елементів, які є в одній із колекцій, але не в обох одночасно\n-   [Ds\\\\Pair](class.ds-pair.md) \\- Клас Pair\n    -   [Ds\\\\Pair::clear](ds-pair.clear.md) \\- Видаляє всі значення\n    -   [Ds\\\\Pair::\\_\\_construct](ds-pair.construct.md) \\- Створює екземпляр класу\n    -   [Ds\\\\Pair::copy](ds-pair.copy.md)— Повертає поверхневу копію пари\n    -   [Ds\\\\Pair::isEmpty](ds-pair.isempty.md)— Перевіряє, чи пара порожня.\n    -   [Ds\\\\Pair::jsonSerialize](ds-pair.jsonserialize.md)— Повертає пару у виставі JSON\n    -   [Ds\\\\Pair::toArray](ds-pair.toarray.md) \\- Перетворює пару в масив (array)\n-   [Ds\\\\Set](class.ds-set.md) \\- Клас Set\n    -   [Ds\\\\Set::add](ds-set.add.md)— Додає значення до набору\n    -   [Ds\\\\Set::allocate](ds-set.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\Set::capacity](ds-set.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Set::clear](ds-set.clear.md)— Видаляє всі значення з колекції\n    -   [Ds\\\\Set::\\_\\_construct](ds-set.construct.md) \\- Створює новий екземпляр класу\n    -   [Ds\\\\Set::contains](ds-set.contains.md)— Перевіряє, чи міститься в колекції задані значення\n    -   [Ds\\\\Set::copy](ds-set.copy.md)— Повертає поверхневу копію колекції\n    -   [Ds\\\\Set::count](ds-set.count.md)— Повертає кількість елементів колекції\n    -   [Ds\\\\Set::diff](ds-set.diff.md)— Створює новий набір із елементами, яких немає в іншому наборі\n    -   [Ds\\\\Set::filter](ds-set.filter.md)— Створює новий список із елементів, вибраних за допомогою заданої callback-функції\n    -   [Ds\\\\Set::first](ds-set.first.md)— Повертає перший елемент колекції\n    -   [Ds\\\\Set::get](ds-set.get.md)— Повертає значення за індексом\n    -   [Ds\\\\Set::intersect](ds-set.intersect.md)— Створює новий набір, створений перетином з іншим набором\n    -   [Ds\\\\Set::isEmpty](ds-set.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\Set::join](ds-set.join.md) \\- Склеює всі значення в рядок\n    -   [Ds\\\\Set::jsonSerialize](ds-set.jsonserialize.md)— Повертає колекцію в JSON-представництві\n    -   [Ds\\\\Set::last](ds-set.last.md)— Повертає останнє значення колекції\n    -   [Ds\\\\Set::merge](ds-set.merge.md)— Повертає результат додавання всіх заданих значень до набору\n    -   [Ds\\\\Set::reduce](ds-set.reduce.md) \\- Зменшує колекцію до одного значення, використовуючи callback-функцію\n    -   [Ds\\\\Set::remove](ds-set.remove.md)— Видаляє всі задані значення набору\n    -   [Ds\\\\Set::reverse](ds-set.reverse.md)— Перевертає поточну колекцію\n    -   [Ds\\\\Set::reversed](ds-set.reversed.md)— Повертає перегорнуту копію колекції\n    -   [Ds\\\\Set::slice](ds-set.slice.md)— Повертає піднабір із заданого діапазону\n    -   [Ds\\\\Set::sort](ds-set.sort.md)— Сортує колекцію\n    -   [Ds\\\\Set::sorted](ds-set.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n    -   [Ds\\\\Set::sum](ds-set.sum.md)— Повертає суму всіх значень колекції\n    -   [Ds\\\\Set::toArray](ds-set.toarray.md)— Перетворює колекцію на масив (array)\n    -   [Ds\\\\Set::union](ds-set.union.md)— Створює новий набір з елементів поточного та переданого наборів\n    -   [Ds\\\\Set::xor](ds-set.xor.md)— Створює новий набір із значень, які є в одному з наборів, але не в обох одночасно\n-   [Ds\\\\Stack](class.ds-stack.md) \\- Клас Stack\n    -   [Ds\\\\Stack::allocate](ds-stack.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\Stack::capacity](ds-stack.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Stack::clear](ds-stack.clear.md)— Видаляє всі значення з колекції\n    -   [Ds\\\\Stack::\\_\\_construct](ds-stack.construct.md) \\- Створює новий екземпляр класу\n    -   [Ds\\\\Stack::copy](ds-stack.copy.md)— Повертає поверхневу копію колекції\n    -   [Ds\\\\Stack::count](ds-stack.count.md)— Повертає кількість елементів колекції\n    -   [Ds\\\\Stack::isEmpty](ds-stack.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\Stack::jsonSerialize](ds-stack.jsonserialize.md)— Повертає колекцію в JSON-представництві\n    -   [Ds\\\\Stack::peek](ds-stack.peek.md)— Повертає значення з вершини стека\n    -   [Ds\\\\Stack::pop](ds-stack.pop.md)— Видаляє та повертає значення з вершини стека\n    -   [Ds\\\\Stack::push](ds-stack.push.md)— Додає значення у стек\n    -   [Ds\\\\Stack::toArray](ds-stack.toarray.md)— Перетворює колекцію на масив (array)\n-   [Ds\\\\Queue](class.ds-queue.md) \\- Клас Queue\n    -   [Ds\\\\Queue::allocate](ds-queue.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\Queue::capacity](ds-queue.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\Queue::clear](ds-queue.clear.md) \\- Видаляє всі значення\n    -   [Ds\\\\Queue::\\_\\_construct](ds-queue.construct.md) \\- Створює новий екземпляр\n    -   [Ds\\\\Queue::copy](ds-queue.copy.md)— Повертає поверхневу копію черги\n    -   [Ds\\\\Queue::count](ds-queue.count.md)— Повертає кількість елементів черги\n    -   [Ds\\\\Queue::isEmpty](ds-queue.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\Queue::jsonSerialize](ds-queue.jsonserialize.md)— Повертає колекцію в JSON-представництві\n    -   [Ds\\\\Queue::peek](ds-queue.peek.md)— Повертає значення з початку черги\n    -   [Ds\\\\Queue::pop](ds-queue.pop.md)— Видаляє та повертає значення з початку черги\n    -   [Ds\\\\Queue::push](ds-queue.push.md)— Додає значення у чергу\n    -   [Ds\\\\Queue::toArray](ds-queue.toarray.md)— Перетворює колекцію на масив (array)\n-   [Ds\\\\PriorityQueue](class.ds-priorityqueue.md) \\- Клас PriorityQueue\n    -   [Ds\\\\PriorityQueue::allocate](ds-priorityqueue.allocate.md)— Виділяє пам'ять під зазначену місткість\n    -   [Ds\\\\PriorityQueue::capacity](ds-priorityqueue.capacity.md)— Повертає поточну місткість\n    -   [Ds\\\\PriorityQueue::clear](ds-priorityqueue.clear.md) \\- Видаляє всі значення\n    -   [Ds\\\\PriorityQueue::\\_\\_construct](ds-priorityqueue.construct.md) \\- Створює новий екземпляр\n    -   [Ds\\\\PriorityQueue::copy](ds-priorityqueue.copy.md)— Повертає поверхневу копію черги\n    -   [Ds\\\\PriorityQueue::count](ds-priorityqueue.count.md)— Повертає кількість елементів у черзі\n    -   [Ds\\\\PriorityQueue::isEmpty](ds-priorityqueue.isempty.md)— Перевіряє, чи колекція порожня.\n    -   [Ds\\\\PriorityQueue::jsonSerialize](ds-priorityqueue.jsonserialize.md)— Повертає колекцію в JSON-виставу\n    -   [Ds\\\\PriorityQueue::peek](ds-priorityqueue.peek.md)— Повертає значення з початку черги\n    -   [Ds\\\\PriorityQueue::pop](ds-priorityqueue.pop.md)— Видаляє та повертає значення з найвищим пріоритетом\n    -   [Ds\\\\PriorityQueue::push](ds-priorityqueue.push.md)— Додає значення у чергу\n    -   [Ds\\\\PriorityQueue::toArray](ds-priorityqueue.toarray.md) \\- Перетворює чергу на масив (array)\n","title":"Структури даних","contentType":2,"navigation":[{"function.untaint.md":"« untaint"},{"intro.ds.md":"Вступ \""},{"index.md":"PHP Manual"},{"refs.basic.other.md":"Інші базові модулі"}]}},"__N_SSG":true}