{"pageProps":{"page":{"slug":"8.3.md","content":"# PHP 8.3 – велике оновлення PHP.\n\nВоно містить безліч нових можливостей, таких як явна типізація констант класів, глибоке клонування readonly-властивостей, а також покращення класу Randomizer. Як завжди, в ньому також покращена продуктивність, виправлені помилки та багато іншого.\n\n[Переходьте на PHP 8.3!](https://php.net/downloads)\n\n## Типізовані константи класів [RFC](https://wiki.php.net/rfc/typed_class_constants)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\ninterface I {\n    // Можна наївно вважати, що константа PHP завжди є рядком.\n    const PHP = 'PHP 8.2';\n}\n\nclass Foo implements I {\n    // Але реалізуючі класи можуть визначати його як масив.\n    const PHP = [];\n}\n```\n\nPHP 8.3\n\n```php\n<?php\n\ninterface I {\n    const string PHP = 'PHP 8.3';\n}\n\nclass Foo implements I {\n    const string PHP = [];\n}\n\n// Fatal error: Cannot use array as value for class constant\n// Foo::PHP of type string\n```\n\n## Динамічне отримання констант класу [RFC](https://wiki.php.net/rfc/dynamic_class_constant_fetch)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\nclass Foo {\n    const PHP = 'PHP 8.2';\n}\n\n$searchableConstant = 'PHP';\n\nvar_dump(constant(Foo::class . \"::{$searchableConstant}\"));\n```\n\nPHP 8.3\n\n```php\n<?php\n\nclass Foo {\n    const PHP = 'PHP 8.3';\n}\n\n$searchableConstant = 'PHP';\n\nvar_dump(Foo::{$searchableConstant});\n```\n\n## Новий атрибут `#[\\Override]` [RFC](https://wiki.php.net/rfc/marking_overriden_methods)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase {\n    protected $logFile;\n\n    protected function setUp(): void {\n        $this->logFile = fopen('/tmp/logfile', 'w');\n    }\n\n    protected function taerDown(): void {\n        fclose($this->logFile);\n        unlink('/tmp/logfile');\n    }\n}\n\n// Файл журналу ніколи не буде видалено, тому що\n// неправильно набрано назву методу (taerDown vs tearDown).\n```\n\nPHP 8.3\n\n```php\n<?php\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase {\n    protected $logFile;\n\n    protected function setUp(): void {\n        $this->logFile = fopen('/tmp/logfile', 'w');\n    }\n\n    #[\\Override]\n    protected function taerDown(): void {\n        fclose($this->logFile);\n        unlink('/tmp/logfile');\n    }\n}\n\n// Fatal error: MyTest::taerDown() has #[\\Override] attribute,\n// but no matching parent method exists\n```\n\nЯкщо додати метод атрибут `#[\\Override]`, то PHP переконається, що метод із таким самим ім'ям існує в батьківському класі або в реалізованому інтерфейсі. Додавання атрибуту дає зрозуміти, що перевизначення батьківського методу є навмисним, а також спрощує рефакторинг, оскільки видалення перевизначеного батьківського методу буде виявлено.\n\n## Глибоке клонування readonly-властивостей [RFC](https://wiki.php.net/rfc/readonly_amendments)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\nclass PHP {\n    public string $version = '8.2';\n}\n\nreadonly class Foo {\n    public function __construct(\n        public PHP $php\n    ) {}\n\n    public function __clone(): void {\n        $this->php = clone $this->php;\n    }\n}\n\n$instance = new Foo(new PHP());\n$cloned = clone $instance;\n\n// Fatal error: Cannot modify readonly property Foo::$php\n```\n\nPHP 8.3\n\n```php\n<?php\n\nclass PHP {\n    public string $version = '8.2';\n}\n\nreadonly class Foo {\n    public function __construct(\n        public PHP $php\n    ) {}\n\n    public function __clone(): void {\n        $this->php = clone $this->php;\n    }\n}\n\n$instance = new Foo(new PHP());\n$cloned = clone $instance;\n\n$cloned->php->version = '8.3';\n```\n\nВластивості, доступні лише для читання (`readonly`) тепер можуть бути змінені один раз за допомогою магічного методу `__clone` для забезпечення можливості глибокого клонування readonly-властивостей.\n\n## Нова функція `json_validate()` [RFC](https://wiki.php.net/rfc/json_validate) [Документація](/manual/uk/function.json-validate.md)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\nfunction json_validate(string $string): bool {\n    json_decode($string);\n\n    return json_last_error() === JSON_ERROR_NONE;\n}\n\nvar_dump(json_validate('{ \"test\": { \"foo\": \"bar\" } }')); // true\n```\n\nPHP 8.3\n\n```php\n<?php\nvar_dump(json_validate('{ \"test\": { \"foo\": \"bar\" } }')); // true\n```\n\nФункція `json_validate()` дозволяє перевірити, чи є рядок синтаксично коректним JSON, при цьому він більш ефективний, ніж функція `json_decode()`.\n\n## Новий метод `Randomizer::getBytesFromString()` [RFC](https://wiki.php.net/rfc/randomizer_additions#getbytesfromstring) [Документація](/manual/uk/random-randomizer.getbytesfromstring.md)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\n// Цю функцію потрібно було реалізувати вручну.\nfunction getBytesFromString(string $string, int $length) {\n    $stringLength = strlen($string);\n\n    $result = '';\n    for ($i = 0; $i < $length; $i++) {\n        // random_int не може використовувати seed для тестування, але вона безпечна.\n        $result .= $string[random_int(0, $stringLength - 1)];\n    }\n\n    return $result;\n}\n\n$randomDomain = sprintf(\n    \"%s.example.com\",\n    getBytesFromString(\n        'abcdefghijklmnopqrstuvwxyz0123456789',\n        16,\n    ),\n);\n\necho $randomDomain;\n```\n\nPHP 8.3\n\n```php\n<?php\n// A \\Random\\Engine може бути передана, щоб використовувати seed,\n// За замовчуванням використовується безпечний рушій.\n$randomizer = new \\Random\\Randomizer();\n\n$randomDomain = sprintf(\n    \"%s.example.com\",\n    $randomizer->getBytesFromString(\n        'abcdefghijklmnopqrstuvwxyz0123456789',\n        16,\n    ),\n);\n\necho $randomDomain;\n```\n\n[Модуль Random](/releases/8.2/ru.php#random_extension), Доданий в PHP 8.2, був доповнений новим методом генерації випадкових рядків, що складаються тільки з певних байтів. Цей метод дозволяє легко генерувати випадкові ідентифікатори, наприклад, домени імена і числові рядки довільної довжини.\n\n## Нові методи `Randomizer::getFloat()` і `Randomizer::nextFloat()` [RFC](https://wiki.php.net/rfc/randomizer_additions#getfloat) [Документація](/manual/uk/random-randomizer.getfloat.md)\n\nPHP < 8.3\n\n```php_no_run\n<?php\n\n// Повертає випадкове число з плаваючою комою між $min та $max, обидва значення включно.\nfunction getFloat(float $min, float $max) {\n    // Цей алгоритм є упередженим до конкретних вхідних даних і може\n    // повернути значення за межами заданого діапазону. Це неможливо\n    // обійти у користувацькому середовищі.\n    $offset = random_int(0, PHP_INT_MAX) / PHP_INT_MAX;\n\n    return $offset * ($max - $min) + $min;\n}\n\n$temperature = getFloat(-89.2, 56.7);\n\n$chanceForTrue = 0.1;\n// getFloat(0, 1) може повернути верхню межу, тобто 1,\n// вносячи невелику похибку.\n$myBoolean = getFloat(0, 1) < $chanceForTrue;\n```\n\nPHP 8.3\n\n```php\n<?php\n\n$randomizer = new \\Random\\Randomizer();\n\n$temperature = $randomizer->getFloat(\n    -89.2,\n    56.7,\n    \\Random\\IntervalBoundary::ClosedClosed,\n);\n\n$chanceForTrue = 0.1;\n// Randomizer::nextFloat() еквівалентно до\n// Randomizer::getFloat(0, 1, \\Random\\IntervalBoundary::ClosedOpen).\n// Верхня межа, тобто 1, не повертається.\n$myBoolean = $randomizer->nextFloat() < $chanceForTrue;\n```\n\nЧерез обмежену точність і неявне округлення чисел з плаваючою точкою генерація незміщеного числа, що лежить у певному інтервалі, є нетривіальним завданням, а рішення користувача можуть давати зміщені результати або числа, що виходять за межі необхідного діапазону.\n\nКлас Randomizer був розширений двома методами, що дозволяють генерувати випадкові числа з плаваючою точкою незміщеним чином. Метод `Randomizer::getFloat()` використовує алгоритм γ-секції, який був опублікований в [Drawing Random Floating-Point Numbers from an Interval. Frédéric Goualard, ACM Trans. Model. Comput. Simul., 32:3, 2022.](https://doi.org/10.1145/3503512)\n\n## Лінтер командного рядка підтримує декілька файлів [PR](https://github.com/php/php-src/issues/10024) [Документація](/manual/uk/features.commandline.options.md)\n\nPHP < 8.3\n\n```sh\nphp -l foo.php bar.php\nNo syntax errors detected in foo.php\n```\n\nPHP 8.3\n\n```sh\nphp -l foo.php bar.php\nNo syntax errors detected in foo.php\nNo syntax errors detected in bar.php\n```\n\nЛінтер командного рядка тепер приймає кілька імен для перевірки файлів.\n\n## Нові класи, інтерфейси та функції\n\n-   Нові методи [`DOMElement::getAttributeNames()`](/manual/uk/domelement.getattributenames.md), [`DOMElement::insertAdjacentElement()`](/manual/uk/domelement.insertadjacentelement.md), [`DOMElement::insertAdjacentText()`](/manual/uk/domelement.insertadjacenttext.md), [`DOMElement::toggleAttribute()`](/manual/uk/domelement.toggleattribute.md), [`DOMNode::contains()`](/manual/uk/domnode.contains.md), [`DOMNode::getRootNode()`](/manual/uk/domnode.getrootnode.md), [`DOMNode::isEqualNode()`](/manual/uk/domnode.isequalnode.md), `DOMNameSpaceNode::contains()` і [`DOMParentNode::replaceChildren()`](/manual/uk/domparentnode.replacechildren.md).\n-   Нові методи [`IntlCalendar::setDate()`](/manual/uk/intlcalendar.setdate.md), [`IntlCalendar::setDateTime()`](/manual/uk/intlcalendar.setdatetime.md), [`IntlGregorianCalendar::createFromDate()`](/manual/uk/intlgregoriancalendar.createfromdate.md) і [`IntlGregorianCalendar::createFromDateTime()`](/manual/uk/intlgregoriancalendar.createfromdatetime.md).\n-   Нові функції `ldap_connect_wallet()` і `ldap_exop_sync()`.\n-   Нова функція [`mb_str_pad()`](/manual/uk/function.mb-str-pad.md).\n-   Нові функції [`posix_sysconf()`](/manual/uk/function.posix-sysconf.md), [`posix_pathconf()`](/manual/uk/function.posix-pathconf.md), [`posix_fpathconf()`](/manual/uk/function.posix-fpathconf.md) і [`posix_eaccess()`](/manual/uk/function.posix-eaccess.md).\n-   Новий метод [`ReflectionMethod::createFromMethodName()`](/manual/uk/reflectionmethod.createfrommethodname.md).\n-   Нова функція [`socket_atmark()`](/manual/uk/function.socket-atmark.md).\n-   Нові функції [`str_increment()`](/manual/uk/function.str-increment.md), [`str_decrement()`](/manual/uk/function.str-decrement.md) і [`stream_context_set_options()`](/manual/uk/function.stream-context-set-options.md).\n-   Новий метод [`ZipArchive::getArchiveFlag()`](/manual/uk/ziparchive.getarchiveflag.md).\n-   Підтримка генерації EC-ключів з EC-параметрами в модулі OpenSSL.\n-   Новий параметр INI [`zend.max_allowed_stack_size`](/manual/uk/migration83.other-changes.php#migration83.other-changes.ini) для встановлення максимально допустимого розміру стека.\n-   php.ini тепер підтримує синтаксис резервних значень/значень за промовчанням.\n-   Анонімні класи тепер доступні лише читання.\n\n## Застаріла функціональність та зміни у зворотній сумісності\n\n-   [Більше відповідні винятки в модулі Date/Time](https://wiki.php.net/rfc/datetime-exceptions).\n-   Присвоєння негативного індексу `n` порожньому масиву тепер гарантує, що наступним індексом буде `n + 1`, а не `0`.\n-   Зміни до функцій `range()`.\n-   Зміни у повторному оголошенні статичних властивостей у трейтах.\n-   Константа `U_MULTIPLE_DECIMAL_SEPERATORS` оголошено застарілою, замість неї рекомендується використовувати константу `U_MULTIPLE_DECIMAL_SEPARATORS`.\n-   Варіант Mt19937 [`MT_RAND_PHP`](/manual/uk/random.constants.php#constant.mt-rand-php) оголошено застарілим.\n-   [`ReflectionClass::getStaticProperties()`](/manual/uk/reflectionclass.getstaticproperties.md) тепер не повертає значення `null`.\n-   Параметри INI [`assert.active`](/manual/uk/info.configuration.php#ini.assert.active), [`assert.bail`](/manual/uk/info.configuration.php#ini.assert.bail), [`assert.callback`](/manual/uk/info.configuration.php#ini.assert.callback), [`assert.exception`](/manual/uk/info.configuration.php#ini.assert.exception) і [`assert.warning`](/manual/uk/info.configuration.php#ini.assert.warning) оголошено застарілими.\n-   Виклик функції [`get_class()`](/manual/en/function.get-class.md) і [`get_parent_class()`](/manual/en/function.get-parent-class.md) без аргументів оголошено застарілим.\n-   SQLite3: режим помилок за замовчуванням встановлено на винятки.\n\n## Вище продуктивність, краще синтаксис, надійніша система типів.\n\n[Переходьте на PHP 8.3!](https://php.net/downloads)\n\nЩоб завантажити вихідний код PHP 8.3, відвідайте сторінку [Downloads](https://php.net/downloads). Бінарні файли Windows знаходяться на сайті [PHP for Windows](https://windows.php.net/download). Список змін перераховано на сторінці [ChangeLog](/ChangeLog-8.php#PHP_8_3).\n\n[Посібник з міграції](/manual/uk/migration83.md) у розділі документації. Ознайомтеся з ним, щоб дізнатися про всі нові можливості та зміни, що стосуються зворотної сумісності.\n\n-   [Copyright © 2001-2024 The PHP Group](https://php.net/copyright.md)\n-   [My PHP.net](https://php.net/my.md)\n-   [Contact](https://php.net/contact.md)\n-   [Other PHP.net sites](https://php.net/sites.md)\n-   [Privacy policy](https://php.net/privacy.md)\n-   [View Source](https://github.com/php/web-php/tree/master/releases/8.3)\n","title":"8.3","contentType":2}},"__N_SSG":true}