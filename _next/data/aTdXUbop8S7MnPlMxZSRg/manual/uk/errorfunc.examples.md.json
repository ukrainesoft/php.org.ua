{"pageProps":{"page":{"slug":"errorfunc.examples.md","content":"# Приклади\n\nНижче наведено приклад використання можливостей обробки помилок у PHP. Ми визначимо функцію обробки помилок, яка буде записувати інформацію про помилки у файл (використовуючи формат XML), а у разі виникнення критичних помилок, будемо додатково відправляти розробникам листа з повідомленням.\n\n**Приклад #1 Обробка помилок у скрипті**\n\n```php\n<?php\n// мы будем делать нашу собственную обработку ошибок\nerror_reporting(0);\n\n// пользовательская функция для обработки ошибок\nfunction userErrorHandler($errno, $errmsg, $filename, $linenum, $vars)\n{\n    // временная метка возникновения ошибки\n    $dt = date(\"Y-m-d H:i:s (T)\");\n\n    // определим ассоциативный массив соответствия всех\n    // констант уровней ошибок с их названиями, хотя\n    // в действительности мы будем рассматривать только\n    // следующие типы: E_WARNING, E_NOTICE, E_USER_ERROR,\n    // E_USER_WARNING и E_USER_NOTICE\n    $errortype = array (\n                E_ERROR              => 'Ошибка',\n                E_WARNING            => 'Предупреждение',\n                E_PARSE              => 'Ошибка разбора исходного кода',\n                E_NOTICE             => 'Уведомление',\n                E_CORE_ERROR         => 'Ошибка ядра',\n                E_CORE_WARNING       => 'Предупреждение ядра',\n                E_COMPILE_ERROR      => 'Ошибка на этапе компиляции',\n                E_COMPILE_WARNING    => 'Предупреждение на этапе компиляции',\n                E_USER_ERROR         => 'Пользовательская ошибка',\n                E_USER_WARNING       => 'Пользовательское предупреждение',\n                E_USER_NOTICE        => 'Пользовательское уведомление',\n                E_STRICT             => 'Уведомление времени выполнения',\n                E_RECOVERABLE_ERROR  => 'Отлавливаемая фатальная ошибка'\n                );\n    // определим набор типов ошибок, для которых будет сохранён стек переменных\n    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);\n\n    $err = \"<errorentry>\\n\";\n    $err .= \"\\t<datetime>\" . $dt . \"</datetime>\\n\";\n    $err .= \"\\t<errornum>\" . $errno . \"</errornum>\\n\";\n    $err .= \"\\t<errortype>\" . $errortype[$errno] . \"</errortype>\\n\";\n    $err .= \"\\t<errormsg>\" . $errmsg . \"</errormsg>\\n\";\n    $err .= \"\\t<scriptname>\" . $filename . \"</scriptname>\\n\";\n    $err .= \"\\t<scriptlinenum>\" . $linenum . \"</scriptlinenum>\\n\";\n\n    if (in_array($errno, $user_errors)) {\n        $err .= \"\\t<vartrace>\" . wddx_serialize_value($vars, \"Переменные\") . \"</vartrace>\\n\";\n    }\n    $err .= \"</errorentry>\\n\\n\";\n\n    // для тестирования\n    // echo $err;\n\n    // сохраняем в журнал ошибок, а если произошла пользовательская критическая ошибка, то отправляем письмо\n    error_log($err, 3, \"/usr/local/php4/error.log\");\n    if ($errno == E_USER_ERROR) {\n        mail(\"phpdev@example.com\", \"Пользовательская критическая ошибка\", $err);\n    }\n}\n\n\nfunction distance($vect1, $vect2)\n{\n    if (!is_array($vect1) || !is_array($vect2)) {\n        trigger_error(\"Некорректные параметры функции, ожидаются массивы в качестве параметров\", E_USER_ERROR);\n        return NULL;\n    }\n\n    if (count($vect1) != count($vect2)) {\n        trigger_error(\"Векторы должны быть одинаковой размерности\", E_USER_ERROR);\n        return NULL;\n    }\n\n    for ($i=0; $i<count($vect1); $i++) {\n        $c1 = $vect1[$i]; $c2 = $vect2[$i];\n        $d = 0.0;\n        if (!is_numeric($c1)) {\n            trigger_error(\"Координата $i в векторе 1 не является числом, будет использовать ноль\",\n                            E_USER_WARNING);\n            $c1 = 0.0;\n        }\n        if (!is_numeric($c2)) {\n            trigger_error(\"Координата $i в векторе 2 не является числом, будет использовать ноль\",\n                            E_USER_WARNING);\n            $c2 = 0.0;\n        }\n        $d += $c2*$c2 - $c1*$c1;\n    }\n    return sqrt($d);\n}\n\n$old_error_handler = set_error_handler(\"userErrorHandler\");\n\n// использование неопределённой константы, будет генерироваться предупреждение\n$t = I_AM_NOT_DEFINED;\n\n// определим несколько \"векторов\"\n$a = array(2, 3, \"foo\");\n$b = array(5.5, 4.3, -1.6);\n$c = array(1, -3);\n\n// генерируем пользовательскую ошибку\n$t1 = distance($c, $b) . \"\\n\";\n\n// генерируем ещё одну пользовательскую ошибку\n$t2 = distance($b, \"я не массив\") . \"\\n\";\n\n// генерируем пользовательское предупреждение\n$t3 = distance($a, $b) . \"\\n\";\n\n?>\n```\n","title":"Приклади","contentType":2,"navigation":[{"errorfunc.constants.md":"« Зумовлені константи"},{"ref.errorfunc.md":"Функції обробки помилок »"},{"index.md":"PHP Manual"},{"book.errorfunc.md":"Обробка помилок"}]}},"__N_SSG":true}