{"pageProps":{"page":{"slug":"arrayobject.uasort.md","content":"# ArrayObject::uasort\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nArrayObject::uasort — Сортувати записи, використовуючи функцію користувача для порівняння елементів і зберігаючи при цьому зв'язок ключ/значення\n\n### Опис\n\n```methodsynopsis\npublic ArrayObject::uasort(callable $callback): true\n```\n\nЦя функція сортує значення зі збереженням ключів, використовуючи функцію порівняння.\n\nФункція використовується в основному при сортуванні асоціативних масивів, в яких важливим є актуальний порядок елементів.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n### Список параметрів\n\n`callback`\n\nФункція порівняння повинна повертати ціле, яке менше, дорівнює чи більше нуля, якщо перший аргумент є відповідно меншим, рівним чи більшим, ніж другий.\n\n```methodsynopsis\ncallback(mixed $a, mixed $b): int\n```\n\n**Застереження**\n\nВозвращение*нецілих* значень з функції порівняння, таких як число з плаваючою точкою (float), призведе до внутрішнього приведення значення callback-функції, що повертається, до цілого числа (int). Таким чином, значення `0.99`и`0.1` будуть приведені до цілого значення що дозволить порівняти ці значення як рівні.\n\n### Значення, що повертаються\n\nФункція завжди повертає **`true`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер **`true`**; раніше було bool. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ArrayObject::uasort()\\*\\*\\*\\*\n\n```php\n<?php\n// Функция сравнения\nfunction cmp($a, $b) {\n    if ($a == $b) {\n        return 0;\n    }\n    return ($a < $b) ? -1 : 1;\n}\n\n// Массив для сортировки\n$array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);\n$arrayObject = new ArrayObject($array);\nprint_r($arrayObject);\n\n// Сортировка и вывод массива\n$arrayObject->uasort('cmp');\nprint_r($arrayObject);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [a] => 4\n    [b] => 8\n    [c] => -1\n    [d] => -9\n    [e] => 2\n    [f] => 5\n    [g] => 3\n    [h] => -4\n)\nArray\n(\n    [d] => -9\n    [h] => -4\n    [c] => -1\n    [e] => 2\n    [g] => 3\n    [a] => 4\n    [f] => 5\n    [b] => 8\n)\n```\n\n### Дивіться також\n\n-   [ArrayObject::asort()](arrayobject.asort.md) \\- Сортувати записи за значенням\n-   [ArrayObject::ksort()](arrayobject.ksort.md) \\- Сортувати записи за ключами\n-   [ArrayObject::natsort()](arrayobject.natsort.md) - Сортувати масив, використовуючи алгоритм \"natural order\"\n-   [ArrayObject::natcasesort()](arrayobject.natcasesort.md) - Сортувати масив, використовуючи реєстронезалежний алгоритм \"natural order\"\n-   [ArrayObject::uksort()](arrayobject.uksort.md) \\- Сортувати масив за ключами, використовуючи функцію користувача для порівняння\n-   [uasort()](function.uasort.md) \\- Сортує масив користувальницькою функцією порівняння, зберігаючи асоціацію індексів\n","title":"ArrayObject::uasort","contentType":2,"navigation":[{"arrayobject.setiteratorclass.md":"« ArrayObject::setIteratorClass"},{"arrayobject.uksort.md":"ArrayObject::uksort »"},{"index.md":"PHP Manual"},{"class.arrayobject.md":"ArrayObject"}]}},"__N_SSG":true}