{"pageProps":{"page":{"slug":"eventhttp.construct.md","content":"# EventHttp::\\_\\_construct\n\n(PECL event >= 1.2.6-beta)\n\nEventHttp::\\_\\_construct — Створює об'єкт EventHttp (сервер HTTP)\n\n### Опис\n\n```methodsynopsis\npublic\n   EventHttp::__construct(\n    EventBase\n     $base\n   , \n    EventSslContext\n     $ctx\n     = null\n   )\n```\n\nСтворює об'єкт сервера HTTP.\n\n### Список параметрів\n\n`base`\n\nПов'язана основа подій.\n\n`ctx`\n\nОб'єкт класу [EventSslContext](class.eventsslcontext.md). Перетворює простий HTTP-сервер на сервер HTTPS. Тобто якщо параметр `ctx` настроєно правильно, то основні події буфера будуть засновані на сокетах OpenSSL. Тому весь трафік проходитиме через SSL або TLS.\n\n> **Зауваження** :\n> \n> Цей параметр доступний, лише якщо `Event` скомпільований за допомогою OpenSSL і тільки з модулем `Libevent 2.1.0-alpha` і вище.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL event 1.9.0 | Додана підтримка OpenSSL (`ctx` |\n\n### Приклади\n\n**Приклад #1 Простий HTTP-сервер**\n\n```php\n<?php\n\n/*\n * Простой HTTP-сервер.\n *\n * Чтобы проверить:\n * 1) Запустите его на выбранном порту, наПриклад:\n * $ php examples/http.php 8010\n * 2) В другом терминале подключитесь к какому-либо адресу на этом порту\n * и сделайте запрос GET или POST (другие здесь отключены), наПриклад:\n * $ nc -t 127.0.0.1 8010\n * POST /about HTTP/1.0\n * Content-Type: text/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * Будет выведено:\n * a=12\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * $ nc -t 127.0.0.1 8010\n * GET /dump HTTP/1.0\n * Content-Type: text/plain\n * Content-Encoding: UTF-8\n * Connection: close\n * (press Enter)\n *\n * Будет выведено:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n * (press Enter)\n *\n * $ nc -t 127.0.0.1 8010\n * GET /unknown HTTP/1.0\n * Connection: close\n *\n * Будет выведено:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) Посмотрите, что сервер выводит в предыдущем окне терминала.\n */\n\nfunction _http_dump($req, $data) {\n    static $counter      = 0;\n    static $max_requests = 2;\n\n    if (++$counter >= $max_requests)  {\n        echo \"Счётчик достиг максимальных запросов $max_requests. Выходим\\n\";\n        exit();\n    }\n\n    echo __METHOD__, \" called\\n\";\n    echo \"запрос:\"; var_dump($req);\n    echo \"данные:\"; var_dump($data);\n\n    echo \"\\n===== DUMP =====\\n\";\n    echo \"Команда:\", $req->getCommand(), PHP_EOL;\n    echo \"URI:\", $req->getUri(), PHP_EOL;\n    echo \"Заголовки ввода:\"; var_dump($req->getInputHeaders());\n    echo \"Выходные заголовки:\"; var_dump($req->getOutputHeaders());\n\n    echo \"\\n >> Отправка ответа ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n\n    echo \"\\n >> Чтение входного буфера ...\\n\";\n    $buf = $req->getInputBuffer();\n    while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n        echo $s, PHP_EOL;\n    }\n    echo \"Нет больше данных в буфере\\n\";\n}\n\nfunction _http_about($req) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Отправка ответа ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\nfunction _http_default($req, $data) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Отправка ответа ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\n$port = 8010;\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Неверный порт\");\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n$http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);\n\n$http->setCallback(\"/dump\", \"_http_dump\", array(4, 8));\n$http->setCallback(\"/about\", \"_http_about\");\n$http->setDefaultCallback(\"_http_default\", \"пользовательские данные\");\n\n$http->bind(\"0.0.0.0\", 8010);\n$base->loop();\n\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\na=12\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=ISO-8859-1\nConnection: close\n\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=ISO-8859-1\nConnection: close\n(press Enter)\n\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=ISO-8859-1\nConnection: close\n```\n","title":"EventHttp::\\_\\_construct","contentType":2,"navigation":[{"eventhttp.bind.md":"« EventHttp::bind"},{"eventhttp.removeserveralias.md":"EventHttp::removeServerAlias »"},{"index.md":"PHP Manual"},{"class.eventhttp.md":"EventHttp"}]}},"__N_SSG":true}