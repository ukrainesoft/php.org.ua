{"pageProps":{"page":{"slug":"function.socket-recv.md","content":"# socket\\_recv\n\n(PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8)\n\nsocket\\_recv — Отримує дані з приєднаного сокету\n\n### Опис\n\n```methodsynopsis\nsocket_recv(    Socket $socket,    ?string &$data,    int $length,    int $flags): int|false\n```\n\nФункция**socket\\_recv()** отримує `length` байт даних у буфер `data`из сокета`socket`функция**socket\\_recv()** може бути використана для отримання даних із приєднаних сокетів. Додатково, один або більше прапорів можуть бути вказані для зміни поведінки функції.\n\nПараметр`data` передається за посиланням, так що він має бути вказаний у вигляді змінної у списку аргументів. Дані, прочитані із сокету `socket` функцією **socket\\_recv()**, будуть повернуті у параметрі `data`\n\n### Список параметрів\n\n`socket`\n\nПараметр`socket` має бути екземпляром [Socket](class.socket.md), попередньо створеним за допомогою функції socket\\_create().\n\n`data`\n\nОтримані дані будуть передані до змінної, вказаної у параметрі `data`. Якщо відбувається помилка, якщо з'єднання скинуто, або дані недоступні, параметр `data`будет установлен в\\*\\*`null`\\*\\*\n\n`length`\n\nДо`length` байт буде отримано з віддаленого хоста.\n\n`flags`\n\nЗначение параметра`flags` може бути будь-якою комбінацією наступних прапорів, з'єднаних за допомогою бінарного оператора OR (\n\n**Possible values for`flags`**\n\n| Флаг | Опис |\n| --- | --- |\n| **`MSG_OOB`** | Обробляти позасмугові (out-of-band) дані. |\n| **`MSG_PEEK`** | Отримувати дані з початку черги отримання без видалення їх із черги. |\n| **`MSG_WAITALL`** | Функція блокуватиме виконання скрипту доти, доки як мінімум `length` байт не буде отримано. Проте, якщо отриманий сигнал або віддалений хост від'єднався, функція може повернути менше даних. |\n| **`MSG_DONTWAIT`** | Якщо цей прапор встановлений, то функція повернеться навіть у тому випадку, якщо вона зазвичай блокувала виконання скрипта. |\n\n### Значення, що повертаються\n\n**socket\\_recv()** повертає кількість отриманих байтів або **`false`** у разі виникнення помилки. Фактичний код помилки може бути отриманий за допомогою функції [socket\\_last\\_error()](function.socket-last-error.md). Цей код помилки може бути переданий функції [socket\\_strerror()](function.socket-strerror.md) для отримання текстового опису помилки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `socket` тепер екземпляр класу [Socket](class.socket.md); раніше був ресурсом (resource). |\n\n### Приклади\n\n**Приклад #1 Приклад використання** socket\\_recv()\\*\\*\\*\\*\n\nЦей приклад - просто варіант першого прикладу статті [Приклади](sockets.examples.md) с использованием**socket\\_recv()**\n\n```php\n<?php\nerror_reporting(E_ALL);\n\necho \"<h2>Соединение TCP/IP</h2>\\n\";\n\n/* Получить порт сервиса WWW. */\n$service_port = getservbyname('www', 'tcp');\n\n/* Получить IP-адрес целевого хоста. */\n$address = gethostbyname('www.example.com');\n\n/* Создать сокет TCP/IP. */\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\nif ($socket === false) {\n    echo \"Не удалось выполнить функцию socket_create(): причина: \" . socket_strerror(socket_last_error()) . \"\\n\";\n} else {\n    echo \"OK.\\n\";\n}\n\necho \"Попытка соединиться с хостом '$address' по порту '$service_port'...\";\n$result = socket_connect($socket, $address, $service_port);\nif ($result === false) {\n    echo \"Не получилось выполнить функцию socket_connect().\\nПричина: ($result) \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n} else {\n    echo \"OK.\\n\";\n}\n\n$in = \"HEAD / HTTP/1.1\\r\\n\";\n$in .= \"Host: www.example.com\\r\\n\";\n$in .= \"Connection: Close\\r\\n\\r\\n\";\n$out = '';\n\necho \"Отправка запроса HTTP HEAD...\";\nsocket_write($socket, $in, strlen($in));\necho \"OK.\\n\";\n\necho \"Получение ответа:\\n\\n\";\n$buf = 'Это мой буфер.';\nif (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {\n    echo \"Прочитано $bytes байта из функции socket_recv(). Закрываем сокет...\";\n} else {\n    echo \"Не получилось выполнить socket_recv(); причина: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n}\nsocket_close($socket);\n\necho $buf . \"\\n\";\necho \"OK.\\n\\n\";\n?>\n```\n\nПриклад вище виведе щось на зразок такого:\n\n```\n<h2>Соединение TCP/IP</h2>\nOK.\nПопытка соединиться с хостом '208.77.188.166' on port '80'...OK.\nОтправка запроса HTTP HEAD...OK.\nПолучение ответа:\n\nПрочитано 123 байта из функции socket_recv(). Закрываем сокет...HTTP/1.1 200 OK\nDate: Mon, 14 Sep 2009 08:56:36 GMT\nServer: Apache/2.2.3 (Red Hat)\nLast-Modified: Tue, 15 Nov 2005 13:24:10 GMT\nETag: \"b80f4-1b6-80bfd280\"\nAccept-Ranges: bytes\nContent-Length: 438\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\nOK.\n```\n","title":"socket\\_recv","contentType":2,"navigation":[{"function.socket-read.md":"« socket\\_read"},{"function.socket-recvfrom.md":"socket\\_recvfrom »"},{"index.md":"PHP Manual"},{"ref.sockets.md":"Опції сокету"}]}},"__N_SSG":true}