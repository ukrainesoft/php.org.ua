{"pageProps":{"page":{"slug":"memcache.set.md","content":"# Memcache::set\n\n(PECL memcache >= 0.2.0)\n\nMemcache::set — Зберегти дані на сервері\n\n### Опис\n\n```methodsynopsis\nMemcache::set(    string $key,    mixed $var,    int $flag = ?,    int $expire = ?): bool\n```\n\n**Memcache::set()** записує елемент зі значенням `var` на сервері memcache із зазначеним ключем `key`Параметр`expire` задає час життя елемента. Якщо він дорівнює 0, то елемент ніколи не застаріє (але сервер memcached не гарантує, що елемент постійно зберігатиметься в кеші і він може бути видалений для звільнення місця для нових елементів). Ви можете використовувати константу \\*\\*`MEMCACHE_COMPRESSED`\\*\\*в качестве значения для параметра`flag`якщо вам потрібно стиснення \"на льоту\" (використовується zlib).\n\n> **Зауваження** :\n> \n> Пам'ятайте, що ресурси (наприклад, дескриптори файлів або підключень) не можуть бути збережені в кеші, тому що вони не можуть бути серіалізовані.\n\nТакож можна використовувати функцію **memcache\\_set()**\n\n### Список параметрів\n\n`key`\n\nКлюч, з яким пов'язане значення елемента.\n\n`var`\n\nЗмінна для збереження. Рядкові та числові значення зберігаються як є, інші типи серіалізуються.\n\n`flag`\n\nИспользуйте\\*\\*`MEMCACHE_COMPRESSED`\\*\\* для збереження елементів за допомогою стиснення (використовується zlib).\n\n`expire`\n\nЧас життя елемент. Якщо дорівнює нулю, елемент ніколи не старіє. Також ви можете використовувати мітку часу Unix або число секунд, починаючи з поточного моменту, однак, у цьому випадку число секунд не може бути більше 2592000 (30 днів).\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Memcache::set()\\*\\*\\*\\*\n\n```php\n<?php\n/* процедурное API */\n\n/* подключение к серверу memcached */\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\n/*\nустановить значение элемента с ключом 'var_key',\nиспользуя 0 в flag, без использования сжатия со\nвременем жизни 30 секунд\n*/\nmemcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);\n\necho memcache_get($memcache_obj, 'var_key');\n\n?>\n```\n\n**Приклад #2 Приклад використання** Memcache::set()\\*\\*\\*\\*\n\n```php\n<?php\n/* объектно-ориентированное API */\n\n$memcache_obj = new Memcache;\n\n/* подключение к серверу memcached */\n$memcache_obj->connect('memcache_host', 11211);\n\n/*\nустановить значение элемента с ключом 'var_key',\nиспользуя сжатие \"на лету\" и временем жизни 50 секунд.\n*/\n$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);\n\necho $memcache_obj->get('var_key');\n\n?>\n```\n\n### Дивіться також\n\n-   [Memcache::add()](memcache.add.md) \\- Додати елемент із зазначеним ключем\n-   [Memcache::replace()](memcache.replace.md) \\- Замінити значення наявного елемента\n","title":"Memcache::set","contentType":2,"navigation":[{"memcache.replace.md":"« Memcache::replace"},{"memcache.setcompressthreshold.md":"Memcache::setCompressThreshold »"},{"index.md":"PHP Manual"},{"class.memcache.md":"Memcache"}]}},"__N_SSG":true}