{"pageProps":{"page":{"slug":"memcache.get.md","content":"# Memcache::get\n\n(PECL memcache >= 0.2.0)\n\nMemcache::get — Вийняти елемент із сервера\n\n### Опис\n\n```methodsynopsis\nMemcache::get(string $key, int &$flags = ?): string\n```\n\n```methodsynopsis\nMemcache::get(array $keys, array &$flags = ?): array\n```\n\n**Memcache::get()** повертає раніше збережений елемент із ключем `key`, якщо він на даний момент існує на сервері.\n\nВи можете передати масив ключів у **Memcache::get()**, щоб отримати масив елементів. Результуючий масив міститиме лише існуючі пари ключ-значення.\n\n### Список параметрів\n\n`key`\n\nКлюч або масив ключів для читання.\n\n`flags`\n\nЯкщо встановлено, прапори, отримані разом із значеннями, будуть записані в цей параметр. Це точно ті прапори, що і передані, наприклад в [Memcache::set()](memcache.set.md). Молодший байт значення зарезервований для внутрішнього використання pecl/memcache (наприклад, для індикації стиснення або серіалізації статусу).\n\n### Значення, що повертаються\n\nПовертає значення, пов'язане з ключем `key` або масив знайдених пар ключ-значення, якщо в `key` заданий масив. Повертає **`false`** у разі виникнення помилки або якщо вказаний ключ `key` не було знайдено чи є порожнім масивом.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Memcache::get()\\*\\*\\*\\*\n\n```php\n<?php\n\n/* процедурное API */\n$memcache_obj = memcache_connect('memcache_host', 11211);\n$var = memcache_get($memcache_obj, 'some_key');\n\n/* объектно-ориентированное API */\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n$var = $memcache_obj->get('some_key');\n\n/*\nТакже в качестве параметра вы можете использовать массив ключей.\nЕсли элемент не будет найден, то в результирующий массив просто не будет\nвключён этот ключ.\n*/\n\n/* процедурное API */\n$memcache_obj = memcache_connect('memcache_host', 11211);\n$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));\n\n/* объектно-ориентированное API */\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n$var = $memcache_obj->get(Array('some_key', 'second_key'));\n\n?>\n```\n","title":"Memcache::get","contentType":2,"navigation":[{"memcache.flush.md":"« Memcache::flush"},{"memcache.getextendedstats.md":"Memcache::getExtendedStats »"},{"index.md":"PHP Manual"},{"class.memcache.md":"Memcache"}]}},"__N_SSG":true}