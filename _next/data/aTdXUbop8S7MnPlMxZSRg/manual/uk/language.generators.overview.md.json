{"pageProps":{"page":{"slug":"language.generators.overview.md","content":"## Знайомство з генераторами\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\nГенератори надають легкий спосіб реалізації простих [ітераторів](language.oop5.iterations.md) без використання додаткових ресурсів чи складнощів, пов'язаних з реалізацією класу, що реалізує інтерфейс [Iterator](class.iterator.md)\n\nГенератор дозволяє вам писати код, який використовує [foreach](control-structures.foreach.md) для перебору набору даних без необхідності створення масиву в пам'яті, що може призвести до перевищення ліміту пам'яті, або зажадає багато часу для його створення. Натомість, ви можете написати функцію-генератор, яка, по суті, є звичайною [функцією](functions.user-defined.md), за винятком того, що замість [повернення](functions.returning-values.md) єдиного значення, генератор може повертати ([yield](language.generators.syntax.md#control-structures.yield)) стільки разів, скільки необхідно для генерації значень, що дозволяють перебрати вихідний набір даних.\n\nНаочним прикладом вищесказаного може послужити використання функції [range()](function.range.md)как генератора. Стандартная функция[range()](function.range.md) генерує масив, що складається із значень, і повертає його, що може призвести до генерації величезних масивів даних. Наприклад, виклик **range(0, 1000000)** призведе до використання понад 100 МБ оперативної пам'яті.\n\nЯк альтернатива ми можемо створити генератор `xrange()`, який використовує пам'ять тільки для створення об'єкта [Iterator](class.iterator.md) та збереження поточного стану, що вимагатиме не більше 1 кілобайта пам'яті.\n\n**Приклад #1 Реализация[range()](function.range.md)как генератора**\n\n```php\n<?php\nfunction xrange($start, $limit, $step = 1) {\n    if ($start <= $limit) {\n        if ($step <= 0) {\n            throw new LogicException('Шаг должен быть положительным');\n        }\n\n        for ($i = $start; $i <= $limit; $i += $step) {\n            yield $i;\n        }\n    } else {\n        if ($step >= 0) {\n            throw new LogicException('Шаг должен быть отрицательным');\n        }\n\n        for ($i = $start; $i >= $limit; $i += $step) {\n            yield $i;\n        }\n    }\n}\n\n/* Обратите внимание, что и range() и xrange() дадут один и тот же вывод */\n\necho 'Нечётные однозначные числа с помощью range():  ';\nforeach (range(1, 9, 2) as $number) {\n    echo \"$number \";\n}\necho \"\\n\";\n\necho 'Нечётные однозначные числа с помощью xrange(): ';\nforeach (xrange(1, 9, 2) as $number) {\n    echo \"$number \";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nНечётные однозначные числа с помощью range():  1 3 5 7 9\nНечётные однозначные числа с помощью xrange(): 1 3 5 7 9\n```\n\n### Об'єкт [Generator](class.generator.md)\n\nКоли функція генератор викликається, вона поверне об'єкт вбудованого класу [Generator](class.generator.md). Цей об'єкт реалізує інтерфейс [Iterator](class.iterator.md), стане односпрямованим об'єктом ітератора та надасть методи, за допомогою яких можна керувати його станом, включаючи передачу до нього та повернення з нього значень.\n","title":"Знайомство з генераторами","contentType":2,"navigation":[{"language.generators.md":"« Генератори"},{"language.generators.syntax.md":"Синтаксис генераторів »"},{"index.md":"PHP Manual"},{"language.generators.md":"Генератори"}]}},"__N_SSG":true}