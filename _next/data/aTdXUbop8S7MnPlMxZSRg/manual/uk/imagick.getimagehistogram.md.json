{"pageProps":{"page":{"slug":"imagick.getimagehistogram.md","content":"# Imagick::getImageHistogram\n\n(PECL imagick 2, PECL imagick 3)\n\nImagick::getImageHistogram — Повертає гістограму зображення\n\n### Опис\n\n```methodsynopsis\npublic Imagick::getImageHistogram(): array\n```\n\nПовертає гістограму зображення у вигляді масиву об'єктів ImagickPixel.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає гістограму зображення у вигляді масиву об'єктів ImagickPixel.\n\n### Помилки\n\nВикликає ImagickException у разі виникнення помилки.\n\n### Приклади\n\n**Приклад #1 Генерация**Imagick::getImageHistogram()\\*\\*\\*\\*\n\n```php\n<?php\nfunction getColorStatistics($histogramElements, $colorChannel) {\n    $colorStatistics = [];\n\n    foreach ($histogramElements as $histogramElement) {\n        $color = $histogramElement->getColorValue($colorChannel);\n        $color = intval($color * 255);\n        $count = $histogramElement->getColorCount();\n\n        if (array_key_exists($color, $colorStatistics)) {\n            $colorStatistics[$color] += $count;\n        }\n        else {\n            $colorStatistics[$color] = $count;\n        }\n    }\n\n    ksort($colorStatistics);\n\n    return $colorStatistics;\n}\n\n\n\nfunction getImageHistogram($imagePath) {\n\n    $backgroundColor = 'black';\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeWidth(0); // делает линии маскимально тонкими\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    $histogramWidth = 256;\n    $histogramHeight = 100; // высота для каждого сегмента RGB\n\n    $imagick = new \\Imagick(realpath($imagePath));\n    //Измените размер изображения, чтобы он был маленьким, иначе PHP может не хватить памяти\n    //Это может привести к плохим результатам для изображений, которые являются патологически \"пиксельными\"\n    $imagick->adaptiveResizeImage(200, 200, true);\n    $histogramElements = $imagick->getImageHistogram();\n\n    $histogram = new \\Imagick();\n    $histogram->newpseudoimage($histogramWidth, $histogramHeight * 3, 'xc:black');\n    $histogram->setImageFormat('png');\n\n    $getMax = function ($carry, $item)  {\n        if ($item > $carry) {\n            return $item;\n        }\n        return $carry;\n    };\n\n    $colorValues = [\n        'red' => getColorStatistics($histogramElements, \\Imagick::COLOR_RED),\n        'lime' => getColorStatistics($histogramElements, \\Imagick::COLOR_GREEN),\n        'blue' => getColorStatistics($histogramElements, \\Imagick::COLOR_BLUE),\n    ];\n\n    $max = array_reduce($colorValues['red'] , $getMax, 0);\n    $max = array_reduce($colorValues['lime'] , $getMax, $max);\n    $max = array_reduce($colorValues['blue'] , $getMax, $max);\n\n    $scale =  $histogramHeight / $max;\n\n    $count = 0;\n    foreach ($colorValues as $color => $values) {\n        $draw->setstrokecolor($color);\n\n        $offset = ($count + 1) * $histogramHeight;\n\n        foreach ($values as $index => $value) {\n            $draw->line($index, $offset, $index, $offset - ($value * $scale));\n        }\n        $count++;\n    }\n\n    $histogram->drawImage($draw);\n\n    header( \"Content-Type: image/png\" );\n    echo $histogram;\n}\n\n?>\n```\n","title":"Imagick::getImageHistogram","contentType":2,"navigation":[{"imagick.getimageheight.md":"« Imagick::getImageHeight"},{"imagick.getimageindex.md":"Imagick::getImageIndex »"},{"index.md":"PHP Manual"},{"class.imagick.md":"Imagick"}]}},"__N_SSG":true}