{"pageProps":{"page":{"slug":"class.intlcodepointbreakiterator.md","content":"# Клас IntlCodePointBreakIterator\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\n## Вступ\n\nЦей [ітератор переривань](class.intlbreakiterator.md) вказує межі між кодами символів UTF-8.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class IntlCodePointBreakIterator\n    \n\n    \n     extends\n      IntlBreakIterator\n     {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      IntlBreakIterator::DONE;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_NONE;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_NONE_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_NUMBER;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_NUMBER_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_LETTER;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_LETTER_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_KANA;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_KANA_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_IDEO;\npublic\n     const\n     int\n      IntlBreakIterator::WORD_IDEO_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::LINE_SOFT;\npublic\n     const\n     int\n      IntlBreakIterator::LINE_SOFT_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::LINE_HARD;\npublic\n     const\n     int\n      IntlBreakIterator::LINE_HARD_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::SENTENCE_TERM;\npublic\n     const\n     int\n      IntlBreakIterator::SENTENCE_TERM_LIMIT;\npublic\n     const\n     int\n      IntlBreakIterator::SENTENCE_SEP;\npublic\n     const\n     int\n      IntlBreakIterator::SENTENCE_SEP_LIMIT;\n\n\n    /* Методы */\n    \n   public getLastCodePoint(): int\n\n\n    /* Наследуемые методы */\n    public static IntlBreakIterator::createCharacterInstance(?string $locale = null): ?IntlBreakIterator\npublic static IntlBreakIterator::createCodePointInstance(): IntlCodePointBreakIterator\npublic static IntlBreakIterator::createLineInstance(?string $locale = null): ?IntlBreakIterator\npublic static IntlBreakIterator::createSentenceInstance(?string $locale = null): ?IntlBreakIterator\npublic static IntlBreakIterator::createTitleInstance(?string $locale = null): ?IntlBreakIterator\npublic static IntlBreakIterator::createWordInstance(?string $locale = null): ?IntlBreakIterator\npublic IntlBreakIterator::current(): int\npublic IntlBreakIterator::first(): int\npublic IntlBreakIterator::following(int $offset): int\npublic IntlBreakIterator::getErrorCode(): int\npublic IntlBreakIterator::getErrorMessage(): string\npublic IntlBreakIterator::getLocale(int $type): string|false\npublic IntlBreakIterator::getPartsIterator(string $type = IntlPartsIterator::KEY_SEQUENTIAL): IntlPartsIterator\npublic IntlBreakIterator::getText(): ?string\npublic IntlBreakIterator::isBoundary(int $offset): bool\npublic IntlBreakIterator::last(): int\npublic IntlBreakIterator::next(?int $offset = null): int\npublic IntlBreakIterator::preceding(int $offset): int\npublic IntlBreakIterator::previous(): int\npublic IntlBreakIterator::setText(string $text): bool\n\n   }\n```\n\n## Зміст\n\n-   [IntlCodePointBreakIterator::getLastCodePoint](intlcodepointbreakiterator.getlastcodepoint.md)— Отримати останній код символу, виданий під час переміщення ітератора вперед або назад\n","title":"Клас IntlCodePointBreakIterator","contentType":2,"navigation":[{"intlrulebasedbreakiterator.getrulestatusvec.md":"« IntlRuleBasedBreakIterator::getRuleStatusVec"},{"intlcodepointbreakiterator.getlastcodepoint.md":"IntlCodePointBreakIterator::getLastCodePoint »"},{"index.md":"PHP Manual"},{"book.intl.md":"intl"}]}},"__N_SSG":true}