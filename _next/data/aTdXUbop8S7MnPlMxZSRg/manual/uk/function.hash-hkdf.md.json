{"pageProps":{"page":{"slug":"function.hash-hkdf.md","content":"# hash\\_hkdf\n\n(PHP 7 >= 7.1.2, PHP 8)\n\nhash\\_hkdf — Формування ключа HKDF для заданих вхідних даних\n\n### Опис\n\n```methodsynopsis\nhash_hkdf(    string $algo,    string $key,    int $length = 0,    string $info = \"\",    string $salt = \"\"): string\n```\n\n### Список параметрів\n\n`algo`\n\nІм'я вибраного хешируючого алгоритму (наприклад, \"sha256\", \"sha512\", \"haval160,4\" і т.д.) Список підтримуваних алгоритмів можна переглянути в описі функції [hash\\_algos()](function.hash-algos.md)\n\n> **Зауваження** :\n> \n> Не криптографічні функції, що хешують, не допускаються.\n\n`key`\n\nВхідні дані (необроблені бінарні дані). Не може бути порожнім.\n\n`length`\n\nВибрана довжина виведення у байтах. Не може бути більш ніж у 255 разів більше розміру обраної функції, що хешує.\n\nЯкщо `length`установлено как , то висновок по довжині дорівнюватиме розміру обраної функції, що хешує.\n\n`info`\n\nІнформаційний рядок, специфічний для застосування/контексту.\n\n`salt`\n\nСіль, що використовується для формування ключа.\n\nХоча необов'язково, але додавання випадкової солі значно покращує силу HKDF.\n\n### Значення, що повертаються\n\nПовертає рядок, що містить необроблені бінарні дані, що становлять сформований ключ.\n\n### Помилки\n\nВикидається [ValueError](class.valueerror.md), якщо параметр `key`пуст, в параметре`algo` вказано невідомий або криптографічний алгоритм, параметр `length`меньше або дуже великий (більш ніж у 255 разів більше за розмір хеш-функції).\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер викидається виняток[ValueError](class.valueerror.md) у разі виникнення помилки; раніше видавалася помилка рівня **`E_WARNING`** і поверталося значення **`false`** |\n\n### Приклади\n\n**Приклад #1 Приклад використання** hash\\_hkdf()\\*\\*\\*\\*\n\n```php\n<?php\n// Генерируем случайный ключ и соль для усиления процесса формирования.\n$inputKey = random_bytes(32);\n$salt = random_bytes(16);\n\n// Формируем пару разных ключей, используя одни и те же входные данные.\n$encryptionKey = hash_hkdf('sha256', $inputKey, 32, 'aes-256-encryption', $salt);\n$authenticationKey = hash_hkdf('sha256', $inputKey, 32, 'sha-256-authentication', $salt);\n\nvar_dump($encryptionKey !== $authenticationKey); // bool(true)\n?>\n```\n\nУ прикладі вище створена пара різних ключів, придатних для створення конструкції encrypt-then-HMAC, використовуючи AES-256 та SHA-256 для кодування та аутентифікації відповідно.\n\n### Дивіться також\n\n-   [hash\\_pbkdf2()](function.hash-pbkdf2.md) \\- Формування ключа PBKDF2 для заданих вхідних даних\n-   [» RFC 5869](http://www.faqs.org/rfcs/rfc5869)\n-   [» користувацька реалізація](https://github.com/narfbg/hash_hkdf_compat)\n","title":"hash\\_hkdf","contentType":2,"navigation":[{"function.hash-final.md":"« hash\\_final"},{"function.hash-hmac-algos.md":"hash\\_hmac\\_algos »"},{"index.md":"PHP Manual"},{"ref.hash.md":"Функції Hash"}]}},"__N_SSG":true}