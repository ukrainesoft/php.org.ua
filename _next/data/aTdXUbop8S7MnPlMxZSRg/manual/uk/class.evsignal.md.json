{"pageProps":{"page":{"slug":"class.evsignal.md","content":"# Клас EvSignal\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nСпостерігач **EvSignal** створює подію коли процес отримує чи кілька конкретних сигналів. Оскільки сигнали надходять асинхронно, *libev* намагається з цим боротися і доставляти їх синхронно, тобто аналогічно до всіх інших подій у нормальному режимі обробки.\n\nОбмежень на кількість спостерігачів за тим самим сигналом немає, але тільки в межах одного подієвого циклу. Наприклад, у циклі за замовчуванням працює спостерігач за **`SIGINT`**, а в іншому циклі спостерігач за **`SIGIO`**, але при цьому не можна спостерігати **`SIGINT`** у двох циклах одразу. Ну і за **`SIGCHLD`** можна спостерігати лише у циклі за замовчуванням.\n\nЯкщо доступно та підтримується, *libev* встановлює свої обробники з дозволеною поведінкою `SA_RESTART` (або аналогом), тому системні дзвінки не будуть некоректно перериватися. Якщо виникають проблеми із перериванням системних викликів сигналами, всі сигнали можна блокувати у спостерігачі [EvCheck](class.evcheck.md) та розблокувати у спостерігачі [EvPrepare](class.evprepare.md)\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvSignal\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $signum;\n\n    /* Наследуемые свойства */\n    public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    int\n     $signum\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   )\n\n    final\n   public\n   static\n   createStopped(    \n    int\n     $signum\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvSignal\npublic\n   set(\n    int\n     $signum\n   ): void\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Властивості\n\nsignum\n\nНомер сигналу. Дивіться константи, експортовані модулем *pcntl*Также смотрите страницу руководства`signal(7)`\n\n## Зміст\n\n-   [EvSignal::\\_\\_construct](evsignal.construct.md) \\- Конструктор об'єкта спостерігача EvSignal\n-   [EvSignal::createStopped](evsignal.createstopped.md)— Create stopped EvSignal watcher object\n-   [EvSignal::set](evsignal.set.md)— Налаштування спостерігача\n","title":"Клас EvSignal","contentType":2,"navigation":[{"evprepare.createstopped.md":"« EvPrepare::createStopped"},{"evsignal.construct.md":"EvSignal::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}