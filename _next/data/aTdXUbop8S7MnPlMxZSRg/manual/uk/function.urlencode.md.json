{"pageProps":{"page":{"slug":"function.urlencode.md","content":"# urlencode\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nurlencode — URL-кодування рядка\n\n### Опис\n\n```methodsynopsis\nurlencode(string $string): string\n```\n\nЦя функція зручна, коли кодований рядок буде використовуватися в запиті, як частина URL, як зручний спосіб передачі змінних на наступну сторінку.\n\n### Список параметрів\n\n`string`\n\nРядок, який має бути закодований.\n\n### Значення, що повертаються\n\nПовертає рядок, в якому всі не цифро-літерні символи, крім `-_.` повинні бути замінені знаком відсотка (`%`), за яким слідує два шістнадцяткових числа, а пробіли закодовані як знак додавання (`+` ). Рядок кодується тим же способом, що й POST-дані веб-форми, тобто за типом контенту `application/x-www-form-urlencoded`. Це відрізняється від кодування по [» RFC 3986](http://www.faqs.org/rfcs/rfc3986)(смотрите[rawurlencode()](function.rawurlencode.md) ) в тому, що з історичних причин пробіли кодуються як знак \"плюс\" (+).\n\n### Приклади\n\n**Приклад #1 Приклад використання** urlencode()\\*\\*\\*\\*\n\n```php\n<?php\n$userinput = 'Data123!@-_ +';\necho \"Пользовательские данные: $userinput\\n\";\necho '<a href=\"mycgi?foo=', urlencode($userinput), '\">';\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nПользовательские данные: Data123!@-_ +\n<a href=\"mycgi?foo=Data123%21%40-_+%2B\">\n```\n\n**Приклад #2 Приклад використання** urlencode()**и[htmlentities()](function.mdentities.md)**\n\n```php\n<?php\n$foo = 'Data123!@-_ +';\n$bar = \"Содержимое, отличное от $foo\";\necho \"foo: $foo\\n\";\necho \"bar: $bar\\n\";\n$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);\necho '<a href=\"mycgi?' . htmlentities($query_string) . '\">';\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nfoo: Data123!@-_ +\nbar: Содержимое, отличное от Data123!@-_ +\n<a href=\"mycgi?foo=Data123%21%40-_+%2B&amp;bar=Not+the+same+content+as+Data123%21%40-_+%2B\">\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Будьте уважні зі змінними, які можуть збігатися з елементами HTML. Такі сутності як &, © та £ розбираються браузером і використовується як реальна сутність, а не бажане ім'я змінної. Це очевидний конфлікт, який W3C вказує протягом багатьох років. Дивіться подробиці: [» http://www.w3.org/TR/html4/appendix/notes.md#h-B.2.2](http://www.w3.org/TR/html4/appendix/notes.md#h-B.2.2)\n> \n> PHP підтримує зміну роздільника аргументів на рекомендований W3C символ \"точку з комою\" шляхом зміни директиви arg\\_separator у файлі .ini. На жаль, більшість додатків користувача не відправляють дані форми у форматі з роздільником \"точка з комою\". Більше переносимий спосіб вирішити цю проблему - це використовувати & замість & як роздільник. Вам не потрібно буде для цього змінювати PHP-директиву arg\\_separator. Залишіть розділювач як &, але кодуйте ваші URL-адреси за допомогою [htmlentities()](function.mdentities.md) або [htmlspecialchars()](function.mdspecialchars.md)\n\n### Дивіться також\n\n-   [urldecode()](function.urldecode.md) \\- Декодування URL-кодованого рядка\n-   [htmlentities()](function.mdentities.md) \\- Перетворює всі можливі символи у відповідні HTML-сутності\n-   [rawurlencode()](function.rawurlencode.md) \\- URL-кодування рядка згідно з RFC 3986\n-   [rawurldecode()](function.rawurldecode.md) \\- Декодування URL-кодованого рядка\n-   [» RFC 3986](http://www.faqs.org/rfcs/rfc3986)\n","title":"urlencode","contentType":2,"navigation":[{"function.urldecode.md":"« urldecode"},{"book.v8js.md":"V8js »"},{"index.md":"PHP Manual"},{"ref.url.md":"Функції URL"}]}},"__N_SSG":true}