{"pageProps":{"page":{"slug":"locale.composelocale.md","content":"# Locale::composeLocale\n\n# locale\\_compose\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL intl >= 1.0.0)\n\nLocale::composeLocale -- locale\\_compose — Повертає коректно відсортовані та розділені ідентифікатори локалі\n\n### Опис\n\nОб'єктно-орієнтований стиль\n\n```methodsynopsis\npublic static Locale::composeLocale(array $subtags): string|false\n```\n\nПроцедурний стиль\n\n```methodsynopsis\nlocale_compose(array $subtags): string|false\n```\n\nПовертає рядок, що складається з коректно відсортованих і розділених ідентифікаторів локалі, зібрану з масиву, ключі якого позначають підтеги ідентифікатора, а відповідні значення цих підтегів.\n\n### Список параметрів\n\n`subtags`\n\nМасив (array), що містить список пар ключ-значення, де ключі є іменами підтегів ідентифікатора локалі, а значення відповідно значеннями цих підтегів.\n\n> **Зауваження** :\n> \n> Подтегов`'variant'`и`'private'` може бути не більше 15, підтегів `'extlang'` трохи більше 3 і т.д. Варіанти допустимі із суфіксами від 0 до 14. Ключі для цього підтегу мають називатися так: `variant0` `variant1` `variant14`. У ідентифікаторі локалі вкладений тег упорядкований по суфіксу, в результаті чого слід `variant0`, за яким слідує `variant1`, за яким слідує `variant2`и так далее.\n> \n> Як альтернатива, множинні підтеги `'variant'` `'private'`и`'extlang'` можна задати у вигляді масиву під відповідним ключем (наприклад `'variant'`). У цьому випадку обмеження на кількість розпізнаних вкладених тегів не застосовуються.\n\n### Значення, що повертаються\n\nВідповідний ідентифікатор локалі або **`false`**, якщо параметр `subtags`не задан.\n\n### Приклади\n\n**Приклад #1 Приклад використання** locale\\_compose()\\*\\*\\*\\*\n\n```php\n<?php\n$arr = array(\n    'language'=>'en',\n    'script'  =>'Hans',\n    'region'  =>'CN',\n    'variant2'=>'rozaj',\n    'variant1'=>'nedis',\n    'private1'=>'prv1',\n    'private2'=>'prv2',\n);\necho locale_compose($arr);\n?>\n```\n\n**Приклад #2 Приклад використання в об'єктно-орієнтованому стилі**\n\n```php\n<?php\n$arr = array(\n    'language'=>'en' ,\n    'script'  =>'Hans',\n    'region'  =>'CN',\n    'variant2'=>'rozaj',\n    'variant1'=>'nedis',\n    'private1'=>'prv1',\n    'private2'=>'prv2',\n);\necho Locale::composeLocale($arr);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nLocale: en_Hans_CN_nedis_rozaj_x_prv1_prv2\n```\n\n**Приклад #3 Межі підтегів**\n\nЯкщо `subtags` задані як окремі ключі з числовим суфіксом, ключі, що не підтримуються, ігноруються (в даному випадку `'extlang3'`) і впорядковуються в результаті за числовим суфіксом. Немає обмежень, якщо вкладені теги задані як масив (array); упорядковані як зазначені.\n\n```php\n<?php\n$arr = array(\n    'language' => 'en',\n    'script'   => 'Hans',\n    'region'   => 'CN',\n    'extlang3' => 'd',\n    'extlang2' => 'c',\n    'extlang1' => 'b',\n    'extlang0' => 'a',\n);\necho locale_compose($arr), PHP_EOL;\n\n$arr = array(\n    'language' => 'en',\n    'script'   => 'Hans',\n    'region'   => 'CN',\n    'extlang'  => ['a', 'b', 'c', 'd'],\n);\necho locale_compose($arr), PHP_EOL;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nen_a_b_c_Hans_CN\nen_a_b_c_d_Hans_CN\n```\n\n### Дивіться також\n\n-   [locale\\_parse()](locale.parselocale.md) \\- Отримати асоціативний масив усіх підтегів локалі\n","title":"Locale::composeLocale","contentType":2,"navigation":[{"locale.canonicalize.md":"« Locale::canonicalize"},{"locale.filtermatches.md":"Locale::filterMatches »"},{"index.md":"PHP Manual"},{"class.locale.md":"Locale"}]}},"__N_SSG":true}