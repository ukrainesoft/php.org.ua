{"pageProps":{"page":{"slug":"function.session-start.md","content":"# session\\_start\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nsession\\_start — Стартує нову сесію або відновлює існуючу\n\n### Опис\n\n```methodsynopsis\nsession_start(array $options = []): bool\n```\n\nФункция**session\\_start()** створює сесію, або відновлює існуючу, ґрунтуючись на ідентифікаторі сесії, переданому через GET або POST-запит, або переданий через cookie.\n\nКоли викликана функція **session\\_start()** або коли сесія створюється автоматично, PHP викликає відкриття та читання обробників запису сесії. Це можуть бути як вбудовані обробники, так і модулі (наприклад, SQLite або Memcached); або взагалі визначений користувачем обробник, заданий функцією [session\\_set\\_save\\_handler()](function.session-set-save-handler.md). Callback-функція читання витягне всі існуючі дані сесії (збережені у спеціальному серіалізованому вигляді), десеріалізує їх і занесе до суперглобального масиву $\\_SESSION, після чого поверне збережені дані обробнику сесій PHP.\n\nДля використання іменованих сесій, використовуйте [session\\_name()](function.session-name.md)перед**session\\_start()**\n\nЕсли разрешена опция[session.use\\_trans\\_sid](session.configuration.md#ini.session.use-trans-sid), функция**session\\_start()** реєструє внутрішній обробник виводу для перезапису URL-адрес.\n\nЯкщо користувач використовує `ob_gzhandler` або щось подібне спільно з функцією [ob\\_start()](function.ob-start.md), Порядок функцій важливий для правильного виведення. Наприклад, `ob_gzhandler` має бути зареєстрований до старту сесії.\n\n### Список параметрів\n\n`options`\n\nЯкщо поставлено, то має бути асоціативним масивом, що перевизначає поточні [директиви конфігурації сесій](session.configuration.md). Ключі не повинні мати префіксу `session.`\n\nНа додаток до звичайного набору конфігураційних директив може бути додана опція `read_and_close`Если установлена в\\*\\*`true`\\*\\*сесія буде закрита відразу ж після прочитання, теоретично дозволяючи уникнути блокування, якщо дані сесії не будуть змінюватися.\n\n### Значення, що повертаються\n\nФункція повертає **`true`**, якщо сесія успішно стартована, інакше **`false`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.1.0 | **session\\_start()** тепер повертає \\*\\*`false`\\*\\*і більше не ініціалізує[$\\_SESSION](reserved.variables.session.md)коли вона не змогла запустити сесію. |\n\n### Приклади\n\n#### Простий приклад сесії\n\n**Приклад #1 page1.php**\n\n```php\n<?php\n// page1.php\n\nsession_start();\n\necho 'Добро пожаловать на страницу 1';\n\n$_SESSION['favcolor'] = 'green';\n$_SESSION['animal']   = 'cat';\n$_SESSION['time']     = time();\n\n// Работает, если сессионная cookie принята\necho '<br /><a href=\"page2.php\">page 2</a>';\n\n// Или можно передать идентификатор сессии, если нужно\necho '<br /><a href=\"page2.php?' . SID . '\">page 2</a>';\n?>\n```\n\nПісля перегляду page1.php, друга сторінка page2.php чудово отримає всі дані сесії. Читайте розділ [робота із сесіями](ref.session.md), там розповідається про [передачу ідентифікаторів сесій](session.idpassing.md). Зокрема там розповідається про те, що таке константа **`SID`**\n\n**Приклад #2 page2.php**\n\n```php\n<?php\n// page2.php\n\nsession_start();\n\necho 'Добро пожаловать на страницу 2<br />';\n\necho $_SESSION['favcolor']; // green\necho $_SESSION['animal'];   // cat\necho date('Y m d H:i:s', $_SESSION['time']);\n\n// Можете тут использовать идентификатор сессии, как в page1.php\necho '<br /><a href=\"page1.php\">page 1</a>';\n?>\n```\n\n#### Передача опций в**session\\_start()**\n\n**Приклад #3 Перевизначення часу життя cookie**\n\n```php\n<?php\n// Устанавливаем срок действия cookie одному дню.\nsession_start([\n    'cookie_lifetime' => 86400,\n]);\n?>\n```\n\n**Приклад #4 Читання та закриття сесії**\n\n```php\n<?php\n// Если мы знаем, что в сессии не надо ничего изменять,\n// мы можем просто прочитать её переменные и сразу закрыть,\n// чтобы не блокировать файл сессии, который может понадобиться другим сессиям\nsession_start([\n    'cookie_lifetime' => 86400,\n    'read_and_close'  => true,\n]);\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Для использования сессий на основе cookie, функция**session\\_start()** повинна бути викликана перед виведенням чогось у браузер.\n\n> **Зауваження** :\n> \n> Используйте[zlib.output\\_compression](zlib.configuration.md#ini.zlib.output-compression) замість [ob\\_gzhandler()](function.ob-gzhandler.md)\n\n> **Зауваження** :\n> \n> Ця функція надсилає кілька заголовків HTTP, залежно від налаштувань. Дивіться опис функції [session\\_cache\\_limiter()](function.session-cache-limiter.md) для керування цими заголовками.\n\n### Дивіться також\n\n-   [$\\_SESSION](reserved.variables.session.md)\n-   Директива конфігурації[session.auto\\_start](session.configuration.md#ini.session.auto-start)\n-   [session\\_id()](function.session-id.md) \\- Отримує та/або встановлює ідентифікатор поточної сесії\n","title":"session\\_start","contentType":2,"navigation":[{"function.session-set-save-handler.md":"« session\\_set\\_save\\_handler"},{"function.session-status.md":"session\\_status »"},{"index.md":"PHP Manual"},{"ref.session.md":"Функції для роботи із сесіями"}]}},"__N_SSG":true}