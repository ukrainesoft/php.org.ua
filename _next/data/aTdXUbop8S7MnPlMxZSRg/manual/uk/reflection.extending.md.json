{"pageProps":{"page":{"slug":"reflection.extending.md","content":"# Розширення\n\nЯкщо вам потрібна спеціалізована версія вбудованого класу (який, наприклад, зможе генерувати кольоровий HTML при експорті, матиме легкодоступні властивості замість методів або якісь допоміжні методи), то можете просто взяти і розширити його.\n\n**Приклад #1 Розширення вбудованих класів**\n\n```php\n<?php\n/**\n * Мой класс Reflection_Method\n */\nclass My_Reflection_Method extends ReflectionMethod\n{\n    public $visibility = array();\n\n    public function __construct($o, $m)\n    {\n        parent::__construct($o, $m);\n        $this->visibility = Reflection::getModifierNames($this->getModifiers());\n    }\n}\n\n/**\n * Демо-класс #1\n *\n */\nclass T {\n    protected function x() {}\n}\n\n/**\n * Демо-класс #2\n *\n */\nclass U extends T {\n    function x() {}\n}\n\n// Выведем информацию о методе\nvar_dump(new My_Reflection_Method('U', 'x'));\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(My_Reflection_Method)#1 (3) {\n  [\"visibility\"]=>\n  array(1) {\n    [0]=>\n    string(6) \"public\"\n  }\n  [\"name\"]=>\n  string(1) \"x\"\n  [\"class\"]=>\n  string(1) \"U\"\n}\n```\n\n**Застереження**\n\nКоли ви перевизначаєте конструктор, не забудьте обов'язково викликати батьківський конструктор до будь-якого доданого коду. Якщо так не робити, ви можете отримати повідомлення про помилку виду: `Fatal error: Internal error: Failed to retrieve the reflection object`\n","title":"Розширення","contentType":2,"navigation":[{"reflection.examples.md":"« Приклади"},{"class.reflection.md":"Reflection »"},{"index.md":"PHP Manual"},{"book.reflection.md":"Reflection"}]}},"__N_SSG":true}