{"pageProps":{"page":{"slug":"class.swoole-http-server.md","content":"# Клас Swoole\\\\Http\\\\Server\n\n(PECL swoole >= 1.9.0)\n\n## Вступ\n\n## Огляд класів\n\n```classsynopsis\n\n\n\n    \n     \n      class Swoole\\Http\\Server\n     \n\n     \n      extends\n       Swoole\\Server\n     \n     {\n\n\n    /* Методы */\n    \n            public on(string $event_name, callable $callback): void\npublic start(): void\n\n\n    /* Наследуемые методы */\n    public Swoole\\Server::addlistener(string $host, int $port, string $socket_type): void\npublic Swoole\\Server::addProcess(swoole_process $process): bool\npublic Swoole\\Server::after(int $after_time_ms, callable $callback, string $param = ?): ReturnType\npublic Swoole\\Server::bind(int $fd, int $uid): bool\npublic Swoole\\Server::clearTimer(int $timer_id): void\nswoole_timer_clear(int $timer_id): void\npublic Swoole\\Server::close(int $fd, bool $reset = ?): bool\npublic Swoole\\Server::confirm(int $fd): bool\npublic Swoole\\Server::connection_info(int $fd, int $reactor_id = ?): array\npublic Swoole\\Server::connection_list(int $start_fd, int $pagesize = ?): array\npublic Swoole\\Server::defer(callable $callback): void\npublic Swoole\\Server\\Port::__destruct(): void\npublic Swoole\\Server\\Port::on(string $event_name, callable $callback): ReturnType\npublic Swoole\\Server\\Port::set(array $settings): void\npublic Swoole\\Server::exist(int $fd): bool\npublic Swoole\\Server::finish(string $data): void\npublic Swoole\\Server::getClientInfo(int $fd, int $reactor_id = ?, bool $ignore_error = ?): array\npublic Swoole\\Server::getClientList(int $start_fd, int $pagesize = ?): array\npublic Swoole\\Server::getLastError(): int\npublic Swoole\\Server::heartbeat(bool $if_close_connection): mixed\npublic Swoole\\Server::listen(string $host, int $port, string $socket_type): bool\npublic Swoole\\Server::on(string $event_name, callable $callback): void\npublic Swoole\\Server::pause(int $fd): void\npublic Swoole\\Server::protect(int $fd, bool $is_protected = ?): void\npublic Swoole\\Server::reload(): bool\npublic Swoole\\Server::resume(int $fd): void\npublic Swoole\\Server::send(int $fd, string $data, int $reactor_id = ?): bool\npublic Swoole\\Server::sendfile(int $fd, string $filename, int $offset = ?): bool\npublic Swoole\\Server::sendMessage(int $worker_id, string $data): bool\npublic Swoole\\Server::sendto(    string $ip,    int $port,    string $data,    string $server_socket = ?): bool\npublic Swoole\\Server::sendwait(int $fd, string $data): bool\npublic Swoole\\Server::set(array $settings): ReturnType\npublic Swoole\\Server::shutdown(): void\npublic Swoole\\Server::start(): void\npublic Swoole\\Server::stats(): array\npublic Swoole\\Server::stop(int $worker_id = ?): bool\npublic Swoole\\Server::task(string $data, int $dst_worker_id = ?, callable $callback = ?): mixed\npublic Swoole\\Server::taskwait(string $data, float $timeout = ?, int $worker_id = ?): void\npublic Swoole\\Server::taskWaitMulti(array $tasks, float $timeout_ms = ?): void\npublic Swoole\\Server::tick(int $interval_ms, callable $callback): void\n\n\n   }\n```\n\n## Зміст\n\n-   [Swoole\\\\Http\\\\Server::on](swoole-http-server.on.md)— Прив'язує callback-функцію до HTTP-сервера на ім'я події\n-   [Swoole\\\\Http\\\\Server::start](swoole-http-server.start.md) \\- Запускає http-сервер swoole\n","title":"Клас Swoole\\\\Http\\\\Server","contentType":2,"navigation":[{"swoole-http-response.write.md":"« Swoole\\\\Http\\\\Response::write"},{"swoole-http-server.on.md":"Swoole\\\\Http\\\\Server::on »"},{"index.md":"PHP Manual"},{"book.swoole.md":"Swoole"}]}},"__N_SSG":true}