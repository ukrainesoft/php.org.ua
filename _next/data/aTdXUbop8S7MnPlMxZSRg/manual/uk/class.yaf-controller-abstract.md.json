{"pageProps":{"page":{"slug":"class.yaf-controller-abstract.md","content":"# Клас Yaf\\_Controller\\_Abstract\n\n(Yaf >=1.0.0)\n\n## Вступ\n\n**Yaf\\_Controller\\_Abstract** це серце системи Yaf. MVC розшифровується як Model-View-Controller і є шаблоном проектування, призначений для відділення логіки програми від логіки відображення\n\nКожен контролер повинен успадковувати **Yaf\\_Controller\\_Abstract**\n\nВи знайдете, що не можете визначити функцію \\_\\_construct для свого користувача контролера, тому **Yaf\\_Controller\\_Abstract**предоставляет\n\nЯкщо ви визначили метод init() у своєму контролері користувача, він буде викликатися доти, поки буде створено екземпляр контролера.\n\nУ дії під час надходження запиту може бути аргументи. Якщо в параметрах запиту є та сама змінна імені ([Yaf\\_Request\\_Abstract::getParam()](yaf-request-abstract.getparam.md)) після перенаправлення, Yaf передасть їх методу дії ([Yaf\\_Action\\_Abstract::execute()](yaf-action-abstract.execute.md)\n\n> **Зауваження** :\n> \n> Аргументи витягуються безпосередньо без фільтрації, перед використанням слід ретельно обробити.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      abstract\n      class Yaf_Controller_Abstract\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $actions;\n\n    protected\n      $_module;\n\n    protected\n      $_name;\n\n    protected\n      $_request;\n\n    protected\n      $_response;\n\n    protected\n      $_invoke_args;\n\n    protected\n      $_view;\n\n\n\n    /* Методы */\n    \n   final private __construct()\n\n    protected display(string $tpl, array $parameters = ?): bool\npublic forward(string $action, array $paramters = ?): bool\npublic getInvokeArg(string $name): void\npublic getInvokeArgs(): void\npublic getModuleName(): string\npublic getName(): string\npublic getRequest(): Yaf_Request_Abstract\npublic getResponse(): Yaf_Response_Abstract\npublic getView(): Yaf_View_Interface\npublic getViewpath(): string\npublic init(): void\npublic initView(array $options = ?): void\npublic redirect(string $url): bool\nprotected render(string $tpl, array $parameters = ?): string\npublic setViewpath(string $view_directory): void\n\n   }\n```\n\n## Властивості\n\nactions\n\nВи також можете визначити метод дії в окремому скрипті PHP, використовуючи цю властивість і [Yaf\\_Action\\_Abstract](class.yaf-action-abstract.md)\n\n**Приклад #1 Визначення дії в окремому файлі**\n\n```php\n<?php\nclass IndexController extends Yaf_Controller_Abstract {\n    protected $actions = array(\n        /** теперь dummyAction определяется в отдельном файле */\n        \"dummy\" => \"actions/Dummy_action.php\",\n    );\n\n    /* у метода действия могут быть аргументы */\n    public function indexAction($name, $id) {\n       /* $name и $id небезопасные необработанные данные */\n       assert($name == $this->getRequest()->getParam(\"name\"));\n       assert($id   == $this->_request->getParam(\"id\"));\n    }\n}\n?>\n```\n\n**Приклад #2 Dummy\\_action.php**\n\n```php\n<?php\nclass DummyAction extends Yaf_Action_Abstract {\n    /* класс действия должен определить этот метод как точку входа */\n    public function execute() {\n    }\n}\n?>\n```\n\n\\_module\n\nім'я модуля\n\n\\_name\n\nім'я контролера\n\n\\_request\n\nпоточний об'єкт запиту\n\n\\_response\n\nпоточний об'єкт відповіді\n\n\\_invoke\\_args\n\n\\_view\n\nоб'єкт движка відображення\n\n## Зміст\n\n-   [Yaf\\_Controller\\_Abstract::\\_\\_construct](yaf-controller-abstract.construct.md) \\- Конструктор класу Yaf\\_Controller\\_Abstract\n-   [Yaf\\_Controller\\_Abstract::display](yaf-controller-abstract.display.md) \\- Призначення display\n-   [Yaf\\_Controller\\_Abstract::forward](yaf-controller-abstract.forward.md)— Переходить до іншої дії\n-   [Yaf\\_Controller\\_Abstract::getInvokeArg](yaf-controller-abstract.getinvokearg.md)— Призначення getInvokeArg\n-   [Yaf\\_Controller\\_Abstract::getInvokeArgs](yaf-controller-abstract.getinvokeargs.md)— Призначення getInvokeArgs\n-   [Yaf\\_Controller\\_Abstract::getModuleName](yaf-controller-abstract.getmodulename.md)— Отримує ім'я модуля\n-   [Yaf\\_Controller\\_Abstract::getName](yaf-controller-abstract.getname.md)— Отримує своє ім'я\n-   [Yaf\\_Controller\\_Abstract::getRequest](yaf-controller-abstract.getrequest.md)— Отримує поточний об'єкт запиту\n-   [Yaf\\_Controller\\_Abstract::getResponse](yaf-controller-abstract.getresponse.md)— Отримує поточний об'єкт відповіді\n-   [Yaf\\_Controller\\_Abstract::getView](yaf-controller-abstract.getview.md)— Отримує двигун відображення\n-   [Yaf\\_Controller\\_Abstract::getViewpath](yaf-controller-abstract.getviewpath.md) \\- Призначення getViewpath\n-   [Yaf\\_Controller\\_Abstract::init](yaf-controller-abstract.init.md) \\- Ініціалізатор контролера\n-   [Yaf\\_Controller\\_Abstract::initView](yaf-controller-abstract.initview.md) \\- Призначення initView\n-   [Yaf\\_Controller\\_Abstract::redirect](yaf-controller-abstract.redirect.md)— Перенаправляє на URL\n-   [Yaf\\_Controller\\_Abstract::render](yaf-controller-abstract.render.md)— Відображає шаблон представлення\n-   [Yaf\\_Controller\\_Abstract::setViewpath](yaf-controller-abstract.setviewpath.md) \\- Призначення setViewpath\n","title":"Клас Yaf\\_Controller\\_Abstract","contentType":2,"navigation":[{"yaf-config-simple.valid.md":"« Yaf\\_Config\\_Simple::valid"},{"yaf-controller-abstract.construct.md":"Yaf\\_Controller\\_Abstract::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.yaf.md":"Yaf"}]}},"__N_SSG":true}