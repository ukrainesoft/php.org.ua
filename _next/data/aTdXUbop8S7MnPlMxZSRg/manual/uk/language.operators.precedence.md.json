{"pageProps":{"page":{"slug":"language.operators.precedence.md","content":"## Пріоритет оператора\n\nПріоритет оператора визначає, наскільки «тісно» він пов'язує між собою два вирази. Наприклад, вираз `1 + 5 * 3` обчислюється як `16`, а не`18`, оскільки оператор множення («\\*») має більш високий пріоритет, ніж оператор додавання («+»). Круглі дужки можна вказувати, щоб змінити порядок виконання операторів. Наприклад, вираз `(1 + 5) * 3` обчислюється як `18`\n\nЯкщо оператори мають рівний пріоритет, чи виконуватимуться вони праворуч наліво чи зліва направо — залежить від їхньої асоціативності. Наприклад, \"-\" - лівоасоціативний оператор. Тому вираз `1 - 2 - 3` згрупується як `(1 - 2) - 3` і перерахується в `-4`. У цьому оператор «=» — правоасоціативний, отже вираз `$a = $b = $c` згрупується як `$a = ($b = $c)`\n\nНеасоціативні оператори з однаковим пріоритетом не можна вказувати разом. Наприклад, вираз `1 < 2 > 1` не працюватиме в PHP. При цьому вираз `1 <= 1 == 1` буде, оскільки в оператора `==` нижчий пріоритет, ніж у оператора `<=`\n\nАсоціативність стосується лише двійкових (і тернарних) операторів. Унарні оператори бувають префіксними чи постфіксними, тому це поняття до них не стосується. Наприклад, `!!$a` можна згрупувати лише як `!(!$a)`\n\nВказівка ​​дужок, навіть якщо це не суворо необхідно, часто може покращити читання коду за рахунок явного угруповання, а не опори на пріоритети та асоціативність.\n\nУ наступній таблиці наведено список операторів, відсортований за зменшенням їх пріоритетів. Оператори, перелічені в одному рядку, мають однаковий пріоритет, тоді порядок їх виконання буде визначено тим, як вони згруповані.\n\n**Порядок виконання операторів**\n\n| Ассоциативность | Оператор | Дополнительная информация |\n| --- | --- | --- |\n| (н/а) | `clone` `new` | [clone](language.oop5.cloning.md) і [new](language.oop5.basic.md#language.oop5.basic.new) |\n| права | `**` | [арифметичні оператори](language.operators.arithmetic.md) |\n| (н/а) | `+` `-` `++` `--` `~` `(int)` `(float)` `(string)` `(array)` `(object)` `(bool)` `@` | [арифметичні оператори](language.operators.arithmetic.md) (Унарні `+` и`-` [інкремент/декремент](language.operators.increment.md) [побітові оператори](language.operators.bitwise.md) [приведення типів](language.types.type-juggling.md#language.types.typecasting) і [оператор керування помилками](language.operators.errorcontrol.md) |\n| ліва | instanceof | [типи](language.operators.type.md) |\n| (н/а) | ! | [логічні оператори](language.operators.logical.md) |\n| ліва | `*` `%` | [арифметичні оператори](language.operators.arithmetic.md) |\n| ліва | `+` `-` | [арифметичні оператори](language.operators.arithmetic.md) (бінарні `+` и`-` [оператори, які працюють з масивами](language.operators.array.md) і [строкові оператори](language.operators.string.md) до PHP 8.0.0) |\n| ліва | `<<` `>>` | [побітові оператори](language.operators.bitwise.md) |\n| ліва |  | [строкові оператори](language.operators.string.md)(починаючи з PHP 8.0.0) |\n| неасоціативна | `<` `<=` `>` `>=` | [оператори порівняння](language.operators.comparison.md) |\n| неасоціативна | `==` `!=` `===` `!==` `<>` `<=>` | [оператори порівняння](language.operators.comparison.md) |\n| ліва | `&` | [побітові оператори](language.operators.bitwise.md) і [посилання](language.references.md) |\n| ліва | `^` | [побітові оператори](language.operators.bitwise.md) |\n| ліва | \\` | \\` |\n| ліва | `&&` | [логічні оператори](language.operators.logical.md) |\n| ліва | \\` |  |\n| права | `??` | [оператори порівняння з null](language.operators.comparison.md#language.operators.comparison.coalesce) |\n| неасоціативна | `? :` | [тернарний оператор](language.operators.comparison.md#language.operators.comparison.ternary) (лівоасоціативний до PHP 8.0.0) |\n| права | `=` `+=` `-=` `*=` `**=` `/=` `.=` `%=` `&=` \\` | \\= ^= <<= >>= ??=\\` |\n| (н/а) | `yield from` | [yield from](language.generators.syntax.md#control-structures.yield.from) |\n| (н/а) | `yield` | [yield](language.generators.syntax.md#control-structures.yield) |\n| (н/а) | `print` | [print](function.print.md) |\n| ліва | `and` | [логічні оператори](language.operators.logical.md) |\n| ліва | `xor` | [логічні оператори](language.operators.logical.md) |\n| ліва | `or` | [логічні оператори](language.operators.logical.md) |\n\n**Приклад #1 Асоціативність**\n\n```php\n<?php\n\n$a = 3 * 3 % 5; // (3 * 3) % 5 = 4\n// ассоциативность тернарных операторов отличается от C/C++\n$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (до PHP 8.0.0)\n\n$a = 1;\n$b = 2;\n$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5\n```\n\nПріоритет та асоціативність оператора визначає лише те, як групується вираз, а не порядок його обчислення. Зазвичай PHP не вказує, в якому порядку обчислюються вирази, і потрібно уникати коду, який передбачає специфічний порядок обчислення, тому що поведінка може змінюватися в різних версіях PHP або залежно від навколишнього коду.\n\n**Приклад #2 Невизначений порядок обчислення**\n\n```php\n<?php\n\n$a = 1;\necho $a + $a++; // может вывести как 2, так и 3\n\n$i = 1;\n$array[$i] = $i++; // может установить индекс как 1, так 2\n```\n\n**Приклад #3`+` `-`и мають однаковий пріоритет (до PHP 8.0.0)**\n\n```php\n<?php\n\n$x = 4;\n// следующий код может выдать неожиданный результат:\necho \"x минус 1 равно \" . $x-1 . \", ну, я надеюсь\\n\";\n\n// поскольку он вычисляется таким образом (до PHP 8.0.0):\necho ((\"x минус один равно \" . $x) - 1) . \", ну, я надеюсь\\n\";\n\n// требуемый приоритет следует задать скобками:\necho \"x минус 1 равно \" . ($x-1) . \", ну, я надеюсь\\n\";\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n-1, ну, я надеюсь\n-1, ну, я надеюсь\nx минус один равно 3, ну, я надеюсь\n```\n\n> **Зауваження** :\n> \n> Хотя оператор`=` і має нижчий пріоритет, ніж більшість інших операторів, PHP все ж дозволяє робити так: `if (!$a = foo())`, у цьому прикладі результат виконання функції `foo()`будет присвоен переменной $a.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Об'єднання рядків ( ) тепер має нижчий пріоритет, ніж арифметичне додавання/віднімання (`+` и`-`) і побитовий зсув вліво/вправо (`<<`и`>>`); раніше він мав той самий пріоритет, що і `+` и`-`, і вищий пріоритет, ніж `<<`и`>>` |\n| 8.0.0 | Тернарний оператор (`? :`) тепер неасоціативний; раніше він був лівоасоціативним. |\n| 7.4.0 | Практика, коли можна було спиратися на пріоритет конкатенації рядків ( ) при арифметичних операціях складання/віднімання (`+` или`-`) або побитовому зрушенні вліво/вправо (`<<`или`>>`), т. Е. Коли у виразі без дужок вони вказані разом, не рекомендована. |\n| 7.4.0 | Практика, коли можна було покладатися на лівоасоціативність тернарного оператора (`? :`), т. е. вкладення кількох тернарних операторів без дужок, не рекомендовано. |\n","title":"Пріоритет оператора","contentType":2,"navigation":[{"language.operators.md":"« Оператори"},{"language.operators.arithmetic.md":"Арифметика »"},{"index.md":"PHP Manual"},{"language.operators.md":"Оператори"}]}},"__N_SSG":true}