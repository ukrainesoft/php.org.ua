{"pageProps":{"page":{"slug":"language.oop5.variance.md","content":"## Коваріантність та контраваріантність\n\nУ PHP 7.2.0 було додано часткову контраваріантність шляхом усунення обмежень типу для параметрів у дочірньому методі. Починаючи з PHP 7.4.0, додано повну підтримку коваріантності та контраваріантності.\n\nКоваріантність дозволяє дочірньому методу повертати більш конкретний тип, ніж тип значення його батьківського методу, що повертається. У той час як контраваріантність дозволяє типу параметра в дочірньому методі бути менш специфічним, ніж у батьківському.\n\nОголошення типу вважається більш конкретним у наступному випадку:\n\n-   Вилучено[об'єднання типів](language.types.type-system.md#language.types.type-system.composite.union)\n-   Добавлено[перетин типів](language.types.type-system.md#language.types.type-system.composite.intersection)\n-   Тип класу змінюється на тип дочірнього класу\n-   [iterable](language.types.iterable.md)змінений на масив (array) або[Traversable](class.traversable.md)\n\nВ іншому випадку клас типу вважається менш конкретним.\n\n### Коваріантність\n\nЩоб проілюструвати, як працює підступність, створимо простий абстрактний батьківський клас Animal. Animal буде розширено за рахунок дочірніх класів Cat та Dog.\n\n```php\n<?php\n\nabstract class Animal\n{\n    protected string $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    abstract public function speak();\n}\n\nclass Dog extends Animal\n{\n    public function speak()\n    {\n        echo $this->name . \" лает\";\n    }\n}\n\nclass Cat extends Animal\n{\n    public function speak()\n    {\n        echo $this->name . \" мяукает\";\n    }\n}\n```\n\nЗверніть увагу, що на прикладі немає методів, які повертають значення. Буде додано декілька фабрик, які повертають новий об'єкт типу класу Animal, Cat або Dog.\n\n```php\n<?php\n\ninterface AnimalShelter\n{\n    public function adopt(string $name): Animal;\n}\n\nclass CatShelter implements AnimalShelter\n{\n    public function adopt(string $name): Cat // Возвращаем класс Cat вместо Animal\n    {\n        return new Cat($name);\n    }\n}\n\nclass DogShelter implements AnimalShelter\n{\n    public function adopt(string $name): Dog // Возвращаем класс Dog вместо Animal\n    {\n        return new Dog($name);\n    }\n}\n\n$kitty = (new CatShelter)->adopt(\"Рыжик\");\n$kitty->speak();\necho \"\\n\";\n\n$doggy = (new DogShelter)->adopt(\"Бобик\");\n$doggy->speak();\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nРыжик мяукает\nБобик лает\n```\n\n### Контраваріантність\n\nПродовжуючи попередній приклад, де ми використовували класи Animal, Cat і Dog, ми введемо нові класи Food і AnimalFood і додамо в абстрактний клас Animal новий метод eat(AnimalFood $food).\n\n```php\n<?php\n\nclass Food {}\n\nclass AnimalFood extends Food {}\n\nabstract class Animal\n{\n    protected string $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function eat(AnimalFood $food)\n    {\n        echo $this->name . \" ест \" . get_class($food);\n    }\n}\n```\n\nЩоб побачити суть контраваріантності, ми перевизначимо метод eat класу Dog таким чином, щоб він міг приймати будь-який об'єкт класу Food. Клас Cat залишимо без змін.\n\n```php\n<?php\n\nclass Dog extends Animal\n{\n    public function eat(Food $food) {\n        echo $this->name . \" ест \" . get_class($food);\n    }\n}\n```\n\nНаступний приклад покаже поведінку контраваріантності.\n\n```php\n<?php\n\n$kitty = (new CatShelter)->adopt(\"Рыжик\");\n$catFood = new AnimalFood();\n$kitty->eat($catFood);\necho \"\\n\";\n\n$doggy = (new DogShelter)->adopt(\"Бобик\");\n$banana = new Food();\n$doggy->eat($banana);\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nРыжик ест AnimalFood\nБобик ест Food\n```\n\nАле що станеться, якщо $kitty спробує з'їсти (**eat()**) банан ($ banana)?\n\n```php\n$kitty->eat($banana);\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nFatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given\n```\n","title":"Коваріантність та контраваріантність","contentType":2,"navigation":[{"language.oop5.serialization.md":"« Серіалізація об'єктів"},{"language.oop5.changelog.md":"Журнал змін ОВП »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}