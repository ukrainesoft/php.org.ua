{"pageProps":{"page":{"slug":"class.reflectionclass.md","content":"# Клас ReflectionClass\n\n(PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nКласс**ReflectionClass**сообщает информацию о классе.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class ReflectionClass\n    \n\n    \n     implements\n      Reflector {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      IS_IMPLICIT_ABSTRACT;\n\n    public\n     const\n     int\n      IS_EXPLICIT_ABSTRACT;\n\n    public\n     const\n     int\n      IS_FINAL;\n\n    public\n     const\n     int\n      IS_READONLY;\n\n\n    /* Свойства */\n    public\n     string\n      $name;\n\n\n    /* Методы */\n    \n   public __construct(object|string $objectOrClass)\n\n    public static export(mixed $argument, bool $return = false): string\npublic getAttributes(?string $name = null, int $flags = 0): array\npublic getConstant(string $name): mixed\npublic getConstants(?int $filter = null): array\npublic getConstructor(): ?ReflectionMethod\npublic getDefaultProperties(): array\npublic getDocComment(): string|false\npublic getEndLine(): int|false\npublic getExtension(): ?ReflectionExtension\npublic getExtensionName(): string|false\npublic getFileName(): string|false\npublic getInterfaceNames(): array\npublic getInterfaces(): array\npublic getMethod(string $name): ReflectionMethod\npublic getMethods(?int $filter = null): array\npublic getModifiers(): int\npublic getName(): string\npublic getNamespaceName(): string\npublic getParentClass(): ReflectionClass|false\npublic getProperties(?int $filter = null): array\npublic getProperty(string $name): ReflectionProperty\npublic getReflectionConstant(string $name): ReflectionClassConstant|false\npublic getReflectionConstants(?int $filter = null): array\npublic getShortName(): string\npublic getStartLine(): int|false\npublic getStaticProperties(): array\npublic getStaticPropertyValue(string $name, mixed &$def_value = ?): mixed\npublic getTraitAliases(): array\npublic getTraitNames(): array\npublic getTraits(): array\npublic hasConstant(string $name): bool\npublic hasMethod(string $name): bool\npublic hasProperty(string $name): bool\npublic implementsInterface(ReflectionClass|string $interface): bool\npublic inNamespace(): bool\npublic isAbstract(): bool\npublic isAnonymous(): bool\npublic isCloneable(): bool\npublic isEnum(): bool\npublic isFinal(): bool\npublic isInstance(object $object): bool\npublic isInstantiable(): bool\npublic isInterface(): bool\npublic isInternal(): bool\npublic isIterable(): bool\npublic isReadOnly(): bool\npublic isSubclassOf(ReflectionClass|string $class): bool\npublic isTrait(): bool\npublic isUserDefined(): bool\npublic newInstance(mixed ...$args): object\npublic newInstanceArgs(array $args = []): ?object\npublic newInstanceWithoutConstructor(): object\npublic setStaticPropertyValue(string $name, mixed $value): void\npublic __toString(): string\n\n   }\n```\n\n## Властивості\n\nname\n\nНазва класу. Доступно тільки для читання та викидає виняток [ReflectionException](class.reflectionexception.md) під час спроби запису.\n\n## Обумовлені константи\n\n## Модифікатори ReflectionClass\n\n**`ReflectionClass::IS_IMPLICIT_ABSTRACT`**\n\nВказує, що клас є [абстрактним](language.oop5.abstract.md)тому, що він містить абстрактні методи.\n\n**`ReflectionClass::IS_EXPLICIT_ABSTRACT`**\n\nВказує, що клас є [абстрактним](language.oop5.abstract.md)тому що так зазначено при його описі.\n\n**`ReflectionClass::IS_FINAL`**\n\nВказує, що клас є [остаточним (final)](language.oop5.final.md)\n\n**`ReflectionClass::IS_READONLY`**\n\nВказує, що клас є [readonly](language.oop5.basic.md#language.oop5.basic.class.readonly)\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Метод[ReflectionClass::export()](reflectionclass.export.md)був видалений. |\n\n## Зміст\n\n-   [ReflectionClass::\\_\\_construct](reflectionclass.construct.md)— Створює об'єкт класу ReflectionClass\n-   [ReflectionClass::export](reflectionclass.export.md) \\- Експортує клас\n-   [ReflectionClass::getAttributes](reflectionclass.getattributes.md)— Отримує атрибути\n-   [ReflectionClass::getConstant](reflectionclass.getconstant.md)— Повертає певну константу\n-   [ReflectionClass::getConstants](reflectionclass.getconstants.md)— Повертає константи\n-   [ReflectionClass::getConstructor](reflectionclass.getconstructor.md) \\- Повертає конструктор класу\n-   [ReflectionClass::getDefaultProperties](reflectionclass.getdefaultproperties.md)— Повертає властивості за промовчанням\n-   [ReflectionClass::getDocComment](reflectionclass.getdoccomment.md)— Повертає doc-блоки коментарів\n-   [ReflectionClass::getEndLine](reflectionclass.getendline.md)— Повертає номер останнього рядка\n-   [ReflectionClass::getExtension](reflectionclass.getextension.md)— Повертає об'єкт класу ReflectionExtension для модуля, що визначає клас\n-   [ReflectionClass::getExtensionName](reflectionclass.getextensionname.md) \\- Повертає ім'я модуля, що визначає клас\n-   [ReflectionClass::getFileName](reflectionclass.getfilename.md)— Повертає ім'я файлу, у якому визначено клас\n-   [ReflectionClass::getInterfaceNames](reflectionclass.getinterfacenames.md)— Повертає імена інтерфейсів\n-   [ReflectionClass::getInterfaces](reflectionclass.getinterfaces.md)— Повертає інтерфейси\n-   [ReflectionClass::getMethod](reflectionclass.getmethod.md)— Повертає екземпляр ReflectionMethod для методу класу\n-   [ReflectionClass::getMethods](reflectionclass.getmethods.md)— Повертає список методів у вигляді масиву\n-   [ReflectionClass::getModifiers](reflectionclass.getmodifiers.md)— Повертає інформацію про модифікаторів класу\n-   [ReflectionClass::getName](reflectionclass.getname.md) \\- Повертає ім'я класу\n-   [ReflectionClass::getNamespaceName](reflectionclass.getnamespacename.md)— Повертає назву простору імен\n-   [ReflectionClass::getParentClass](reflectionclass.getparentclass.md) \\- Повертає батьківський клас\n-   [ReflectionClass::getProperties](reflectionclass.getproperties.md) \\- Повертає властивості\n-   [ReflectionClass::getProperty](reflectionclass.getproperty.md)— Повертає екземпляр ReflectionProperty для якості класу\n-   [ReflectionClass::getReflectionConstant](reflectionclass.getreflectionconstant.md)— Отримує ReflectionClassConstant для константи класу\n-   [ReflectionClass::getReflectionConstants](reflectionclass.getreflectionconstants.md)— Отримує константи класу\n-   [ReflectionClass::getShortName](reflectionclass.getshortname.md) \\- Повертає коротке ім'я\n-   [ReflectionClass::getStartLine](reflectionclass.getstartline.md)— Повертає номер початкового рядка\n-   [ReflectionClass::getStaticProperties](reflectionclass.getstaticproperties.md)— Повертає статичні властивості\n-   [ReflectionClass::getStaticPropertyValue](reflectionclass.getstaticpropertyvalue.md)— Повертає значення статичної властивості\n-   [ReflectionClass::getTraitAliases](reflectionclass.gettraitaliases.md)— Повертає масив псевдонімів трейтів\n-   [ReflectionClass::getTraitNames](reflectionclass.gettraitnames.md)— Повертає масив імен трейтів, які використовуються у цьому класі\n-   [ReflectionClass::getTraits](reflectionclass.gettraits.md)— Повертає масив трейтів, які використовуються у цьому класі.\n-   [ReflectionClass::hasConstant](reflectionclass.hasconstant.md)— Перевіряє, чи визначено константу\n-   [ReflectionClass::hasMethod](reflectionclass.hasmethod.md)— Перевіряє, чи заданий метод\n-   [ReflectionClass::hasProperty](reflectionclass.hasproperty.md)— Перевіряє, чи визначено властивість\n-   [ReflectionClass::implementsInterface](reflectionclass.implementsinterface.md)— Перевіряє, чи реалізується інтерфейс\n-   [ReflectionClass::inNamespace](reflectionclass.innamespace.md)— Перевіряє, чи визначений клас у просторі імен\n-   [ReflectionClass::isAbstract](reflectionclass.isabstract.md)— Перевіряє, чи клас є абстрактним.\n-   [ReflectionClass::isAnonymous](reflectionclass.isanonymous.md)— Перевіряє, чи є клас анонімним\n-   [ReflectionClass::isCloneable](reflectionclass.iscloneable.md)— Перевіряє, чи можна клонувати цей клас\n-   [ReflectionClass::isEnum](reflectionclass.isenum.md)— Повертає, чи є клас перерахуванням\n-   [ReflectionClass::isFinal](reflectionclass.isfinal.md)— Перевіряє, чи клас остаточний (final)\n-   [ReflectionClass::isInstance](reflectionclass.isinstance.md)— Перевіряє, чи об'єкт належить класу\n-   [ReflectionClass::isInstantiable](reflectionclass.isinstantiable.md)— Перевіряє, чи можна створити екземпляр класу\n-   [ReflectionClass::isInterface](reflectionclass.isinterface.md)— Перевіряє, чи клас є інтерфейсом\n-   [ReflectionClass::isInternal](reflectionclass.isinternal.md)— Перевіряє, чи є клас вбудованим у модуль чи ядро\n-   [ReflectionClass::isIterable](reflectionclass.isiterable.md)— Перевірити, чи клас ітерується.\n-   [ReflectionClass::isIterateable](reflectionclass.isiterateable.md) \\- Псевдонім ReflectionClass::isIterable\n-   [ReflectionClass::isReadOnly](reflectionclass.isreadonly.md)— Перевіряє, чи є клас доступним лише для читання\n-   [ReflectionClass::isSubclassOf](reflectionclass.issubclassof.md)— Перевіряє, чи є клас підкласом\n-   [ReflectionClass::isTrait](reflectionclass.istrait.md)— Перевіряє, чи це є трейтом.\n-   [ReflectionClass::isUserDefined](reflectionclass.isuserdefined.md)— Перевіряє, чи є клас для користувача\n-   [ReflectionClass::newInstance](reflectionclass.newinstance.md) \\- Створює екземпляр класу з переданими аргументами\n-   [ReflectionClass::newInstanceArgs](reflectionclass.newinstanceargs.md) \\- Створює екземпляр класу з переданими параметрами\n-   [ReflectionClass::newInstanceWithoutConstructor](reflectionclass.newinstancewithoutconstructor.md) \\- Створює новий екземпляр класу без виклику конструктора\n-   [ReflectionClass::setStaticPropertyValue](reflectionclass.setstaticpropertyvalue.md) \\- Встановлює значення статичної властивості\n-   [ReflectionClass::\\_\\_function toString() { \\[native code\\] }](reflectionclass.tostring.md)— Повертає рядкову виставу об'єкта класу ReflectionClass\n","title":"Клас ReflectionClass","contentType":2,"navigation":[{"reflection.getmodifiernames.md":"« Reflection::getModifierNames"},{"reflectionclass.construct.md":"ReflectionClass::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.reflection.md":"Reflection"}]}},"__N_SSG":true}