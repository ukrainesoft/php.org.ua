{"pageProps":{"page":{"slug":"quickhashinthash.loadfromfile.md","content":"# QuickHashIntHash::loadFromFile\n\n(PECL quickhash >= Unknown)\n\nQuickHashIntHash::loadFromFile — Фабричний метод створює хеш із файлу\n\n### Опис\n\n```methodsynopsis\npublic static QuickHashIntHash::loadFromFile(string $filename, int $options = ?): QuickHashIntHash\n```\n\nЦей фабричний метод створює новий хеш із файлу визначення на диску. Формат файлу складається із сигнатури `'QH\\0x11\\0'`Кількість елементів у вигляді 32-бітного цілого числа зі знаком у системному порядку байтів, потім 32-бітних цілих чисел зі знаком, упакованих разом у системний порядок байтів. Для кожного елемента хеша зберігаються два 32-бітових цілих числа зі знаком. Перше - ключ, а друге - значення, що належить ключу. Прикладом може бути:\n\n**Приклад #1 Формат файлу QuickHash IntHash**\n\n```\n00000000  51 48 11 00 02 00 00 00  01 00 00 00 01 00 00 00  |QH..............|\n00000010  03 00 00 00 09 00 00 00                           |........|\n00000018\n```\n\n**Приклад #2 Формат файлу QuickHash IntHash**\n\n```\nheader signature ('QH'; key type: 1; value type: 1; filler: \\0x00)\n00000000  51 48 11 00\n\nnumber of elements:\n00000004  02 00 00 00\n\ndata string:\n00000000  01 00 00 00 01 00 00 00  03 00 00 00 09 00 00 00\n\nkey/value 1 (key = 1, value = 1)\n01 00 00 00  01 00 00 00\n\nkey/value 2 (key = 3, value = 9)\n03 00 00 00  09 00 00 00\n```\n\n### Список параметрів\n\n`filename`\n\nІм'я файлу, з якого потрібно рахувати хеш.\n\n`options`\n\nТі самі параметри, які приймає конструктор класу; за винятком того, що ігнорується параметр `size`. Він автоматично обчислюється як кількість записів у хеш, округляється до найближчого ступеня числа 2 з максимальним обмеженням `4194304`\n\n### Значення, що повертаються\n\nПовертає новий об'єкт [QuickHashIntHash](class.quickhashinthash.md)\n\n### Приклади\n\n**Приклад #3 Приклад використання** QuickHashIntHash::loadFromFile()\\*\\*\\*\\*\n\n```php\n<?php\n$file = dirname( __FILE__ ) . \"/simple.hash\";\n$hash = QuickHashIntHash::loadFromFile(\n    $file,\n    QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Ключ %3d (%2x) %s\\n\",\n        $key, $key,\n        $hash->exists( $key ) ? 'установлен' : 'не установлен'\n    );\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nКлюч   0 ( 0) не установлен\nКлюч   1 ( 1) установлен\nКлюч   2 ( 2) установлен\nКлюч   3 ( 3) установлен\nКлюч   4 ( 4) не установлен\nКлюч   5 ( 5) установлен\nКлюч   6 ( 6) не установлен\nКлюч   7 ( 7) установлен\nКлюч   8 ( 8) не установлен\nКлюч   9 ( 9) не установлен\nКлюч  10 ( a) не установлен\nКлюч  11 ( b) установлен\nКлюч  12 ( c) не установлен\nКлюч  13 ( d) установлен\nКлюч  14 ( e) не установлен\nКлюч  15 ( f) не установлен\n```\n","title":"QuickHashIntHash::loadFromFile","contentType":2,"navigation":[{"quickhashinthash.getsize.md":"« QuickHashIntHash::getSize"},{"quickhashinthash.loadfromstring.md":"QuickHashIntHash::loadFromString »"},{"index.md":"PHP Manual"},{"class.quickhashinthash.md":"QuickHashIntHash"}]}},"__N_SSG":true}