{"pageProps":{"page":{"slug":"migration73.incompatible.md","content":"## Зміни, що ламають зворотну сумісність\n\n### Ядро PHP\n\n#### Інтерпретація ідентифікатора, що закриває Heredoc/Nowdoc\n\nБлагодаря введению[гнучкого синтаксису heredoc/nowdoc](migration73.new-features.md#migration73.new-features.core.heredoc), doc-рядки, що містять ідентифікатори, що закривають всередині свого тіла, можуть викликати синтаксичні помилки або зміни в інтерпретації. Приклад:\n\n```php\n<?php\n$str = <<<FOO\nabcdefg\n   FOO\nFOO;\n?>\n```\n\nЗ відступом `FOO` раніше не мав особливого значення. Тепер він буде інтерпретуватися як кінець heredoc-рядка і наступний `FOO;` призведе до синтаксичної помилки. Ця проблема завжди може бути вирішена шляхом вибору ідентифікатора, що закриває, який не використовується у вмісті рядка.\n\n#### Генерування попередження в continue, що використовується в switch\n\nВирази `continue`, що використовуються в структурах управління потоку `switch` тепер видаватиме попередження. У PHP такі висловлювання `continue` еквіваленти `break`, в той час, як в інших мовах вони поводяться як `continue 2`\n\n```php\n<?php\nwhile ($foo) {\n    switch ($bar) {\n      case \"baz\":\n         continue;\n         // Предупреждение: \"continue\" эквивалентен\n         //          \"break\". Возможно, вы имели в виду \"continue 2\"?\n   }\n}\n?>\n```\n\n#### Сувора інтерпретація цілих рядкових ключів на ArrayAccess\n\nДоступ к массиву типа`$obj[\"123\"]`, где`$obj` реалізує [ArrayAccess](class.arrayaccess.md), а`\"123\"` - це цілий рядковий літерал, більше не призведе до неявного перетворення в ціле число, тобто . `$obj->offsetGet(\"123\")` замість `$obj->offsetGet(123)`. Це відповідає існуючій поведінці для нелітеральних значень. Поведінка масивів не змінилося, вони продовжують неявно перетворювати цілі рядкові ключі на цілі числа.\n\n#### Статичні властивості більше не поділяються присвоєнням за посиланням\n\nУ PHP статичні властивості спільно використовуються наслідуючими класами, якщо статичну властивість явно не перевизначено у дочірньому класі. Однак через помилку реалізації можна було відокремити статичні властивості, надавши їх за посиланням. Ця лазівка ​​була виправлена.\n\n```php\n<?php\nclass Test {\n    public static $x = 0;\n}\nclass Test2 extends Test { }\n\nTest2::$x = &$x;\n$x = 1;\n\nvar_dump(Test::$x, Test2::$x);\n// Ранее:  int(0), int(1)\n// Теперь: int(1), int(1)\n?>\n```\n\n#### Посилання, що повертаються при доступі до масиву або властивості, негайно розпаковуються.\n\nПосилання, що повертаються доступом до масиву та властивості, тепер розпаковуються як частина доступу. Це означає, що більше неможливо змінити посилання між доступом та використанням доступного значення:\n\n```php\n<?php\n$arr = [1];\n$ref =& $arr[0];\nvar_dump($arr[0] + ($arr[0] = 2));\n// Ранее: int(4), Теперь: int(3)\n?>\n```\n\nЦе робить поведінку посилань і без узгоджених посилань. Зверніть увагу, що читання та запис значення всередині одного виразу залишається невизначеною поведінкою і може змінитися у майбутньому.\n\n#### Розпакування аргументу зі значенням Traversable з нечисловими ключами більше не підтримується\n\nРозпакування аргументів перестало працювати зі значенням [Traversable](class.traversable.md) із нечисловими ключами. Наступний код працює в PHP 5.6-7.2 помилково.\n\n```php\n<?php\nfunction foo(...$args) {\n    var_dump($args);\n}\nfunction gen() {\n    yield 1.23 => 123;\n}\nfoo(...gen());\n?>\n```\n\n#### Різне\n\nУтиліта ext\\_skel була повністю перероблена із новими опціями, а деякі старі опції видалені. Тепер вона написана на PHP та не має зовнішніх залежностей.\n\nПідтримку BeOS було припинено.\n\nВинятки, викинуті через автоматичне перетворення попереджень у виключення у режимі `EH_THROW` (наприклад, деякі винятки [DateTime](class.datetime.md)), більше не заповнюють стан [error\\_get\\_last()](function.error-get-last.md). Таким чином, вони тепер працюють так само, як викинуті винятки вручну.\n\nИсключение[TypeError](class.typeerror.md) тепер вказує на правильні типи `int`и`bool` замість `integer`и`boolean`відповідно.\n\nПро невизначені змінні, передані в [compact()](function.compact.md), тепер буде повідомлено повідомленням.\n\nФункция[getimagesize()](function.getimagesize.md) і пов'язані з нею функції тепер повідомляють mime-типи зображень BMP як `image/bmp` замість `image/x-ms-bmp`оскільки перший зареєстрований в IANA (дивіться [» RFC 7903](http://www.faqs.org/rfcs/rfc7903)\n\nФункция[stream\\_socket\\_get\\_name()](function.stream-socket-get-name.md) тепер повертає адреси IPv6, укладені у квадратні дужки. Наприклад, буде повернуто рядок `\"[::1]:1337\"` замість `\"::1:1337\"`\n\n### Довільної точності математика BCMath\n\nУсі попередження, викинуті [функціями BCMath](ref.bc.md)Тепер використовують обробку помилок PHP. Раніше деякі попередження були надіслані безпосередньо в потік stderr.\n\nФункції [bcmul()](function.bcmul.md) і [bcpow()](function.bcpow.md) тепер повертають числа із запитаним масштабом. Раніше числа, що поверталися, могли опускати завершальні десяткові нулі.\n\n### IMAP, POP3 та NNTP\n\nЛогіни **rsh** **ssh** за замовчуванням вимкнено. Використовуйте [imap.enable\\_insecure\\_rsh](imap.configuration.md#ini.imap.enable-insecure-rsh)якщо ви хочете включити їх. Зверніть увагу, що бібліотека IMAP не фільтрує імена поштових скриньок перед передачею їх команді **rsh** **ssh**, таким чином, передача ненадійних даних цієї функції із включеним **rsh** **ssh** небезпечна.\n\n### Мультибайтові рядки\n\nЧерез додаткову підтримку іменованих фрагментів, патерни `mb_ereg_*()` з використанням іменованих фрагментів будуть поводитися по-різному. Зокрема, іменовані фрагменти будуть частиною збігів, а [mb\\_ereg\\_replace()](function.mb-ereg-replace.md) інтерпретуватиме додатковий синтаксис. Дивіться [Іменовані фрагменти](migration73.new-features.md#migration73.new-features.mbstring.named-captures) для отримання додаткової інформації.\n\n### Поліпшений модуль MySQL\n\nПідготовлені запити тепер правильно вказують на дрібні секунди для стовпців `DATETIME` `TIME`и`TIMESTAMP` із вказівником десяткових знаків (наприклад, `TIMESTAMP(6)` при використанні мікросекунд). Раніше частина дробових секунд була просто опущена з значень, що повертаються.\n\n### Функції MySQL (PDO\\_MYSQL)\n\nПідготовлені запити тепер правильно вказують на дрібні секунди для стовпців `DATETIME` `TIME`и`TIMESTAMP` зі специфікатором десяткових знаків (наприклад, `TIMESTAMP(6)` при використанні мікросекунд). Раніше, дробова частина секунд була просто опущена з значень, що повертаються. Зверніть увагу, що це впливає лише на використання [PDO\\_MYSQL](ref.pdo-mysql.md) з відключеною емуляцією підготовлених запитів (наприклад, з використанням нативної функціональності). Запити, що використовують з'єднання, які мають опцію **`PDO::ATTR_EMULATE_PREPARES`**\\=**`true`** (значення за умовчанням), були порушені даним виправленням помилки і вже отримували коректні значення часткою секунди від движка.\n\n### Reflection\n\nЕкспорт об'єктів [Reflection](book.reflection.md) у рядок тепер використовує `int`) и`bool`) замість `integer`and`boolean`відповідно.\n\n### Стандартна бібліотека PHP (SPL)\n\nЕсли автозагрузчик[SPL](book.spl.md) викидає виняток, що наступні автозавантажувачі не будуть виконуватися. Раніше всі автозавантажувачі виконувались, а винятки об'єднувалися в ланцюжок викликів.\n\n### SimpleXML\n\nМатематичні операції, що включають об'єкти [SimpleXML](book.simplexml.md)Тепер будуть обробляти текст як ціле число (int) або число з плаваючою точкою (float), залежно від того, що є більш відповідним. Раніше значення оброблялися як цілі числа без будь-яких умов.\n\n### Вхідні Cookies\n\nПочинаючи з PHP 7.3.23 *імена* вхідні cookie більше не декодуються з URL-закодованого рядка з міркувань безпеки.\n","title":"Зміни, що ламають зворотну сумісність","contentType":2,"navigation":[{"migration73.constants.md":"« Нові глобальні константи"},{"migration73.deprecated.md":"Функціонал, оголошений застарілим у PHP 7.3.x »"},{"index.md":"PHP Manual"},{"migration73.md":"Міграція з PHP 7.2.x на PHP 7.3.x"}]}},"__N_SSG":true}