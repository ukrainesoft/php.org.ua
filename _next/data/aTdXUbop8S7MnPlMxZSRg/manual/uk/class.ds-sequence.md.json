{"pageProps":{"page":{"slug":"class.ds-sequence.md","content":"# Інтерфейс Sequence\n\n(PECL ds >= 1.0.0)\n\n## Вступ\n\nПослідовність описує поведінку, у якому значення розподілені у одному, лінійному порядку. У деяких мовах ця поведінка описується як \"List\". Це схоже на масив, в якому використовуються цілі ключі, за винятком декількох моментів:\n\n-   Значення завжди проіндексовані по порядку\\[0, 1, 2, …, size - 1\\]\n-   Можна звертатися лише до значень індексованих у діапазоні\\[0, size - 1\\]\n\nУ яких випадках використовується:\n\n-   Якщо ви хочете використовувати масив як список (не звертаючи уваги на ключі).\n-   Більш ефективна альтернатива для[SplDoublyLinkedList](class.spldoublylinkedlist.md) і [SplFixedArray](class.splfixedarray.md)\n\n## Огляд інтерфейсів\n\n```classsynopsis\n\n    interface Ds\\Sequence\n\n    extends\n      Ds\\Collection,\n     ArrayAccess {\n\n    /* Методы */\n    \n   abstract public allocate(int $capacity): void\nabstract public apply(callable $callback): void\nabstract public capacity(): int\nabstract public contains(mixed ...$values): bool\nabstract public filter(callable $callback = ?): Ds\\Sequence\nabstract public find(mixed $value): mixed\nabstract public first(): mixed\nabstract public get(int $index): mixed\nabstract public insert(int $index, mixed ...$values): void\nabstract public join(string $glue = ?): string\nabstract public last(): mixed\nabstract public map(callable $callback): Ds\\Sequence\nabstract public merge(mixed $values): Ds\\Sequence\nabstract public pop(): mixed\nabstract public push(mixed ...$values): void\nabstract public reduce(callable $callback, mixed $initial = ?): mixed\nabstract public remove(int $index): mixed\nabstract public reverse(): void\nabstract public reversed(): Ds\\Sequence\nabstract public rotate(int $rotations): void\nabstract public set(int $index, mixed $value): void\nabstract public shift(): mixed\nabstract public slice(int $index, int $length = ?): Ds\\Sequence\nabstract public sort(callable $comparator = ?): void\nabstract public sorted(callable $comparator = ?): Ds\\Sequence\nabstract public sum(): int|float\nabstract public unshift(mixed $values = ?): void\n\n\n    /* Наследуемые методы */\n    public Ds\\Collection::clear(): void\npublic Ds\\Collection::copy(): Ds\\Collection\npublic Ds\\Collection::isEmpty(): bool\npublic Ds\\Collection::toArray(): array\n\n    public Countable::count(): int\n\n    public IteratorAggregate::getIterator(): Traversable\n\n    public JsonSerializable::jsonSerialize(): mixed\n\n    public ArrayAccess::offsetExists(mixed $offset): bool\npublic ArrayAccess::offsetGet(mixed $offset): mixed\npublic ArrayAccess::offsetSet(mixed $offset, mixed $value): void\npublic ArrayAccess::offsetUnset(mixed $offset): void\n\n\n   }\n```\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL ds 1.3.0 | Тепер клас реалізує [ArrayAccess](class.arrayaccess.md) |\n\n## Зміст\n\n-   [Ds\\\\Sequence::allocate](ds-sequence.allocate.md)— Виділення пам'яті під зазначену місткість\n-   [Ds\\\\Sequence::apply](ds-sequence.apply.md)— Оновлення всіх значень застосуванням переданої callback-функції до них\n-   [Ds\\\\Sequence::capacity](ds-sequence.capacity.md)— Повертає поточну місткість\n-   [Ds\\\\Sequence::contains](ds-sequence.contains.md)— Перевіряє, чи містяться в колекції задані значення\n-   [Ds\\\\Sequence::filter](ds-sequence.filter.md)— Створює нову послідовність елементів, вибраних за допомогою заданої callback-функції\n-   [Ds\\\\Sequence::find](ds-sequence.find.md) \\- Пошук індексу за значенням\n-   [Ds\\\\Sequence::first](ds-sequence.first.md)— Повертає перший елемент колекції\n-   [Ds\\\\Sequence::get](ds-sequence.get.md)— Повертає значення за індексом\n-   [Ds\\\\Sequence::insert](ds-sequence.insert.md)— Вставляє значення за вказаним індексом\n-   [Ds\\\\Sequence::join](ds-sequence.join.md) \\- Склеює всі значення в рядок\n-   [Ds\\\\Sequence::last](ds-sequence.last.md)— Повертає останнє значення колекції\n-   [Ds\\\\Sequence::map](ds-sequence.map.md)— Повертає результат застосування callback-функції до всіх значень колекції.\n-   [Ds\\\\Sequence::merge](ds-sequence.merge.md)— Повертає результат додавання всіх заданих значень до колекції\n-   [Ds\\\\Sequence::pop](ds-sequence.pop.md)— Видаляє та повертає останнє значення\n-   [Ds\\\\Sequence::push](ds-sequence.push.md)— Додає значення до кінця послідовності\n-   [Ds\\\\Sequence::reduce](ds-sequence.reduce.md) \\- Сплескує колекцію до одного значення використовуючи callback-функцію\n-   [Ds\\\\Sequence::remove](ds-sequence.remove.md)— Видаляє та повертає значення за індексом\n-   [Ds\\\\Sequence::reverse](ds-sequence.reverse.md)— Перевертає поточну колекцію\n-   [Ds\\\\Sequence::reversed](ds-sequence.reversed.md)— Повертає перегорнуту копію колекції\n-   [Ds\\\\Sequence::rotate](ds-sequence.rotate.md)— Перемотує послідовність на задану кількість значень\n-   [Ds\\\\Sequence::set](ds-sequence.set.md)— Замінює значення за вказаним індексом\n-   [Ds\\\\Sequence::shift](ds-sequence.shift.md)— Видаляє та повертає перше значення\n-   [Ds\\\\Sequence::slice](ds-sequence.slice.md)— Повертає під-колекцію із заданого діапазону\n-   [Ds\\\\Sequence::sort](ds-sequence.sort.md)— Сортує колекцію\n-   [Ds\\\\Sequence::sorted](ds-sequence.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n-   [Ds\\\\Sequence::sum](ds-sequence.sum.md)— Повертає суму всіх значень колекції\n-   [Ds\\\\Sequence::unshift](ds-sequence.unshift.md)— Додає значення на початок послідовності\n","title":"Інтерфейс Sequence","contentType":2,"navigation":[{"ds-hashable.hash.md":"« Ds\\\\Hashable::hash"},{"ds-sequence.allocate.md":"Ds\\\\Sequence::allocate »"},{"index.md":"PHP Manual"},{"book.ds.md":"Структури даних"}]}},"__N_SSG":true}