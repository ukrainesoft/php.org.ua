{"pageProps":{"page":{"slug":"class.event.md","content":"# Клас Event\n\n(PECL event >= 1.2.6-beta)\n\n## Вступ\n\nКласс**Event** представляє та спрацьовує на наступні події: файловий дескриптор готовий до читання чи запису; стає готовим до читання або запису (тільки edge-triggered I/O (одноразове спрацьовування)); закінчується очікування; отримано системний сигнал; відбулася користувальницька подія.\n\nКожна подія пов'язана з [EventBase](class.eventbase.md) . Однак подія не буде оброблена, доки не буде *додано*с помощью метода[Event::add()](event.add.md). Додана подія знаходиться у статусі очікування *pending*, Доки воно не відбулося. Після цього воно переходить у статус активно (*active*). Для обробки подій користувач може зареєструвати функцію зворотного дзвінка, яка буде викликана в момент переходу на активний статус. Якщо подія налаштована як постійна (*persistent*), воно повернеться у статус очікування. Якщо воно не постійне, воно вийде з режиму очікування після запуску функції зворотного дзвінка. Метод [Event::del()](event.del.md) *видаляє*відповідно виводячи його зі статусу очікування. Додати його за новою можна за допомогою методу [Event::add()](event.add.md)\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      final\n      class Event\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      ET = 32;\n\n    const\n     int\n      PERSIST = 16;\n\n    const\n     int\n      READ = 2;\n\n    const\n     int\n      WRITE = 4;\n\n    const\n     int\n      SIGNAL = 8;\n\n    const\n     int\n      TIMEOUT = 1;\n\n    /* Свойства */\n    public\n     readonly\n     bool\n      $pending;\n\n    /* Методы */\n    \n   public\n   add(\n    float\n     $timeout\n    = ?): bool\npublic\n   __construct(    \n    EventBase\n     $base\n   ,    \n    mixed\n     $fd\n   ,    \n    int\n     $what\n   ,    \n    callable\n     $cb\n   ,    \n    mixed\n     $arg\n     = NULL\n   )\npublic\n   del(): bool\npublic\n   free(): void\npublic\n   static\n   getSupportedMethods(): array\npublic\n   pending(\n    int\n     $flags\n   ): bool\npublic\n   set(    \n    EventBase\n     $base\n   ,    \n    mixed\n     $fd\n   ,    \n    int\n     $what\n    = ?,    \n    callable\n     $cb\n    = ?,    \n    mixed\n     $arg\n    = ?): bool\npublic\n   setPriority(\n    int\n     $priority\n   ): bool\npublic\n   setTimer(\n    EventBase\n     $base\n   , \n    callable\n     $cb\n   , \n    mixed\n     $arg\n    = ?): bool\npublic\n   static\n   signal(    \n    EventBase\n     $base\n   ,    \n    int\n     $signum\n   ,    \n    callable\n     $cb\n   ,    \n    mixed\n     $arg\n    = ?): Event\npublic\n   static\n   timer(\n    EventBase\n     $base\n   , \n    callable\n     $cb\n   , \n    mixed\n     $arg\n    = ?): Event\n\n   }\n```\n\n## Властивості\n\npending\n\nПозначає, що подія може очікувати. Дивіться [Про постійні події](event.persistence.md)\n\n## Обумовлені константи\n\n**`Event::ET`**\n\nОзначає, що подія повинна спрацьовувати один раз при зміні статусу (edge-triggered), якщо бекенд, що використовується, підтримує таку поведінку. Це впливає на семантику **`Event::READ`** і **`Event::WRITE`**\n\n**`Event::PERSIST`**\n\nПозначає, що подія стала. Дивіться [Про постійні події](event.persistence.md)\n\n**`Event::READ`**\n\nЦей прапор вказує на подію, яка стає активною, коли наданий файл (зазвичай потоковий ресурс або сокет) готовий до читання.\n\n**`Event::WRITE`**\n\nЦей прапор вказує на подію, яка стає активною, коли наданий файл (зазвичай потоковий ресурс або сокет) готовий до запису.\n\n**`Event::SIGNAL`**\n\nВикористовується для відстеження системних сигналів. Дивіться \"Створення подій для сигналів\" нижче.\n\n**`Event::TIMEOUT`**\n\nПрапор означає, що активувалася подія після закінчення очікування (timeout).\n\nФлаг\\*\\*`Event::TIMEOUT`\\*\\* ігнорується при створенні події: його можна встановити за *додаванні*. Він задається в аргументі `$what` функції зворотного дзвінка, якщо відбулася подія цього типу.\n\n## Зміст\n\n-   [Event::add](event.add.md)— Перевести подію у стан очікування\n-   [Event::addSignal](event.addsignal.md) \\- Псевдонім Event:: add\n-   [Event::addTimer](event.addtimer.md) \\- Псевдонім Event:: add\n-   [Event::\\_\\_construct](event.construct.md) \\- Конструктор об'єкта Event\n-   [Event::del](event.del.md) \\- Перевести подію в пасивний стан\n-   [Event::delSignal](event.delsignal.md) \\- Псевдонім Event::del\n-   [Event::delTimer](event.deltimer.md) \\- Псевдонім Event::del\n-   [Event::free](event.free.md)— Перевести подію в пасивний стан та звільнити всі виділені для неї ресурси\n-   [Event::getSupportedMethods](event.getsupportedmethods.md)— Отримати масив з іменами методів, які підтримуються в поточній версії Libevent\n-   [Event::pending](event.pending.md)— Перевірити, що подія перебуває у стані очікування або що вона запланована\n-   [Event::set](event.set.md) \\- Переконфігурувати подію\n-   [Event::setPriority](event.setpriority.md) \\- Задати пріоритет події\n-   [Event::setTimer](event.settimer.md) \\- Переконфігурація події таймера\n-   [Event::signal](event.signal.md) \\- Створити об'єкт події сигналу\n-   [Event::timer](event.timer.md) \\- Створити об'єкт події таймера\n","title":"Клас Event","contentType":2,"navigation":[{"event.constructing.signal.events.md":"« Створення подій для сигналів"},{"event.add.md":"Event::add »"},{"index.md":"PHP Manual"},{"book.event.md":"Event"}]}},"__N_SSG":true}