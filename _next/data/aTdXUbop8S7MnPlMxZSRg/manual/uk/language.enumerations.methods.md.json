{"pageProps":{"page":{"slug":"language.enumerations.methods.md","content":"## Методи перерахувань\n\nПерерахування (як чисті, і типизированные) можуть містити методи і можуть реалізовувати інтерфейси. Якщо перерахування реалізує інтерфейс, то будь-яка перевірка типу цього інтерфейсу також прийме всі варіанти цього перерахування.\n\n```php\n<?php\n\ninterface Colorful\n{\n    public function color(): string;\n}\n\nenum Suit implements Colorful\n{\n    case Hearts;\n    case Diamonds;\n    case Clubs;\n    case Spades;\n\n    // Выполняет контракт интерфейса.\n    public function color(): string\n    {\n        return match($this) {\n            Suit::Hearts, Suit::Diamonds => 'Красный',\n            Suit::Clubs, Suit::Spades => 'Чёрный'\n        };\n    }\n\n    // Не часть интерфейса; хорошо.\n    public function shape(): string\n    {\n        return \"Rectangle\";\n    }\n}\n\nfunction paint(Colorful $c)\n{\n   /* ... */\n}\n\npaint(Suit::Clubs);  // Работает\n\nprint Suit::Diamonds->shape(); // выведет \"Rectangle\"\n?>\n```\n\nУ цьому прикладі кожен із чотирьох екземплярів `Suit`имеет два метода:`color()`и`shape()`. У коді, що викликає, і при перевірці типів екземпляри перерахування поводяться точно так само, як і будь-який інший екземпляр об'єкта.\n\nУ типізованих переліках оголошення інтерфейсу відбувається після оголошення типу перерахунку.\n\n```php\n<?php\n\ninterface Colorful\n{\n    public function color(): string;\n}\n\nenum Suit: string implements Colorful\n{\n    case Hearts = 'H';\n    case Diamonds = 'D';\n    case Clubs = 'C';\n    case Spades = 'S';\n\n    // Выполняет интерфейсный контракт.\n    public function color(): string\n    {\n        return match($this) {\n            Suit::Hearts, Suit::Diamonds => 'Красный',\n            Suit::Clubs, Suit::Spades => 'Чёрный'\n        };\n    }\n}\n?>\n```\n\nПеременная`$this` визначено всередині методу і посилається на екземпляр варіанта.\n\nСкладність методів у перерахування не обмежена, але на практиці методи перерахувань частіше повертають статичне значення або результат обробки змінної `$this` виразом [match](control-structures.match.md)щоб результати обробки окремих екземплярів перерахування відрізнялися.\n\nЗверніть увагу, у цьому прикладі кращою практикою побудови даних було б визначити тип перерахування `SuitColor` зі значеннями Red та Black і повертати їх замість рядкових літералів. Однак це ускладнило б приклад.\n\nІєрархія в прикладі логічно схожа на наступну структуру класів (хоча це не справжній код, що виконується):\n\n```php\n<?php\n\ninterface Colorful\n{\n    public function color(): string;\n}\n\nfinal class Suit implements UnitEnum, Colorful\n{\n    public const Hearts = new self('Hearts');\n    public const Diamonds = new self('Diamonds');\n    public const Clubs = new self('Clubs');\n    public const Spades = new self('Spades');\n\n    private function __construct(public readonly string $name) {}\n\n    public function color(): string\n    {\n        return match($this) {\n            Suit::Hearts, Suit::Diamonds => 'Красный',\n            Suit::Clubs, Suit::Spades => 'Чёрный'\n        };\n    }\n\n    public function shape(): string\n    {\n        return \"Прямоугольник\";\n    }\n\n    public static function cases(): array\n    {\n        // Недопустимый метод, поскольку определение метода cases() в перечислениях вручную запрещено.\n        // Смотрите также раздел \"Список значений\".\n    }\n}\n?>\n```\n\nУ переліках дозволено оголошувати загальнодоступні, закриті та захищені методи, хоча на практиці закриті та захищені методи еквівалентні, оскільки успадкування не дозволене.\n","title":"Методи перерахувань","contentType":2,"navigation":[{"language.enumerations.backed.md":"Типізовані перерахування"},{"language.enumerations.static-methods.md":"Статичні методи перерахувань »"},{"index.md":"PHP Manual"},{"language.enumerations.md":"Перерахування"}]}},"__N_SSG":true}