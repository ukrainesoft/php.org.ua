{"pageProps":{"page":{"slug":"class.evio.md","content":"# Клас EvIo\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nСпостерігачі **EvIo** перевіряють, чи є файл, сокет або потік, що перетворюється на числовий дескриптор файлу, доступним на читання або запис при кожній ітерації подійного циклу, або, якщо точніше, коли читання не заблокує процес, а запис зможе бути зроблено. Така поведінка називається *перемикання рівня (level-triggering)*, тому, що події будуть створюватися весь час, поки зберігається відстежуваний стан. Для припинення створення подій потрібно просто зупинити спостерігача.\n\nКількість таких спостерігачів для одного файлового дескриптора `fd` НЕ обмежено. Бажано, але не обов'язково встановити для файлового дескриптора неблокуючий режим.\n\nІнший момент, який необхідно пам'ятати, це те, що завжди існує можливість помилкового спрацьовування. Наприклад **`Ev::READ`** викличе callback-функцію, але в той же час файл заблокується під запитом *read()*. У таку ситуацію дуже легко потрапити і тому рекомендується завжди використовувати неблокуючий ввод/вывод. Повернення *read()* додаткового **`EAGAIN`** набагато краще, ніж \"зависання\" програми в очікуванні даних.\n\nЯкщо з якихось причин неможливо використати `fd` в неблокуючому режимі, то має сенс додатково перевіряти, чи файл на читання в даний конкретний момент доступний. Хтось додатково використовує **`SIGALRM`** та внутрішній таймер для перевірки, що блокування не вічне.\n\nНамагайтеся завжди використовувати режим, що не блокує.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvIo\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $fd;\n\n    public\n      $events;\n\n    /* Наследуемые свойства */\n    public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    mixed\n     $fd\n   ,    \n    int\n     $events\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n    = ?,    \n    int\n     $priority\n    = ?)\n\n    final\n   public\n   static\n   createStopped(    \n    mixed\n     $fd\n   ,    \n    int\n     $events\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvIo\npublic\n   set(\n    mixed\n     $fd\n   , \n    int\n     $events\n   ): void\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Властивості\n\nfd\n\nevents\n\n## Зміст\n\n-   [EvIo::\\_\\_construct](evio.construct.md) \\- Створює об'єкт спостерігач EvIo\n-   [EvIo::createStopped](evio.createstopped.md)— Створює зупинений об'єкт спостерігача EvIo\n-   [EvIo::set](evio.set.md) \\- Конфігурування спостерігача\n","title":"Клас EvIo","contentType":2,"navigation":[{"evidle.createstopped.md":"« EvIdle::createStopped"},{"evio.construct.md":"EvIo::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}