{"pageProps":{"page":{"slug":"class.reflectionenum.md","content":"# Клас ReflectionEnum\n\n(PHP 8 >= 8.1.0)\n\n## Вступ\n\nКласс**ReflectionEnum** повідомляє інформацію про перерахування.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class ReflectionEnum\n    \n\n    \n     extends\n      ReflectionClass\n     {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      ReflectionClass::IS_IMPLICIT_ABSTRACT;\npublic\n     const\n     int\n      ReflectionClass::IS_EXPLICIT_ABSTRACT;\npublic\n     const\n     int\n      ReflectionClass::IS_FINAL;\npublic\n     const\n     int\n      ReflectionClass::IS_READONLY;\n\n\n    /* Наследуемые свойства */\n    public\n     string\n      $name;\n\n\n    /* Методы */\n    \n   public __construct(object|string $objectOrClass)\n\n    public getBackingType(): ?ReflectionNamedType\npublic getCase(string $name): ReflectionEnumUnitCase\npublic getCases(): array\npublic hasCase(string $name): bool\npublic isBacked(): bool\n\n\n    /* Наследуемые методы */\n    public static ReflectionClass::export(mixed $argument, bool $return = false): string\npublic ReflectionClass::getAttributes(?string $name = null, int $flags = 0): array\npublic ReflectionClass::getConstant(string $name): mixed\npublic ReflectionClass::getConstants(?int $filter = null): array\npublic ReflectionClass::getConstructor(): ?ReflectionMethod\npublic ReflectionClass::getDefaultProperties(): array\npublic ReflectionClass::getDocComment(): string|false\npublic ReflectionClass::getEndLine(): int|false\npublic ReflectionClass::getExtension(): ?ReflectionExtension\npublic ReflectionClass::getExtensionName(): string|false\npublic ReflectionClass::getFileName(): string|false\npublic ReflectionClass::getInterfaceNames(): array\npublic ReflectionClass::getInterfaces(): array\npublic ReflectionClass::getMethod(string $name): ReflectionMethod\npublic ReflectionClass::getMethods(?int $filter = null): array\npublic ReflectionClass::getModifiers(): int\npublic ReflectionClass::getName(): string\npublic ReflectionClass::getNamespaceName(): string\npublic ReflectionClass::getParentClass(): ReflectionClass|false\npublic ReflectionClass::getProperties(?int $filter = null): array\npublic ReflectionClass::getProperty(string $name): ReflectionProperty\npublic ReflectionClass::getReflectionConstant(string $name): ReflectionClassConstant|false\npublic ReflectionClass::getReflectionConstants(?int $filter = null): array\npublic ReflectionClass::getShortName(): string\npublic ReflectionClass::getStartLine(): int|false\npublic ReflectionClass::getStaticProperties(): array\npublic ReflectionClass::getStaticPropertyValue(string $name, mixed &$def_value = ?): mixed\npublic ReflectionClass::getTraitAliases(): array\npublic ReflectionClass::getTraitNames(): array\npublic ReflectionClass::getTraits(): array\npublic ReflectionClass::hasConstant(string $name): bool\npublic ReflectionClass::hasMethod(string $name): bool\npublic ReflectionClass::hasProperty(string $name): bool\npublic ReflectionClass::implementsInterface(ReflectionClass|string $interface): bool\npublic ReflectionClass::inNamespace(): bool\npublic ReflectionClass::isAbstract(): bool\npublic ReflectionClass::isAnonymous(): bool\npublic ReflectionClass::isCloneable(): bool\npublic ReflectionClass::isEnum(): bool\npublic ReflectionClass::isFinal(): bool\npublic ReflectionClass::isInstance(object $object): bool\npublic ReflectionClass::isInstantiable(): bool\npublic ReflectionClass::isInterface(): bool\npublic ReflectionClass::isInternal(): bool\npublic ReflectionClass::isIterable(): bool\npublic ReflectionClass::isReadOnly(): bool\npublic ReflectionClass::isSubclassOf(ReflectionClass|string $class): bool\npublic ReflectionClass::isTrait(): bool\npublic ReflectionClass::isUserDefined(): bool\npublic ReflectionClass::newInstance(mixed ...$args): object\npublic ReflectionClass::newInstanceArgs(array $args = []): ?object\npublic ReflectionClass::newInstanceWithoutConstructor(): object\npublic ReflectionClass::setStaticPropertyValue(string $name, mixed $value): void\npublic ReflectionClass::__toString(): string\n\n   }\n```\n\n## Дивіться також\n\n-   [Перерахування](language.enumerations.md)\n\n## Зміст\n\n-   [ReflectionEnum::\\_\\_construct](reflectionenum.construct.md)— Створює об'єкт ReflectionEnum\n-   [ReflectionEnum::getBackingType](reflectionenum.getbackingtype.md)— Отримує тип перерахування, якщо є\n-   [ReflectionEnum::getCase](reflectionenum.getcase.md)— Повертає певний варіант перерахування\n-   [ReflectionEnum::getCases](reflectionenum.getcases.md)— Повертає список усіх варіантів перерахування\n-   [ReflectionEnum::hasCase](reflectionenum.hascase.md) \\- Перевіряє варіант перерахування\n-   [ReflectionEnum::isBacked](reflectionenum.isbacked.md)— Визначає, чи є перерахування типовим\n","title":"Клас ReflectionEnum","contentType":2,"navigation":[{"reflectionclassconstant.tostring.md":"« ReflectionClassConstant::\\_\\_function toString() { [native code] }"},{"reflectionenum.construct.md":"ReflectionEnum::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.reflection.md":"Reflection"}]}},"__N_SSG":true}