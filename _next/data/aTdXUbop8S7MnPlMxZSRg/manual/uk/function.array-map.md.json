{"pageProps":{"page":{"slug":"function.array-map.md","content":"# array\\_map\n\n(PHP 4 >= 4.0.6, PHP 5, PHP 7, PHP 8)\n\narray\\_map - Застосовує callback-функцію до всіх елементів зазначених масивів\n\n### Опис\n\n```methodsynopsis\narray_map(?callable $callback, array $array, array ...$arrays): array\n```\n\nФункция**array\\_map()** повертає масив (array), що містить результати застосування `callback`\\-функції до відповідного елементу `array`(и`arrays`, якщо вказано більше масивів), що використовується як аргумент callback-функції. Кількість параметрів, що передаються `callback`\\-функції, що має збігатися з кількістю масивів, переданою функції **array\\_map()**. Зайві вхідні масиви ігноруються. Якщо надано недостатню кількість аргументів, викидається [ArgumentCountError](class.argumentcounterror.md)\n\n### Список параметрів\n\n`callback`\n\n[callable](language.types.callable.md), що застосовується до кожного елемента у кожному масиві.\n\n**`null`** може бути переданий як значення `callback` для виконання zip операції з кількома масивами. Якщо вказано тільки `array` **array\\_map()** поверне вхідний масив.\n\n`array`\n\nМассив, к которому применяется`callback`\\-функція.\n\n`arrays`\n\nДодаткові масиви для обробки `callback`\\-функцією.\n\n### Значення, що повертаються\n\nПовертає масив, що містить результати застосування `callback`\\-функції до відповідного елементу `array`(и`arrays`, якщо вказано більше масивів), що використовується як аргумент для callback-функції.\n\nПовернений масив збереже ключі аргументу масиву тоді і лише тоді, коли буде передано рівно один масив. Якщо передано більше одного масиву, повернутий масив матиме послідовні цілі ключі.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер функція видасть помилку рівня **`E_WARNING`**, якщо параметр callback-функції, переданої у параметр `callback`, очікує на передачу значення за посиланням. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** array\\_map()\\*\\*\\*\\*\n\n```php\n<?php\nfunction cube($n)\n{\n    return ($n * $n * $n);\n}\n\n$a = [1, 2, 3, 4, 5];\n$b = array_map('cube', $a);\nprint_r($b);\n?>\n```\n\nВ результаті змінна $b міститиме:\n\n```\nArray\n(\n    [0] => 1\n    [1] => 8\n    [2] => 27\n    [3] => 64\n    [4] => 125\n)\n```\n\n**Приклад #2 Использование**array\\_map()**вместе с лямбда-функцией**\n\n```php\n<?php\n$func = function(int $value): int {\n    return $value * 2;\n};\n\nprint_r(array_map($func, range(1, 5)));\n\n// Или с PHP 7.4.0:\n\nprint_r(array_map(fn($value): int => $value * 2, range(1, 5)));\n\n?>\n```\n\n```\nArray\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n    [3] => 8\n    [4] => 10\n)\n```\n\n**Приклад #3 Приклад використання** array\\_map()**: обробка кількох масивів**\n\n```php\n<?php\nfunction show_Spanish(int $n, string $m): string\n{\n    return \"Число {$n} по-испански - {$m}\";\n}\n\nfunction map_Spanish(int $n, string $m): array\n{\n    return [$n => $m];\n}\n\n$a = [1, 2, 3, 4, 5];\n$b = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];\n\n$c = array_map('show_Spanish', $a, $b);\nprint_r($c);\n\n$d = array_map('map_Spanish', $a , $b);\nprint_r($d);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n// вывод $c\nArray\n(\n    [0] => Число 1 по-испански - uno\n    [1] => Число 2 по-испански - dos\n    [2] => Число 3 по-испански - tres\n    [3] => Число 4 по-испански - cuatro\n    [4] => Число 5 по-испански - cinco\n)\n\n// вывод $d\nArray\n(\n    [0] => Array\n        (\n            [1] => uno\n        )\n\n    [1] => Array\n        (\n            [2] => dos\n        )\n\n    [2] => Array\n        (\n            [3] => tres\n        )\n\n    [3] => Array\n        (\n            [4] => cuatro\n        )\n\n    [4] => Array\n        (\n            [5] => cinco\n        )\n\n)\n```\n\nЗазвичай при обробці двох або більше масивів вони мають однакову довжину, так як callback-функція застосовується паралельно до відповідних елементів масивів. Якщо масиви мають різну довжину, більш короткі їх доповнюється елементами з порожніми значеннями до довжини найдовшого масиву.\n\nЦікавим ефектом при використанні цієї функції є створення масиву масивів, що може бути досягнуто шляхом використання значення \\*\\*`null`\\*\\*в качестве имени callback-функции.\n\n**Приклад #4 Виконання zip операції з масивами**\n\n```php\n<?php\n$a = [1, 2, 3, 4, 5];\n$b = ['one', 'two', 'three', 'four', 'five'];\n$c = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];\n\n$d = array_map(null, $a, $b, $c);\nprint_r($d);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => one\n            [2] => uno\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => two\n            [2] => dos\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => three\n            [2] => tres\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => four\n            [2] => cuatro\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => five\n            [2] => cinco\n        )\n\n)\n```\n\n**Приклад #5**`null`\\*\\* `callback` тільки з `array`\\*\\*\n\n```php\n<?php\n$array = [1, 2, 3];\nvar_dump(array_map(null, $array));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n```\n\n**Приклад #6 Использование**array\\_map()\\*\\* з рядковими ключами\\*\\*\n\n```php\n<?php\n$arr = ['stringkey' => 'value'];\nfunction cb1($a) {\n    return [$a];\n}\nfunction cb2($a, $b) {\n    return [$a, $b];\n}\nvar_dump(array_map('cb1', $arr));\nvar_dump(array_map('cb2', $arr, $arr));\nvar_dump(array_map(null,  $arr));\nvar_dump(array_map(null, $arr, $arr));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(1) {\n  [\"stringkey\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"value\"\n  }\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(5) \"value\"\n    [1]=>\n    string(5) \"value\"\n  }\n}\narray(1) {\n  [\"stringkey\"]=>\n  string(5) \"value\"\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(5) \"value\"\n    [1]=>\n    string(5) \"value\"\n  }\n}\n```\n\n**Приклад #7**array\\_map()\\*\\* - асоціативні масиви\\*\\*\n\nХотя**array\\_map()** безпосередньо не підтримує використання ключа масиву як вхідні дані, це можна змоделювати за допомогою [array\\_keys()](function.array-keys.md)\n\n```php\n<?php\n$arr = [\n    'v1' => 'Первый выпуск',\n    'v2' => 'Второй выпуск',\n    'v3' => 'Третий выпуск',\n];\n\n// Примечание: До версии 7.4.0 вместо этого используйте более длинный синтаксис для анонимных функций.\n$callback = fn(string $k, string $v): string => \"$k - это $v\";\n\n$result = array_map($callback, array_keys($arr), array_values($arr));\n\nvar_dump($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(3) {\n  [0]=>\n  string(24) \"v1 - это Первый выпуск\"\n  [1]=>\n  string(25) \"v2 - это Второй выпуск\"\n  [2]=>\n  string(24) \"v3 - это Третий выпуск\"\n}\n```\n\n### Дивіться також\n\n-   [array\\_filter()](function.array-filter.md) \\- Фільтрує елементи масиву за допомогою callback-функції\n-   [array\\_reduce()](function.array-reduce.md) \\- Ітеративно зменшує масив до єдиного значення, використовуючи callback-функцію\n-   [array\\_walk()](function.array-walk.md) \\- Застосовує задану користувачем функцію кожного елемента масиву\n","title":"array\\_map","contentType":2,"navigation":[{"function.array-keys.md":"« array\\_keys"},{"function.array-merge-recursive.md":"array\\_merge\\_recursive »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}