{"pageProps":{"page":{"slug":"language.oop5.changelog.md","content":"## Журнал змін ОВП\n\nТут перераховані зміни моделі ОВП у PHP. Описи та інші примітки цих можливостей можна знайти у документації ОВП PHP.\n\n| Версия | Опис |\n| --- | --- |\n| 8.1.0 | Додано: Підтримка модифікатора final для констант класу. Крім того, константи інтерфейсу за умовчанням стають перевизначуваними. |\n| 8.0.0 | Додано: Підтримка [оператора Nullsafe](language.oop5.basic.md#language.oop5.basic.nullsafe) *?->* для доступу до властивостей та методів об'єктів, які можуть дорівнювати null. |\n| 7.4.0 | Змінено: Тепер можна викинути виняток у функції **\\_\\_toString()** |\n| 7.4.0 | Додано: підтримка обмеженої коваріантності типів значення, що повертається, і типів аргументів. Підтримка повної варіативності здійснюється лише якщо використовується автозавантаження. Усередині одного файлу можливі лише нециклічні посилання на типи. |\n| 7.4.0 | Додано: Тепер можна встановити тип для властивостей класу. |\n| 7.3.0 | Несумісність: розпакування аргументів для [Traversable](class.traversable.md) з нецілочисленними ключами більше не підтримується. Така поведінка спочатку не планувалась і тепер видалена. |\n| 7.3.0 | Несумісність: у попередніх версіях можна було розділити статичні властивості за допомогою присвоєння за посиланням. Тепер не можна. |\n| 7.3.0 | Змінено: тепер оператор [instanceof](language.operators.type.md) допускає літерали як перший операнда. У цьому випадку завжди буде повернено **`false`** |\n| 7.2.0 | Застаріло: метод [\\_\\_autoload()](function.autoload.md) оголошено застарілим на користь [spl\\_autoload\\_register()](function.spl-autoload-register.md) |\n| 7.2.0 | Змінено: для імен класів, інтерфейсів та трейтів не можна використовувати слово `object` |\n| 7.2.0 | Змінено: для групового use тепер можна додавати кому в кінці списку. |\n| 7.2.0 | Змінено: Типи параметрів із перевизначених методів та реалізації інтерфейсів тепер вказувати не обов'язково |\n| 7.2.0 | Змінено: якщо один абстрактний клас успадковує від іншого абстрактного класу, він може перевизначати його абстрактні методи. |\n| 7.1.0 | Змінено: для імен класів, інтерфейсів та трейтів не можна використовувати слова: `void`и`iterable` |\n| 7.1.0 | Додано: тепер можна ставити [область видимості для констант класів](language.oop5.visibility.md#language.oop5.visiblity-constants) |\n| 7.0.0 | Застаріло: [Статичний](language.oop5.static.md) виклик нестатичних методів. |\n| 7.0.0 | Застаріло: [конструктор](language.oop5.decon.md) у стилі PHP 4. Тобто. метод з ім'ям ідентичним імені класу, у якому його оголошено. |\n| 7.0.0 | Додано: групова декларація *use*: класи, функції та константи, які потрібно імпортувати з одного і того ж простору імен тепер можуть бути згруповані в одному виразі use. |\n| 7.0.0 | Додано: додано підтримку [анонімних класів](language.oop5.anonymous.md) за допомогою `new class` |\n| 7.0.0 | Несумісність: ітерування об'єктів, що не реалізують [Traversable](class.traversable.md) тепер поводиться аналогічно ітерування масиву за посиланням. |\n| 7.0.0 | Змінено: Визначення однакових (повністю збігаються) властивостей у двох [трейтах](language.oop5.traits.md) більше не викликає помилки. |\n| 5.6.0 | Додано: метод [\\_\\_debugInfo()](language.oop5.magic.md#object.debuginfo) |\n| 5.5.0 | Додано: магічна константа [::class](language.oop5.basic.md#language.oop5.basic.class.class) |\n| 5.5.0 | Додано: [finally](language.exceptions.md) в обробник винятків. |\n| 5.4.0 | Додано: [трейти](language.oop5.traits.md) |\n| 5.4.0 | Змінено: Якщо [абстрактний](language.oop5.abstract.md) клас визначає сигнатуру для [конструктора](language.oop5.decon.md), вона буде примусово застосовуватися. |\n| 5.3.3 | Змінено: Методи з тим самим ім'ям, що й останній елемент [простору імен](language.namespaces.md) класу більше не розглядатимуться як [конструктор](language.oop5.decon.md). . Ця зміна не впливає на класи, що не використовують простори імен. |\n| 5.3.0 | Змінено: Більше не потрібно, щоб класи, що реалізують інтерфейси з методами, які мають значення за промовчанням у прототипі, відповідали значенням за умовчанням в інтерфейсі. |\n| 5.3.0 | Змінено: Тепер можна посилатися на клас, використовуючи змінну (наприклад, `echo $classname::constant;`). Значення змінної не може бути ключовим словом (наприклад, `self` `parent`или`static` |\n| 5.3.0 | Змінено: Помилка **`E_WARNING`** відбувається, якщо магічні [перевантажені](language.oop5.overloading.md) методи оголошені як [статичні](language.oop5.static.md). . Це також посилює вимогу, що ці методи мають бути загальнодоступними. |\n| 5.3.0 | Змінено: До 5.3.0, виключення у функції [\\_\\_autoload()](function.autoload.md) не могли бути перехоплені у блоці [catch](language.exceptions.md) і призводили до фатальної помилки. Зараз винятки у функції \\_\\_autoload можуть бути перехоплені в блоці [catch](language.exceptions.md), але з одним застереженням. Якщо перехоплюється виняток користувача, то клас, який обробляє цей виняток, повинен бути доступний. Функція \\_\\_autoload може бути використана рекурсивно для автозавантаження користувача класу обробки виключення. |\n| 5.3.0 | Додано: Метод [\\_\\_callStatic](language.oop5.overloading.md) |\n| 5.3.0 | Додано: Підтримка [heredoc](language.types.string.md#language.types.string.syntax.heredoc) і [nowdoc](language.types.string.md#language.types.string.syntax.nowdoc)для*констант* та визначень властивостей класу. Примітка: Значення heredoc повинні дотримуватися тих же правил, що й рядки у подвійних лапках (наприклад, без змінних усередині). |\n| 5.3.0 | Додано: [Пізніше статичне зв'язування](language.oop5.late-static-bindings.md) |\n| 5.3.0 | Додано: метод [\\_\\_invoke()](language.oop5.magic.md#object.invoke) |\n| 5.2.0 | Змінено: Метод [\\_\\_toString()](language.oop5.magic.md#object.tostring) викликався тільки, коли він безпосередньо об'єднаний з [echo](function.echo.md) або [print](function.print.md). . Зараз він викликається у будь-якому контексті рядка (наприклад, у [printf()](function.printf.md) з модифікатором `%s`), але не в інших типах контексту (наприклад, з модифікатором `%d`). З PHP 5.2.0, перетворення об'єктів без методу [\\_\\_function toString() { \\[native code\\] }](language.oop5.magic.md#object.tostring) у рядок видає помилку рівня **`E_RECOVERABLE_ERROR`** |\n| 5.1.3 | Змінено: У попередніх версіях PHP 5 використання `var` вважалося застарілим і видавало помилку **`E_STRICT`**. . Наразі це не вважається застарілим, тому помилка більше не видається. |\n| 5.1.0 | Змінено: Статичний метод [\\_\\_set\\_state()](language.oop5.magic.md#object.set-state) тепер викликається для класів, що експортуються функцією [var\\_export()](function.var-export.md) |\n| 5.1.0 | Додані: методи [\\_\\_isset()](language.oop5.overloading.md#object.isset) і [\\_\\_unset()](language.oop5.overloading.md#object.unset) |\n","title":"Журнал змін ОВП","contentType":2,"navigation":[{"language.oop5.variance.md":"Коваріантність і контраваріантність"},{"language.namespaces.md":"Простори імен »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}