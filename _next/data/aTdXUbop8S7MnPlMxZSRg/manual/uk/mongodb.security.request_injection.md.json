{"pageProps":{"page":{"slug":"mongodb.security.request_injection.md","content":"# Атака за допомогою ін'єкцій у запиті\n\nЯкщо ви передаєте параметри `$_GET`(или`$_POST`) своїм запитам, переконайтеся, що вони спочатку наводяться до рядків. Користувачі можуть вставляти асоціативні масиви в запити GET і POST, які можуть стати небажаними $-запитами.\n\nДосить нешкідливий приклад. Припустимо, ви шукаєте інформацію про користувача за запитом *[http://www.example.com?username=bob](http://www.example.com?username=bob)*. Ваша програма створює запит `$q = new \\MongoDB\\Driver\\Query( [ 'username' => $_GET['username'] ])`\n\nХтось може підірвати це, отримавши *[http://www.example.com?username\\\\\\[$ne\\\\\\]=foo](http://www.example.com?username%5C%5B$ne%5C%5D=foo)*, який PHP чарівним чином перетворить на асоціативний масив, перетворивши ваш запит на `$q = new \\MongoDB\\Driver\\Query( [ 'username' => [ '$ne' => 'foo' ] ] )`, який поверне всіх користувачів, які не мають імені \"foo\" (ймовірно, всіх користувачів).\n\nВід цієї атаки досить легко захиститись: переконайтеся, що параметри $\\_GET та $\\_POST відповідають очікуваному типу, перш ніж надсилати в базу даних. PHP має функцію [filter\\_var()](function.filter-var.md), щоб допомогти з цим.\n\nЗверніть увагу, що цей тип атаки може використовуватися з будь-якою взаємодією з базою даних, яка знаходить документ, включаючи команди update, upserts, delete та findAndModify.\n\nСмотрите[» основну документацію](https://www.mongodb.com/docs/manual/security/) для отримання додаткової інформації про проблеми ін'єкцій SQL в MongoDB.\n","title":"Атака за допомогою ін'єкцій у запиті","contentType":2,"navigation":[{"mongodb.security.md":"« Безпека"},{"mongodb.security.script_injection.md":"Атака за допомогою ін'єкцій у скриптах"},{"index.md":"PHP Manual"},{"mongodb.security.md":"Безпека"}]}},"__N_SSG":true}