{"pageProps":{"page":{"slug":"function.cubrid-schema.md","content":"# cubrid\\_schema\n\n(PECL CUBRID >= 8.3.0)\n\ncubrid\\_schema — Отримує запитану інформацію про схему\n\n### Опис\n\n```methodsynopsis\ncubrid_schema(    resource $conn_identifier,    int $schema_type,    string $class_name = ?,    string $attr_name = ?): array\n```\n\nФункция**cubrid\\_schema()** використовується для отримання запитаної інформації про схему бази даних. Ви повинні вказати `class_name`, якщо ви хочете отримати інформацію про певний клас, `attr_name`, якщо ви хочете отримати інформацію про певний атрибут (може використовуватись тільки з **`CUBRID_SCH_ATTR_PRIVILEGE`**\n\nРезультат функции**cubrid\\_schema()** повертається у вигляді двовимірного масиву (стовпець (асоціативний масив)) \\* рядок (числовий масив)). У наступних таблицях показані типи схем та структура стовпців результуючого масиву, які мають бути повернуті на основі типу схеми.\n\n**Склад результату кожного типу**\n\n| Схема | Номер столбца | Имя столбца | Значение |\n| --- | --- | --- | --- |\n| CUBRID\\_SCH\\_CLASS |  | NAME |  |\n|  |  | TYPE | 0:system class 1:vclass 2:class |\n| CUBRID\\_SCH\\_VCLASS |  | NAME |  |\n|  |  | TYPE | 1:vclass |\n| CUBRID\\_SCH\\_QUERY\\_SPEC |  | QUERY\\_SPEC |  |\n| CUBRID\\_SCH\\_ATTRIBUTE / CUBRID\\_SCH\\_CLASS\\_ATTRIBUTE |  | ATTR\\_NAME |  |\n|  |  | DOMAIN |  |\n|  | 3 | SCALE |  |\n|  | 4 | PRECISION |  |\n|  | 5 | INDEXED | 1:indexed |\n|  | 6 | NOT NULL | 1:not null |\n|  | 7 | SHARED | 1:shared |\n|  | 8 | UNIQUE | 1:unique |\n|  | 9 | DEFAULT |  |\n|  | 10 | ATTR\\_ORDER | base:1 |\n|  | 11 | CLASS\\_NAME |  |\n|  | 12 | SOURCE\\_CLASS |  |\n|  | 13 | IS\\_KEY | 1:key |\n| CUBRID\\_SCH\\_METHOD / CUBRID\\_SCH\\_CLASS\\_METHOD |  | NAME |  |\n|  |  | RET\\_DOMAIN |  |\n|  | 3 | ARG\\_DOMAIN |  |\n| CUBRID\\_SCH\\_METHOD\\_FILE |  | METHOD\\_FILE |  |\n| CUBRID\\_SCH\\_SUPERCLASS / CUBRID\\_SCH\\_DIRECT\\_SUPER\\_CLASS / CUBRID\\_SCH\\_SUBCLASS |  | CLASS\\_NAME |  |\n|  |  | TYPE | 0:system class 1:vclass 2:class |\n| CUBRID\\_SCH\\_CONSTRAINT |  | TYPE | 0:unique 1:index 2:reverse unique 3:reverse index |\n|  |  | NAME |  |\n|  | 3 | ATTR\\_NAME |  |\n|  | 4 | NUM\\_PAGES |  |\n|  | 5 | NUM\\_KEYS |  |\n|  | 6 | PRIMARY\\_KEY | 1:primary key |\n|  | 7 | KEY\\_ORDER | base:1 |\n| CUBRID\\_SCH\\_TRIGGER |  | NAME |  |\n|  |  | STATUS |  |\n|  | 3 | EVENT |  |\n|  | 4 | TARGET\\_CLASS |  |\n|  | 5 | TARGET\\_ATTR |  |\n|  | 6 | ACTION\\_TIME |  |\n|  | 7 | ACTION |  |\n|  | 8 | PRIORITY |  |\n|  | 9 | CONDITION\\_TIME |  |\n|  | 10 | CONDITION |  |\n| CUBRID\\_SCH\\_CLASS\\_PRIVILEGE / CUBRID\\_SCH\\_ATTR\\_PRIVILEGE |  | CLASS\\_NAME / ATTR\\_NAME |  |\n|  |  | PRIVILEGE |  |\n|  | 3 | GRANTABLE |  |\n| CUBRID\\_SCH\\_PRIMARY\\_KEY |  | CLASS\\_NAME |  |\n|  |  | ATTR\\_NAME |  |\n|  | 3 | KEY\\_SEQ | base:1 |\n|  | 4 | KEY\\_NAME |  |\n| CUBRID\\_SCH\\_IMPORTED\\_KEYS / CUBRID\\_SCH\\_EXPORTED\\_KEYS / CUBRID\\_SCH\\_CROSS\\_REFERENCE |  | PKTABLE\\_NAME |  |\n|  |  | PKCOLUMN\\_NAME |  |\n|  | 3 | FKTABLE\\_NAME | base:1 |\n|  | 4 | FKCOLUMN\\_NAME |  |\n|  | 5 | KEY\\_SEQ | base:1 |\n|  | 6 | UPDATE\\_ACTION | 0:cascade 1:restrict 2:no action 3:set null |\n|  | 7 | DELETE\\_ACTION | 0:cascade 1:restrict 2:no action 3:set null |\n|  | 8 | FK\\_NAME |  |\n|  | 9 | PK\\_NAME |  |\n\n### Список параметрів\n\n`conn_identifier`\n\nІдентифікатор з'єднання.\n\n`schema_type`\n\nДані схеми, які ви хочете дізнатися.\n\n`class_name`\n\nКлас, для якого ви хочете дізнатися про схему.\n\n`attr_name`\n\nАтрибут, для якого ви хочете дізнатися про схему.\n\n### Значення, що повертаються\n\nМасив, що містить інформацію про схему, у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.1 | Змінено значення, що повертається: якщо процес завершився з помилкою, повертається false, а не -1. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** cubrid\\_schema()\\*\\*\\*\\*\n\n```php\n<?php\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\nprintf(\"\\n--- Первичный ключ ---\\n\");\n$pk = cubrid_schema($conn, CUBRID_SCH_PRIMARY_KEY, \"game\");\nvar_dump($pk);\n\nprintf(\"\\n--- Внешние ключи ---\\n\");\n$fk = cubrid_schema($conn, CUBRID_SCH_IMPORTED_KEYS, \"game\");\nvar_dump($fk);\n\nprintf(\"\\n--- Атрибут столбца ---\\n\");\n$attr = cubrid_schema($conn, CUBRID_SCH_ATTRIBUTE, \"stadium\", \"area\");\nvar_dump($attr);\n\ncubrid_disconnect($conn);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n--- Первичный ключ ---\narray(3) {\n  [0]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(12) \"athlete_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"3\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n  [1]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(10) \"event_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"2\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n  [2]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(9) \"host_year\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n}\n\n--- Внешние ключи ---\narray(2) {\n  [0]=>\n  array(9) {\n    [\"PKTABLE_NAME\"]=>\n    string(7) \"athlete\"\n    [\"PKCOLUMN_NAME\"]=>\n    string(4) \"code\"\n    [\"FKTABLE_NAME\"]=>\n    string(4) \"game\"\n    [\"FKCOLUMN_NAME\"]=>\n    string(12) \"athlete_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"UPDATE_RULE\"]=>\n    string(1) \"1\"\n    [\"DELETE_RULE\"]=>\n    string(1) \"1\"\n    [\"FK_NAME\"]=>\n    string(20) \"fk_game_athlete_code\"\n    [\"PK_NAME\"]=>\n    string(15) \"pk_athlete_code\"\n  }\n  [1]=>\n  array(9) {\n    [\"PKTABLE_NAME\"]=>\n    string(5) \"event\"\n    [\"PKCOLUMN_NAME\"]=>\n    string(4) \"code\"\n    [\"FKTABLE_NAME\"]=>\n    string(4) \"game\"\n    [\"FKCOLUMN_NAME\"]=>\n    string(10) \"event_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"UPDATE_RULE\"]=>\n    string(1) \"1\"\n    [\"DELETE_RULE\"]=>\n    string(1) \"1\"\n    [\"FK_NAME\"]=>\n    string(18) \"fk_game_event_code\"\n    [\"PK_NAME\"]=>\n    string(13) \"pk_event_code\"\n  }\n}\n\n--- Атрибут столбца ---\narray(1) {\n  [0]=>\n  array(13) {\n    [\"ATTR_NAME\"]=>\n    string(4) \"area\"\n    [\"DOMAIN\"]=>\n    string(1) \"7\"\n    [\"SCALE\"]=>\n    string(1) \"2\"\n    [\"PRECISION\"]=>\n    string(2) \"10\"\n    [\"INDEXED\"]=>\n    string(1) \"0\"\n    [\"NON_NULL\"]=>\n    string(1) \"0\"\n    [\"SHARED\"]=>\n    string(1) \"0\"\n    [\"UNIQUE\"]=>\n    string(1) \"0\"\n    [\"DEFAULT\"]=>\n    NULL\n    [\"ATTR_ORDER\"]=>\n    string(1) \"4\"\n    [\"CLASS_NAME\"]=>\n    string(7) \"stadium\"\n    [\"SOURCE_CLASS\"]=>\n    string(7) \"stadium\"\n    [\"IS_KEY\"]=>\n    string(1) \"0\"\n  }\n}\n```\n","title":"cubrid\\_schema","contentType":2,"navigation":[{"function.cubrid-rollback.md":"« cubrid\\_rollback"},{"function.cubrid-seq-drop.md":"cubrid\\_seq\\_drop »"},{"index.md":"PHP Manual"},{"ref.cubrid.md":"Функції CUBRID"}]}},"__N_SSG":true}