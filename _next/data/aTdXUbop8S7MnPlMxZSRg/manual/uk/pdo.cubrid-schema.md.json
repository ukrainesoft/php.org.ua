{"pageProps":{"page":{"slug":"pdo.cubrid-schema.md","content":"# PDO::cubrid\\_schema\n\n(PECL PDO\\_CUBRID >= 8.3.0.0001)\n\nPDO::cubrid\\_schema — Отримати запитану інформацію про схему\n\n### Опис\n\n```methodsynopsis\npublic PDO::cubrid_schema(int $schema_type, string $table_name = ?, string $col_name = ?): array\n```\n\nЦя функція використовується для отримання інформації про схему бази даних. Якщо необхідна інформація про конкретну таблицю, необхідно буде вказати її ім'я в параметрі `table_name`. Якщо потрібна інформація про конкретний стовпчик таблиці, його ім'я необхідно вказати в параметрі `col_name` (може використовуватись тільки з PDO::CUBRID\\_SCH\\_COL\\_PRIVILEGE).\n\nРезультат буде повернутий у вигляді двовимірного масиву (стовпець (асоціативний масив)) \\* рядок (асоціативний масив). У наступній таблиці наводяться типи схеми та структура стовпців результуючого масиву, який буде повернутий залежно від типу схеми, що використовується.\n\n**Склад результату кожного типу**\n\n| Схема | Номер столбца | Имя столбца | Значение |\n| --- | --- | --- | --- |\n| PDO::CUBRID\\_SCH\\_TABLE |  | NAME |  |\n|  |  | TYPE | 0:system table 1:view 2:table |\n| PDO::CUBRID\\_SCH\\_VIEW |  | NAME |  |\n|  |  | TYPE | 1:view |\n| PDO::CUBRID\\_SCH\\_QUERY\\_SPEC |  | QUERY\\_SPEC |  |\n| PDO::CUBRID\\_SCH\\_ATTRIBUTE / PDO::CUBRID\\_SCH\\_TABLE\\_ATTRIBUTE |  | ATTR\\_NAME |  |\n|  |  | DOMAIN |  |\n|  | 3 | SCALE |  |\n|  | 4 | PRECISION |  |\n|  | 5 | INDEXED | 1:indexed |\n|  | 6 | NOT NULL | 1:not null |\n|  | 7 | SHARED | 1:shared |\n|  | 8 | UNIQUE | 1:unique |\n|  | 9 | DEFAULT |  |\n|  | 10 | ATTR\\_ORDER | base:1 |\n|  | 11 | CLASS\\_NAME |  |\n|  | 12 | SOURCE\\_CLASS |  |\n|  | 13 | IS\\_KEY | 1:key |\n| PDO::CUBRID\\_SCH\\_METHOD / PDO::CUBRID\\_SCH\\_TABLE\\_METHOD |  | NAME |  |\n|  |  | RET\\_DOMAIN |  |\n|  | 3 | ARG\\_DOMAIN |  |\n| PDO::CUBRID\\_SCH\\_METHOD\\_FILE |  | METHOD\\_FILE |  |\n| PDO::CUBRID\\_SCH\\_SUPER\\_TABLE / PDO::CUBRID\\_SCH\\_DIRECT\\_SUPER\\_TABLE / PDO::CUBRID\\_SCH\\_SUB\\_TABLE |  | CLASS\\_NAME |  |\n|  |  | TYPE | 0:system table 1:view 2:table |\n| PDO::CUBRID\\_SCH\\_CONSTRAINT |  | TYPE | 0:unique 1:index 2:reverse unique 3:reverse index |\n|  |  | NAME |  |\n|  | 3 | ATTR\\_NAME |  |\n|  | 4 | NUM\\_PAGES |  |\n|  | 5 | NUM\\_KEYS |  |\n|  | 6 | PRIMARY\\_KEY | 1:primary key |\n|  | 7 | KEY\\_ORDER | base:1 |\n| PDO::CUBRID\\_SCH\\_TRIGGER |  | NAME |  |\n|  |  | STATUS |  |\n|  | 3 | EVENT |  |\n|  | 4 | TARGET\\_CLASS |  |\n|  | 5 | TARGET\\_ATTR |  |\n|  | 6 | ACTION\\_TIME |  |\n|  | 7 | ACTION |  |\n|  | 8 | PRIORITY |  |\n|  | 9 | CONDITION\\_TIME |  |\n|  | 10 | CONDITION |  |\n| PDO::CUBRID\\_SCH\\_TABLE\\_PRIVILEGE / PDO::CUBRID\\_SCH\\_COL\\_PRIVILEGE |  | CLASS\\_NAME / ATTR\\_NAME |  |\n|  |  | PRIVILEGE |  |\n|  | 3 | GRANTABLE |  |\n| PDO::CUBRID\\_SCH\\_PRIMARY\\_KEY |  | CLASS\\_NAME |  |\n|  |  | ATTR\\_NAME |  |\n|  | 3 | KEY\\_SEQ | base:1 |\n|  | 4 | KEY\\_NAME |  |\n| PDO::CUBRID\\_SCH\\_IMPORTED\\_KEYS / PDO::CUBRID\\_SCH\\_EXPORTED\\_KEYS / PDO::CUBRID\\_SCH\\_CROSS\\_REFERENCE |  | PKTABLE\\_NAME |  |\n|  |  | PKCOLUMN\\_NAME |  |\n|  | 3 | FKTABLE\\_NAME | base:1 |\n|  | 4 | FKCOLUMN\\_NAME |  |\n|  | 5 | KEY\\_SEQ | base:1 |\n|  | 6 | UPDATE\\_ACTION | 0:cascade 1:restrict 2:no action 3:set null |\n|  | 7 | DELETE\\_ACTION | 0:cascade 1:restrict 2:no action 3:set null |\n|  | 8 | FK\\_NAME |  |\n|  | 9 | PK\\_NAME |  |\n\n### Список параметрів\n\n`schema_type`\n\nНеобхідний тип схеми.\n\n`table_name`\n\nНазва таблиці, схему якої ви хочете отримати.\n\n`col_name`\n\nІм'я шпальти, схему якої ви хочете отримати.\n\n### Значення, що повертаються\n\nУ разі успішного виконання буде повернено асоціативний масив зі схемою.\n\nУ разі невдачі буде повернено **`false`**\n\n### Приклади\n\n**Приклад #1 Приклад використання** PDO::cubrid\\_schema()\\*\\*\\*\\*\n\nУ цьому прикладі демонструється отримання інформації про первинні та вторинні ключі таблиці \"game\".\n\n```php\n<?php\n$pk_list = $dbh->cubrid_schema(PDO::CUBRID_SCH_PRIMARY_KEY, \"game\");\nprint_r($pk_list);\n\n$fk_list = $dbh->cubrid_schema(PDO::CUBRID_SCH_IMPORTED_KEYS, \"game\");\nprint_r($fk_list);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nResult:\nArray\n(\n    [0] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => athlete_code\n            [KEY_SEQ] => 3\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n    [1] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => event_code\n            [KEY_SEQ] => 2\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n    [2] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => host_year\n            [KEY_SEQ] => 1\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [PKTABLE_NAME] => athlete\n            [PKCOLUMN_NAME] => code\n            [FKTABLE_NAME] => game\n            [FKCOLUMN_NAME] => athlete_code\n            [KEY_SEQ] => 1\n            [UPDATE_RULE] => 1\n            [DELETE_RULE] => 1\n            [FK_NAME] => fk_game_athlete_code\n            [PK_NAME] => pk_athlete_code\n        )\n\n    [1] => Array\n        (\n            [PKTABLE_NAME] => event\n            [PKCOLUMN_NAME] => code\n            [FKTABLE_NAME] => game\n            [FKCOLUMN_NAME] => event_code\n            [KEY_SEQ] => 1\n            [UPDATE_RULE] => 1\n            [DELETE_RULE] => 1\n            [FK_NAME] => fk_game_event_code\n            [PK_NAME] => pk_event_code\n        )\n\n)\n```\n","title":"PDO::cubrid\\_schema","contentType":2,"navigation":[{"ref.pdo-cubrid.connection.md":"« PDO\\_CUBRID DSN"},{"ref.pdo-dblib.md":"MS SQL Server (PDO\\_DBLIB) »"},{"index.md":"PHP Manual"},{"ref.pdo-cubrid.md":"CUBRID (PDO)"}]}},"__N_SSG":true}