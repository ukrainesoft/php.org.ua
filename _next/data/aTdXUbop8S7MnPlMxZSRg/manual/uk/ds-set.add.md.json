{"pageProps":{"page":{"slug":"ds-set.add.md","content":"# Ds\\\\Set::add\n\n(PECL ds >= 1.0.0)\n\nDs\\\\Set::add — Додає значення до набору\n\n### Опис\n\n```methodsynopsis\npublic Ds\\Set::add(mixed ...$values): void\n```\n\nДодає всі задані значення набір, якщо вони раніше не були додані.\n\n> **Зауваження** :\n> \n> Підтримуються значення типу об'єкта. Якщо об'єкт реалізує інтерфейс [Ds\\\\Hashable](class.ds-hashable.md), перевірка здійснюється шляхом виклику методу об'єкта `equals`. Якщо об'єкт не реалізує інтерфейс [Ds\\\\Hashable](class.ds-hashable.md), об'єкти повинні посилатися на той самий екземпляр класу.\n\n**Застереження**\n\nУсі порівняння суворі (за типом та значенням).\n\n### Список параметрів\n\n`values`\n\nЗначення, що додаються.\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Ds\\\\Set::add()\\*\\* зі скалярними значеннями\\*\\*\n\n```php\n<?php\n$set = new \\Ds\\Set();\n\n$set->add(1);\n$set->add(1);\n$set->add(2);\n$set->add(3);\n\n// Производится строгое сравнение, поэтому \"1\" не приведётся к int(1)\n$set->add(\"1\");\n$set->add(true);\n\nvar_dump($set);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(Ds\\Set)#1 (5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  string(1) \"1\"\n  [4]=>\n  bool(true)\n}\n```\n\n**Приклад #2 Приклад використання** Ds\\\\Set::add()\\*\\* з об'єктами\\*\\*\n\n```php\n<?php\nclass HashableObject implements \\Ds\\Hashable\n{\n    /**\n     * Произвольное значение для использования в качестве значения хеша.\n     * Не определяет равенство.\n     */\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function hash()\n    {\n        return $this->value;\n    }\n\n    public function equals($obj): bool\n    {\n        return $this->value === $obj->value;\n    }\n}\n\n$set = new \\Ds\\Set();\n\n$obj = new \\ArrayIterator([]);\n\n// При добавлении одного и того же экземпляря несколько раз, добавится только первый.\n$set->add($obj);\n$set->add($obj);\n\n// При добавлении нескольких экземпляров одного и того же объекта, они все добавятся.\n$set->add(new \\stdClass());\n$set->add(new \\stdClass());\n\n// При добавлении объектов с одинаковым хешем несколько раз, добавится только первый.\n$set->add(new \\HashableObject(1));\n$set->add(new \\HashableObject(1));\n$set->add(new \\HashableObject(2));\n$set->add(new \\HashableObject(2));\n\nvar_dump($set);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(Ds\\Set)#1 (5) {\n  [0]=>\n  object(ArrayIterator)#2 (1) {\n    [\"storage\":\"ArrayIterator\":private]=>\n    array(0) {\n    }\n  }\n  [1]=>\n  object(stdClass)#3 (0) {\n  }\n  [2]=>\n  object(stdClass)#4 (0) {\n  }\n  [3]=>\n  object(HashableObject)#5 (1) {\n    [\"value\":\"HashableObject\":private]=>\n    int(1)\n  }\n  [4]=>\n  object(HashableObject)#6 (1) {\n    [\"value\":\"HashableObject\":private]=>\n    int(2)\n  }\n}\n```\n","title":"Ds\\\\Set::add","contentType":2,"navigation":[{"class.ds-set.md":"« Ds\\\\Set"},{"ds-set.allocate.md":"Ds\\\\Set::allocate »"},{"index.md":"PHP Manual"},{"class.ds-set.md":"Ds\\\\Set"}]}},"__N_SSG":true}