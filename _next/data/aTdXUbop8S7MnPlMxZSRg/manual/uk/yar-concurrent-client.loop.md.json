{"pageProps":{"page":{"slug":"yar-concurrent-client.loop.md","content":"# Yar\\_Concurrent\\_Client::loop\n\n(PECL yar >= 1.0.0)\n\nYar\\_Concurrent\\_Client::loop — Запуск усіх зареєстрованих дзвінків\n\n### Опис\n\n```methodsynopsis\npublic static Yar_Concurrent_Client::loop(callable $callback = ?, callable $error_callback = ?): bool\n```\n\nЗапускає всі зареєстровані дзвінки.\n\n### Список параметрів\n\n`callback`\n\nЯкщо задана функція зворотного дзвінка, то вона буде запущена після запуску всіх запитів, але до отримання відповідей від них з $callinfo рівним NULL.\n\nДалі, якщо функція зворотного дзвінка не була задана під час реєстрації дзвінка, то для обробки результату буде викликана ця функція.\n\n`error_callback`\n\nЯкщо цей параметр заданий, Yar запустить цю функцію у разі виникнення помилки.\n\n### Значення, що повертаються\n\n### Приклади\n\n**Приклад #1 Приклад використання** Yar\\_Concurrent\\_Client::loop()\\*\\*\\*\\*\n\n```php\n<?php\nfunction callback($retval, $callinfo) {\n     if ($callinfo == NULL) {\n        echo \"Так, все запросы запущены, но пока ни одного ответа\\n\";\n     } else {\n        echo \"Это ответ от удалённого запроса. Имя метода\", $callinfo[\"method\"],\n             \". Был зарегистрирован \" , $callinfo[\"sequence\"] , \"\\n\";\n        var_dump($retval);\n     }\n}\n\nfunction error_callback($type, $error, $callinfo) {\n    error_log($error);\n}\n\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\");\n\n//если функция обратного вызова не задана, то будет использована определённая в цикле вызовов\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"));\n\n//этот сервер принимает упаковку JSON\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_PACKAGER => \"json\"));\n\n//отдельно заданное время ожидания\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_TIMEOUT=>1));\n\nYar_Concurrent_Client::loop(\"callback\", \"error_callback\"); //запускаем запросы,\n                                                           //параметр error_callback не обязателен\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nТак, все запросы запущены, но пока ни одного ответа\nЭто ответ от удалённого запроса. Имя метода issome_method. Был зарегистрирован 4\nstring(11) \"some_method\"\nЭто ответ от удалённого запроса. Имя метода issome_method. Был зарегистрирован 1\nstring(11) \"some_method\"\nЭто ответ от удалённого запроса. Имя метода issome_method. Был зарегистрирован 2\nstring(11) \"some_method\"\nЭто ответ от удалённого запроса. Имя метода issome_method. Был зарегистрирован 3\nstring(11) \"some_method\"\n```\n\n### Дивіться також\n\n-   [Yar\\_Concurrent\\_Client::call()](yar-concurrent-client.call.md) \\- Зареєструвати конкурентний виклик\n-   [Yar\\_Concurrent\\_Client::reset()](yar-concurrent-client.reset.md) \\- Очистити всі зареєстровані дзвінки\n-   [Yar\\_Server::\\_\\_construct()](yar-server.construct.md) \\- Конструктор Yar\\_Server\n-   [Yar\\_Server::handle()](yar-server.handle.md) \\- Запустити сервер RPC\n","title":"Yar\\_Concurrent\\_Client::loop","contentType":2,"navigation":[{"yar-concurrent-client.call.md":"« Yar\\_Concurrent\\_Client::call"},{"yar-concurrent-client.reset.md":"Yar\\_Concurrent\\_Client::reset »"},{"index.md":"PHP Manual"},{"class.yar-concurrent-client.md":"Yar\\_Concurrent\\_Client"}]}},"__N_SSG":true}