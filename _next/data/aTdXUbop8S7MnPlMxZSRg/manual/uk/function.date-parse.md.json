{"pageProps":{"page":{"slug":"function.date-parse.md","content":"# date\\_parse\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\ndate\\_parse — Повертає асоціативний масив із детальною інформацією про задану дату/час\n\n### Опис\n\n```methodsynopsis\ndate_parse(string $datetime): array\n```\n\nФункция**date\\_parse()** розбирає вказану в параметрі `datetime` рядок за тими ж правилами, що й функції [strtotime()](function.strtotime.md) і [DateTimeImmutable::\\_\\_construct()](datetimeimmutable.construct.md). Замість повертати тимчасову мітку Unix (при використанні функції [strtotime()](function.strtotime.md)) або об'єкт [DateTimeImmutable](class.datetimeimmutable.md)(при использовании функции[DateTimeImmutable::\\_\\_construct()](datetimeimmutable.construct.md)), вона повертає асоціативний масив з інформацією, яку функція змогла виявити в даному рядку параметра `datetime`\n\nЯкщо інформація про певну групу елементів не знайдена, ці елементи масиву будуть встановлені у значення **`false`** або будуть відсутні. Якщо це необхідно для побудови тимчасової мітки або об'єкта [DateTimeImmutable](class.datetimeimmutable.md) з одного і того ж рядка параметра `datetime`, більша кількість полів може бути встановлена ​​в значення не **`false`**. Дивіться приклади, де це відбувається.\n\n### Список параметрів\n\n`datetime`\n\nДата/время в формате, распознаваемом функцией[DateTimeImmutable::\\_\\_construct()](datetimeimmutable.construct.md)\n\n### Значення, що повертаються\n\nПовертає масив (array), що містить інформацію про дату/час.\n\nМасив, що повертається, містить ключі `year` `month` `day` `hour` `minute` `second` `fraction`и`is_localtime`\n\nЯкщо присутній `is_localtime`, то`zone_type` вказує тип часового поясу. Для типу (Зміщення UTC) вказується `zone`, добавляется поле`is_dst`; для типа (аббревиатура) добавляются поля`tz_abbr`и`is_dst`; для типа`3`(идентификатор часового пояса) добавляются поля`tz_abbr`и`tz_id`\n\nЯкщо у параметрі `datetime` присутні елементи відносного часу, наприклад, `+3 days`, що повертається масив включає вкладений масив з ключем `relative`. Цей масив містить ключі `year` `month` `day` `hour` `minute` `second`, і, якщо необхідно, `weekday`и`weekdays`, Залежно від переданого рядка.\n\nМасив включає поля `warning_count`и`warnings`. Перше вказує, скільки було попереджень. Ключі елементів масиву `warnings` вказують на позицію в цьому параметрі `datetime`, Де відбулося попередження, а рядкове значення описує саме попередження.\n\nМассив также содержит поля`error_count`и`errors`. Перше вказує, скільки помилок було знайдено. Ключі елементів масиву `errors` вказують на позицію в цьому параметрі `datetime`, де сталася помилка, а рядкове значення визначає саму помилку.\n\n**Увага**\n\nКількість елементів масивів `warnings`и`errors` може бути менше, ніж `warning_count`или`error_count`якщо вони виникли в одній і тій же позиції.\n\n### Помилки\n\nУ разі виникнення помилок форматування дати/часу, елемент масиву 'errors' міститиме повідомлення про ці помилки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.2.0 | Елемент масиву, що повертається, з ключем `zone` тепер містить секунди, а чи не хвилини. Крім того, знак інвертовано. Тобто. раніше був `-120`, а зараз `7200` |\n\n### Приклади\n\n**Приклад #1 Приклад використання функції** date\\_parse()\\*\\* з повним рядком `datetime`\\*\\*\n\n```php\n<?php\nvar_dump(date_parse(\"2006-12-12 10:00:00.5\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(12) {\n  [\"year\"]=>\n  int(2006)\n  [\"month\"]=>\n  int(12)\n  [\"day\"]=>\n  int(12)\n  [\"hour\"]=>\n  int(10)\n  [\"minute\"]=>\n  int(0)\n  [\"second\"]=>\n  int(0)\n  [\"fraction\"]=>\n  float(0.5)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(false)\n}\n```\n\nЕлементи часових поясів з'являються лише в тому випадку, якщо вони включені до заданого рядка параметра `datetime`. У цьому випадку завжди буде присутній елемент `zone_type` і ще дещо залежно від його значення.\n\n**Приклад #2 Приклад використання** date\\_parse()**с информацией об аббревиатуре часового пояса**\n\n```php\n<?php\nvar_dump(date_parse(\"June 2nd, 2022, 10:28:17 BST\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(16) {\n  [\"year\"]=>\n  int(2022)\n  [\"month\"]=>\n  int(6)\n  [\"day\"]=>\n  int(2)\n  [\"hour\"]=>\n  int(10)\n  [\"minute\"]=>\n  int(28)\n  [\"second\"]=>\n  int(17)\n  [\"fraction\"]=>\n  float(0)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(true)\n  [\"zone_type\"]=>\n  int(2)\n  [\"zone\"]=>\n  int(0)\n  [\"is_dst\"]=>\n  bool(true)\n  [\"tz_abbr\"]=>\n  string(3) \"BST\"\n}\n```\n\n**Приклад #3 Приклад використання** date\\_parse()\\*\\* з інформацією про ідентифікатор часового поясу\\*\\*\n\n```php\n<?php\nvar_dump(date_parse(\"June 2nd, 2022, 10:28:17 Europe/London\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(14) {\n  [\"year\"]=>\n  int(2022)\n  [\"month\"]=>\n  int(6)\n  [\"day\"]=>\n  int(2)\n  [\"hour\"]=>\n  int(10)\n  [\"minute\"]=>\n  int(28)\n  [\"second\"]=>\n  int(17)\n  [\"fraction\"]=>\n  float(0)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(true)\n  [\"zone_type\"]=>\n  int(3)\n  [\"tz_id\"]=>\n  string(13) \"Europe/London\"\n}\n```\n\nЯкщо розбирається мінімальний рядок параметра `datetime`, то інформації буде менше. У цьому прикладі всі частини часу повертаються як **`false`**\n\n**Приклад #4 Приклад використання** date\\_parse()\\*\\* з мінімальним рядком\\*\\*\n\n```php\n<?php\nvar_dump(date_parse(\"June 2nd, 2022\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(12) {\n  [\"year\"]=>\n  int(2022)\n  [\"month\"]=>\n  int(6)\n  [\"day\"]=>\n  int(2)\n  [\"hour\"]=>\n  bool(false)\n  [\"minute\"]=>\n  bool(false)\n  [\"second\"]=>\n  bool(false)\n  [\"fraction\"]=>\n  bool(false)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(false)\n}\n```\n\nВідносні формати не впливають на значення, що розбираються з абсолютних форматів, але розуміються на елементі \"relative\".\n\n**Приклад #5 Приклад використання** date\\_parse()\\*\\* з відносними форматами\\*\\*\n\n```php\n<?php\nvar_dump(date_parse(\"2006-12-12 10:00:00.5 +1 week +1 hour\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(13) {\n  [\"year\"]=>\n  int(2006)\n  [\"month\"]=>\n  int(12)\n  [\"day\"]=>\n  int(12)\n  [\"hour\"]=>\n  int(10)\n  [\"minute\"]=>\n  int(0)\n  [\"second\"]=>\n  int(0)\n  [\"fraction\"]=>\n  float(0.5)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(false)\n  [\"relative\"]=>\n  array(6) {\n    [\"year\"]=>\n    int(0)\n    [\"month\"]=>\n    int(0)\n    [\"day\"]=>\n    int(7)\n    [\"hour\"]=>\n    int(1)\n    [\"minute\"]=>\n    int(0)\n    [\"second\"]=>\n    int(0)\n  }\n}\n```\n\nДеякі рядки, такі як `Thursday`, установят временную часть строки в значение . Якщо `Thursday` передати у функцію [DateTimeImmutable::\\_\\_construct()](datetimeimmutable.construct.md), то це також призведе до того, що година, хвилина, секунда та дріб будуть встановлені у значення . У наведеному нижче прикладі елемент year, однак, залишений як **`false`**\n\n**Приклад #6 Приклад використання** date\\_parse()\\*\\* з побічними ефектами\\*\\*\n\n```php\n<?php\nvar_dump(date_parse(\"Thursday, June 2nd\"));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(13) {\n  [\"year\"]=>\n  bool(false)\n  [\"month\"]=>\n  int(6)\n  [\"day\"]=>\n  int(2)\n  [\"hour\"]=>\n  int(0)\n  [\"minute\"]=>\n  int(0)\n  [\"second\"]=>\n  int(0)\n  [\"fraction\"]=>\n  float(0)\n  [\"warning_count\"]=>\n  int(0)\n  [\"warnings\"]=>\n  array(0) {\n  }\n  [\"error_count\"]=>\n  int(0)\n  [\"errors\"]=>\n  array(0) {\n  }\n  [\"is_localtime\"]=>\n  bool(false)\n  [\"relative\"]=>\n  array(7) {\n    [\"year\"]=>\n    int(0)\n    [\"month\"]=>\n    int(0)\n    [\"day\"]=>\n    int(0)\n    [\"hour\"]=>\n    int(0)\n    [\"minute\"]=>\n    int(0)\n    [\"second\"]=>\n    int(0)\n    [\"weekday\"]=>\n    int(4)\n  }\n}\n```\n\n### Дивіться також\n\n-   [date\\_parse\\_from\\_format()](function.date-parse-from-format.md) \\- Отримання інформації про задану у визначеному форматі дату для розбору параметра`datetime`з певним заданим форматом\n-   [checkdate()](function.checkdate.md) \\- Перевіряє коректність дати за григоріанським календарем для перевірки григоріанської дати\n-   [getdate()](function.getdate.md) \\- Повертає інформацію про дату/час\n","title":"date\\_parse","contentType":2,"navigation":[{"function.date-parse-from-format.md":"« date\\_parse\\_from\\_format"},{"function.date-sub.md":"date\\_sub »"},{"index.md":"PHP Manual"},{"ref.datetime.md":"Функції дати та часу"}]}},"__N_SSG":true}