{"pageProps":{"page":{"slug":"arrayobject.asort.md","content":"# ArrayObject::asort\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nArrayObject::asort — Сортувати записи за значенням\n\n### Опис\n\n```methodsynopsis\npublic ArrayObject::asort(int $flags = SORT_REGULAR): true\n```\n\nСортує елементи масиву в порядку зростання, тому його ключі зберігають свою кореляцію зі значеннями, з якими вони пов'язані.\n\nВикористовується в основному при сортуванні асоціативних масивів, де важливим є фактичний порядок елементів.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n### Список параметрів\n\n`flags`\n\nНеобов'язковий другий параметр `flags` змінює поведінку сортування і може набувати таких значень:\n\nПрапори типів сортування:\n\n-   \\*\\*`SORT_REGULAR`\\*\\*- Звичайне порівняння елементів; подробиці описані в розділі[оператори порівняння](language.operators.comparison.md)\n-   \\*\\*`SORT_NUMERIC`\\*\\*- Чисельне порівняння елементів\n-   \\*\\*`SORT_STRING`\\*\\*- рядкове порівняння елементів\n-   \\*\\*`SORT_LOCALE_STRING`\\*\\*— Порівняти елементи як рядки на основі поточного мовного стандарту. Прапор використовує мовний стандарт, який можна змінити функцією[setlocale()](function.setlocale.md)\n-   **`SORT_NATURAL`** - Порівняння елементів як рядки, використовуючи \"природний порядок\", наприклад [natsort()](function.natsort.md)\n-   \\*\\*`SORT_FLAG_CASE`**\\- можна об'єднувати (побітове АБО) з**`SORT_STRING`** або **`SORT_NATURAL`\\*\\*для сортування рядків без урахування регістру\n\n### Значення, що повертаються\n\nФункція завжди повертає **`true`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер **`true`**; раніше було bool. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ArrayObject::asort()\\*\\*\\*\\*\n\n```php\n<?php\n$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\n$fruitArrayObject = new ArrayObject($fruits);\n$fruitArrayObject->asort();\n\nforeach ($fruitArrayObject as $key => $val) {\n    echo \"$key = $val\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nc = apple\nb = banana\nd = lemon\na = orange\n```\n\nНазви фруктів були відсортовані за абеткою, і ключ, пов'язаний з кожним записом, був збережений.\n\n### Дивіться також\n\n-   [ArrayObject::ksort()](arrayobject.ksort.md) \\- Сортувати записи за ключами\n-   [ArrayObject::natsort()](arrayobject.natsort.md) - Сортувати масив, використовуючи алгоритм \"natural order\"\n-   [ArrayObject::natcasesort()](arrayobject.natcasesort.md) - Сортувати масив, використовуючи реєстронезалежний алгоритм \"natural order\"\n-   [ArrayObject::uasort()](arrayobject.uasort.md) \\- Сортувати записи, використовуючи функцію користувача для порівняння елементів і зберігаючи при цьому зв'язок ключ/значення\n-   [ArrayObject::uksort()](arrayobject.uksort.md) \\- Сортувати масив за ключами, використовуючи функцію користувача для порівняння\n-   [asort()](function.asort.md) \\- Сортує масив у порядку зростання, зберігаючи асоціацію індексів\n","title":"ArrayObject::asort","contentType":2,"navigation":[{"arrayobject.append.md":"« ArrayObject::append"},{"arrayobject.construct.md":"ArrayObject::\\_\\_construct »"},{"index.md":"PHP Manual"},{"class.arrayobject.md":"ArrayObject"}]}},"__N_SSG":true}