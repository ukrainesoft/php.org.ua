{"pageProps":{"page":{"slug":"quickhashstringinthash.update.md","content":"# QuickHashStringIntHash::update\n\n(No version information available, might only be in Git)\n\nQuickHashStringIntHash::update — Метод оновлює запис у хеші новим значенням\n\n### Опис\n\n```methodsynopsis\npublic QuickHashStringIntHash::update(string $key, int $value): bool\n```\n\nМетод оновлює запис новим значенням і повертає, чи запис оновлено. Якщо є дублікати ключів, лише перший знайдений елемент набуде оновленого значення. Використовуйте константу **`QuickHashStringIntHash::CHECK_FOR_DUPES`** під час створення хешу, щоб запобігти попаданню дублюючих ключів у хеш.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, що оновлюється.\n\n`value`\n\nНове значення запису. Якщо передається нестрокове значення, воно буде автоматично перетворено на рядок, якщо це можливо.\n\n### Значення, що повертаються\n\nМетод возвращает\\*\\*`true`\\*\\*, якщо запис було знайдено та оновлено та **`false`**, якщо запис був частиною хеша.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashStringIntHash::update()\\*\\*\\*\\*\n\n```php\n<?php\n$hash = new QuickHashStringIntHash( 1024 );\n\n$hash->add( 'шесть', 314159265 );\n$hash->add( \"множество\", 314159265 );\n\necho $hash->get( 'шесть' ), \"\\n\";\necho $hash->get( 'множество' ), \"\\n\";\n\nvar_dump( $hash->update( 'множество', 314159266 ) );\nvar_dump( $hash->update( \"множество плюс один\", 314159999 ) );\n\necho $hash->get( 'шесть' ), \"\\n\";\necho $hash->get( 'множество' ), \"\\n\";\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n314159265\n314159265\nbool(true)\nbool(false)\n314159265\n314159266\n```\n","title":"QuickHashStringIntHash::update","contentType":2,"navigation":[{"quickhashstringinthash.set.md":"« QuickHashStringIntHash::set"},{"class.quickhashintstringhash.md":"QuickHashIntStringHash »"},{"index.md":"PHP Manual"},{"class.quickhashstringinthash.md":"QuickHashStringIntHash"}]}},"__N_SSG":true}