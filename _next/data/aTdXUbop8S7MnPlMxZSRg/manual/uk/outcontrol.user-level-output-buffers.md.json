{"pageProps":{"page":{"slug":"outcontrol.user-level-output-buffers.md","content":"## Буфери виводу користувача\n\nКористувальницькі буфери виводу дозволено запускати, маніпулювати ними та завершувати з PHP-коду. Кожен із цих буферів складається з буфера виведення та пов'язаної з ним функції обробника виведення.\n\n## Увімкнення буферизації виводу\n\nБуферизацію виводу включають виклик функції [ob\\_start()](function.ob-start.md)или установкой в файле php.ini параметров директивам[output\\_buffering](outcontrol.configuration.md#ini.output-buffering) і [output\\_handler](outcontrol.configuration.md#ini.output-handler). Хоча обидва способи вміють створювати буфери виводу, функція [ob\\_start()](function.ob-start.md) гнучкіше, оскільки приймає як обробників виведення користувацькі функції і вміє задавати операції, дозволені для буфера (скидання, очищення, видалення). Буфери, запущені функцією [ob\\_start()](function.ob-start.md), будуть активні з того рядка, з якого була викликана функція, тоді як ті, що були запущені директивою [output\\_buffering](outcontrol.configuration.md#ini.output-buffering), буферизуватиме висновок починаючи з першого рядка скрипта.\n\nPHP також поставляється з вбудованим обробником виводу `«URL-Rewriter»`, який запускає свій буфер виводу і дозволяє запускати одночасно до двох його екземплярів (одна для перезапису URL-адрес на рівні користувача та ще одна для підтримки прозорого ідентифікатора сесії). Ці буфери запускають виклик функції [output\\_add\\_rewrite\\_var()](function.output-add-rewrite-var.md) та (або) включенням директиви [session.use\\_trans\\_sid](session.configuration.md#ini.session.use-trans-sid)в файле php.ini.\n\nУ модуль, що входить в комплект `zlib` інтегрований свій буфер виводу, який включають директиву [zlib.output\\_compression](zlib.configuration.md#ini.zlib.output-compression)в файле php.ini.\n\n> **Зауваження**: Хотя обработчик`«URL-Rewriter»` і виділяється тим, що дозволяє запускати одночасно лише до двох своїх екземплярів, користувальницькі буфери виведення працюють з тими ж базовими буферами, які використовує функція [ob\\_start()](function.ob-start.md), А їх функціональність реалізована користувальницькою функцією обробника виведення. Тому їх функціональність в змозі зімітувати код користувача.\n\n## Скидання, доступ та очищення вмісту буфера\n\nСкидання надсилає та видаляє вміст активного буфера. Буфери виводу скидаються, коли розмір виводу перевищує розмір буфера, скрипт завершує роботу або викликаються функції [ob\\_flush()](function.ob-flush.md) [ob\\_end\\_flush()](function.ob-end-flush.md) або [ob\\_get\\_flush()](function.ob-get-flush.md)\n\n**Застереження**\n\nВиклик функцій [ob\\_end\\_flush()](function.ob-end-flush.md) або [ob\\_get\\_flush()](function.ob-get-flush.md) відключить активний буфер.\n\n**Застереження**\n\nСкидання буферів також скине повертається обробником виводу значення, яке обробник виводу вміє змінювати, і якщо так, значення відрізнятиметься від вмісту буфера. Наприклад, передача в обробник виведення функції [ob\\_gzhandler()](function.ob-gzhandler.md) призведе до стиснення даних виведення та скидання стисненого виводу.\n\nВміст активного буфера одержують викликом функцій [ob\\_get\\_contents()](function.ob-get-contents.md) [ob\\_get\\_clean()](function.ob-get-clean.md) або [ob\\_get\\_flush()](function.ob-get-flush.md)\n\nЯкщо потрібно лише розмір вмісту буфера, функції [ob\\_get\\_length()](function.ob-get-length.md) або [ob\\_get\\_status()](function.ob-get-status.md) повернуть розмір вмісту у байтах.\n\n**Застереження**\n\nВиклик функцій [ob\\_get\\_clean()](function.ob-get-clean.md) або [ob\\_get\\_flush()](function.ob-get-flush.md) відключить активний буфер після повернення вмісту.\n\nВміст активного буфера очищають викликом функцій [ob\\_clean()](function.ob-clean.md) [ob\\_end\\_clean()](function.ob-end-clean.md) або [ob\\_get\\_clean()](function.ob-get-clean.md)\n\n**Застереження**\n\nВиклик функцій [ob\\_end\\_clean()](function.ob-end-clean.md) або [ob\\_get\\_clean()](function.ob-get-clean.md) вимкне активний буфер виведення.\n\n## Відключення буферів\n\nБуфери виводу вимикають викликом функцій [ob\\_end\\_clean()](function.ob-end-clean.md) [ob\\_end\\_flush()](function.ob-end-flush.md) [ob\\_get\\_flush()](function.ob-get-flush.md) або [ob\\_get\\_clean()](function.ob-get-clean.md)\n\n**Увага**\n\nБуфери виведення, запущені без прапора **`PHP_OUTPUT_HANDLER_REMOVABLE`**, не можна вимкнути, а спроба видалити такі буфери видасть помилку рівня **`E_NOTICE`**\n\nКожен буфер виводу, який не був закритий до кінця скрипта або виклику конструкції [exit()](function.exit.md), буде скинуто та вимкнено процесом завершення роботи PHP. Буфери будуть скинуті та відключені у порядку, зворотному їх запуску. Останній запущений буфер буде першим, а перший запущений буфер буде скинутий та відключений в останню чергу.\n\n**Застереження**\n\nЯкщо скидання вмісту буферів не потрібне, активують обробний користувач виводу, щоб запобігти скидання при завершенні роботи.\n\n## Винятки в обробниках висновку\n\nЯкщо в обробнику виводу викидається неперехоплений виняток, програма завершується, а процес завершення роботи викликає обробник, потім виводиться повідомлення про помилку `Uncaught Exception`\n\nЯкщо в обробнику виводу, що викликається функціями [ob\\_flush()](function.ob-flush.md) [ob\\_end\\_flush()](function.ob-end-flush.md) або [ob\\_get\\_flush()](function.ob-get-flush.md), викидається неперехоплений виняток, вміст буфера скидається перед повідомленням про помилку.\n\nЯкщо в обробнику виводу неперехоплений виняток викидається під час вимкнення, обробник завершується, не скидаються ні вміст буфера, ні повідомлення про помилку.\n\n> **Зауваження**: Якщо обробник виводу викидає виняток, PHP встановлює для нього прапор стану **`PHP_OUTPUT_HANDLER_DISABLED`**\n\n## Помилки в обробниках виводу\n\nЯкщо в обробнику виводу видана помилка, програма продовжує виконуватися.\n\nЯкщо в обробнику, що викликається функціями [ob\\_flush()](function.ob-flush.md) [ob\\_end\\_flush()](function.ob-end-flush.md) або [ob\\_get\\_flush()](function.ob-get-flush.md), Виникає непереборна помилка, буфер скидає дані, які повернув обробник. Якщо обробник повертає значення \\*\\*`false`\\*\\*скидається буфер і повідомлення про помилку. Якщо повертає інше значення, значення, що повертається обробником, скидається, але не повідомлення про помилку.\n\n> **Зауваження**: Якщо обробник повертає значення **`false`** PHP встановлює для нього прапор стану **`PHP_OUTPUT_HANDLER_DISABLED`**\n\nЯкщо в обробнику виводу виникає фатальна помилка, програма завершується, а процес завершення роботи викликає обробник, а потім скидається повідомлення про помилку.\n\nЯкщо в обробнику виводу, що викликається функціями [ob\\_flush()](function.ob-flush.md) [ob\\_end\\_flush()](function.ob-end-flush.md) або [ob\\_get\\_flush()](function.ob-get-flush.md), виникає фатальна помилка, виникає, вміст буферів скидається перед повідомленням про помилку.\n\nЯкщо фатальна помилка виникає при вимкненні в обробнику виводу, програма завершується без скидання буфера або повідомлення про помилку.\n\n## Виведення обробників висновку\n\nЗа конкретних обставин вихідні дані, створені в обробнику, скидаються разом із вмістом буфера. Цей висновок не додається до буфера і не стає рядком, що повертається функцією [ob\\_get\\_flush()](function.ob-get-flush.md)\n\nЯкщо під час операцій скидання (при виклику функцій [ob\\_flush()](function.ob-flush.md) [ob\\_end\\_flush()](function.ob-end-flush.md) [ob\\_get\\_flush()](function.ob-get-flush.md) і при завершенні роботи) значення обробника, що повертається, дорівнює **`false`**, вміст буфера скидається, а потім йде висновок. Якщо обробник не викликається при завершенні роботи, обробник викидає виняток; виклик конструкції [exit()](function.exit.md) поводиться так само.\n\n> **Зауваження**: Якщо обробник повертає значення **`false`**, PHP встановлює для нього прапор стану **`PHP_OUTPUT_HANDLER_DISABLED`**\n\n## Прапори стану обробника виводу\n\nPHP устанавливает[прапори стану оброблювача](outcontrol.constants.md#outcontrol.constants.flags-returned-by-handler) бітової маски прапорів (`flags`) буфера щоразу під час виклику оброблювача виведення і робить їх частиною прапорів (`flags`), що повертаються функцією [ob\\_get\\_status()](function.ob-get-status.md). Якщо обробник успішно виконується та не повертає значення **`false`**, PHP встановлює прапори стану **`PHP_OUTPUT_HANDLER_STARTED`** і **`PHP_OUTPUT_HANDLER_PROCESSED`**. Якщо обробник повертає значення **`false`** або викидає виняток під час роботи, PHP встановлює прапори стану **`PHP_OUTPUT_HANDLER_STARTED`** і **`PHP_OUTPUT_HANDLER_DISABLED`**\n\n> **Зауваження**: Если для обработчика установлено значение\\*\\*`PHP_OUTPUT_HANDLER_DISABLED`\\*\\*, обробник не запускатиметься під час виклику функцій [ob\\_end\\_clean()](function.ob-end-clean.md) [ob\\_end\\_flush()](function.ob-end-flush.md) [ob\\_get\\_clean()](function.ob-get-clean.md) [ob\\_get\\_flush()](function.ob-get-flush.md) або при завершенні процесу роботи PHP. Цей прапор не дає ефекту під час виклику функцій [ob\\_clean()](function.ob-clean.md) або [ob\\_flush()](function.ob-flush.md)\n","title":"Буфери виводу користувача","contentType":2,"navigation":[{"outcontrol.flushing-system-buffers.md":"« Скидання (відправлення) системних буферів"},{"outcontrol.what-output-is-buffered.md":"Який висновок буферизується? »"},{"index.md":"PHP Manual"},{"book.outcontrol.md":"Контроль виведення"}]}},"__N_SSG":true}