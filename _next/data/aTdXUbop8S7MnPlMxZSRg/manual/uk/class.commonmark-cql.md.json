{"pageProps":{"page":{"slug":"class.commonmark-cql.md","content":"# Клас CommonMark\\\\CQL\n\n(cmark >= 1.1.0)\n\n## Вступ\n\nCommonMark Query Language - це DSL для опису того, як проходити через дерево вузлів CommonMark, реалізоване у вигляді синтаксичного аналізатора та компілятора для невеликого набору інструкцій та віртуальної машини для виконання цих інструкцій.\n\n##### Шляхи:\n\nУ найбільш спрощеній формі запит CQL поєднує такі шляхи та , щоб описати, як рухатися по дереву:\n\n-   firstChild\n-   lastChild\n-   previous\n-   next\n-   parent\n\nНаПриклад,`/firstChild/lastChild`будет перемещаться к последнему дочернему узлу первого дочернего узла.\n\n##### Цикли\n\nCQL може бути заданий цикл, наприклад, через дочірні елементи або дочірні елементи до певного вузла з використанням шляху `children`или`siblings`НаПриклад,`/firstChild/children` буде переміщатися всіма дочірніми елементами першого дочірнього вузла.\n\n##### Підзапити\n\nCQL можна проінструктувати, як переміщатися, використовуючи підзапит, такий як `[/firstChild]`НаПриклад,`/firstChild/children[/firstChild]` перейде до першого дочірнього вузла всіх вузлів першого дочірнього вузла.\n\n##### Обмеження циклів\n\nПід час циклу CQL може бути проінструктовано обмежувати пройдений шлях до вузлів певного типу. Наприклад, `/children(BlockQuote)` буде переміщатися до дочірніх елементів вузла, де типом є `BlockQuote`. Наступні типи розпізнаються (без урахування регістру):\n\n-   BlockQuote\n-   List\n-   Item\n-   CodeBlock\n-   HtmlBlock\n-   CustomBlock\n-   Paragraph\n-   Heading\n-   ThematicBreak\n-   Text\n-   SoftBreak\n-   LineBreak\n-   Code\n-   HtmlInline\n-   CustomInline\n-   Emphasis\n-   Strong\n-   Link\n-   Image\n\nТипи можуть використовуватись як об'єднання, наприклад, `/children(BlockQuote|List)` буде переміщатися до дочірніх елементів вузла, де типом є `BlockQuote`или`List`. Типи або об'єднання типів також можуть бути скасовані. Наприклад, `/children(~BlockQuote)` буде переміщатися до дочірніх елементів вузла, де тип не є `BlockQuote`, а`/children(~BlockQuote|Paragraph)`будет перемещаться к дочерним узлам, где тип не является`BlockQuote`или`Paragraph`\n\n##### Обмеження шляхів\n\nCQL можна доручити створити цикл для переміщення до вузла певного типу певним шляхом. Наприклад, `/firstChild(BlockQuote)` перейде до першого дочірнього вузла з типом `BlockQuote`. Зверніть увагу, що як і інші цикли, `children`и`siblings`, цей тип шляху може супроводжуватися лише підзапитом.\n\n##### Зауваження щодо реалізації\n\nХоча CQL реалізований як частина модуля PHP CommonMark, він стоїть окремо від PHP і не використовує віртуальну машину PHP або внутрішню виставу значень.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      class CommonMark\\CQL\n     \n     {\n    \n\n    /* Конструктор */\n    \n   public __construct(string $query)\n\n\n    /* Методы */\n    public __invoke(CommonMark\\Node $root, callable $handler)\n\n   }\n```\n\n## Зміст\n\n-   [CommonMark\\\\CQL::\\_\\_construct](commonmark-cql.construct.md) \\- Конструктор класу CQL\n-   [CommonMark\\\\CQL::\\_\\_invoke](commonmark-cql.invoke.md) \\- Виконання CQL\n","title":"Клас CommonMark\\\\CQL","contentType":2,"navigation":[{"commonmark-parser.finish.md":"« CommonMark\\\\Parser::finish"},{"commonmark-cql.construct.md":"CommonMark\\\\CQL::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.cmark.md":"CommonMark"}]}},"__N_SSG":true}