{"pageProps":{"page":{"slug":"function.stream-socket-server.md","content":"# stream\\_socket\\_server\n\n(PHP 5, PHP 7, PHP 8)\n\nstream\\_socket\\_server — Створює інтернет-сокет або доменний сокет Unix\n\n### Опис\n\n```methodsynopsis\nstream_socket_server(    string $address,    int &$error_code = null,    string &$error_message = null,    int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN,    ?resource $context = null): resource|false\n```\n\nСтворює сокет потоку чи датаграми на вказаному `address`\n\nЦя функція створює тільки сокет. Щоб почати приймати з'єднання, використовуйте [stream\\_socket\\_accept()](function.stream-socket-accept.md)\n\n### Список параметрів\n\n`address`\n\nТип сокету, що створюється, визначається по транспорту, вказаному з використанням стандартного форматування URL: `transport://target`\n\nДля доменних сокетів інтернету (**`AF_INET`**), таких як TCP та UDP, частина `target`параметра`remote_socket` повинна складатися з імені хоста або IP-адреси з наступною двокрапкою та номером порту. Для доменних сокетів Unix частина `target` має вказувати на файл сокета у файловій системі.\n\nЗалежно від оточення, доменні сокети Unix можуть бути недоступними. Список доступних транспортів можна отримати за допомогою функції [stream\\_get\\_transports()](function.stream-get-transports.md)Смотрите[Список підтримуваних транспортних протоколів](transports.md) для переліку вбудованих транспортів.\n\n`error_code`\n\nЯкщо необов'язкові аргументи `error_code`и`error_message` присутні, вони будуть встановлені для вказівки дійсного рівня системної помилки, яка відбувається при системних викликах `socket()` `bind()`и`listen()`. Якщо значення, що повертається в `error_code`, одно та функція повернула \\*\\*`false`\\*\\*Це означає, що помилка сталася до виклику `bind()`. Швидше за все це сталося через проблему ініціалізації сокету. Візьміть до уваги, що аргументи `error_code`и`error_message` повинні завжди передаватися за посиланням.\n\n`error_message`\n\nСмотрите описание параметра`error_code`\n\n`flags`\n\nБітова маска, яка може бути встановлена ​​в будь-якій комбінації прапорів для створення сокету.\n\n> **Зауваження** :\n> \n> Для UDP-сокетів ви повинні використовувати **`STREAM_SERVER_BIND`** як параметр `flags`\n\n`context`\n\n### Значення, що повертаються\n\nПовертає створений потік або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Параметр`context` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання серверних сокетів TCP**\n\n```php\n<?php\n$socket = stream_socket_server(\"tcp://0.0.0.0:8000\", $errno, $errstr);\nif (!$socket) {\n  echo \"$errstr ($errno)<br />\\n\";\n} else {\n  while ($conn = stream_socket_accept($socket)) {\n    fwrite($conn, 'Локальное время ' . date('n/j/Y g:i a') . \"\\n\");\n    fclose($conn);\n  }\n  fclose($socket);\n}\n?>\n```\n\nПриклад нижче показує, як працювати як сервер часу, який може відповідати на запити часу, як показано в прикладі функції [stream\\_socket\\_client()](function.stream-socket-client.md)\n\n> **Зауваження**: Більшість систем вимагають доступу до прав root для створення серверного сокету на порту нижче, ніж 1024.\n\n**Приклад #2 Приклад використання серверних сокетів UDP**\n\n```php\n<?php\n$socket = stream_socket_server(\"udp://127.0.0.1:1113\", $errno, $errstr, STREAM_SERVER_BIND);\nif (!$socket) {\n    die(\"$errstr ($errno)\");\n}\n\ndo {\n    $pkt = stream_socket_recvfrom($socket, 1, 0, $peer);\n    echo \"$peer\\n\";\n    stream_socket_sendto($socket, date(\"D M j H:i:s Y\\r\\n\"), 0, $peer);\n} while ($pkt !== false);\n\n?>\n```\n\n### Примітки\n\n> **Зауваження**: Якщо вказати числову адресу IPv6 (наприклад, `fe80::1`) Ви повинні укладати його в квадратні дужки. Наприклад, `tcp://[fe80::1]:80`\n\n### Дивіться також\n\n-   [stream\\_socket\\_client()](function.stream-socket-client.md) \\- Відкрити з'єднання з інтернет-сокетом або доменним сокетом Unix\n-   [stream\\_set\\_blocking()](function.stream-set-blocking.md) \\- Встановити блокуючий/неблокуючий режим у потоці\n-   [stream\\_set\\_timeout()](function.stream-set-timeout.md) \\- Встановити значення часу очікування потоку\n-   [fgets()](function.fgets.md) \\- Читає рядок із файлу\n-   [fgetss()](function.fgetss.md) \\- Читає рядок з файлу та видаляє HTML-теги\n-   [fwrite()](function.fwrite.md) \\- Бінарно-безпечний запис у файл\n-   [fclose()](function.fclose.md) \\- Закриває відкритий дескриптор файлу\n-   [feof()](function.feof.md) \\- Перевіряє, чи кінець файлу досягнуто\n-   [Модуль curl](ref.curl.md)\n","title":"stream\\_socket\\_server","contentType":2,"navigation":[{"function.stream-socket-sendto.md":"« stream\\_socket\\_sendto"},{"function.stream-socket-shutdown.md":"stream\\_socket\\_shutdown »"},{"index.md":"PHP Manual"},{"ref.stream.md":"Функції для роботи з потоками"}]}},"__N_SSG":true}