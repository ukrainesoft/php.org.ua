{"pageProps":{"page":{"slug":"function.openssl-encrypt.md","content":"# openssl\\_encrypt\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nopenssl\\_encrypt - Шифрує дані\n\n### Опис\n\n```methodsynopsis\nopenssl_encrypt(    string $data,    string $cipher_algo,    string $passphrase,    int $options = 0,    string $iv = \"\",    string &$tag = null,    string $aad = \"\",    int $tag_length = 16): string|false\n```\n\nШифрує дані із заданим шифром і ключем і повертає необроблений рядок або рядок, закодований у base64\n\n### Список параметрів\n\n`data`\n\nДані для шифрування.\n\n`cipher_algo`\n\nМетод шифрування. Список доступних методів можна отримати за допомогою функції [openssl\\_get\\_cipher\\_methods()](function.openssl-get-cipher-methods.md)\n\n`passphrase`\n\nКодова фраза. Якщо кодова фраза вкорочена, ніж очікувалося, вона автоматично доповнюється символами `NUL`; якщо кодова фраза довша, ніж очікувалося, вона автоматично усікається.\n\n`options`\n\n`options` можна задати одній з констант: **`OPENSSL_RAW_DATA`** **`OPENSSL_ZERO_PADDING`**\n\n`iv`\n\nНенульовий вектор, що ініціалізує.\n\n`tag`\n\nТег аутентифікації, який передається за посиланням, у режимі шифрування AEAD (GCM або CCM).\n\n`aad`\n\nДодаткові автентифіковані дані.\n\n`tag_length`\n\nДлина параметра`tag`. Для режиму GCM має бути від 4 до 16.\n\n### Значення, що повертаються\n\nПовертає зашифрований рядок або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Помилки\n\nВидає помилку рівня **`E_WARNING`**, якщо параметр `cipher_algo` передано невідомий алгоритм шифрування.\n\nВидає помилку рівня **`E_WARNING`**, якщо параметр `iv`передано пустое значение.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.1.0 | Додані параметри `tag` `aad`и`tag_length` |\n\n### Приклади\n\n**Приклад #1 Приклад шифрування AES з автентифікацією в режимі GCM PHP 7.1+**\n\n```php\n<?php\n// $key должен быть сгенерирован заранее криптографически безопасным образом\n// наПриклад, с помощью openssl_random_pseudo_bytes\n$plaintext = \"данные для шифрования\";\n$cipher = \"aes-128-gcm\";\nif (in_array($cipher, openssl_get_cipher_methods()))\n{\n    $ivlen = openssl_cipher_iv_length($cipher);\n    $iv = openssl_random_pseudo_bytes($ivlen);\n    $ciphertext = openssl_encrypt($plaintext, $cipher, $key, $options=0, $iv, $tag);\n    // сохраняем $cipher, $iv и $tag для дальнейшей расшифровки\n    $original_plaintext = openssl_decrypt($ciphertext, $cipher, $key, $options=0, $iv, $tag);\n    echo $original_plaintext.\"\\n\";\n}\n?>\n```\n\n**Приклад #2 Приклад шифрування AES з автентифікацією до PHP 7.1**\n\n```php\n<?php\n// $key должен быть сгенерирован заранее криптографически безопасным образом\n// наПриклад, с помощью openssl_random_pseudo_bytes\n$plaintext = \"данные для шифрования\";\n$ivlen = openssl_cipher_iv_length($cipher=\"AES-128-CBC\");\n$iv = openssl_random_pseudo_bytes($ivlen);\n$ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);\n$hmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);\n$ciphertext = base64_encode( $iv.$hmac.$ciphertext_raw );\n\n// расшифровка....\n$c = base64_decode($ciphertext);\n$ivlen = openssl_cipher_iv_length($cipher=\"AES-128-CBC\");\n$iv = substr($c, 0, $ivlen);\n$hmac = substr($c, $ivlen, $sha2len=32);\n$ciphertext_raw = substr($c, $ivlen+$sha2len);\n$original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);\n$calcmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);\nif (hash_equals($hmac, $calcmac))// сравнение, не подверженное атаке по времени\n{\n    echo $original_plaintext.\"\\n\";\n}\n?>\n```\n\n### Дивіться також\n\n-   [openssl\\_decrypt()](function.openssl-decrypt.md) \\- Розшифровує дані\n","title":"openssl\\_encrypt","contentType":2,"navigation":[{"function.openssl-digest.md":"« openssl\\_digest"},{"function.openssl-error-string.md":"openssl\\_error\\_string »"},{"index.md":"PHP Manual"},{"ref.openssl.md":"Функції OpenSSL"}]}},"__N_SSG":true}