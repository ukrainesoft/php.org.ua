{"pageProps":{"page":{"slug":"gearmanclient.addtaskbackground.md","content":"# GearmanClient::addTaskBackground\n\n(PECL gearman >= 0.5.0)\n\nGearmanClient::addTaskBackground — Додати фонове завдання для роботи в паралельному режимі\n\n### Опис\n\n```methodsynopsis\npublic GearmanClient::addTaskBackground(    string $function_name,    string|int|float $workload,    mixed $context = null,    ?string $unique_key = null): GearmanTask|false\n```\n\nДодає фонове завдання для паралельної роботи з іншими завданнями. Викличте цей метод для всіх завдань, які працюватимуть паралельно, а потім викличте [GearmanClient::runTasks()](gearmanclient.runtasks.md) для виконання робіт.\n\n### Список параметрів\n\n`function_name`\n\nЗареєстрована функція, що викликається робочим процесом\n\n`workload`\n\nСеріалізовані дані, що підлягають обробці\n\n`context`\n\nКонтекст програми, що пов'язується із завданням\n\n`unique_key`\n\nУнікальний ID, який призначається певному завданню\n\n### Значення, що повертаються\n\nОб'єкт [GearmanTask](class.gearmantask.md)или\\*\\*`false`\\*\\*, якщо завдання не може бути додано.\n\n### Приклади\n\n**Приклад #1 Два завдання, одне у фоновому режимі, а інше ні**\n\nЦей приклад ілюструє різницю між виконанням фонової задачі і звичайним завданням. Клієнт додає дві задачі для виконання тих самих функцій, але одна додана за допомогою **addTaskBackground()**. Callback-функція встановлена ​​так, щоб виконання завдання можна було простежити. Простий обробник зі штучною затримкою повідомляє статус виконання завдання, і клієнт розуміє це через виклик callback-функції. Два обробники запущені для цього прикладу. Зверніть увагу, що фонове завдання не відображається у клієнтському висновку.\n\n```php\n<?php\n\n# Клиентский скрипт\n\n# Создание нашего клиента\n$gmc= new GearmanClient();\n\n# Добавление сервера задач по умолчанию\n$gmc->addServer();\n\n# Установка нескольких callback-функций. Таким образом, мы сможем отслеживать выполнение\n$gmc->setCompleteCallback(\"reverse_complete\");\n$gmc->setStatusCallback(\"reverse_status\");\n\n# Добавление задачи для функции reverse\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"1\");\n\n# Добавление другой задачи, но она предназначена для запуска в фоновом режиме\n$task= $gmc->addTaskBackground(\"reverse\", \"!dlroW olleH\", null, \"2\");\n\nif (! $gmc->runTasks())\n{\n    echo \"Ошибка \" . $gmc->error() . \"\\n\";\n    exit;\n}\n\necho \"Выполнено\\n\";\n\nfunction reverse_status($task)\n{\n    echo \"Статус: \" . $task->unique() . \", \" . $task->jobHandle() . \" - \" . $task->taskNumerator() .\n         \"/\" . $task->taskDenominator() . \"\\n\";\n}\n\nfunction reverse_complete($task)\n{\n    echo \"Завершено: \" . $task->unique() . \", \" . $task->data() . \"\\n\";\n}\n\n?>\n```\n\n```php\n<?php\n\n# Скрипт обработчика\n\necho \"Начало\\n\";\n\n# Создаём наш объект обработчика\n$gmworker= new GearmanWorker();\n\n# Добавление сервера задач по умолчанию (localhost).\n$gmworker->addServer();\n\n# Регистрируем функцию reverse на сервере\n$gmworker->addFunction(\"reverse\", \"reverse_fn\");\n\nprint \"Ожидание задачи...\\n\";\nwhile($gmworker->work())\n{\n  if ($gmworker->returnCode() != GEARMAN_SUCCESS)\n  {\n    echo \"код возврата: \" . $gmworker->returnCode() . \"\\n\";\n    break;\n  }\n}\n\nfunction reverse_fn($job)\n{\n  echo \"Полученная задача: \" . $job->handle() . \"\\n\";\n\n  $workload = $job->workload();\n  $workload_size = $job->workloadSize();\n\n  echo \"Рабочая нагрузка: $workload ($workload_size)\\n\";\n\n  # В этом цикле для отображения статуса нет необходимости. Просто для демонстрации, как это работает\n  for ($x= 0; $x < $workload_size; $x++)\n  {\n    echo \"Отправка статуса: \" . ($x + 1) . \"/$workload_size выполнено\\n\";\n    $job->sendStatus($x+1, $workload_size);\n    $job->sendData(substr($workload, $x, 1));\n    sleep(1);\n  }\n\n  $result= strrev($workload);\n  echo \"Результат: $result\\n\";\n\n  # Возвращаем то, что мы хотим вернуть клиенту\n  return $result;\n}\n\n?>\n```\n\nВиведення робітника для двох запущених працівників:\n\n```\nПолученная задача: H:foo.local:65\nРабочая нагрузка: !dlroW olleH (12)\n1/12 выполнено\nПолученная задача: H:foo.local:66\nРабочая нагрузка: Hello World! (12)\nОтправка статуса: 1/12 выполнено\nОтправка статуса: 2/12 выполнено\nОтправка статуса: 2/12 выполнено\nОтправка статуса: 3/12 выполнено\nОтправка статуса: 3/12 выполнено\nОтправка статуса: 4/12 выполнено\nОтправка статуса: 4/12 выполнено\nОтправка статуса: 5/12 выполнено\nОтправка статуса: 5/12 выполнено\nОтправка статуса: 6/12 выполнено\nОтправка статуса: 6/12 выполнено\nОтправка статуса: 7/12 выполнено\nОтправка статуса: 7/12 выполнено\nОтправка статуса: 8/12 выполнено\nОтправка статуса: 8/12 выполнено\nОтправка статуса: 9/12 выполнено\nОтправка статуса: 9/12 выполнено\nОтправка статуса: 10/12 выполнено\nОтправка статуса: 10/12 выполнено\nОтправка статуса: 11/12 выполнено\nОтправка статуса: 11/12 выполнено\nОтправка статуса: 12/12 выполнено\nОтправка статуса: 12/12 выполнено\nРезультат: !dlroW olleH\nРезультат: Hello World!\n```\n\nКлієнт виводить:\n\n```\nСтатус: 1, H:foo.local:66 - 1/12\nСтатус: 1, H:foo.local:66 - 2/12\nСтатус: 1, H:foo.local:66 - 3/12\nСтатус: 1, H:foo.local:66 - 4/12\nСтатус: 1, H:foo.local:66 - 5/12\nСтатус: 1, H:foo.local:66 - 6/12\nСтатус: 1, H:foo.local:66 - 7/12\nСтатус: 1, H:foo.local:66 - 8/12\nСтатус: 1, H:foo.local:66 - 9/12\nСтатус: 1, H:foo.local:66 - 10/12\nСтатус: 1, H:foo.local:66 - 11/12\nСтатус: 1, H:foo.local:66 - 12/12\nЗавершено: 1, !dlroW olleH\nВыполнено\n```\n\n### Дивіться також\n\n-   [GearmanClient::addTask()](gearmanclient.addtask.md) \\- Додати завдання, яке буде виконано у паралельному режимі\n-   [GearmanClient::addTaskHigh()](gearmanclient.addtaskhigh.md) \\- Додати високопріоритетне завдання для роботи в паралельному режимі\n-   [GearmanClient::addTaskLow()](gearmanclient.addtasklow.md) \\- Додати низькопріоритетне завдання для роботи в паралельному режимі\n-   [GearmanClient::addTaskHighBackground()](gearmanclient.addtaskhighbackground.md) \\- Додати високопріоритетне фонове завдання для роботи в паралельному режимі\n-   [GearmanClient::addTaskLowBackground()](gearmanclient.addtasklowbackground.md) \\- Додати низькопріоритетне фонове завдання для роботи в паралельному режимі\n-   [GearmanClient::runTasks()](gearmanclient.runtasks.md) \\- Запустити список завдань у паралельному режимі\n","title":"GearmanClient::addTaskBackground","contentType":2,"navigation":[{"gearmanclient.addtask.md":"« GearmanClient::addTask"},{"gearmanclient.addtaskhigh.md":"GearmanClient::addTaskHigh »"},{"index.md":"PHP Manual"},{"class.gearmanclient.md":"GearmanClient"}]}},"__N_SSG":true}