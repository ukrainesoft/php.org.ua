{"pageProps":{"page":{"slug":"language.oop5.anonymous.md","content":"## Анонімні класи\n\nАнонімні класи корисні, коли потрібно створити прості одноразові об'єкти.\n\n```php\n<?php\n\n// Использование явного класса\nclass Logger\n{\n    public function log($msg)\n    {\n        echo $msg;\n    }\n}\n\n$util->setLogger(new Logger());\n\n// Использование анонимного класса\n$util->setLogger(new class {\n    public function log($msg)\n    {\n        echo $msg;\n    }\n});\n```\n\nВони можуть передавати аргументи в конструктори, розширювати інші класи, реалізовувати інтерфейси та використовувати трейти як звичайний клас:\n\n```php\n<?php\n\nclass SomeClass {}\ninterface SomeInterface {}\ntrait SomeTrait {}\n\nvar_dump(new class(10) extends SomeClass implements SomeInterface {\n    private $num;\n\n    public function __construct($num)\n    {\n        $this->num = $num;\n    }\n\n    use SomeTrait;\n});\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(class@anonymous)#1 (1) {\n  [\"Command line code0x104c5b612\":\"class@anonymous\":private]=>\n  int(10)\n}\n```\n\nВкладення анонімного класу в інший клас не дає йому доступу до закритих або захищених методів і властивостей цього зовнішнього класу. Щоб використовувати захищені властивості і методи зовнішнього класу, анонімний клас може розширити зовнішній клас. Щоб використовувати закриті властивості зовнішнього класу в анонімному класі, їх потрібно передати до конструктора:\n\n```php\n<?php\n\nclass Outer\n{\n    private $prop = 1;\n    protected $prop2 = 2;\n\n    protected function func1()\n    {\n        return 3;\n    }\n\n    public function func2()\n    {\n        return new class($this->prop) extends Outer {\n            private $prop3;\n\n            public function __construct($prop)\n            {\n                $this->prop3 = $prop;\n            }\n\n            public function func3()\n            {\n                return $this->prop2 + $this->prop3 + $this->func1();\n            }\n        };\n    }\n}\n\necho (new Outer)->func2()->func3();\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n6\n```\n\nУсі об'єкти, створені одним і тим самим оголошенням анонімного класу, є екземплярами цього самого класу.\n\n```php\n<?php\nfunction anonymous_class()\n{\n    return new class {};\n}\n\nif (get_class(anonymous_class()) === get_class(anonymous_class())) {\n    echo 'Тот же класс';\n} else {\n    echo 'Другой класс';\n}\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nТот же класс\n```\n\n> **Зауваження** :\n> \n> Зверніть увагу, що анонімним класам надаються імена двигуном PHP, як показано в прикладі нижче. Це слід розглядати як особливість реалізації, яку слід покладатися.\n> \n> ```php\n> <?php\n> echo get_class(new class {});\n> ```\n> \n> Висновок наведеного прикладу буде схожим на:\n> \n> ```\n> class@anonymous/in/oNi1A0x7f8636ad2021\n> ```\n","title":"Анонімні класи","contentType":2,"navigation":[{"language.oop5.traits.md":"« Трейти"},{"language.oop5.overloading.md":"Перевантаження »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}