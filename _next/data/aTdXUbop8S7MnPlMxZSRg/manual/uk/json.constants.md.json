{"pageProps":{"page":{"slug":"json.constants.md","content":"# Обумовлені константи\n\nНаведені нижче константи визначені цим модулем і доступні або в збірках PHP з підтримкою цього модуля, або коли модуль динамічно завантажений під час виконання коду.\n\nНаступні константи вказують на тип помилки, повернутий функцією [json\\_last\\_error()](function.json-last-error.md) або зберігається, як code в [JsonException](class.jsonexception.md)\n\n**`JSON_ERROR_NONE`**(int)\n\nНе сталося жодних помилок.\n\n**`JSON_ERROR_DEPTH`**(int)\n\nБуло перевищено максимальну глибину стека.\n\n**`JSON_ERROR_STATE_MISMATCH`**(int)\n\nНеправильний або пошкоджений JSON.\n\n**`JSON_ERROR_CTRL_CHAR`**(int)\n\nПомилка керуючих символів, ймовірно, через неправильне кодування.\n\n**`JSON_ERROR_SYNTAX`**(int)\n\nСинтаксична помилка.\n\n**`JSON_ERROR_UTF8`**(int)\n\nПошкоджені символи UTF-8, ймовірно, через неправильне кодування.\n\n**`JSON_ERROR_RECURSION`**(int)\n\nОб'єкт або масив, переданий у функцію [json\\_encode()](function.json-encode.md) включає рекурсивні посилання та не може бути закодований. Якщо було передано опцію **`JSON_PARTIAL_OUTPUT_ON_ERROR`**, то на місці рекурсивних посилань буде виведено **`null`**\n\n**`JSON_ERROR_INF_OR_NAN`**(int)\n\nЗначение, переданное в функцию[json\\_encode()](function.json-encode.md), включає або [**`NAN`**](language.types.float.md#language.types.float.nan), либо[**`INF`**](function.is-infinite.md). Якщо було вказано константу **`JSON_PARTIAL_OUTPUT_ON_ERROR`**, то замість зазначених особливих значень буде виведено\n\n**`JSON_ERROR_UNSUPPORTED_TYPE`**(int)\n\nУ функцію [json\\_encode()](function.json-encode.md) було передано значення непідтримуваного типу, наприклад, [resource](language.types.resource.md). Якщо було вказано константу **`JSON_PARTIAL_OUTPUT_ON_ERROR`**, то замість непідтримуваного значення виводитиметься **`null`**\n\n**`JSON_ERROR_INVALID_PROPERTY_NAME`**(int)\n\nУ рядку переданому в [json\\_decode()](function.json-decode.md) був ключ, що починається з символу \\\\u0000.\n\n**`JSON_ERROR_UTF16`**(int)\n\nОдин непарний сурогат UTF-16 в екранованій послідовності Unicode у рядку JSON, переданому в [json\\_decode()](function.json-decode.md)\n\nМожна комбінувати наступні константи для передачі [json\\_decode()](function.json-decode.md)\n\n**`JSON_BIGINT_AS_STRING`**(int)\n\nДекодує великі цілі числа як вихідне значення рядка.\n\n**`JSON_OBJECT_AS_ARRAY`**(int)\n\nПеретворює об'єкти JSON на масив PHP. Ця опція може бути задана автоматично, якщо викликати функцію [json\\_decode()](function.json-decode.md), вказавши другим параметром значення **`true`**\n\nНаступні константи можна комбінувати для використання в [json\\_encode()](function.json-encode.md)\n\n**`JSON_HEX_TAG`**(int)\n\nУсі < і > кодуються в \\\\u003C и\\\\u003E.\n\n**`JSON_HEX_AMP`**(int)\n\nВсі & кодуються в \\\\u0026.\n\n**`JSON_HEX_APOS`**(int)\n\nУсі символи ' кодуються в \\\\u0027.\n\n**`JSON_HEX_QUOT`**(int)\n\nУсі символи \"кодуються в \\\\u0022.\n\n**`JSON_FORCE_OBJECT`**(int)\n\nВидавати об'єкт замість масиву під час використання неасоціативного масиву. Це корисно, коли програма або код, що приймає, очікують об'єкт, а масив порожній.\n\n**`JSON_NUMERIC_CHECK`**(int)\n\nКодування рядків, що містять числа, як числа.\n\n**`JSON_PRETTY_PRINT`**(int)\n\nВикористовувати пробілові символи у даних, що повертаються для їх форматування.\n\n**`JSON_UNESCAPED_SLASHES`**(int)\n\nНе екранувати\n\n**`JSON_UNESCAPED_UNICODE`**(int)\n\nНе кодувати багатобайтові символи Unicode (за умовчанням вони кодуються як \\\\uXXXX).\n\n**`JSON_PARTIAL_OUTPUT_ON_ERROR`**(int)\n\nДозволяє уникнути помилок при використанні функції json\\_encode. Здійснює підстановку значень за замовчуванням замість некодованих.\n\n**`JSON_PRESERVE_ZERO_FRACTION`**(int)\n\nГарантує, що значення типу float буде перетворено саме значення типу float у разі, якщо дробова частина дорівнює 0.\n\n**`JSON_UNESCAPED_LINE_TERMINATORS`**(int)\n\nСимволи кінця рядка не будуть екрануватися, якщо задана константа **`JSON_UNESCAPED_UNICODE`**. Поведінка буде такою ж, якою вона була до PHP 7.1 без цієї константи. Доступно з PHP 7.1.0.\n\nНаступні константи можна комбінувати для використання в [json\\_decode()](function.json-decode.md) і [json\\_encode()](function.json-encode.md)\n\n**`JSON_INVALID_UTF8_IGNORE`**(int)\n\nІгнорувати неправильні символи UTF-8. Доступно з PHP 7.2.0.\n\n**`JSON_INVALID_UTF8_SUBSTITUTE`**(int)\n\nПеретворювати некоректні символи UTF-8 на \\\\0xfffd (Символ Юнікоду 'REPLACEMENT CHARACTER') Доступно з PHP 7.2.0.\n\n**`JSON_THROW_ON_ERROR`**(int)\n\nВикидається виняток [JsonException](class.jsonexception.md) у разі виникнення помилок замість встановлення глобального стану помилки, який можна отримати за допомогою функції [json\\_last\\_error()](function.json-last-error.md) і [json\\_last\\_error\\_msg()](function.json-last-error-msg.md)Константа\\*\\*`JSON_PARTIAL_OUTPUT_ON_ERROR`**имеет приоритет над**`JSON_THROW_ON_ERROR`\\*\\*Доступно с PHP 7.3.0.\n","title":"Обумовлені константи","contentType":2,"navigation":[{"json.resources.md":"« Типи ресурсів"},{"class.jsonexception.md":"JsonException »"},{"index.md":"PHP Manual"},{"book.json.md":"JSON"}]}},"__N_SSG":true}