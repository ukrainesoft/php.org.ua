{"pageProps":{"page":{"slug":"security.filesystem.nullbytes.md","content":"## Проблеми безпеки, пов'язані з нульовим байтом\n\nТак як для роботи з файловою системою PHP використовує C-функції, то в цьому випадку можлива вкрай несподівана обробка нульового байта. Так як нульовий байт означає кінець рядка C, то рядки, що містять такий байт, не будуть трактуватися повністю, а тільки до тієї позиції, в якій знаходиться цей байт. Наступний приклад містить вразливий код, який демонструє цю проблему:\n\n**Приклад #1 Скрипт, вразливий до нульового байта**\n\n```php\n<?php\n$file = $_GET['file']; // \"../../etc/passwd\\0\"\nif (file_exists('/home/wwwrun/'.$file.'.php')) {\n    // file_exists возвратит true, т.к. /home/wwwrun/../../etc/passwd существует\n    include '/home/wwwrun/'.$file.'.php';\n    // будет подключён файл /etc/passwd\n}\n?>\n```\n\nТаким чином, будь-який зіпсований рядок, що використовується в операціях з файловою системою, повинен бути відповідним чином перевірений. Ось покращена версія попереднього прикладу:\n\n**Приклад #2 Коректна перевірка вхідних даних**\n\n```php\n<?php\n$file = $_GET['file'];\n\n// Белый список возможных значений\nswitch ($file) {\n    case 'main':\n    case 'foo':\n    case 'bar':\n        include '/home/wwwrun/include/'.$file.'.php';\n        break;\n    default:\n        include '/home/wwwrun/include/main.php';\n}\n?>\n```\n","title":"Проблеми безпеки, пов'язані з нульовим байтом","contentType":2,"navigation":[{"security.filesystem.md":"« Безпека файлової системи"},{"security.database.md":"Безпека баз даних »"},{"index.md":"PHP Manual"},{"security.filesystem.md":"Безпека файлової системи"}]}},"__N_SSG":true}