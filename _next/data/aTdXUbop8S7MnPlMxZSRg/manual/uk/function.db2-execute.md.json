{"pageProps":{"page":{"slug":"function.db2-execute.md","content":"# db2\\_execute\n\n(PECL ibm\\_db2 >= 1.0.0)\n\ndb2\\_execute - Виконує підготовлений SQL-запит\n\n### Опис\n\n```methodsynopsis\ndb2_execute(resource $stmt, array $parameters = []): bool\n```\n\n**db2\\_execute()** виконує SQL-запит, підготовлений за допомогою [db2\\_prepare()](function.db2-prepare.md)\n\nЯкщо SQL-запит повертає набір результатів, наприклад, інструкція SELECT або CALL для процедури, що зберігається, яка повертає один або кілька наборів результатів, ви можете отримати рядок як масив з ресурсу `stmt`, используя[db2\\_fetch\\_assoc()](function.db2-fetch-assoc.md) [db2\\_fetch\\_both()](function.db2-fetch-both.md) або [db2\\_fetch\\_array()](function.db2-fetch-array.md). Як альтернативу ви можете використовувати [db2\\_fetch\\_row()](function.db2-fetch-row.md) для переміщення покажчика набору результатів на наступний рядок та вибірки стовпця з цього рядка за допомогою [db2\\_result()](function.db2-result.md)\n\nОбратитесь к[db2\\_prepare()](function.db2-prepare.md)для краткого обсуждения преимуществ использования[db2\\_prepare()](function.db2-prepare.md)и**db2\\_execute()** замість [db2\\_exec()](function.db2-exec.md)\n\n### Список параметрів\n\n`stmt`\n\nПідготовлений запит, який повертається функцією [db2\\_prepare()](function.db2-prepare.md)\n\n`parameters`\n\nМасив вхідних параметрів, які відповідають будь-яким маркерам параметрів, що містяться в підготовленому запиті.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Підготовка та виконання SQL-запиту з маркерами параметрів**\n\nУ наступному прикладі готується запит INSERT, який приймає чотири маркери параметрів, а потім виконує ітерацію масивів, що містять вхідні значення, які необхідно передати в **db2\\_execute()**\n\n```php\n<?php\n$pet = array(0, 'cat', 'Pook', 3.2);\n\n$insert = 'INSERT INTO animals (id, breed, name, weight)\n    VALUES (?, ?, ?, ?)';\n\n$stmt = db2_prepare($conn, $insert);\nif ($stmt) {\n    $result = db2_execute($stmt, $pet);\n    if ($result) {\n        print \"Успешно добавлен новый питомец.\";\n    }\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nУспешно добавлен новый питомец.\n```\n\n**Приклад #2 Виклик збереженої процедури з параметром OUT**\n\nУ наступному прикладі готується запит CALL, який приймає один маркер параметра, що представляє параметр OUT, пов'язує змінну PHP `$my_pets`с параметром с помощью[db2\\_bind\\_param()](function.db2-bind-param.md), а потім викликає **db2\\_execute()** для виконання запиту CALL. Після виконання запиту CALL процедури, що зберігається значення `$num_pets` змінюється, щоб відобразити значення, що повертається процедурою, що зберігається для цього параметра OUT.\n\n```php\n<?php\n$num_pets = 0;\n$res = db2_prepare($conn, \"CALL count_my_pets(?)\");\n$rc = db2_bind_param($res, 1, \"num_pets\", DB2_PARAM_OUT);\n$rc = db2_execute($res);\nprint \"У меня $num_pets домашних животных!\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nУ меня 7 домашних животных!\n```\n\n**Приклад #3 Повернення XML-даних як SQL ResultSet**\n\nУ цьому прикладі показано, як працювати з документами, що зберігаються в стовпці XML за допомогою бази даних SAMPLE. Використовуючи досить простий SQL/XML, цей приклад повертає деякі вузли в XML-документі у форматі SQL ResultSet, з яким знайома більшість користувачів.\n\n```php\n<?php\n\n$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = 'SELECT * FROM XMLTABLE(\n    XMLNAMESPACES (DEFAULT \\'http://posample.org\\'),\n    \\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")/customerinfo\\'\n    COLUMNS\n    \"CID\" VARCHAR (50) PATH \\'@Cid\\',\n    \"NAME\" VARCHAR (50) PATH \\'name\\',\n    \"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n    ) AS T\n    WHERE NAME = ?\n    ';\n\n$stmt = db2_prepare($conn, $query);\n\n$name = 'Kathy Smith';\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE\\n\");\n    }\n}\ndb2_close($conn);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n1000     Kathy Smith     416-555-1358\n1001     Kathy Smith     905-555-7258\n```\n\n**Приклад #4 Виконання \"JOIN\" з даними XML**\n\nНаступний приклад працює з документами, що зберігаються у 2 різних стовпцях XML у базі даних SAMPLE. Він створює 2 тимчасові таблиці з XML-документів із 2 різних стовпців і повертає SQL ResultSet з інформацією про статус доставки для клієнта.\n\n```php\n<?php\n\n$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\nSELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS\nFROM\nXMLTABLE(\nXMLNAMESPACES (DEFAULT \\'http://posample.org\\'),\n\\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")/customerinfo\\'\nCOLUMNS\n\"CID\" BIGINT PATH \\'@Cid\\',\n\"NAME\" VARCHAR (50) PATH \\'name\\',\n\"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n) as A,\nPURCHASEORDER AS B,\nXMLTABLE (\nXMLNAMESPACES (DEFAULT \\'http://posample.org\\'),\n\\'db2-fn:xmlcolumn(\"PURCHASEORDER.PORDER\")/PurchaseOrder\\'\nCOLUMNS\n\"PONUM\"  BIGINT PATH \\'@PoNum\\',\n\"STATUS\" VARCHAR (50) PATH \\'@Status\\'\n) as C\nWHERE A.CID = B.CUSTID AND\n    B.POID = C.PONUM AND\n    A.NAME = ?\n';\n\n$stmt = db2_prepare($conn, $query);\n\n$name = 'Kathy Smith';\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\\n\");\n    }\n}\n\ndb2_close($conn);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n1001     Kathy Smith     905-555-7258     5002     Shipped\n```\n\n**Приклад #5 Повернення SQL-даних як частини великого XML-документа**\n\nНаступний приклад працює з частиною документів PRODUCT.DESCRIPTION у базі даних SAMPLE. Він створює XML-документ, що містить опис продукту (дані XML) та інформацію про ціни (дані SQL).\n\n```php\n<?php\n\n$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\nSELECT\nXMLSERIALIZE(\nXMLQUERY(\\'\n    declare boundary-space strip;\n    declare default element namespace \"http://posample.org\";\n    <promoList> {\n    for $prod in $doc/product\n    where $prod/description/price < 10.00\n    order by $prod/description/price ascending\n    return(\n        <promoitem> {\n        $prod,\n        <startdate> {$start} </startdate>,\n        <enddate> {$end} </enddate>,\n        <promoprice> {$promo} </promoprice>\n            } </promoitem>\n    )\n    } </promoList>\n\\' passing by ref DESCRIPTION AS \"doc\",\nPROMOSTART as \"start\",\nPROMOEND as \"end\",\nPROMOPRICE as \"promo\"\nRETURNING SEQUENCE)\nAS CLOB (32000))\nAS NEW_PRODUCT_INFO\nFROM PRODUCT\nWHERE PID = ?\n';\n\n$stmt = db2_prepare($conn, $query);\n\n$pid = \"100-100-01\";\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"pid\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_array($stmt)){\n    printf(\"$row[0]\\n\");\n    }\n}\n\ndb2_close($conn);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n<promoList xmlns=\"http://posample.org\">\n    <promoitem>\n    <product pid=\"100-100-01\">\n        <description>\n            <name>Snow Shovel, Basic 22 inch</name>\n            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>\n            <price>9.99</price>\n            <weight>1 kg</weight>\n        </description>\n    </product>\n    <startdate>2004-11-19</startdate>\n    <enddate>2004-12-19</enddate>\n    <promoprice>7.25</promoprice>\n    </promoitem>\n</promoList>\n```\n\n### Дивіться також\n\n-   [db2\\_exec()](function.db2-exec.md) \\- Виконує SQL-запит безпосередньо\n-   [db2\\_fetch\\_array()](function.db2-fetch-array.md) \\- Повертає масив, індексований за положенням стовпця, що представляє рядок у наборі результатів\n-   [db2\\_fetch\\_assoc()](function.db2-fetch-assoc.md) \\- Повертає масив, індексований на ім'я стовпця, що представляє рядок у наборі результатів\n-   [db2\\_fetch\\_both()](function.db2-fetch-both.md) \\- Повертає масив, індексований як на ім'я стовпця, так і за позицією, що представляє рядок у наборі результатів\n-   [db2\\_fetch\\_row()](function.db2-fetch-row.md) \\- Встановлює вказівник набору результатів на наступний рядок або запрошений рядок\n-   [db2\\_prepare()](function.db2-prepare.md) \\- готує SQL-запит до виконання\n-   [db2\\_result()](function.db2-result.md) \\- Повертає один стовпець з рядка у наборі результатів\n","title":"db2\\_execute","contentType":2,"navigation":[{"function.db2-exec.md":"« db2\\_exec"},{"function.db2-fetch-array.md":"db2\\_fetch\\_array »"},{"index.md":"PHP Manual"},{"ref.ibm-db2.md":"Функції IBM DB2"}]}},"__N_SSG":true}