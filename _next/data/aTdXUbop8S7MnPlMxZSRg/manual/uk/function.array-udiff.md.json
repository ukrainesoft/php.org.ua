{"pageProps":{"page":{"slug":"function.array-udiff.md","content":"# array\\_udiff\n\n(PHP 5, PHP 7, PHP 8)\n\narray\\_udiff - Обчислює розбіжність масивів, використовуючи для порівняння callback-функцію\n\n### Опис\n\n```methodsynopsis\narray_udiff(array $array, array ...$arrays, callable $value_compare_func): array\n```\n\nОбчислює розбіжність масивів, використовуючи порівняння даних callback-функцию. Поведінка цієї функції відрізняється від поведінки функції [array\\_diff()](function.array-diff.md)яка порівнює дані через внутрішню функцію.\n\n### Список параметрів\n\n`array`\n\nПерший масив.\n\n`arrays`\n\nМасиви для порівняння.\n\n`value_compare_func`\n\nФункція порівняння повинна повертати ціле, яке менше, дорівнює чи більше нуля, якщо перший аргумент є відповідно меншим, рівним чи більшим, ніж другий.\n\n```methodsynopsis\ncallback(mixed $a, mixed $b): int\n```\n\n**Застереження**\n\nВозвращение*нецілих* значень з функції порівняння, таких як число з плаваючою точкою (float), призведе до внутрішнього приведення значення callback-функції, що повертається, до цілого числа (int). Таким чином, значення `0.99`и`0.1` будуть приведені до цілого значення що дозволить порівняти ці значення як рівні.\n\n**Застереження**\n\nCallback-функція сортування повинна обробляти будь-яке значення з будь-якого масиву у будь-якому порядку, незалежно від того, в якому порядку вони були надані спочатку. Причина цього у тому, кожен окремий масив спочатку сортується перед порівнянням коїться з іншими масивами. Наприклад:\n\n```php\n<?php\n\n$arrayA = [\"string\", 1];\n$arrayB = [[\"value\" => 1]];\n// $item1 and $item2 can be any of \"string\", 1 or [\"value\" => 1]\n$compareFunc = static function ($item1, $item2) {\n    $value1 = is_string($item1) ? strlen($item1) : (is_array($item1) ? $item1[\"value\"] : $item1);\n    $value2 = is_string($item2) ? strlen($item2) : (is_array($item2) ? $item2[\"value\"] : $item2);\n    return $value1 <=> $value2;\n};\n\n?>\n```\n\n### Значення, що повертаються\n\nПовертає масив (array), що містить елементи аргументу `array`, яких немає в жодному іншому аргументі.\n\n### Приклади\n\n**Приклад #1 Приклад використання функції** array\\_udiff()\\*\\* з об'єктами класу stdClass\\*\\*\n\n```php\n<?php\n\n// Массивы для сравнения\n$array1 = array(new stdClass, new stdClass,\n                new stdClass, new stdClass,\n               );\n\n$array2 = array(\n                new stdClass, new stdClass,\n               );\n\n// Проставление свойств для объектов\n$array1[0]->width = 11; $array1[0]->height = 3;\n$array1[1]->width = 7;  $array1[1]->height = 1;\n$array1[2]->width = 2;  $array1[2]->height = 9;\n$array1[3]->width = 5;  $array1[3]->height = 7;\n\n$array2[0]->width = 7;  $array2[0]->height = 5;\n$array2[1]->width = 9;  $array2[1]->height = 2;\n\nfunction compare_by_area($a, $b) {\n    $areaA = $a->width * $a->height;\n    $areaB = $b->width * $b->height;\n\n    if ($areaA < $areaB) {\n        return -1;\n    } elseif ($areaA > $areaB) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nprint_r(array_udiff($array1, $array2, 'compare_by_area'));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => stdClass Object\n        (\n            [width] => 11\n            [height] => 3\n        )\n\n    [1] => stdClass Object\n        (\n            [width] => 7\n            [height] => 1\n        )\n\n)\n```\n\n**Приклад #2 Приклад використання функції** array\\_udiff()\\*\\* з об'єктами класу DateTime\\*\\*\n\n```php\n<?php\n\nclass MyCalendar {\n    public $free = array();\n    public $booked = array();\n\n    public function __construct($week = 'now') {\n        $start = new DateTime($week);\n        $start->modify('Monday this week midnight');\n        $end = clone $start;\n        $end->modify('Friday this week midnight');\n        $interval = new DateInterval('P1D');\n        foreach (new DatePeriod($start, $interval, $end) as $freeTime) {\n            $this->free[] = $freeTime;\n        }\n    }\n\n    public function bookAppointment(DateTime $date, $note) {\n        $this->booked[] = array('date' => $date->modify('midnight'), 'note' => $note);\n    }\n\n    public function checkAvailability() {\n        return array_udiff($this->free, $this->booked, array($this, 'customCompare'));\n    }\n\n    public function customCompare($free, $booked) {\n        if (is_array($free)) $a = $free['date'];\n        else $a = $free;\n        if (is_array($booked)) $b = $booked['date'];\n        else $b = $booked;\n        if ($a == $b) {\n            return 0;\n        } elseif ($a > $b) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n\n// Создание календаря еженедельных встреч\n$myCalendar = new MyCalendar;\n\n// Запись еженедельных встреч\n$myCalendar->bookAppointment(new DateTime('Monday this week'), \"Уборка квартиры сотрудника Google.\");\n$myCalendar->bookAppointment(new DateTime('Wednesday this week'), \"Катание на сноуборде.\");\n$myCalendar->bookAppointment(new DateTime('Friday this week'), \"Борьба с багами в коде.\");\n\n// Проверка доступности дней путём сравнения дат в переменной $booked с датами переменной $free\necho \"Я доступен в следующие дни на этой неделе...\\n\\n\";\nforeach ($myCalendar->checkAvailability() as $free) {\n    echo $free->format('l'), \"\\n\";\n}\necho \"\\n\\n\";\necho \"Я занят в следующие дни на этой неделе...\\n\\n\";\nforeach ($myCalendar->booked as $booked) {\n    echo $booked['date']->format('l'), \": \", $booked['note'], \"\\n\";\n}\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nЯ доступен в следующие дни на этой неделе...\n\nTuesday\nThursday\n\n\nЯ занят в следующие дни на этой неделе...\n\nMonday: Уборка квартиры сотрудника Google.\nWednesday: Катание на сноуборде.\nFriday: Борьба с багами в коде.\n```\n\n### Примітки\n\n> **Зауваження**: Зверніть увагу, що функція обробляє лише перший рівень багатовимірного масиву. Значення на вкладених рівнях обробляють, наприклад, так: `array_udiff($array1[0], $array2[0], \"data_compare_func\");`\n\n### Дивіться також\n\n-   [array\\_diff()](function.array-diff.md) \\- обчислює розбіжність масивів\n-   [array\\_diff\\_assoc()](function.array-diff-assoc.md) \\- обчислює розбіжність масивів з додатковою перевіркою індексу\n-   [array\\_diff\\_uassoc()](function.array-diff-uassoc.md) \\- Обчислює розбіжність масивів з додатковою перевіркою індексу через пользовательскую callback-функцію\n-   [array\\_udiff\\_assoc()](function.array-udiff-assoc.md) \\- обчислює розбіжність у масивах з додатковою перевіркою індексів, використовуючи порівняння значень callback-функцию\n-   [array\\_udiff\\_uassoc()](function.array-udiff-uassoc.md) \\- обчислює розбіжність у масивах з додатковою перевіркою індексів, використовуючи для порівняння значень та індексів callback-функцію\n-   [array\\_intersect()](function.array-intersect.md) \\- обчислює перетин масивів\n-   [array\\_intersect\\_assoc()](function.array-intersect-assoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу\n-   [array\\_uintersect()](function.array-uintersect.md) \\- обчислює перетин масивів, використовуючи для порівняння значень callback-функцію\n-   [array\\_uintersect\\_assoc()](function.array-uintersect-assoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексів, використовуючи для порівняння значень callback-функцію\n-   [array\\_uintersect\\_uassoc()](function.array-uintersect-uassoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу, використовуючи для порівняння індексів та значень окремі callback-функції\n","title":"array\\_udiff","contentType":2,"navigation":[{"function.array-udiff-uassoc.md":"« array\\_udiff\\_uassoc"},{"function.array-uintersect-assoc.md":"array\\_uintersect\\_assoc »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}