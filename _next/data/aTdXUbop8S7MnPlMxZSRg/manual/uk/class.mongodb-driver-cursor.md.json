{"pageProps":{"page":{"slug":"class.mongodb-driver-cursor.md","content":"# Клас MongoDB\\\\Driver\\\\Cursor\n\n(mongodb >=1.0.0)\n\n## Вступ\n\nКласс**MongoDB\\\\Driver\\\\Cursor** містить результати команди MongoDB command або запиту та може бути повернутий [MongoDB\\\\Driver\\\\Manager::executeCommand()](mongodb-driver-manager.executecommand.md) або [MongoDB\\\\Driver\\\\Manager::executeQuery()](mongodb-driver-manager.executequery.md)соответственно.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     final\n     \n      class MongoDB\\Driver\\Cursor\n     \n\n     implements \n       MongoDB\\Driver\\CursorInterface,  Iterator {\n    \n\n    /* Методы */\n    \n   final private __construct()\npublic current(): array|object|null\nfinal public getId(): MongoDB\\Driver\\CursorId\nfinal public getServer(): MongoDB\\Driver\\Server\nfinal public isDead(): bool\npublic key(): int\npublic next(): void\npublic rewind(): void\nfinal public setTypeMap(array $typemap): void\nfinal public toArray(): array\npublic valid(): bool\n\n   }\n```\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL mongodb 1.9.0 | Реалізує [Iterator](class.iterator.md) |\n| PECL mongodb 1.6.0 | Реалізує [MongoDB\\\\Driver\\\\CursorInterface](class.mongodb-driver-cursorinterface.md), який успадковує [Traversable](class.traversable.md) |\n\n## Приклади\n\n**Приклад #1 Reading a result set**\n\nЯк [MongoDB\\\\Driver\\\\Manager::executeCommand()](mongodb-driver-manager.executecommand.md), так[MongoDB\\\\Driver\\\\Manager::executeQuery()](mongodb-driver-manager.executequery.md), повертають свої результати у вигляді об'єкту **MongoDB\\\\Driver\\\\Cursor**\n\nОскільки **MongoDB\\\\Driver\\\\Cursor** реалізує інтерфейс [Traversable](class.traversable.md), ви можете ітерувати за набором результату за допомогою [`foreach`](control-structures.foreach.md)\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager();\n\n/* Вставить определённые документы, чтобы наш запрос вернул результаты */\n$bulkWrite = new MongoDB\\Driver\\BulkWrite;\n$bulkWrite->insert(['name' => 'Ceres', 'size' => 946, 'distance' => 2.766]);\n$bulkWrite->insert(['name' => 'Vesta', 'size' => 525, 'distance' => 2.362]);\n$manager->executeBulkWrite(\"test.asteroids\", $bulkWrite);\n\n/* Запрос на получение всех элементов в коллекции */\n$query = new MongoDB\\Driver\\Query( [] );\n\n/* Запрос коллекции \"asteroids\" базы данных \"test\" */\n$cursor = $manager->executeQuery(\"test.asteroids\", $query);\n\n/* Теперь $cursor содержит объект, обёрнутый вокруг набора с результатом. Используйте\n * foreach() для итеации по всему результату */\nforeach ($cursor as $document) {\n    print_r($document);\n}\n\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nstdClass Object\n(\n    [_id] => MongoDB\\BSON\\ObjectId Object\n        (\n            [oid] => 5a4cff2f122d3321565d8cc2\n        )\n\n    [name] => Ceres\n    [size] => 946\n    [distance] => 2.766\n)\nstdClass Object\n(\n    [_id] => MongoDB\\BSON\\ObjectId Object\n        (\n            [oid] => 5a4cff2f122d3321565d8cc3\n        )\n\n    [name] => Vesta\n    [size] => 525\n    [distance] => 2.362\n}\n```\n\n**Приклад #2 Читання результатів для хвостового курсору**\n\n[» Хвостові курсори](https://www.mongodb.com/docs/manual/core/tailable-cursors) - - це особливий тип курсору MongoDB, який дозволяє клієнту читати деякі результати, а потім чекати, доки не з'являться додаткові документи. Ці курсори в основному використовуються з [» Capped Collections](https://www.mongodb.com/docs/manual/core/capped-collections) і [» Change Streams](https://www.mongodb.com/docs/manual/changeStreams)\n\nХоча звичайні курсори можна ітерувати один раз за допомогою `foreach`, цей підхід не працюватиме з хвостовими курсорами. Коли `foreach` використовується з хвостовим курсором, цикл зупиняється після досягнення кінця початкового набору результатів. Спроба продовжити ітерацію курсору з другим `foreach` викинути виняток, оскільки PHP намагається перемотати курсор. Подібно до об'єктів результатів в інших драйверах баз даних, курсори в MongoDB підтримують лише ітерацію вперед, що означає, що вони не можуть бути перемотані.\n\nДля безперервного зчитування з хвостового курсору об'єкт курсора повинен бути загорнутий за допомогою [IteratorIterator](class.iteratoriterator.md). Це дозволяє застосуванню безпосередньо керувати ітерацією курсору, уникати ненавмисного перемотування курсору і вирішувати, коли чекати на нові результати або повністю припинити ітерацію.\n\nЩоб продемонструвати хвостовий курсор у дії, будуть використовуватися два скрипти: \"виробник\" (producer) та \"споживач\" (consumer). Скрипт продюсера створить нову capped-колекцію, використовуючи команду [» create](https://www.mongodb.com/docs/manual/reference/command/create) і почне вставляти новий документ у цю колекцію кожну секунду.\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager;\n\n$manager->executeCommand('test', new MongoDB\\Driver\\Command([\n    'create' => 'asteroids',\n    'capped' => true,\n    'size' => 1048576,\n]));\n\nwhile (true) {\n    $bulkWrite = new MongoDB\\Driver\\BulkWrite;\n    $bulkWrite->insert(['createdAt' => new MongoDB\\BSON\\UTCDateTime]);\n    $manager->executeBulkWrite('test.asteroids', $bulkWrite);\n\n    sleep(1);\n}\n\n?>\n```\n\nКоли скрипт продюсера (producer) все ще запущений, може бути виконаний другий скрипт для читання вставлених документів за допомогою хвостового (tailable) курсора, позначеного параметрами `tailable`и`awaitData`для[MongoDB\\\\Driver\\\\Query::\\_\\_construct()](mongodb-driver-query.construct.md)\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager;\n\n$query = new MongoDB\\Driver\\Query([], [\n    'tailable' => true,\n    'awaitData' => true,\n]);\n\n$cursor = $manager->executeQuery('test.asteroids', $query);\n\n$iterator = new IteratorIterator($cursor);\n\n$iterator->rewind();\n\nwhile (true) {\n    if ($iterator->valid()) {\n        $document = $iterator->current();\n        printf(\"Пользовательский документ создан: %s\\n\", $document->createdAt);\n    }\n\n    $iterator->next();\n}\n\n?>\n```\n\nСкрипт користувача почне з швидкого друку всіх доступних документів у заблокованій колекції (як би використовувався `foreach`); однак, при досягненні кінця початкового набору результатів він не завершиться. Оскільки курсор є хвостовим, виклик [IteratorIterator::valid()](iteratoriterator.valid.md) буде блокувати та чекати на додаткові результати . [IteratorIterator::valid()](iteratoriterator.valid.md) також використовується для перевірки наявності на кожному етапі даних, доступних для читання.\n\n> **Зауваження**: У цьому прикладі використовується опція запиту `awaitData`, щоб проінструктувати сервер блокувати протягом короткого періоду (наприклад, одну секунду) наприкінці набору результатів перед поверненням відповіді драйверу. Це використовується для запобігання агресивному опитуванню (polling) серверу за відсутності результатів. Параметр `maxAwaitTimeMS` може використовуватися в поєднанні з `tailable`и`awaitData`, щоб вказати час, який сервер повинен блокувати, коли він досягне кінця набору результатів.\n\n## Помилки\n\nПри ітерації об'єктом курсору дані BSON перетворюються на змінні PHP. Ця ітерація може викликати такі винятки:\n\n-   Викидає [MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md)якщо клас на карті типів не може бути створений або не реалізує[MongoDB\\\\BSON\\\\Unserializable](class.mongodb-bson-unserializable.md)\n-   Исключение[MongoDB\\\\Driver\\\\Exception\\\\UnexpectedValueException](class.mongodb-driver-exception-unexpectedvalueexception.md)викидається, якщо вхідні дані не є одним документом BSON. Можливі причини включають, але не обмежені некоректним BSON, зайвими даними або несподіваною помилкою[» libbson](https://github.com/mongodb/mongo-c-driver/tree/master/src/libbson)\n\n## Зміст\n\n-   [MongoDB\\\\Driver\\\\Cursor::\\_\\_construct](mongodb-driver-cursor.construct.md)— Створює новий об'єкт Cursor (не використовується)\n-   [MongoDB\\\\Driver\\\\Cursor::current](mongodb-driver-cursor.current.md)— Повертає поточний елемент\n-   [MongoDB\\\\Driver\\\\Cursor::getId](mongodb-driver-cursor.getid.md)— Повертає ідентифікатор для курсору\n-   [MongoDB\\\\Driver\\\\Cursor::getServer](mongodb-driver-cursor.getserver.md)— Повертає сервер, пов'язаний із курсором\n-   [MongoDB\\\\Driver\\\\Cursor::isDead](mongodb-driver-cursor.isdead.md)— Перевіряє, чи курсор вичерпано, чи може містити додаткові результати.\n-   [MongoDB\\\\Driver\\\\Cursor::key](mongodb-driver-cursor.key.md)— Повертає індекс поточного результату у курсорі\n-   [MongoDB\\\\Driver\\\\Cursor::next](mongodb-driver-cursor.next.md)— Переміщує курсор на наступний результат\n-   [MongoDB\\\\Driver\\\\Cursor::rewind](mongodb-driver-cursor.rewind.md)— Переміщує курсор до першого результату\n-   [MongoDB\\\\Driver\\\\Cursor::setTypeMap](mongodb-driver-cursor.settypemap.md)— Встановлює карту типу для десеріалізації BSON\n-   [MongoDB\\\\Driver\\\\Cursor::toArray](mongodb-driver-cursor.toarray.md)— Повертає масив, що містить усі результати курсору\n-   [MongoDB\\\\Driver\\\\Cursor::valid](mongodb-driver-cursor.valid.md)— Перевіряє, чи поточна позиція курсору коректна.\n","title":"Клас MongoDB\\\\Driver\\\\Cursor","contentType":2,"navigation":[{"mongodb-driver-readconcern.unserialize.md":"« MongoDB\\\\Driver\\\\ReadConcern::unserialize"},{"mongodb-driver-cursor.construct.md":"MongoDB\\\\Driver\\\\Cursor::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.mongodb.md":"MongoDB\\\\Driver"}]}},"__N_SSG":true}