{"pageProps":{"page":{"slug":"class.eventbase.md","content":"# Клас EventBase\n\n(PECL event >= 1.2.6-beta)\n\n## Вступ\n\nКласс**EventBase** представляє структуру подієвої бази якнайбільше. Він містить набір подій і може опитувати їх для визначення, які з них активні.\n\nКожна подієва база має *метод*или*бекенд*, які використовуються визначення готових подій. Використовувані методи: `select` `poll` `epoll` `kqueue` `devpoll` `evport`и`win32`\n\nДля налаштування подійної бази або для виключення певних бекендів можна використовувати клас [EventConfig](class.eventconfig.md)\n\n**Увага**\n\n*НЕ* руйнуйте об'єкт **EventBase** доки не звільнені пов'язані з `Event` ресурси. В іншому випадку це призведе до непередбачуваних результатів!\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      final\n      class EventBase\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      LOOP_ONCE = 1;\n\n    const\n     int\n      LOOP_NONBLOCK = 2;\n\n    const\n     int\n      NOLOCK = 1;\n\n    const\n     int\n      STARTUP_IOCP = 4;\n\n    const\n     int\n      NO_CACHE_TIME = 8;\n\n    const\n     int\n      EPOLL_USE_CHANGELIST = 16;\n\n    /* Методы */\n    \n   public\n   __construct(\n    EventConfig\n     $cfg\n    = ?)\npublic\n   dispatch(): void\npublic\n   exit(\n    float\n     $timeout\n    = ?): bool\npublic\n   free(): void\npublic\n   getFeatures(): int\npublic\n   getMethod(): string\npublic\n   getTimeOfDayCached(): float\npublic\n   gotExit(): bool\npublic\n   gotStop(): bool\npublic\n   loop(\n    int\n     $flags\n    = ?): bool\npublic\n   priorityInit(\n    int\n     $n_priorities\n   ): bool\npublic\n   reInit(): bool\npublic\n   stop(): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`EventBase::LOOP_ONCE`**\n\nПрапор використовується з методом [EventBase::loop()](eventbase.loop.md) і означає: \"блокувати, поки libevent не отримає активну подію, а потім вийти після завершення функції зворотного виклику для всіх активних подій\".\n\n**`EventBase::LOOP_NONBLOCK`**\n\nПрапор використовується з методом [EventBase::loop()](eventbase.loop.md) і означає: \"не блокувати: подивитися, які події вже готові, запустити зворотні виклики із найвищим пріоритетом, потім вийти\".\n\n**`EventBase::NOLOCK`**\n\nПрапор конфігурації. Не виділяти блокування для бази подій, навіть якщо блокування налаштовано.\n\n**`EventBase::STARTUP_IOCP`**\n\nПрапор конфігурації лише для Windows. Дозволяє диспетчер IOCP під час старту.\n\n**`EventBase::NO_CACHE_TIME`**\n\nПрапор конфігурації. Замість перевірки поточного часу щоразу, коли цикл готовий запустити функцію зворотного виклику за таймером, перевіряти його після кожного виклику такої функції.\n\n**`EventBase::EPOLL_USE_CHANGELIST`**\n\nЯкщо використовується бекенд `epoll` Цей прапор повідомляє, що можна безпечно використовувати внутрішній код списку змін Libevent для пакетного додавання та видалення з метою мінімізації кількості системних викликів.\n\nВстановлення цього прапора може підвищити продуктивність, але може призвести до прояву бага Linux: не безпечно використовувати цей прапор, якщо будь-який із файлових дескрипторів був клонований за допомогою dup() або його аналогів. Може призвести до дивних помилок, що важко діагностуються.\n\nЦей прапор також може бути активований установкою змінного оточення `EVENT_EPOLL_USE_CHANGELIST`\n\nЦей прапор не діє, якщо ви використовуєте будь-який бекенд, крім `epoll`\n\n## Зміст\n\n-   [EventBase::\\_\\_construct](eventbase.construct.md) \\- Конструктор об'єкта EventBase\n-   [EventBase::dispatch](eventbase.dispatch.md)— Відправляє події, що очікують.\n-   [EventBase::exit](eventbase.exit.md)— Припиняє надсилання подій\n-   [EventBase::free](eventbase.free.md)— Визволяє ресурси, виділені для цієї бази подій\n-   [EventBase::getFeatures](eventbase.getfeatures.md)— Повертає бітову маску підтримуваних функцій\n-   [EventBase::getMethod](eventbase.getmethod.md)— Повертає метод події, що використовується.\n-   [EventBase::getTimeOfDayCached](eventbase.gettimeofdaycached.md)— Повертає поточний час базові події\n-   [EventBase::gotExit](eventbase.gotexit.md)— Перевіряє, чи було завершено цикл обробки подій.\n-   [EventBase::gotStop](eventbase.gotstop.md)— Перевіряє, чи було завершено цикл обробки подій.\n-   [EventBase::loop](eventbase.loop.md)— Відправлення очікуваних подій\n-   [EventBase::priorityInit](eventbase.priorityinit.md)— Встановлює кількість пріоритетів на основі подій.\n-   [EventBase::reInit](eventbase.reinit.md) \\- Повторна ініціалізація бази подій (після розгалуження)\n-   [EventBase::stop](eventbase.stop.md)— повідомляє event\\_base припинити відправку подій\n","title":"Клас EventBase","contentType":2,"navigation":[{"event.timer.md":"« Event::timer"},{"eventbase.construct.md":"EventBase::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.event.md":"Event"}]}},"__N_SSG":true}