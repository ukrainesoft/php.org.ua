{"pageProps":{"page":{"slug":"function.fprintf.md","content":"# fprintf\n\n(PHP 5, PHP 7, PHP 8)\n\nfprintf — записує відформатований рядок у потік\n\n### Опис\n\n```methodsynopsis\nfprintf(resource $stream, string $format, mixed ...$values): int\n```\n\nЗаписує рядок, створений за допомогою рядка формату `format`, в потік, дескриптор якого передається у параметрі `stream`\n\n### Список параметрів\n\n`stream`\n\nВказівник (resource) на файл, який зазвичай створюється за допомогою функції [fopen()](function.fopen.md)\n\n`format`\n\nРядок формату складається з нуля або більше директив: звичайні символи (за винятком `%`), які просто виводяться без зміни та *специфікатори перетворення*, кожен із яких вимагає передачі свого параметра.\n\nСпецифікатори перетворення мають такий формат: `%[argnum$][flags][width][.precision]specifier`\n\n##### Argnum\n\nЦіло число, за яким слідує знак долара `$`, щоб вказати, який числовий аргумент обробляти під час перетворення.\n\n**Прапори**\n\n| Флаг | Опис |\n| --- | --- |\n| `-` | Вирівнювання по лівому краю в межах заданої ширини поля; За умовчанням вирівнювання відбувається праворуч. |\n| `+` | Друкує плюс `+` у не негативних чисел; За замовчуванням знак друкується лише у негативних чисел. |\n| (space) | Доповнює результат пробілами. Це стандартна поведінка. |\n|  | Доповнює числа нулями (тільки зліва). Зі специфікатором `s` також може доповнювати нулями праворуч. |\n| `'`(char) | Доповнює результат символом (char). |\n\n##### Ширина\n\nАбо ціле число, що вказує, скільки символів (мінімум) має вийти в результаті перетворення, або `*`Если указано значение`*`ширина задається як додаткове ціле значення, що передує значенню, відформатованому специфікатором.\n\n##### Точність\n\nКрапка , з наступним цілим числом, або `*`значення якого залежить від специфікатора:\n\n-   Для специфікаторів`e` `E` `f`и`F`: задає кількість цифр після десяткової коми (за замовчуванням 6).\n-   Для специфікаторів`g`,`G` `h`и`H`: задає максимальне значення значущих цифр.\n-   Для специфікатора`s`: визначає обмеження максимальної кількості символів у рядку, які будуть виведені.\n\n> **Зауваження**: Якщо вказана точка без наступного значення точності, то точність буде вважатися 0. Якщо вказано значення `*`, точність задається як додаткове значення, що передує значенню, відформатованому специфікатором.\n\n**Специфікатори**\n\n| Спецификатор | Опис |\n| --- | --- |\n| `%` | Відсоток символ. Аргументи не потрібні. |\n| `b` | Аргумент сприймається як ціле число і друкується у бінарному поданні. |\n| `c` | Аргумент розглядається як ціле число і друкується як символ таблиці ASCII з відповідним кодом. |\n| `d` | Аргумент сприймається як ціле число і друкується як ціле число зі знаком. |\n| `e` | Аргумент вважається за число у науковій нотації (тобто 1.2e+2). |\n| `E` | Аналогічно специфікатору `e`, але використовує великі символи (тобто 1.2E+2). |\n| `f` | Аргумент вважається за число з точкою, що плаває (з урахуванням локалі). |\n| `F` | Аргумент вважається за число з точкою, що плаває (без урахування локалі). |\n| `g` |  |\n| Загальний формат. |  |\n\nНехай P дорівнює точності, якщо вона не дорівнює нулю, 6 якщо точність не задана і 1, якщо точність задана як 0. Тоді, якщо перетворення зі стилем \"E\" матиме показник ступеня X:\n\nЯкщо P > X ≥ -4, перетворення буде в стилі \"f\" і точність буде P - (X + 1). У протилежному випадку перетворення буде в стилі \"e\" і точність буде P − 1.\n\n`G` | Аналогічно специфікатору `g`, але використовує `E`и`f`. `h` | Аналогічно специфікатору `g`, але використовує `F`Доступен с PHP 8.0.0. | |`H` | Аналогічно специфікатору `g`, але використовує `E`и`F`Доступен с PHP 8.0.0. | |`o` | Аргумент сприймається як ціле число і друкується у вісімковому поданні. | | `s` | Аргумент розглядається та друкується як рядок. | | `u` | Аргумент сприймається як ціле число і друкується як беззнакове ціле число. | | `x` | Аргумент розглядається як ціле число і друкується у шістнадцятковому поданні (літери будуть у нижньому регістрі). | | `X` | Аргумент розглядається як ціле число і друкується у шістнадцятковому поданні (літери будуть у верхньому регістрі). |\n\n**Увага**\n\nСпецифікатор `c` ігнорує значення ширини та доповнення\n\n**Увага**\n\nСпроба використовувати специфікатори із зазначенням ширини для рядка в багатобайтовому кодуванні може призвести до несподіваних результатів.\n\nЗмінні будуть приведені до відповідного для специфікатора типу:\n\n**Обробка типів**\n\n| Тип | Спецификатор |\n| --- | --- |\n| string | `s` |\n| int | `d` `u` `c` `o` `x` `X` `b` |\n| float | `e` `E` `f` `F` `g` `G` `h` `H` |\n\n`values`\n\n### Значення, що повертаються\n\nПовертає довжину записаного рядка.\n\n### Помилки\n\nПочинаючи з PHP 8.0.0, якщо кількість аргументів дорівнює нулю, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо `[width]` менше нуля чи більше **`PHP_INT_MAX`**, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо `[precision]` менше нуля чи більше **`PHP_INT_MAX`**, викидається виняток [ValueError](class.valueerror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\nПочинаючи з PHP 8.0.0, якщо аргументів встановлено менше, ніж потрібно, викидається виняток [ArgumentCountError](class.argumentcounterror.md). До PHP 8.0.0 натомість видавалася помилка рівня **`E_WARNING`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Функція більше не повертає \\*\\*`false`\\*\\*в случае возникновения ошибки. |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md)якщо кількість аргументів дорівнює нулю; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md), якщо `[width]` менше нуля чи більше **`PHP_INT_MAX`**; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ValueError](class.valueerror.md), якщо `[precision]` менше нуля чи більше **`PHP_INT_MAX`**; раніше функція видавала помилку рівня **`E_WARNING`** |\n| 8.0.0 | Викидає виняток [ArgumentCountError](class.argumentcounterror.md)якщо аргументів задано менше, ніж потрібно; раніше функція видавала помилку рівня **`E_WARNING`** |\n\n### Приклади\n\n**Приклад #1**fprintf()**: заповнення нулями**\n\n```php\n<?php\nif (!($fp = fopen('date.txt', 'w'))) {\n    return;\n}\n\nfprintf($fp, \"%04d-%02d-%02d\", $year, $month, $day);\n// запишет форматированную ISO-дату в файл date.txt\n?>\n```\n\n**Приклад #2**fprintf()**: форматування грошових величин**\n\n```php\n<?php\nif (!($fp = fopen('currency.txt', 'w'))) {\n    return;\n}\n\n$money1 = 68.75;\n$money2 = 54.35;\n$money = $money1 + $money2;\n// echo $money выведет \"123.1\";\n$len = fprintf($fp, '%01.2f', $money);\n// строка \"123.10\" записана в файл currency.txt\n\necho \"записано $len байт в файл currency.txt\";\n// используйте возвращаемое из fprintf значение для определения количества записанных байт\n?>\n```\n\n### Дивіться також\n\n-   [printf()](function.printf.md) \\- Виводить відформатований рядок\n-   [sprintf()](function.sprintf.md) \\- Повертає відформатований рядок\n-   [vprintf()](function.vprintf.md) \\- Виводить відформатований рядок\n-   [vsprintf()](function.vsprintf.md) \\- Повертає відформатований рядок\n-   [vfprintf()](function.vfprintf.md) \\- Записує відформатований рядок у потік\n-   [sscanf()](function.sscanf.md) \\- Розбирає рядок відповідно до заданого формату\n-   [fscanf()](function.fscanf.md) \\- Обробляє дані з файлу відповідно до формату\n-   [number\\_format()](function.number-format.md) \\- Форматує число з поділом груп\n-   [date()](function.date.md) \\- Форматує тимчасову мітку Unix\n","title":"fprintf","contentType":2,"navigation":[{"function.explode.md":"« explode"},{"function.get-html-translation-table.md":"get\\_html\\_translation\\_table »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}