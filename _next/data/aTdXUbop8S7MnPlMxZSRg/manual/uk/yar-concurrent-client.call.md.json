{"pageProps":{"page":{"slug":"yar-concurrent-client.call.md","content":"# Yar\\_Concurrent\\_Client::call\n\n(PECL yar >= 1.0.0)\n\nYar\\_Concurrent\\_Client::call — Зареєструвати конкурентний виклик\n\n### Опис\n\n```methodsynopsis\npublic static Yar_Concurrent_Client::call(    string $uri,    string $method,    array $parameters = ?,    callable $callback = ?,    callable $error_callback = ?,    array $options = ?): int\n```\n\nРеєструє RPC-дзвінок, але не надсилає його негайно, а відкладає до моменту виклику [Yar\\_Concurrent\\_Client::loop()](yar-concurrent-client.loop.md)\n\n### Список параметрів\n\n`uri`\n\nURI (http, tcp) сервера RPC\n\n`method`\n\nІм'я сервісу (ім'я методу)\n\n`parameters`\n\nПараметри\n\n`callback`\n\nCallback-функція, яка буде викликана після відпрацювання віддаленого запиту.\n\n### Значення, що повертаються\n\nУнікальний ідентифікатор.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Yar\\_Concurrent\\_Client::call()\\*\\*\\*\\*\n\n```php\n<?php\nfunction callback($retval, $callinfo) {\n     var_dump($retval);\n}\n\nfunction error_callback($type, $error, $callinfo) {\n    error_log($error);\n}\n\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\");\n\n//если функция обратного вызова не задана, то будет использована определённая в цикле вызовов\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"));\n\n//этот сервер принимает упаковку JSON\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_PACKAGER => \"json\"));\n\n//отдельно заданное время ожидания\nYar_Concurrent_Client::call(\"http://host/api/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_TIMEOUT=>1));\n\n//запросы всё ещё не запущены\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n### Дивіться також\n\n-   [Yar\\_Concurrent\\_Client::loop()](yar-concurrent-client.loop.md) \\- Запуск усіх зареєстрованих викликів\n-   [Yar\\_Concurrent\\_Client::reset()](yar-concurrent-client.reset.md) \\- Очистити всі зареєстровані дзвінки\n-   [Yar\\_Server::\\_\\_construct()](yar-server.construct.md) \\- Конструктор Yar\\_Server\n-   [Yar\\_Server::handle()](yar-server.handle.md) \\- Запустити сервер RPC\n","title":"Yar\\_Concurrent\\_Client::call","contentType":2,"navigation":[{"class.yar-concurrent-client.md":"« Yar\\_Concurrent\\_Client"},{"yar-concurrent-client.loop.md":"Yar\\_Concurrent\\_Client::loop »"},{"index.md":"PHP Manual"},{"class.yar-concurrent-client.md":"Yar\\_Concurrent\\_Client"}]}},"__N_SSG":true}