{"pageProps":{"page":{"slug":"language.enumerations.basics.md","content":"## Основи перерахувань\n\nПерерахування схожі на класи і працюють із тими самими просторами імен, що й класи, інтерфейси та трейти. Їх, як і класи, можна завантажувати автоматично. Переліки визначають новий тип із фіксованою обмеженою кількістю можливих допустимих значень.\n\n```php\n<?php\n\nenum Suit\n{\n    case Hearts;\n    case Diamonds;\n    case Clubs;\n    case Spades;\n}\n?>\n```\n\nЦе оголошення створює новий тип з ім'ям. `Suit`, у якого чотири і лише чотири допустимі значення: `Suit::Hearts` `Suit::Diamonds` `Suit::Clubs`и`Suit::Spades`. Змінним може бути надано одне з цих допустимих значень. Функція може перевірити тип аргументу відповідність типу перерахування і можна передати лише значення заданого типу.\n\n```php\n<?php\n\nfunction pick_a_card(Suit $suit)\n{\n    /* ... */\n}\n\n$val = Suit::Diamonds;\n\n// OK\npick_a_card($val);\n\n// OK\npick_a_card(Suit::Clubs);\n\n// TypeError: pick_a_card(): Argument #1 ($suit) must be of type Suit, string given\npick_a_card('Spades');\n?>\n```\n\nУ перерахунку може бути нуль або більше визначень `case`максимальна кількість не обмежена. Перерахування без варіантів синтаксично коректне, хоч і марне.\n\nДля варіантів перерахування працюють ті самі правила синтаксису, що і для будь-якої мітки в PHP, дивіться [Константи](language.constants.md)\n\nЗа промовчанням варіанти не підтримуються скалярним значенням. Тобто `Suit::Hearts` не дорівнює `«0»`. Натомість кожен варіант підтримується одноелементним об'єктом з таким ім'ям. Тобто:\n\n```php\n<?php\n\n$a = Suit::Spades;\n$b = Suit::Spades;\n\n$a === $b; // true\n\n$a instanceof Suit;  // true\n?>\n```\n\nЦе також означає, що значення переліку не будуть `<`или`>` один з одного, оскільки ці порівняння немає сенсу для об'єктів. Порівняння завжди повертатимуть \\*\\*`false`\\*\\*при работе с вариантами перечисления.\n\nТип варіанта без зв'язаних даних називається \"Чистий варіант\" (Pure Case). Перелік, який містить лише чисті варіанти, називається чистим перерахуванням (Pure Enum).\n\nУсі чисті варіанти реалізовані як екземпляри свого типу перерахування. Тип переліку внутрішньо представлений як клас.\n\nВсі варіанти мають доступну тільки для читання властивість `name` — це й чутливе до регістру ім'я варіанта.\n\n```php\n<?php\n\nprint Suit::Spades->name;\n// prints \"Spades\"\n?>\n```\n\nМожна також користуватися функціями [defined()](function.defined.md) і [constant()](function.constant.md) для перевірки існування чи читання регістру перерахування, якщо ім'я отримано динамічно. Однак чинити так не рекомендовано, оскільки в більшій частині ситуацій краще працювати з [типізованими перерахуваннями](language.enumerations.backed.md)\n","title":"Основи перерахувань","contentType":2,"navigation":[{"language.enumerations.overview.md":"« Огляд перерахувань"},{"language.enumerations.backed.md":"Типізовані перерахування »"},{"index.md":"PHP Manual"},{"language.enumerations.md":"Перерахування"}]}},"__N_SSG":true}