{"pageProps":{"page":{"slug":"migration81.incompatible.md","content":"## Зміни, що ламають зворотну сумісність\n\n### Ядро PHP\n\n#### Обмеження доступу до $GLOBALS\n\nДоступ к массиву[$GLOBALS](reserved.variables.globals.md) тепер має низку обмежень. Читання та запис окремих елементів масиву, наприклад, `$GLOBALS['var']`, як і раніше працює. Читання всього масиву [$GLOBALS](reserved.variables.globals.md) також підтримується. Однак операції, пов'язані зі зміною всього [$GLOBALS](reserved.variables.globals.md), заборонено. Наприклад, `array_pop($GLOBALS)` призведе до помилки.\n\n#### Використання static-змінних у успадкованих методах\n\nКоли метод, який використовує статичні змінні, успадковується (але не перевизначається), успадкований метод тепер використовуватиме статичні змінні разом із батьківським методом.\n\n```php\n<?php\nclass A {\n    public static function counter() {\n        static $counter = 0;\n        $counter++;\n        return $counter;\n    }\n}\nclass B extends A {}\nvar_dump(A::counter()); // int(1)\nvar_dump(A::counter()); // int(2)\nvar_dump(B::counter()); // int(3), ранее было int(1)\nvar_dump(B::counter()); // int(4), ранее было int(2)\n?>\n```\n\nЦе означає, що статичні змінні в методах тепер поводяться так само, як і статичні властивості.\n\n#### Необов'язкові параметри, вказані перед обов'язковими параметрами\n\n[Необов'язковий параметр](functions.arguments.md#functions.arguments.default), вказаний перед обов'язковими параметрами, тепер завжди обробляється як обов'язковий навіть при виклику з використанням [іменованих аргументів](functions.arguments.md#functions.named-arguments). Починаючи з PHP 8.0.0, але до PHP 8.1.0, наведений нижче код видає попередження про старіння визначення, але успішно виконується під час виклику. Починаючи з PHP 8.1.0, видається помилка класу [ArgumentCountError](class.argumentcounterror.md), як це було б під час виклику з позиційними аргументами.\n\n```php\n<?php\nfunction makeyogurt($container = \"миску\", $flavour)\n{\n    return \"Готовим $container с $flavour йогуртом.\\n\";\n}\ntry\n{\n    echo makeyogurt(flavour: \"малиновым\");\n}\ncatch (Error $e)\n{\n    echo get_class($e), ' - ', $e->getMessage(), \"\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 8.0:\n\n```\nDeprecated: Required parameter $flavour follows optional parameter $container\n in example.php on line 3\nГотовим миску с малиновым йогуртом.\n```\n\nРезультат виконання наведеного прикладу в PHP 8.1:\n\n```\nDeprecated: Optional parameter $container declared before required parameter\n $flavour is implicitly treated as a required parameter in example.php on line 3\nArgumentCountError - makeyogurt(): Argument #1 ($container) not passed\n```\n\nОбратите внимание, что значение по умолчанию\\*\\*`null`\\*\\* може використовуватися перед обов'язковими параметрами для вказівки [типу, що припускає значення null](language.types.declarations.md#language.types.declarations.nullable)Але цей параметр все одно буде обов'язковим.\n\n#### Сумісність типу значення, що повертається з внутрішніми класами\n\nБільшість неостаточних внутрішніх методів тепер потребують перевизначальних методів для оголошення сумісного типу, що повертається, в іншому випадку під час перевірки успадкування видається повідомлення про старіння можливості. У випадку, якщо тип значення, що повертається, не може бути оголошений для методу перевизначення через проблеми сумісності версій PHP, можна додати атрибут [ReturnTypeWillChange](class.returntypewillchange.md), щоб заглушити повідомлення про старіння.\n\n#### Нові ключові слова\n\n`readonly` тепер є ключовим словом. Однак, його можна використовувати як ім'я функції.\n\n`never` тепер є зарезервованим словом, тому його не можна використовувати для назви класу, інтерфейсу або трейту, а також заборонено використовувати у просторах імен.\n\n### Перехід від ресурсів до об'єктів\n\nДекілька ресурсів ([resource](language.types.resource.md)) тепер представлені як об'єкти (object). Перевірки значення, що повертається з використанням функції [is\\_resource()](function.is-resource.md) слід замінити перевірками на **`false`**\n\n-   Функції [FileInfo](book.fileinfo.md)тепер приймають та повертають об'єкти[finfo](class.finfo.md)замість ресурсів ([resource](language.types.resource.md) `fileinfo`\n    \n-   Функції [FTP](book.ftp.md)тепер приймають та повертають об'єкти[FTP\\\\Connection](class.ftp-connection.md)замість ресурсів ([resource](language.types.resource.md) `ftp`\n    \n-   Функції [IMAP](book.imap.md)тепер приймають та повертають об'єкти[IMAP\\\\Connection](class.imap-connection.md)замість ресурсів ([resource](language.types.resource.md) `imap`\n    \n-   The[LDAP](book.ldap.md)тепер приймають та повертають об'єкти[LDAP\\\\Connection](class.ldap-connection.md)замість ресурсів ([resource](language.types.resource.md) `ldap link`\n    \n-   Функції [LDAP](book.ldap.md)тепер приймають та повертають об'єкти[LDAP\\\\Result](class.ldap-result.md)замість ресурсів ([resource](language.types.resource.md) `ldap result`\n    \n-   Функції [LDAP](book.ldap.md)тепер приймають та повертають об'єкти[LDAP\\\\ResultEntry](class.ldap-result-entry.md)замість ресурсів ([resource](language.types.resource.md) `ldap result entry`\n    \n-   Функції [PgSQL](book.pgsql.md)тепер приймають та повертають об'єкти[PgSql\\\\Connection](class.pgsql-connection.md)замість ресурсів ([resource](language.types.resource.md) `pgsql link`\n    \n-   Функції [PgSQL](book.pgsql.md)тепер приймають та повертають об'єкти[PgSql\\\\Result](class.pgsql-result.md)замість ресурсів ([resource](language.types.resource.md) `pgsql result`\n    \n-   Функції [PgSQL](book.pgsql.md)тепер приймають та повертають об'єкти[PgSql\\\\Lob](class.pgsql-lob.md)замість ресурсів ([resource](language.types.resource.md) `pgsql large object`\n    \n-   Функції [PSpell](book.pspell.md)тепер приймають та повертають об'єкти[PSpell\\\\Dictionary](class.pspell-dictionary.md)замість ресурсів ([resource](language.types.resource.md) `pspell`\n    \n-   Функції [PSpell](book.pspell.md)тепер приймають та повертають об'єкти[PSpell\\\\Config](class.pspell-config.md)замість ресурсів ([resource](language.types.resource.md) `pspell config`\n    \n\n### MySQLi\n\nФункції [mysqli\\_fetch\\_fields()](mysqli-result.fetch-fields.md) і [mysqli\\_fetch\\_field\\_direct()](mysqli-result.fetch-field-direct.md) тепер завжди повертають у властивості max\\_length. Це значення можна обчислити, перебираючи набір результатів та вибираючи максимальну довжину. Такий алгоритм раніше використовував PHP.\n\nОпция\\*\\*`MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH`\\*\\* більше немає сенсу.\n\nОпция\\*\\*`MYSQLI_STORE_RESULT_COPY_DATA`\\*\\* більше немає сенсу. Передача будь-якого значення параметр `mode`метода[mysqli::store\\_result()](mysqli.store-result.md) більше немає сенсу.\n\n[mysqli::connect()](function.mysqli-connect.md) тепер повертає **`true`** замість **`null`** у разі успішного виконання.\n\nРежим обробки помилок за умовчанням було змінено з \"silent\" на \"exceptions\". Дивіться сторінку [Режими обробки помилок MySQLi](mysqli-driver.report-mode.md) для отримання додаткових відомостей про те, що це спричиняє і як явно встановити цей атрибут. Щоб відновити попередню поведінку, використовуйте: `mysqli_report(MYSQLI_REPORT_OFF);`\n\nКласи, що розширюють [mysqli\\_stmt::execute()](mysqli-stmt.execute.md), тепер потрібно вказати додатковий необов'язковий параметр.\n\n### MySQLnd\n\nINI-директива[mysqlnd.fetch\\_data\\_copy](mysqlnd.config.md#ini.mysqlnd.fetch_data_copy) було видалено. Це не повинно призводити до видимих ​​для користувача змін у поведінці.\n\n### OpenSSL\n\nСекретні ключі EC тепер експортуватимуться у форматі PKCS#8, а не у традиційному форматі, як і всі інші ключі.\n\nФункції [openssl\\_pkcs7\\_encrypt()](function.openssl-pkcs7-encrypt.md) і [openssl\\_cms\\_encrypt()](function.openssl-cms-encrypt.md) тепер за замовчуванням використовують шифр AES-128-CBC, а чи не RC2-40. Шифр RC2-40 вважається небезпечним і не включений за промовчанням у OpenSSL 3.\n\n### Об'єкти даних PHP\n\nАтрибут\\*\\*`PDO::ATTR_STRINGIFY_FETCHES`\\*\\* тепер перетворює логічні значення (bool) на `\"0\"`или`\"1\"`. Раніше логічні значення (bool) були строковими.\n\nВиклик [PDOStatement::bindColumn()](pdostatement.bindcolumn.md)с\\*\\*`PDO::PARAM_LOB`\\*\\* тепер буде постійно пов'язувати результат потоку, якщо **`PDO::ATTR_STRINGIFY_FETCHES`** не увімкнуто. Раніше результатом був або потік, або рядок в залежності від драйвера бази даних, що використовується, і часу виконання прив'язки.\n\n#### Драйвер MySQL\n\nЦілі числа та числа з плаваючою комою у наборах результатів тепер повертатимуться з використанням власних типів PHP замість рядків (string) при використанні емульованих підготовлених операторів. Це відповідає поведінці своїх підготовлених операторів. Попередню поведінку можна відновити, увімкнувши опцію **`PDO::ATTR_STRINGIFY_FETCHES`**\n\n#### Драйвер SQLite\n\nЦілі числа та числа з плаваючою комою у наборах результатів тепер повертатимуться з використанням власних типів PHP. Попередню поведінку можна відновити, увімкнувши опцію **`PDO::ATTR_STRINGIFY_FETCHES`**\n\n### Phar\n\nЩоб відповідати інтерфейсу [ArrayAccess](class.arrayaccess.md) [Phar::offsetUnset()](phar.offsetunset.md) і [PharData::offsetUnset()](phardata.offsetunset.md) більше повертають логічне значення (bool).\n\n### Стандартні функції\n\n[version\\_compare()](function.version-compare.md) більше не приймає недокументованих скорочень операторів.\n\nФункції [htmlspecialchars()](function.mdspecialchars.md) [htmlentities()](function.mdentities.md) [htmlspecialchars\\_decode()](function.mdspecialchars-decode.md) [html\\_entity\\_decode()](function.md-entity-decode.md) і [get\\_html\\_translation\\_table()](function.get-html-translation-table.md)теперь по умолчанию используют`ENT_QUOTES | ENT_SUBSTITUTE` замість **`ENT_COMPAT`**. Це означає, що тепер `'` екранується в `&#039;`. Крім того, у разі неправильного UTF-8 замість порожнього рядка буде повернено заміщувальний символ Unicode.\n\n[debug\\_zval\\_dump()](function.debug-zval-dump.md) тепер виводить refcount оболонок посилань з їх refcount, замість того, щоб просто додавати `&` до значення. Це більш точно моделює еталонну виставу, починаючи з PHP 7.0.\n\n[debug\\_zval\\_dump()](function.debug-zval-dump.md) тепер виводить `interned` замість фіктивного refcount для інтернованих рядків та незмінних масивів.\n\n### Стандартна бібліотека PHP (SPL)\n\n[SplFixedArray](class.splfixedarray.md) тепер буде закодовано в JSON як масив (array).\n","title":"Зміни, що ламають зворотну сумісність","contentType":2,"navigation":[{"migration81.constants.md":"« Нові глобальні константи"},{"migration81.deprecated.md":"Застаріла функціональність »"},{"index.md":"PHP Manual"},{"migration81.md":"Міграція з PHP 8.0.x на PHP 8.1.x"}]}},"__N_SSG":true}