{"pageProps":{"page":{"slug":"closure.bindto.md","content":"# Closure::bindTo\n\n(PHP 5 >= 5.4.0, PHP 7, PHP 8)\n\nClosure::bindTo — Дублює замикання із зазначенням пов'язаного об'єкта та області видимості класу\n\n### Опис\n\n```methodsynopsis\npublic Closure::bindTo(?object $newThis, object|string|null $newScope = \"static\"): ?Closure\n```\n\nСтворює та повертає нову [анонімну функцію](functions.anonymous.md) з тим же тілом функції та пов'язаними змінними, але з іншим пов'язаним об'єктом або новою областю видимості класу.\n\n\"Пов'язаний об'єкт\" визначає значення `$this`, яке буде доступне в тілі функції, а \"область видимості класу\" є класом, який визначає до яких protected (захищених) і private (закритих) елементів цього об'єкта буде мати доступ анонімна функція. Якщо точніше, то це ті елементи, начебто анонімна функція була б методом класу, переданого в параметрі `newScope`\n\nСтатичні замикання не можуть мати прив'язаний об'єкт (значення параметра `newThis` має бути одно **`null`**), але ця функція може все одно використовуватися для зміни його області видимості класу.\n\nДаний метод гарантує, що у нестатичного замикання з прив'язаним об'єктом буде задана область видимості та навпаки. Для виконання цієї умови застосовуються такі правила: Для нестатичного замикання із зазначеною областю видимості та з **`null`** замість об'єкта буде створено статичне замикання. Для нестатичного замикання з незаданою областю видимості, але із зазначенням об'єкта створюється замикання з невказаною областю видимості.\n\n> **Зауваження** :\n> \n> Якщо вам необхідно лише дублювати анонімну функцію, то ви можете замість цього використовувати [клонування](language.oop5.cloning.md)\n\n### Список параметрів\n\n`newThis`\n\nОб'єкт, до якого буде прив'язана передана анонімна функція, або **`null`** для від'єднання замикання від поточного об'єкта.\n\n`newScope`\n\nОбласть видимості класу, з якою має бути пов'язане замикання чи 'static' для збереження поточної області видимості. Якщо передано об'єкт, то буде використано його клас. Цей параметр визначає видимість protected (захищених) та private (закритих) методів прив'язаного об'єкта. Забороняється передавати цей параметр внутрішній клас (об'єкт класу).\n\n### Значення, що повертаються\n\nПовертає новий об'єкт [Closure](class.closure.md)или\\*\\*`null`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад**Closure::bindTo()\\*\\*\\*\\*\n\n```php\n<?php\n\nclass A {\n    private $val;\n\n    function __construct($val) {\n        $this->val = $val;\n    }\n\n    function getClosure() {\n        //возвращает замыкание, связанное с текущими объектом и областью видимости\n        return function() { return $this->val; };\n    }\n}\n\n$ob1 = new A(1);\n$ob2 = new A(2);\n\n$cl = $ob1->getClosure();\necho $cl(), \"\\n\";\n$cl = $cl->bindTo($ob2);\necho $cl(), \"\\n\";\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n1\n2\n```\n\n### Дивіться також\n\n-   [Анонімні функції](functions.anonymous.md)\n-   [Closure::bind()](closure.bind.md) \\- Дублює замикання із зазначенням конкретного пов'язаного об'єкта та області видимості класу\n","title":"Closure::bindTo","contentType":2,"navigation":[{"closure.bind.md":"« Closure::bind"},{"closure.call.md":"Closure::call »"},{"index.md":"PHP Manual"},{"class.closure.md":"Closure"}]}},"__N_SSG":true}