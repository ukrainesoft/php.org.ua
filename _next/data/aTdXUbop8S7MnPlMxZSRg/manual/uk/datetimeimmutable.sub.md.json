{"pageProps":{"page":{"slug":"datetimeimmutable.sub.md","content":"# DateTimeImmutable::sub\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\nDateTimeImmutable::sub — Віднімає передану кількість днів, місяців, років, годин, хвилин та секунд\n\n### Опис\n\n```methodsynopsis\npublic DateTimeImmutable::sub(DateInterval $interval): DateTimeImmutable\n```\n\nПовертає новий об'єкт [DateTimeImmutable](class.datetimeimmutable.md), в якому зазначений об'єкт [DateInterval](class.dateinterval.md) віднімається із зазначеного об'єкта DateTimeImmutable.\n\n### Список параметрів\n\n`object`\n\nТільки для процедурного стилю: об'єкт [DateTime](class.datetime.md), що повертається [date\\_create()](function.date-create.md). Функція змінює цей об'єкт.\n\n`interval`\n\nОб'єкт [DateInterval](class.dateinterval.md)\n\n### Значення, що повертаються\n\nПовертає новий об'єкт [DateTimeImmutable](class.datetimeimmutable.md) із модифікованими даними.\n\n### Помилки\n\nПри спробі виконати непідтримувану операцію, наприклад, якщо в об'єкті [DateInterval](class.dateinterval.md) містяться відносні характеристики часу (наприклад, `next weekday`), буде викинуто виняток.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.0 | Тепер при спробі виконати операцію, що не підтримується, замість попередження викидається виняток [DateInvalidOperationException](class.dateinvalidoperationexception.md) |\n\n### Приклади\n\n**Приклад #1 Приклад використання** DateTimeImmutable::sub()\\*\\*\\*\\*\n\nОб'єктно-орієнтований стиль\n\n```php\n<?php\n$date = new DateTimeImmutable('2000-01-20');\n$newDate = $date->sub(new DateInterval('P10D'));\necho $newDate->format('Y-m-d') . \"\\n\";\n?>\n```\n\nРезультат виконання наведених прикладів:\n\n```\n2000-01-10\n```\n\n**Приклад #2 Додатковий приклад **DateTimeImmutable::sub()****\n\n```php\n<?php\n$date = new DateTimeImmutable('2000-01-20');\n$newDate = $date->sub(new DateInterval('PT10H30S'));\necho $newDate->format('Y-m-d H:i:s') . \"\\n\";\n\n$date = new DateTimeImmutable('2000-01-20');\n$newDate = $date->sub(new DateInterval('P7Y5M4DT4H3M2S'));\necho $newDate->format('Y-m-d H:i:s') . \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n2000-01-19 13:59:30\n1992-08-15 19:56:58\n```\n\n**Приклад #3 Будьте обережні при відніманні місяців**\n\n```php\n<?php\n$date = new DateTimeImmutable('2001-04-30');\n$interval = new DateInterval('P1M');\n\n$newDate1 = $date->sub($interval);\necho $newDate1->format('Y-m-d') . \"\\n\";\n\n$newDate2 = $newDate1->sub($interval);\necho $newDate2->format('Y-m-d') . \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n2001-03-30\n2001-03-02\n```\n\n### Дивіться також\n\n-   [DateTimeImmutable::add()](datetimeimmutable.add.md) \\- Повертає новий об'єкт з доданою кількістю днів, місяців, років, годин, хвилин та секунд\n-   [DateTimeImmutable::diff()](datetime.diff.md) \\- Повертає різницю між двома об'єктами DateTime\n-   [DateTimeImmutable::modify()](datetimeimmutable.modify.md) \\- Створює новий об'єкт із зміненою тимчасовою міткою\n","title":"DateTimeImmutable::sub","contentType":2,"navigation":[{"datetimeimmutable.settimezone.md":"« DateTimeImmutable::setTimezone"},{"class.datetimeinterface.md":"DateTimeInterface »"},{"index.md":"PHP Manual"},{"class.datetimeimmutable.md":"DateTimeImmutable"}]}},"__N_SSG":true}