{"pageProps":{"page":{"slug":"function.strtr.md","content":"# strtr\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nstrtr — Перетворює задані символи або замінює підрядки\n\n### Опис\n\n```methodsynopsis\nstrtr(string $string, string $from, string $to): string\n```\n\nАльтернативна сигнатура (не підтримується з іменованими аргументами):\n\n```methodsynopsis\nstrtr(string $string, array $replace_pairs): string\n```\n\nЯкщо вказано три аргументи, ця функція повертає копію `string`, в якій всі входження кожного символу (однобайтного) з `from` були замінені на відповідний символ у параметрі `to`, то есть каждое вхождение из`$from[$n]`заменяется на`$to[$n]`, где`$n` - це коректне усунення рядка в обох аргументах.\n\nЯкщо довжина рядків `from`и`to` відрізняються, \"зайві\" символи у довшому рядку не використовуються. Довжина значення, що повертається, буде такою ж, як і довжина `string`\n\n**strtr()** може викликатися із двома аргументами. В цьому випадку `from` має бути масивом (array), у формі `array('from' => 'to', ...)`. Функція поверне рядок, у якому всі ключі масиву замінять їх елементами . **strtr()** в першу чергу замінює довші ключі, причому один і той же рядок пошуку використовується лише один раз.\n\nУ цьому випадку ключі та значення можуть мати будь-яку довжину, за винятком того, що ключі не повинні бути порожніми. Крім того, довжина значення, що повертається, може відрізнятися від `string`. Однак, варто врахувати той факт, що ця функція є максимально ефективною в тому випадку, якщо всі ключі мають однаковий розмір.\n\n### Список параметрів\n\n`string`\n\nЗамінний рядок (string).\n\n`from`\n\nРядок (string), який буде замінено на рядок `to`\n\n`to`\n\nРядок (string), що замінює рядок `from`\n\n`replace_pairs`\n\nПараметр`replace_pairs` може бути використаний замість `to`и`from`, у разі він є масивом (array) і має форму `array('from' => 'to', ...)`\n\nЯкщо `replace_pairs` містить ключ, який є порожнім рядком (string) (`\"\"`), елемент ігнорується; починаючи з PHP 8.0.0 у цьому випадку викликається **`E_WARNING`**\n\n### Значення, що повертаються\n\nПовертає рядок (string) із проведеними у ньому замінами.\n\n### Приклади\n\n**Приклад #1 Приклад використання** strtr()\\*\\*\\*\\*\n\n```php\n<?php\n//В этой форме strtr() осуществляет побайтное преобразование\n//Таким образом, здесь подразумевается однобайтная кодировка:\n$addr = strtr($addr, \"äåö\", \"aao\");\n?>\n```\n\nСледующий Приклад демонстрирует поведение функции**strtr()** при виклику лише з двома аргументами. Зверніть увагу на пріоритет замін (`\"h\"` не використовується, тому що існують довші збіги) і як замінений текст більше не бере участі в пошуку.\n\n**Приклад #2 Приклад використання** strtr()\\*\\* з двома аргументами\\*\\*\n\n```php\n<?php\n$trans = array(\"h\" => \"-\", \"hello\" => \"hi\", \"hi\" => \"hello\");\necho strtr(\"hi all, I said hello\", $trans);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nhello all, I said hi\n```\n\nЦі два режими досить сильно відрізняються. При виклику **strtr()** з трьома аргументами замінюються байти, а при виклику з двома аргументами можуть бути замінені і довші підрядки.\n\n**Приклад #3 Сравнение поведения функции**strtr()\\*\\*\\*\\*\n\n```php\n<?php\necho strtr(\"baab\", \"ab\", \"01\"),\"\\n\";\n\n$trans = array(\"ab\" => \"01\");\necho strtr(\"baab\", $trans);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n1001\nba01\n```\n\n### Дивіться також\n\n-   [str\\_replace()](function.str-replace.md) \\- Замінює всі входження рядка пошуку на рядок заміни\n-   [preg\\_replace()](function.preg-replace.md) \\- Виконує пошук та заміну за регулярним виразом\n","title":"strtr","contentType":2,"navigation":[{"function.strtoupper.md":"« strtoupper"},{"function.substr-compare.md":"substr\\_compare »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}