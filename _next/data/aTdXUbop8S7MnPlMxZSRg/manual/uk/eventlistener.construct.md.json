{"pageProps":{"page":{"slug":"eventlistener.construct.md","content":"# EventListener::\\_\\_construct\n\n(PECL event >= 1.2.6-beta)\n\nEventListener::\\_\\_construct — Створює нового слухача з'єднання, пов'язаного з основою події\n\n### Опис\n\n```methodsynopsis\npublic\n   EventListener::__construct(    \n    EventBase\n     $base\n   ,    \n    callable\n     $cb\n   ,    \n    mixed\n     $data\n   ,    \n    int\n     $flags\n   ,    \n    int\n     $backlog\n   ,    \n    mixed\n     $target\n   )\n```\n\nСтворює нового слухача з'єднання, пов'язаного з основою події.\n\n### Список параметрів\n\n`base`\n\nОснова події.\n\n`cb`\n\nCallback-функція ([callable](language.types.callable.md)), яка буде викликана при отриманні з'єднання.\n\n`data`\n\nДані користувача, які будуть передаватися в параметр `cb`\n\n`flags`\n\nБитовая маска из семейства констант`EventListener::OPT_*`. Докладніше про це розказано у розділі «[Константи EventListener](class.eventlistener.md#eventlistener.constants)».\n\n`backlog`\n\nКерує максимальною кількістю очікуваних підключень, яким мережевий стек повинен дозволити в будь-який час очікувати в стані «не прийнято». Додаткову інформацію дивіться у документації щодо функції `listen` поточної системи. Якщо значення параметра `backlog` негативно, модуль Libevent сам спробує вибрати найкраще значення для параметра `backlog`. Якщо значення дорівнює нулю, модуль Event передбачає, що функція `listen` вже викликана на сокеті `target`\n\n`target`\n\nРядок, ресурс сокету або потік, пов'язаний із сокетом. Якщо параметр `target` - Рядок, то рядок буде розбиратися як мережевий адресу. Вона буде інтерпретована як шлях сокету домену UNIX, якщо міститиме префікс `«unix:»`, наПриклад`«unix:/tmp/my.sock»`\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL event 1.5.0 | Додано підтримку сокетів домену UNIX. |\n\n### Приклади\n\n**Приклад #1 Приклад использования метода**EventListener::\\_\\_construct()\\*\\*\\*\\*\n\n```php\n<?php\n\n/*\n * Простой сервер на основе слушателя соединений модуля libevent.\n *\n * Применение:\n * 1) В одном окне терминала запустите команду:\n *\n * $ php listener.php 9881\n *\n * 2) В другом окне терминала откройте соединение, наПриклад:\n *\n * $ nc 127.0.0.1 9881\n *\n * 3) Начните печатать. Сервер должен повторить ввод.\n */\n\nclass MyListenerConnection {\n    private $bev, $base;\n\n    public function __destruct() {\n        $this->bev->free();\n    }\n\n    public function __construct($base, $fd) {\n        $this->base = $base;\n\n        $this->bev = new EventBufferEvent($base, $fd, EventBufferEvent::OPT_CLOSE_ON_FREE);\n\n        $this->bev->setCallbacks(array($this, \"echoReadCallback\"), NULL,\n            array($this, \"echoEventCallback\"), NULL);\n\n        if (!$this->bev->enable(Event::READ)) {\n            echo \"Не удалось включить READ\\n\";\n            return;\n        }\n    }\n\n    public function echoReadCallback($bev, $ctx) {\n        // Скопируйте все данные из входного буфера в выходной буфер\n\n        // Вариант #1\n        $bev->output->addBuffer($bev->input);\n\n        /* Вариант #2 */\n        /*\n        $input    = $bev->getInput();\n        $output = $bev->getOutput();\n        $output->addBuffer($input);\n        */\n    }\n\n    public function echoEventCallback($bev, $events, $ctx) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"Ошибка bufferevent\\n\";\n        }\n\n        if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {\n            //$bev->free();\n            $this->__destruct();\n        }\n    }\n}\n\nclass MyListener {\n    public $base,\n        $listener,\n        $socket;\n    private $conn = array();\n\n    public function __destruct() {\n        foreach ($this->conn as &$c) $c = NULL;\n    }\n\n    public function __construct($port) {\n        $this->base = new EventBase();\n        if (!$this->base) {\n            echo \"Не удалось открыть событийную базу\";\n            exit(1);\n        }\n\n        // Вариант #1\n        /*\n        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!socket_bind($this->socket, '0.0.0.0', $port)) {\n            echo \"Невозможно связать сокет\\n\";\n            exit(1);\n        }\n        $this->listener = new EventListener($this->base,\n            array($this, \"acceptConnCallback\"), $this->base,\n            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,\n            -1, $this->socket);\n         */\n\n        // Вариант #2\n         $this->listener = new EventListener($this->base,\n             array($this, \"acceptConnCallback\"), $this->base,\n             EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE, -1,\n             \"0.0.0.0:$port\");\n\n        if (!$this->listener) {\n            echo \"Не удалось создать слушателя\";\n            exit(1);\n        }\n\n        $this->listener->setErrorCallback(array($this, \"accept_error_cb\"));\n    }\n\n    public function dispatch() {\n        $this->base->dispatch();\n    }\n\n    // Этот callback вызывается, когда есть данные для чтения на $bev\n    public function acceptConnCallback($listener, $fd, $address, $ctx) {\n        // Мы получили новое соединение! Создайте для этого все необходимое. */\n        $base = $this->base;\n        $this->conn[] = new MyListenerConnection($base, $fd);\n    }\n\n    public function accept_error_cb($listener, $ctx) {\n        $base = $this->base;\n\n        fprintf(STDERR, \"Получил ошибку %d (%s) на слушателе.\"\n            .\"Выключение.\\n\",\n            EventUtil::getLastSocketErrno(),\n            EventUtil::getLastSocketError());\n\n        $base->exit(NULL);\n    }\n}\n\n$port = 9808;\n\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$l = new MyListener($port);\n$l->dispatch();\n\n?>\n```\n","title":"EventListener::\\_\\_construct","contentType":2,"navigation":[{"class.eventlistener.md":"« EventListener"},{"eventlistener.disable.md":"EventListener::disable »"},{"index.md":"PHP Manual"},{"class.eventlistener.md":"EventListener"}]}},"__N_SSG":true}