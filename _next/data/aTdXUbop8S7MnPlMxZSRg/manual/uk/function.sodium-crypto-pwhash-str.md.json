{"pageProps":{"page":{"slug":"function.sodium-crypto-pwhash-str.md","content":"# sodium\\_crypto\\_pwhash\\_str\n\n(PHP 7 >= 7.2.0, PHP 8)\n\nsodium\\_crypto\\_pwhash\\_str — Отримати ASCII-кодований хеш\n\n### Опис\n\n```methodsynopsis\nsodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit): string\n```\n\nВикористовує ресурсомісткий за ЦПУ та пам'яті алгоритм хешування. Сіль генерується випадково. Можна встановити обмеження щодо використання пам'яті та ЦПУ. Можна використовувати для генерації ASCII-хешів, що підходять для зберігання паролів.\n\n### Список параметрів\n\n`password`\n\nstring; Пароль, для якого генеруватиметься хеш.\n\n`opslimit`\n\nЗадає обмеження використання процесорного часу. Чим більше число - тим більше навантаження на процесор при генерації ключа. Також можна використовувати певні константи для цього параметра (перераховані у порядку посилення захищеності та споживання ЦПУ): **`SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE`** **`SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE`** і **`SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE`**\n\n`memlimit`\n\nЗадає обмеження використання пам'яті в байтах. Можна використовувати певні константи для цього параметра (перераховані в порядку посилення захищеності та споживання пам'яті): **`SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE`** **`SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE`** і **`SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE`**. Має сенс використовувати однакові рівні захищеності в memlimit та opslimit.\n\n### Значення, що повертаються\n\nПовертає хеш пароля.\n\nДля того, щоб для того самого пароля завжди генерувався один і той же хеш, необхідно використовувати однакові значення `opslimit`и`memlimit`. Оскільки ці параметри включені в згенерований хеш, функція [sodium\\_crypto\\_pwhash\\_str\\_verify()](function.sodium-crypto-pwhash-str-verify.md) може перевіряти його коректність без необхідності зберігати ці параметри окремо.\n\n### Приклади\n\n**Приклад #1 Приклад використання** sodium\\_crypto\\_pwhash\\_str()\\*\\*\\*\\*\n\n```php\n<?php\n$password = 'password';\necho sodium_crypto_pwhash_str(\n    $password,\n    SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,\n    SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE\n);\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n$argon2id$v=19$m=65536,t=2,p=1$oWIfdaXwWwhVmovOBc2NAQ$EbsZ+JnZyyavkafS0hoc4HdaOB0ILWZESAZ7kVGa+Iw\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Хеші обчислюються за допомогою алгоритму Argon2ID, стійкого для атак стороннього каналу та GPU. На відміну від функції [password\\_hash()](function.password-hash.md), ця функція не має параметра salt (він генерується автоматично), а параметри `opslimit`и`memlimit` є обов'язковими.\n\n### Дивіться також\n\n-   [sodium\\_crypto\\_pwhash\\_str\\_verify()](function.sodium-crypto-pwhash-str-verify.md) \\- Перевіряє, що пароль відповідає хешу\n-   [sodium\\_crypto\\_pwhash()](function.sodium-crypto-pwhash.md) \\- Отримує ключ із пароля, використовуючи Argon2\n-   [password\\_hash()](function.password-hash.md) \\- Створює хеш пароля\n-   [password\\_verify()](function.password-verify.md) \\- Перевіряє, чи пароль хешу відповідає\n-   [» Документація на Libsodium Argon2](https://download.libsodium.org/doc/password_hashing/the_argon2i_function.md)\n","title":"sodium\\_crypto\\_pwhash\\_str","contentType":2,"navigation":[{"function.sodium-crypto-pwhash-str-verify.md":"« sodium\\_crypto\\_pwhash\\_str\\_verify"},{"function.sodium-crypto-pwhash.md":"sodium\\_crypto\\_pwhash »"},{"index.md":"PHP Manual"},{"ref.sodium.md":"Опції Sodium"}]}},"__N_SSG":true}