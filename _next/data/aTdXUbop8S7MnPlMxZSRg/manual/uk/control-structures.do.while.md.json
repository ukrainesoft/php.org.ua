{"pageProps":{"page":{"slug":"control-structures.do.while.md","content":"## do-while\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nЦикл`do-while`очень похож на цикл`while`, З тією відмінністю, що істинність висловлювання перевіряється наприкінці ітерації, а чи не на початку. Головна відмінність від звичайного циклу `while` у тому, що перша ітерація циклу `do-while` гарантовано виконається (істинність виразу перевіряється в кінці ітерації), тоді як вона може не виконатися у звичайному циклі `while` (Істинність вираження якого перевіряється на початку виконання кожної ітерації, і якщо спочатку має значення **`false`**, то виконання циклу буде перервано відразу).\n\nЄ лише один варіант синтаксису циклу `do-while` :\n\n```php\n<?php\n$i = 0;\ndo {\n    echo $i;\n} while ($i > 0);\n?>\n```\n\nУ прикладі цикл буде виконано рівно один раз, тому що після першої ітерації, коли перевіряється істинність виразу, вона буде обчислена як **`false`** ($i не більше 0) і виконання циклу припиниться.\n\nДосвідчені користувачі можуть бути знайомі з іншим використанням циклу `do-while`, яке дозволяє зупинити виконання ходу програми всередині блоку, для цього потрібно обернути потрібний блок коду викликом `do-while` (0) та використовувати [`break`](control-structures.break.md). Наступний фрагмент коду демонструє цей підхід:\n\n```php\n<?php\ndo {\n    if ($i < 5) {\n        echo \"i ещё недостаточно велико\";\n        break;\n    }\n    $i *= $factor;\n    if ($i < $minimum_limit) {\n        break;\n    }\n   echo \"значение i уже подходит\";\n\n    /* обработка i */\n\n} while (0);\n?>\n```\n\nМожна використовувати оператор [`goto`](control-structures.goto.md) замість подібного хака.\n","title":"do-while","contentType":2,"navigation":[{"control-structures.while.md":"« while"},{"control-structures.for.md":"for »"},{"index.md":"PHP Manual"},{"language.control-structures.md":"Керуючі конструкції"}]}},"__N_SSG":true}