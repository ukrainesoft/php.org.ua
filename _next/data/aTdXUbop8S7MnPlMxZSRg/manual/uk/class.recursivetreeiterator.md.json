{"pageProps":{"page":{"slug":"class.recursivetreeiterator.md","content":"# Клас RecursiveTreeIterator\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\n## Вступ\n\nДозволяє виробляти ітерації з [RecursiveIterator](class.recursiveiterator.md) для створення графічного дерева в ASCII.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class RecursiveTreeIterator\n    \n\n    \n     extends\n      RecursiveIteratorIterator\n     {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      RecursiveIteratorIterator::LEAVES_ONLY;\npublic\n     const\n     int\n      RecursiveIteratorIterator::SELF_FIRST;\npublic\n     const\n     int\n      RecursiveIteratorIterator::CHILD_FIRST;\npublic\n     const\n     int\n      RecursiveIteratorIterator::CATCH_GET_CHILD;\n\n\n    /* Константы */\n    public\n     const\n     int\n      BYPASS_CURRENT;\n\n    public\n     const\n     int\n      BYPASS_KEY;\n\n    public\n     const\n     int\n      PREFIX_LEFT;\n\n    public\n     const\n     int\n      PREFIX_MID_HAS_NEXT = 1;\n\n    public\n     const\n     int\n      PREFIX_MID_LAST = 2;\n\n    public\n     const\n     int\n      PREFIX_END_HAS_NEXT = 3;\n\n    public\n     const\n     int\n      PREFIX_END_LAST = 4;\n\n    public\n     const\n     int\n      PREFIX_RIGHT = 5;\n\n\n    /* Методы */\n    \n   public __construct(    RecursiveIterator|IteratorAggregate $iterator,    int $flags = RecursiveTreeIterator::BYPASS_KEY,    int $cachingIteratorFlags = CachingIterator::CATCH_GET_CHILD,    int $mode = RecursiveTreeIterator::SELF_FIRST)\n\n    public beginChildren(): void\npublic beginIteration(): RecursiveIterator\npublic callGetChildren(): RecursiveIterator\npublic callHasChildren(): bool\npublic current(): mixed\npublic endChildren(): void\npublic endIteration(): void\npublic getEntry(): string\npublic getPostfix(): string\npublic getPrefix(): string\npublic key(): mixed\npublic next(): void\npublic nextElement(): void\npublic rewind(): void\npublic setPostfix(string $postfix): void\npublic setPrefixPart(int $part, string $value): void\npublic valid(): bool\n\n\n    /* Наследуемые методы */\n    public RecursiveIteratorIterator::beginChildren(): void\npublic RecursiveIteratorIterator::beginIteration(): void\npublic RecursiveIteratorIterator::callGetChildren(): ?RecursiveIterator\npublic RecursiveIteratorIterator::callHasChildren(): bool\npublic RecursiveIteratorIterator::current(): mixed\npublic RecursiveIteratorIterator::endChildren(): void\npublic RecursiveIteratorIterator::endIteration(): void\npublic RecursiveIteratorIterator::getDepth(): int\npublic RecursiveIteratorIterator::getInnerIterator(): RecursiveIterator\npublic RecursiveIteratorIterator::getMaxDepth(): int|false\npublic RecursiveIteratorIterator::getSubIterator(?int $level = null): ?RecursiveIterator\npublic RecursiveIteratorIterator::key(): mixed\npublic RecursiveIteratorIterator::next(): void\npublic RecursiveIteratorIterator::nextElement(): void\npublic RecursiveIteratorIterator::rewind(): void\npublic RecursiveIteratorIterator::setMaxDepth(int $maxDepth = -1): void\npublic RecursiveIteratorIterator::valid(): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`RecursiveTreeIterator::BYPASS_CURRENT`**\n\n**`RecursiveTreeIterator::BYPASS_KEY`**\n\n**`RecursiveTreeIterator::PREFIX_LEFT`**\n\n**`RecursiveTreeIterator::PREFIX_MID_HAS_NEXT`**\n\n**`RecursiveTreeIterator::PREFIX_MID_LAST`**\n\n**`RecursiveTreeIterator::PREFIX_END_HAS_NEXT`**\n\n**`RecursiveTreeIterator::PREFIX_END_LAST`**\n\n**`RecursiveTreeIterator::PREFIX_RIGHT`**\n\n## Зміст\n\n-   [RecursiveTreeIterator::beginChildren](recursivetreeiterator.beginchildren.md)— Початок навігації до нащадків елемента\n-   [RecursiveTreeIterator::beginIteration](recursivetreeiterator.beginiteration.md)— Початок навігації\n-   [RecursiveTreeIterator::callGetChildren](recursivetreeiterator.callgetchildren.md)— Отримання дочірніх елементів\n-   [RecursiveTreeIterator::callHasChildren](recursivetreeiterator.callhaschildren.md)— Перевірка, чи має поточний елемент нащадки\n-   [RecursiveTreeIterator::\\_\\_construct](recursivetreeiterator.construct.md) \\- Конструктор класу RecursiveTreeIterator\n-   [RecursiveTreeIterator::current](recursivetreeiterator.current.md)— Отримання поточного елемента\n-   [RecursiveTreeIterator::endChildren](recursivetreeiterator.endchildren.md)— Завершення навігації за нащадками елемента\n-   [RecursiveTreeIterator::endIteration](recursivetreeiterator.enditeration.md) \\- Завершення навігації\n-   [RecursiveTreeIterator::getEntry](recursivetreeiterator.getentry.md)— Отримання піддерева, корінням якого є поточний елемент\n-   [RecursiveTreeIterator::getPostfix](recursivetreeiterator.getpostfix.md) \\- Отримання суфікса\n-   [RecursiveTreeIterator::getPrefix](recursivetreeiterator.getprefix.md)— Отримання префіксу\n-   [RecursiveTreeIterator::key](recursivetreeiterator.key.md)— Отримання ключа поточного елемента\n-   [RecursiveTreeIterator::next](recursivetreeiterator.next.md)— Перехід до наступного елементу\n-   [RecursiveTreeIterator::nextElement](recursivetreeiterator.nextelement.md) \\- Наступний елемент\n-   [RecursiveTreeIterator::rewind](recursivetreeiterator.rewind.md)— Переведення ітератора на початок\n-   [RecursiveTreeIterator::setPostfix](recursivetreeiterator.setpostfix.md) \\- Встановлення постфіксу\n-   [RecursiveTreeIterator::setPrefixPart](recursivetreeiterator.setprefixpart.md) \\- Завдання частини префікса\n-   [RecursiveTreeIterator::valid](recursivetreeiterator.valid.md) \\- Перевірка допустимості елемента\n","title":"Клас RecursiveTreeIterator","contentType":2,"navigation":[{"recursiveregexiterator.haschildren.md":"« RecursiveRegexIterator::hasChildren"},{"recursivetreeiterator.beginchildren.md":"RecursiveTreeIterator::beginChildren »"},{"index.md":"PHP Manual"},{"spl.iterators.md":"Ітератори"}]}},"__N_SSG":true}