{"pageProps":{"page":{"slug":"function.array.md","content":"# array\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\narray - Створює масив\n\n### Опис\n\n```methodsynopsis\narray(mixed ...$values): array\n```\n\nСтворює масив. Докладніше про масиви розказано у розділі « [Масиви](language.types.array.md) ».\n\n### Список параметрів\n\n`values`\n\nСинтаксис — розділені комами «індекс => значення», визначає індекси та значення. Індекс можна вказувати рядком або цілим числом. Якщо індекс не вказано, буде автоматично згенеровано цілочисловий індекс починаючи з 0. Якщо індекс — ціле число, наступним згенерованим індексом буде — найбільший цілочисельний індекс + 1. Зверніть увагу, що якщо визначено два однакові індекси, наступний перезапише попередній.\n\nЗамикаюча (висить) кома після останнього елемента масиву хоч і незвичайна, але не порушує синтаксису.\n\n### Значення, що повертаються\n\nПовертає масив параметрів. Задати параметри індекс можна оператором `=>`. Докладніше про масиви розказано у розділі « [Масиви](language.types.array.md) ».\n\n### Приклади\n\nНаступні приклади показують, як створювати двовимірний масив, як визначати ключі асоціативних масивів і як пропустити та продовжити числові індекси у звичайних масивах, якщо нумерація починається з довільного числа.\n\n**Приклад #1 Приклад використання мовної конструкції **array()****\n\n```php\n<?php\n\n$fruits = array (\n    \"fruits\"  => array(\"a\" => \"апельсин\", \"b\" => \"банан\", \"c\" => \"яблоко\"),\n    \"numbers\" => array(1, 2, 3, 4, 5, 6),\n    \"holes\"   => array(\"первый\", 5 => \"второй\", \"третий\")\n);\n?>\n```\n\n**Приклад #2 Автоматична індексація при виклику конструкції **array()****\n\n```php\n<?php\n\n$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);\nprint_r($array);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 13\n    [4] => 1\n    [8] => 1\n    [9] => 19\n)\n```\n\nЗверніть увагу, що індекс «3» визначено двічі, і містить останнє значення - 13. Індекс 4 визначено після індексу 8, а наступний згенерований індекс (значення 19) - 9, оскільки найбільшим індексом був 8.\n\nЦей приклад створює масив, нумерація якого починається з першого.\n\n**Приклад #3 Приклад створення конструкцією **array()** масиву, нумерація якого починається з 1**\n\n```php\n<?php\n\n$firstquarter = array(1 => 'January', 'February', 'March');\nprint_r($firstquarter);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [1] => January\n    [2] => February\n    [3] => March\n)\n```\n\nЯк і Perl, розробнику доступні значення масиву всередині подвійних лапок. Однак у PHP потрібно укласти масив у фігурні дужки.\n\n**Приклад #4 Доступ до масиву всередині подвійних лапок**\n\n```php\n<?php\n\n$foo = array('bar' => 'baz');\necho \"Hello {$foo['bar']}!\"; // Hello baz!\n\n?>\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> **array()** - Конструкція мови для представлення літеральних масивів, а не проста функція.\n\n### Дивіться також\n\n-   [array\\_pad()](function.array-pad.md) \\- Доповнити масив певним значенням до вказаної довжини\n-   [list()](function.list.md) \\- надає змінним значення схожим на масиви синтаксисом\n-   [count()](function.count.md) \\- Підраховує кількість елементів масиву або Countable об'єкті\n-   [range()](function.range.md) \\- Створює масив, що містить діапазон елементів\n-   [foreach](control-structures.foreach.md)\n-   Тип[масив](language.types.array.md)\n","title":"array","contentType":2,"navigation":[{"function.array-walk.md":"« array\\_walk"},{"function.arsort.md":"arsort »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}