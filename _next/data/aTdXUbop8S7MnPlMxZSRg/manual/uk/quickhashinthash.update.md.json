{"pageProps":{"page":{"slug":"quickhashinthash.update.md","content":"# QuickHashIntHash::update\n\n(PECL quickhash >= Unknown)\n\nQuickHashIntHash::update — Метод оновлює запис у хеші новим значенням\n\n### Опис\n\n```methodsynopsis\npublic QuickHashIntHash::update(int $key, int $value): bool\n```\n\nМетод оновлює запис новим значенням і повертає, чи запис оновлено. Якщо є дублікати ключів, лише перший знайдений елемент набуде оновленого значення. Використовуйте константу **`QuickHashIntHash::CHECK_FOR_DUPES`** під час створення хешу, щоб запобігти попаданню дублюючих ключів у хеш.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, що оновлюється.\n\n`value`\n\nНове значення запису.\n\n### Значення, що повертаються\n\nМетод возвращает\\*\\*`true`\\*\\*, якщо запис було знайдено та оновлено та **`false`**, якщо запис був частиною хеша.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashIntHash::update()\\*\\*\\*\\*\n\n```php\n<?php\n$hash = new QuickHashIntHash( 1024 );\n\nvar_dump( $hash->add( 141421, 173205 ) );\nvar_dump( $hash->update( 141421, 223606 ) );\nvar_dump( $hash->get( 141421 ) );\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nbool(true)\nbool(true)\nint(223606)\n```\n","title":"QuickHashIntHash::update","contentType":2,"navigation":[{"quickhashinthash.set.md":"« QuickHashIntHash::set"},{"class.quickhashstringinthash.md":"QuickHashStringIntHash »"},{"index.md":"PHP Manual"},{"class.quickhashinthash.md":"QuickHashIntHash"}]}},"__N_SSG":true}