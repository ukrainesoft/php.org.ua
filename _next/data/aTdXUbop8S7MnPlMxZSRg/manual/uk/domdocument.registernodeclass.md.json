{"pageProps":{"page":{"slug":"domdocument.registernodeclass.md","content":"# DOMDocument::registerNodeClass\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nDOMDocument::registerNodeClass — Реєстрація розширеного класу, який використовується для створення типу базового вузла\n\n### Опис\n\n```methodsynopsis\npublic DOMDocument::registerNodeClass(string $baseClass, ?string $extendedClass): bool\n```\n\nЦей метод дозволяє зареєструвати свій власний розширений клас DOM, який згодом використовуватиметься модулем PHP DOM.\n\nЦей метод не є частиною стандарту DOM.\n\n**Застереження**\n\nКонструктор об'єктів зареєстрованих класів вузлів не викликається.\n\n### Список параметрів\n\n`baseClass`\n\nКлас DOM, який ви бажаєте розширити. Список таких класів можна побачити у [у веденні](book.dom.md)\n\n`extendedClass`\n\nІм'я розширеного класу. Якщо передати **`null`**, будуть видалені всі раніше зареєстровані класи, які розширюють базовий клас `baseClass`\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Додавання нового методу до класу DOMElement для спрощення коду**\n\n```php\n<?php\n\nclass myElement extends DOMElement {\n   function appendElement($name) {\n      return $this->appendChild(new myElement($name));\n   }\n}\n\nclass myDocument extends DOMDocument {\n   function setRoot($name) {\n      return $this->appendChild(new myElement($name));\n   }\n}\n\n$doc = new myDocument();\n$doc->registerNodeClass('DOMElement', 'myElement');\n\n// С этих пор добавление одного элемента к другому\n// требует всего одного вызова метода!\n$root = $doc->setRoot('root');\n$child = $root->appendElement('child');\n$child->setAttribute('foo', 'bar');\n\necho $doc->saveXML();\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n<?xml version=\"1.0\"?>\n<root><child foo=\"bar\"/></root>\n```\n\n**Приклад #2 Отримання елементів у вигляді класу користувача**\n\n```php\n<?php\nclass myElement extends DOMElement {\n    public function __toString() {\n        return $this->nodeValue;\n    }\n}\n\n$doc = new DOMDocument;\n$doc->loadXML(\"<root><element><child>text in child</child></element></root>\");\n$doc->registerNodeClass(\"DOMElement\", \"myElement\");\n\n$element = $doc->getElementsByTagName(\"child\")->item(0);\nvar_dump(get_class($element));\n\n// Воспользуемся __toString методом..\necho $element;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(9) \"myElement\"\ntext in child\n```\n\n**Приклад #3 Отримання імені документа власника**\n\nКоли створюється екземпляр розширеного класу [DOMDocument](class.domdocument.md), властивість ownerDocument посилатиметься на створюваний об'єкт. Однак, якщо видалити всі посилання на цей клас, він буде знищений, а замість нього буде створено новий об'єкт [DOMDocument](class.domdocument.md). З цієї причини ви можете використати функцію **DOMDocument::registerNodeClass()** стосовно об'єкту [DOMDocument](class.domdocument.md)\n\n```php\n<?php\nclass MyDOMDocument extends DOMDocument {\n}\n\nclass MyOtherDOMDocument extends DOMDocument {\n}\n\n// Создаём MyDOMDocument с некоторым XML-содержимым\n$doc = new MyDOMDocument;\n$doc->loadXML(\"<root><element><child>text in child</child></element></root>\");\n\n$child = $doc->getElementsByTagName(\"child\")->item(0);\n\n// Текущий владелец узла - MyDOMDocument\nvar_dump(get_class($child->ownerDocument));\n\n// Уничтожаем MyDOMDocument\nunset($doc);\n\n// И создаём новый экземпляр DOMDocument\nvar_dump(get_class($child->ownerDocument));\n\n// Импортируем узел из MyDOMDocument\n$newdoc = new MyOtherDOMDocument;\n$child = $newdoc->importNode($child);\n\n// Регистрируем пользовательский DOMDocument\n$newdoc->registerNodeClass(\"DOMDocument\", \"MyOtherDOMDocument\");\n\nvar_dump(get_class($child->ownerDocument));\nunset($doc);\n\n// Новый владелец узла изменился на MyOtherDOMDocument\nvar_dump(get_class($child->ownerDocument));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(13) \"MyDOMDocument\"\nstring(11) \"DOMDocument\"\nstring(18) \"MyOtherDOMDocument\"\nstring(18) \"MyOtherDOMDocument\"\n```\n\n**Приклад #4 Об'єкти користувача тимчасові**\n\n**Застереження**\n\nОб'єкти зареєстрованих класів вузлів є тимчасовими, тобто. вони знищуються, коли на них більше не посилаються з PHP-коду і відтворюються при повторному вилученні. Це означає, що значення властивостей, що настроюються, будуть втрачені після відновлення.\n\n```php\n<?php\nclass MyDOMElement extends DOMElement\n{\n    public $myProp = 'значение по умолчанию';\n}\n\n$doc = new DOMDocument();\n$doc->registerNodeClass('DOMElement', 'MyDOMElement');\n\n$node = $doc->createElement('a');\n$node->myProp = 'изменённое значение';\n$doc->appendChild($node);\n\necho $doc->childNodes[0]->myProp, PHP_EOL;\nunset($node);\necho $doc->childNodes[0]->myProp, PHP_EOL;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nизменённое значение\nзначение по умолчанию\n```\n","title":"DOMDocument::registerNodeClass","contentType":2,"navigation":[{"domdocument.prepend.md":"« DOMDocument::prepend"},{"domdocument.relaxngvalidate.md":"DOMDocument::relaxNGValidate »"},{"index.md":"PHP Manual"},{"class.domdocument.md":"DOMDocument"}]}},"__N_SSG":true}