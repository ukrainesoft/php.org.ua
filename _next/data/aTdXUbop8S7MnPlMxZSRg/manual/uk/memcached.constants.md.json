{"pageProps":{"page":{"slug":"memcached.constants.md","content":"# Обумовлені константи\n\nНаведені нижче константи визначені цим модулем і доступні або в збірках PHP з підтримкою цього модуля, або коли модуль динамічно завантажений під час виконання коду.\n\n**`Memcached::OPT_COMPRESSION`**\n\nДозволяє або забороняє стиснення даних. Якщо дозволено, то записи довші за певний поріг (зазвичай 100 байт) прозоро стискатимуться при збереженні і розтискатимуться при вийманні.\n\nТип: bool, по умолчанию:**`true`**\n\n**`Memcached::OPT_SERIALIZER`**\n\nЗадає серіалізатор для серіалізації не скалярних значень. Коректними значеннями є **`Memcached::SERIALIZER_PHP`** і **`Memcached::SERIALIZER_IGBINARY`**. Останній припустимо, тільки якщо memcached зібраний з опцією `--enable-memcached-igbinary`и загружен модуль`igbinary`\n\nТип: int, по умолчанию:**`Memcached::SERIALIZER_PHP`**\n\n**`Memcached::SERIALIZER_PHP`**\n\nСеріалізатор PHP за замовчуванням.\n\n**`Memcached::SERIALIZER_IGBINARY`**\n\nСериализатор[» igbinary](https://github.com/igbinary/igbinary). Замість текстового представлення він зберігає дані у компактному бінарному форматі, що дає виграш у розмірі та швидкості роботи.\n\n**`Memcached::SERIALIZER_JSON`**\n\nСеріалізатор JSON.\n\n**`Memcached::OPT_PREFIX_KEY`**\n\nВикористовується для створення домену для ваших ключів. Задане значення буде використовуватися як префікс для всіх ключів. Значення не може бути довшим `128` символів і, відповідно, максимальна довжина ключів буде зменшено. Префікс використовується лише для звичайних ключів, але не для серверних ключів.\n\nТип: string, по умолчанию:`\"\"`\n\n**`Memcached::OPT_HASH`**\n\nЗадає алгоритм хешування ключів. Можна ставити константами **`Memcached::HASH_*`**. Кожен алгоритм хешування має свої переваги та недоліки. Використовуйте значення за промовчанням, якщо не впевнені або вам все одно.\n\nТип: int, по умолчанию:**`Memcached::HASH_DEFAULT`**\n\n**`Memcached::HASH_DEFAULT`**\n\nАлгоритм хешування ключів за промовчанням (Jenkins one-at-a-time).\n\n**`Memcached::HASH_MD5`**\n\nАлгоритм хешування ключів MD5.\n\n**`Memcached::HASH_CRC`**\n\nАлгоритм хешування ключів CRC.\n\n**`Memcached::HASH_FNV1_64`**\n\nАлгоритм хешування ключів FNV1\\_64.\n\n**`Memcached::HASH_FNV1A_64`**\n\nАлгоритм хешування ключів FNV1\\_64A.\n\n**`Memcached::HASH_FNV1_32`**\n\nАлгоритм хешування ключів FNV1\\_32.\n\n**`Memcached::HASH_FNV1A_32`**\n\nАлгоритм хешування ключів FNV1\\_32A.\n\n**`Memcached::HASH_HSIEH`**\n\nАлгоритм хешування ключів Hsieh.\n\n**`Memcached::HASH_MURMUR`**\n\nАлгоритм хешування ключів Murmur.\n\n**`Memcached::OPT_DISTRIBUTION`**\n\nЗадає спосіб розподілу ключів серверами. В даний момент підтримуються методи модульного та консистентного хешування. Консистентне хешування дає кращий розподіл і дозволяє додавати сервера до кластера з мінімальними втратами кешу.\n\nТип: int, по умолчанию:**`Memcached::DISTRIBUTION_MODULA.`**\n\n**`Memcached::DISTRIBUTION_MODULA`**\n\nМодульний алгоритм розподілу ключів\n\n**`Memcached::DISTRIBUTION_CONSISTENT`**\n\nАлгоритм розподілу ключів \"Консистентне хешування\" (базується на libketama).\n\n**`Memcached::OPT_LIBKETAMA_COMPATIBLE`**\n\nВключає або вимикає сумісність із поведінкою типу libketama. Якщо включено, то алгоритм хешування ключів встановлюється в MD5 та розподіл ключів у режим консистентного хешування на базі ваг. Це корисно тому, що інші клієнти з поведінкою типу libketama (Python, Ruby тощо) з такими самими налаштуваннями сервера зможуть отримати прозорий доступ до ключів.\n\n> **Зауваження** :\n> \n> Вкрай рекомендується включити цю опцію якщо ви хочете використовувати консистентне хешування. Крім того, вона може бути включена за умовчанням у наступних релізах.\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_BUFFER_WRITES`**\n\nВключає або вимикає буферизоване введення/виведення. Увімкнення буферизації призводить до буферизації команд сховищу замість моментального відправлення. Будь-яка дія з вилучення даних призведе до негайної відправки буфера на віддалений сервер. Вихід або закриття з'єднання також призводить до негайного надсилання буфера.\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_BINARY_PROTOCOL`**\n\nВключає в себе використання бінарного протоколу. Зверніть увагу, що на вже відкритому з'єднанні включити цю опцію не вийде.\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_NO_BLOCK`**\n\nВключає або вимикає асинхронне введення/виведення. Це найшвидший транспорт для функцій зберігання.\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_NOREPLY`**\n\nВключає або вимикає ігнорування результату функцій зберігання (set, add, replace, append, prepend, delete, increment, decrement тощо). Функції зберігання будуть надіслані, не витрачаючи час на очікування відповіді (відповіді не буде). Цей параметр не впливає на команди вилучення, такі як [Memcached::get()](memcached.get.md)\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_TCP_NODELAY`**\n\nВключає або відключає опцію no-delay для сокетів з'єднання (у деяких випадках може дати приріст швидкості).\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_SOCKET_SEND_SIZE`**\n\nМаксимальний розмір буфера надсилання для сокету в байтах.\n\nТип: int, за замовчуванням: залежить від налаштувань платформи/ядра.\n\n**`Memcached::OPT_SOCKET_RECV_SIZE`**\n\nМаксимальний розмір буфера для сокету в байтах.\n\nТип: int, за замовчуванням: залежить від налаштувань платформи/ядра.\n\n**`Memcached::OPT_CONNECT_TIMEOUT`**\n\nУ неблокувальному режимі задає час очікування з'єднання для сокету в мілісекундах.\n\nТип: int, по умолчанию:`1000`\n\n**`Memcached::OPT_RETRY_TIMEOUT`**\n\nЗатримка за секунди перед спробою повторного з'єднання після помилки.\n\nТип: int, по умолчанию:\n\n**`Memcached::OPT_SEND_TIMEOUT`**\n\nЧас очікування відправки для сокету у мікросекундах. У випадках, коли ви не можете використовувати неблокуючий введення/виведення, це допоможе вам зберегти час очікування при відсиланні даних.\n\nТип: int, по умолчанию:\n\n**`Memcached::OPT_RECV_TIMEOUT`**\n\nЧас очікування для сокету в мікросекундах. У випадках, коли ви не можете використовувати неблокуючий введення/виведення, це допоможе вам зберегти час очікування при читанні даних.\n\nТип: int, по умолчанию:\n\n**`Memcached::OPT_POLL_TIMEOUT`**\n\nПеріод опитування сокету у мілісекундах.\n\nТип: int, по умолчанию:`1000`\n\n**`Memcached::OPT_CACHE_LOOKUPS`**\n\nДозволяє або забороняє кешувати результати запитів до DNS.\n\nТип: bool, по умолчанию:**`false`**\n\n**`Memcached::OPT_SERVER_FAILURE_LIMIT`**\n\nЗадає максимальну кількість невдалих спроб з'єднатися із сервером. Після досягнення цієї межі сервер буде видалено.\n\nТип: int, по умолчанию:\n\n**`Memcached::HAVE_IGBINARY`**\n\nВказує, чи доступна підтримка igbinary серіалізатора.\n\nТип: bool.\n\n**`Memcached::HAVE_JSON`**\n\nВказує, чи підтримується серіалізатор JSON.\n\nТип: bool.\n\n**`Memcached::HAVE_MSGPACK`**\n\nВказує, чи є підтримка серіалізатора msgpack.\n\nType: bool.\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::HAVE_SESSION`**\n\nType: bool.\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::HAVE_SASL`**\n\nType: bool.\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::GET_EXTENDED`**\n\nФлаг для[Memcached::get()](memcached.get.md) [Memcached::getMulti()](memcached.getmulti.md) і [Memcached::getMultiByKey()](memcached.getmultibykey.md) для того, щоб поверталися значення токена CAS.\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::GET_PRESERVE_ORDER`**\n\nФлаг для[Memcached::getMulti()](memcached.getmulti.md) і [Memcached::getMultiByKey()](memcached.getmultibykey.md) для гарантованого повернення ключів у тому порядку, як вони були запросені. Неіснуючі ключі будуть повернуті зі значеннями **`null`**\n\n**`Memcached::RES_SUCCESS`**\n\nОперація пройшла успішно.\n\n**`Memcached::RES_FAILURE`**\n\nОперація завершилася помилкою.\n\n**`Memcached::RES_HOST_LOOKUP_FAILURE`**\n\nПомилка запиту на DNS.\n\n**`Memcached::RES_UNKNOWN_READ_FAILURE`**\n\nНе вдалося прочитати мережеві дані.\n\n**`Memcached::RES_PROTOCOL_ERROR`**\n\nНекоректна команда в протоколі memcached.\n\n**`Memcached::RES_CLIENT_ERROR`**\n\nПомилка на стороні клієнта.\n\n**`Memcached::RES_SERVER_ERROR`**\n\nПомилка на стороні сервера.\n\n**`Memcached::RES_WRITE_FAILURE`**\n\nНе вдалося записати мережеві дані.\n\n**`Memcached::RES_DATA_EXISTS`**\n\nНе вдалося порівняти і обмінювати: ви намагаєтеся змінити елемент, який був змінений після того, як ви його прочитали востаннє.\n\n**`Memcached::RES_NOTSTORED`**\n\nЕлемент не збережений: але не через помилку. Зазвичай таке означає, що не дотримано передумов команд \"add\" або \"replace\" або що елемент знаходиться в черзі на видалення.\n\n**`Memcached::RES_NOTFOUND`**\n\nЕлемент із заданим ключем не знайдено (при операціях \"get\" або \"cas\").\n\n**`Memcached::RES_PARTIAL_READ`**\n\nЧасткова помилка читання мережевих даних.\n\n**`Memcached::RES_SOME_ERRORS`**\n\nЯкісь помилки виникли під час мульти-запиту.\n\n**`Memcached::RES_NO_SERVERS`**\n\nСписок серверів порожній.\n\n**`Memcached::RES_END`**\n\nКінець результуючого набору.\n\n**`Memcached::RES_ERRNO`**\n\nСистемна помилка.\n\n**`Memcached::RES_BUFFERED`**\n\nОперацію поміщено в буфер.\n\n**`Memcached::RES_TIMEOUT`**\n\nПеревищено час очікування операції.\n\n**`Memcached::RES_BAD_KEY_PROVIDED`**\n\nНеправильний ключ.\n\n**`Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE`**\n\nНе вдалося створити мережевий сокет.\n\n**`Memcached::RES_PAYLOAD_FAILURE`**\n\nПроблеми з даними: не вдається стиснути/розтиснути або серіалізувати/десеріалізувати значення.\n\n**`Memcached::RES_AUTH_PROBLEM`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_AUTH_FAILURE`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_AUTH_CONTINUE`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_E2BIG`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_KEY_TOO_BIG`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_SERVER_TEMPORARILY_DISABLED`**\n\nДоступно з Memcached 3.0.0.\n\n**`Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE`**\n\nДоступно з Memcached 3.0.0.\n","title":"Обумовлені константи","contentType":2,"navigation":[{"memcached.resources.md":"« Типи ресурсів"},{"memcached.expiration.md":"Час зберігання об'єкта »"},{"index.md":"PHP Manual"},{"book.memcached.md":"Memcached"}]}},"__N_SSG":true}