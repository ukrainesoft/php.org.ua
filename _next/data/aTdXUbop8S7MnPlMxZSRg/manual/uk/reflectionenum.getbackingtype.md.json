{"pageProps":{"page":{"slug":"reflectionenum.getbackingtype.md","content":"# ReflectionEnum::getBackingType\n\n(PHP 8 >= 8.1.0)\n\nReflectionEnum::getBackingType — Отримує тип переліку, якщо є\n\n### Опис\n\n```methodsynopsis\npublic ReflectionEnum::getBackingType(): ?ReflectionNamedType\n```\n\nЯкщо перелік типизований, цей метод поверне екземпляр [ReflectionType](class.reflectiontype.md) типу перерахування. Якщо це не типізований перелік, метод поверне `null`\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nЕкземпляр [ReflectionNamedType](class.reflectionnamedtype.md)или`null`, якщо перелік не типизований.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер `?ReflectionNamedType`; раніше тип значення, що повертався `?ReflectionType` |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ReflectionEnum::getBackingType()\\*\\*\\*\\*\n\n```php\n<?php\nenum Suit: string\n{\n    case Hearts = 'H';\n    case Diamonds = 'D';\n    case Clubs = 'C';\n    case Spades = 'S';\n}\n\n$rEnum = new ReflectionEnum(Suit::class);\n\n$rBackingType = $rEnum->getBackingType();\n\nvar_dump((string)$rBackingType);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(6) \"string\"\n```\n\n### Дивіться також\n\n-   [Перерахування](language.enumerations.md)\n-   [ReflectionEnum::isBacked()](reflectionenum.isbacked.md) \\- Визначає, чи є перерахування типовим\n","title":"ReflectionEnum::getBackingType","contentType":2,"navigation":[{"reflectionenum.construct.md":"« ReflectionEnum::\\_\\_construct"},{"reflectionenum.getcase.md":"ReflectionEnum::getCase »"},{"index.md":"PHP Manual"},{"class.reflectionenum.md":"ReflectionEnum"}]}},"__N_SSG":true}