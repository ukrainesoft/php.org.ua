{"pageProps":{"page":{"slug":"language.namespaces.importing.md","content":"## Простори імен: псевдонімування та імпорт\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nЗдатність посилатися на зовнішнє абсолютне ім'я псевдоніму або імпортувати зовнішні абсолютні імена - це важлива властивість просторів імен. Це схоже на здатність файлових систем на основі Unix створювати символічні посилання на файл або директорію.\n\nPHP вміє створювати псевдоніми або імпортувати константи, функції, класи, інтерфейси, трейти, перерахування та простори імен.\n\nПсевдонім імені створюють, вказуючи ключове слово `use`. Ось приклад, який показує 5 типів імпорту:\n\n**Приклад #1 Імпорт або псевдонімування через ключове слово use**\n\n```php\n<?php\n\nnamespace foo;\n\nuse My\\Full\\Classname as Another;\n\n// это то же самое, что и My\\Full\\NSname as NSname\nuse My\\Full\\NSname;\n\n// импортирование глобального класса\nuse ArrayObject;\n\n// импортирование функции\nuse function My\\Full\\functionName;\n\n// создание псевдонима функции\nuse function My\\Full\\functionName as func;\n\n// импортирование константы\nuse const My\\Full\\CONSTANT;\n\n$obj = new namespace\\Another; // создаёт экземпляр класса foo\\Another\n$obj = new Another; // создаёт объект класса My\\Full\\Classname\nNSname\\subns\\func(); // вызывает функцию My\\Full\\NSname\\subns\\func\n\n$a = new ArrayObject(array(1)); // создаёт объект класса ArrayObject\n// без выражения «use ArrayObject» был бы создан объект класса foo\\ArrayObject\n\nfunc(); // вызывает функцию My\\Full\\functionName\necho CONSTANT; // выводит содержимое константы My\\Full\\CONSTANT\n\n?>\n```\n\nЗверніть увагу, що іменам усередині простору імен (абсолютним іменам просторів імен, які містять роздільник просторів імен, наприклад `Foo\\Bar`, на відміну від глобальних імен, які його не містять, наприклад `FooBar`) початковий зворотний сліш (\\\\) не потрібен і не рекомендований, оскільки імена, що імпортуються, повинні бути абсолютними і не обробляються щодо поточного простору імен.\n\nPHP додатково підтримує зручне скорочення для завдання кількох операторів use в одному і тому ж рядку\n\n**Приклад #2 Імпорт або створення псевдоніма через ключове слово use, комбінування кількох виразів**\n\n```php\n<?php\n\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; // создаёт объект класса My\\Full\\Classname\nNSname\\subns\\func(); // вызывает функцию My\\Full\\NSname\\subns\\func\n\n?>\n```\n\nІмпорт виконується під час компіляції, тому не впливає на імена динамічних класів, функцій або констант.\n\n**Приклад #3 Імпорт та динамічні імена**\n\n```php\n<?php\n\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; // создаёт объект класса My\\Full\\Classname\n$a = 'Another';\n$obj = new $a;      // создаёт объект класса Another\n\n?>\n```\n\nКрім того, імпорт поширюється тільки на неповні та повні імена. На абсолютні імена операція імпорту не впливає.\n\n**Приклад #4 Імпортування та абсолютні імена**\n\n```php\n<?php\n\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; // создаёт объект класса My\\Full\\Classname\n$obj = new \\Another; // создаёт объект класса Another\n$obj = new Another\\thing; // создаёт объект класса My\\Full\\Classname\\thing\n$obj = new \\Another\\thing; // создаёт объект класса Another\\thing\n\n?>\n```\n\n### Огляд правил імпорту\n\nКлючевое слово`use` має бути вказано на самому початку файлу (у глобальній області) або всередині оголошення простору імен. Це необхідно тому, що імпорт виконується під час компіляції, а не під час виконання, тому його не можна укладати в блок. Наступний приклад показує неприпустиму вказівку ключового слова `use` :\n\n**Приклад #5 Неприпустиме правило імпорту**\n\n```php\n<?php\n\nnamespace Languages;\n\nfunction toGreenlandic()\n{\n    use Languages\\Danish;\n\n    //...\n}\n\n?>\n```\n\n> **Зауваження** :\n> \n> Правила імпорту задають кожен файл окремо. Тому файли, що приєднуються *НЕ*будут наследовать правила импорта из родительского файла.\n\n### Групові оголошення через ключове слово `use`\n\nКласи, функції та константи, що імпортуються з одного і того ж простору імен ([`namespace`](language.namespaces.definition.md)), можна групувати в одному виразі з ключовим словом [`use`](language.namespaces.importing.md)\n\n```php\n<?php\n\nuse some\\namespace\\ClassA;\nuse some\\namespace\\ClassB;\nuse some\\namespace\\ClassC as C;\n\nuse function some\\namespace\\fn_a;\nuse function some\\namespace\\fn_b;\nuse function some\\namespace\\fn_c;\n\nuse const some\\namespace\\ConstA;\nuse const some\\namespace\\ConstB;\nuse const some\\namespace\\ConstC;\n\n// Эквивалентно следующему групповому объявлению с ключевым словом use\nuse some\\namespace\\{ClassA, ClassB, ClassC as C};\nuse function some\\namespace\\{fn_a, fn_b, fn_c};\nuse const some\\namespace\\{ConstA, ConstB, ConstC};\n```\n","title":"Простори імен: псевдонімування та імпорт","contentType":2,"navigation":[{"language.namespaces.nsconstants.md":"« Ключове слово namespace та константа\\_\\_NAMESPACE\\_\\_"},{"language.namespaces.global.md":"Глобальний простір »"},{"index.md":"PHP Manual"},{"language.namespaces.md":"Простори імен"}]}},"__N_SSG":true}