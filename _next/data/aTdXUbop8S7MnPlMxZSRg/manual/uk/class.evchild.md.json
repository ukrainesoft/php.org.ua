{"pageProps":{"page":{"slug":"class.evchild.md","content":"# Клас EvChild\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nСпостерігач **EvChild** викликається тоді, коли процес отримує сигнал **`SIGCHLD`** у відповідь деякі зміни статусу дочірнього елемента (зазвичай коли дочірній процес завершує свою роботу чи виходить із нього). Дозволяється встановлювати спостерігач **`EvChild`** після того, як дочірній потік був відгалужений (що має на увазі, що він повинен був вже завершитися), доки не почалася ітерація циклу подій (або триває зі спостерігача), тобто. розгалуження і потім негайна реєстрація спостерігача для дочірнього елемента є гарною практикою, а розгалуження та реєстрація спостерігача після кількох ітерацій циклу подій або за наступного запуску callback-функції - немає.\n\nСпостерігачі **EvChild** дозволяється реєструвати тільки в *циклі за замовчуванням*\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvChild\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $pid;\n\n    public\n      $rpid;\n\n    public\n      $rstatus;\n\n    /* Наследуемые свойства */\n    public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    int\n     $pid\n   ,    \n    bool\n     $trace\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   )\n\n    final\n   public\n   static\n   createStopped(    \n    int\n     $pid\n   ,    \n    bool\n     $trace\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n    = ?,    \n    int\n     $priority\n    = ?): object\npublic\n   set(\n    int\n     $pid\n   , \n    bool\n     $trace\n   ): void\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Властивості\n\npid\n\n*Тільки читання*. Ідентифікатор процесу, який слідкує, або що означає будь-який ідентифікатор процесу.\n\nrpid\n\n*Тільки читання*. Ідентифікатор процесу, який слідкує за зміною статусу.\n\nrstatus\n\n*Тільки читання*. Статус завершення процесу викликаний rpid.\n\n## Зміст\n\n-   [EvChild::\\_\\_construct](evchild.construct.md) \\- Створює об'єкт спостерігач EvChild\n-   [EvChild::createStopped](evchild.createstopped.md)— Створює зупинений екземпляр спостерігача EvCheck\n-   [EvChild::set](evchild.set.md) \\- Конфігурування спостерігача\n","title":"Клас EvChild","contentType":2,"navigation":[{"evcheck.createstopped.md":"« EvCheck::createStopped"},{"evchild.construct.md":"EvChild::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}