{"pageProps":{"page":{"slug":"reflectionparameter.isarray.md","content":"# ReflectionParameter::isArray\n\n(PHP 5 >= 5.1.2, PHP 7, PHP 8)\n\nReflectionParameter::isArray — Перевіряє, чи очікує аргумент масив як значення\n\n**Увага**\n\nЦя функція була *ВИДАЛЕНО* у PHP 8.0.0. Використання цієї функції не рекомендується.\n\nУ наведеному нижче прикладі показаний альтернативний спосіб отримання цієї інформації.\n\n### Опис\n\n```methodsynopsis\npublic ReflectionParameter::isArray(): bool\n```\n\nПеревіряє, чи очікує аргумент масив як значення.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\n\\*\\*`true`\\*\\*якщо в якості значення очікується масив (array), **`false`** в іншому випадку.\n\n### Приклади\n\n**Приклад #1 Альтернатива у PHP 8.0.0**\n\nПочинаючи з PHP 8.0.0, наступний код повідомить, чи підтримує тип об'єкти, що викликаються, в тому числі як частина об'єднання.\n\n```php\n<?php\nfunction declaresArray(ReflectionParameter $reflectionParameter): bool\n{\n    $reflectionType = $reflectionParameter->getType();\n\n    if (!$reflectionType) return false;\n\n    $types = $reflectionType instanceof ReflectionUnionType\n        ? $reflectionType->getTypes()\n        : [$reflectionType];\n\n   return in_array('array', array_map(fn(ReflectionNamedType $t) => $t->getName(), $types));\n}\n?>\n```\n\n### Дивіться також\n\n-   [ReflectionParameter::isOptional()](reflectionparameter.isoptional.md) \\- Перевіряє, чи є аргумент необов'язковим\n","title":"ReflectionParameter::isArray","contentType":2,"navigation":[{"reflectionparameter.hastype.md":"« ReflectionParameter::hasType"},{"reflectionparameter.iscallable.md":"ReflectionParameter::isCallable »"},{"index.md":"PHP Manual"},{"class.reflectionparameter.md":"ReflectionParameter"}]}},"__N_SSG":true}