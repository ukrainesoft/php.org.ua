{"pageProps":{"page":{"slug":"functions.arguments.md","content":"## Аргументи функції\n\nФункція може приймати інформацію у вигляді списку аргументів, який є списком розділених комами виразів. Аргументи обчислюються ліворуч праворуч перед фактичним викликом функції (*енергійне* обчислення).\n\nPHP підтримує передачу аргументів за значенням (за умовчанням), [передачу аргументів за посиланням](functions.arguments.md#functions.arguments.by-reference), и[значення за замовчуванням](functions.arguments.md#functions.arguments.default). . [Списки аргументів змінної довжини](functions.arguments.md#functions.variable-arg-list) і [іменовані аргументи](functions.arguments.md#functions.named-arguments)также поддерживаются.\n\n**Приклад #1 Передача масиву на функцію**\n\n```php\n<?php\nfunction takes_array($input)\n{\n    echo \"$input[0] + $input[1] = \", $input[0]+$input[1];\n}\n?>\n```\n\nПочинаючи з PHP 8.0.0, список аргументів функції може містити завершальну кому, яка буде проігнорована. Це корисно у випадку, коли список аргументів дуже довгий, або якщо імена змінних довжини, що підштовхує до їхнього вертикального розташування.\n\n**Приклад #2 Список аргументів функції завершальної коми**\n\n```php\n<?php\nfunction takes_many_args(\n    $first_arg,\n    $second_arg,\n    $a_very_long_argument_name,\n    $arg_with_default = 5,\n    $again = 'a default string', // Эта завершающая запятая допустима только начиная с  8.0.0.\n)\n{\n    // ...\n}\n?>\n```\n\n### Передача аргументів за посиланням\n\nЗа умовчанням аргументи в функцію передаються за значенням (це означає, що якщо ви зміните значення аргументу всередині функції, то поза її значенням все одно залишиться колишнім). Якщо ви хочете дозволити функції модифікувати свої аргументи, ви повинні надсилати їх за посиланням.\n\nЯкщо ви бажаєте, щоб аргумент завжди передавався за посиланням, ви можете вказати амперсанд (&) перед ім'ям аргументу в описі функції:\n\n**Приклад #3 Передача аргументів за посиланням**\n\n```php\n<?php\nfunction add_some_extra(&$string)\n{\n    $string .= 'и кое-что ещё.';\n}\n$str = 'Это строка, ';\nadd_some_extra($str);\necho $str;    // выведет 'Это строка, и кое-что ещё.'\n?>\n```\n\nПередача значення як аргумент, який має передаватися за посиланням, є помилкою.\n\n### Значення аргументів за умовчанням\n\nФункція може визначати значення за промовчанням для аргументів, використовуючи синтаксис, подібний до присвоєння змінної. Значення за промовчанням використовується лише в тому випадку, якщо параметр не вказано; зокрема, зверніть увагу, що передача **`null`** *не*присваивает значение по умолчанию.\n\n**Приклад #4 Використання значень за умовчанням для визначення функції**\n\n```php\n<?php\nfunction makecoffee($type = \"капучино\")\n{\n    return \"Готовим чашку $type.\\n\";\n}\necho makecoffee();\necho makecoffee(null);\necho makecoffee(\"эспрессо\");\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nГотовим чашку капучино.\nГотовим чашку .\nГотовим чашку эспрессо.\n```\n\nЗначення параметрів за замовчуванням можуть бути скалярні значення, масиви (array), спеціальний тип **`null`**, і, починаючи з версії PHP 8.1.0, об'єкти, які використовують синтаксис [new ClassName()](language.oop5.basic.md#language.oop5.basic.new)\n\n**Приклад #5 Використання нескалярних типів як значень за замовчуванням**\n\n```php\n<?php\nfunction makecoffee($types = array(\"капучино\"), $coffeeMaker = NULL)\n{\n    $device = is_null($coffeeMaker) ? \"вручную\" : $coffeeMaker;\n    return \"Готовлю чашку \".join(\", \", $types).\" $device.\\n\";\n}\necho makecoffee();\necho makecoffee(array(\"капучино\", \"лавацца\"), \"в чайнике\");\n?>\n```\n\n**Приклад #6 Використання об'єктів як значень за замовчуванням (починаючи з PHP 8.1.0)**\n\n```php\n<?php\nclass DefaultCoffeeMaker {\n    public function brew() {\n        return 'Приготовление кофе.';\n    }\n}\nclass FancyCoffeeMaker {\n    public function brew() {\n        return 'Приготовление прекрасного кофе специально для вас.';\n    }\n}\nfunction makecoffee($coffeeMaker = new DefaultCoffeeMaker)\n{\n    return $coffeeMaker->brew();\n}\necho makecoffee();\necho makecoffee(new FancyCoffeeMaker);\n?>\n```\n\nЗначення за умовчанням має бути константним виразом, а чи не (наприклад) змінної чи викликом функції/методу класу.\n\nЗверніть увагу, що будь-які необов'язкові аргументи мають бути вказані після будь-яких обов'язкових аргументів, інакше вони не можуть бути опущені під час виклику. Розглянемо наступний приклад:\n\n**Приклад #7 Некоректне використання значень за замовчуванням**\n\n```php\n<?php\nfunction makeyogurt($container = \"миску\", $flavour)\n{\n    return \"Делаем $container с $flavour йогуртом.\\n\";\n}\n\necho makeyogurt(\"малиновым\"); // \"малиновым\" - это $container, не $flavour\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nFatal error: Uncaught ArgumentCountError: Too few arguments\nto function makeyogurt(), 1 passed in example.php on line 42\n```\n\nТепер порівняємо його з наступним прикладом:\n\n**Приклад #8 Коректне використання значень за замовчуванням**\n\n```php\n<?php\nfunction makeyogurt($flavour, $container = \"миску\")\n{\n    return \"Делаем $container с $flavour йогуртом.\\n\";\n}\n\necho makeyogurt(\"малиновым\"); // \"малиновым\" - это $flavour\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nДелаем миску с малиновым йогуртом.\n```\n\nПочинаючи з PHP 8.0.0, [іменовані аргументи](functions.arguments.md#functions.named-arguments) можна використовувати для пропуску кількох необов'язкових параметрів.\n\n**Приклад #9 Правильне використання аргументів за замовчуванням функцій**\n\n```php\n<?php\nfunction makeyogurt($container = \"миску\", $flavour = \"малиновым\", $style = \"греческим\")\n{\n    return \"Делаем $container с $flavour $style йогуртом.\\n\";\n}\necho makeyogurt(style: \"натуральным\");\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nДелаем миску с малиновым натуральным йогуртом.\n```\n\nПочинаючи з PHP 8.0.0, оголошення обов'язкових аргументів після необов'язкових аргументів є *застарілим*. Зазвичай це можна вирішити, відмовившись від значення за замовчуванням, оскільки воно ніколи не буде використовуватися. Винятком із цього правила є аргументи виду `Type $param = null`, где\\*\\*`null`\\*\\* за замовчуванням робить тип, що неявно обнулюється. Таке використання залишається допустимим, хоча рекомендується використовувати явний [тип nullable](language.types.declarations.md#language.types.declarations.nullable)\n\n**Приклад #10 Оголошення необов'язкових аргументів після обов'язкових аргументів**\n\n```php\n<?php\nfunction foo($a = [], $b) {} // По умолчанию не используется; устарел, начиная с версии PHP 8.0.0\nfunction foo($a, $b) {}      // Функционально эквивалентны, без уведомления об устаревании\nfunction bar(A $a = null, $b) {} // Все еще разрешено; $a является обязательным, но допускающим значение null\nfunction bar(?A $a, $b) {}       // Рекомендуется\n?>\n```\n\n> **Зауваження**: Починаючи з PHP 7.1.0, опущення параметра, не заданого за умовчанням, викидає виняток [ArgumentCountError](class.argumentcounterror.md); у попередніх версіях це викликало попередження.\n\n> **Зауваження**: Значення за промовчанням можна надіслати за посиланням.\n\n### Списки аргументів змінної довжини\n\nPHP підтримує списки аргументів змінної довжини для функцій, що визначаються користувачем за допомогою додавання крапки (`...`\n\nСписок аргументів може містити багатокрапку (`...`), щоб показати, що функція приймає змінну кількість аргументів. Аргументи в цьому випадку будуть передані у вигляді масиву:\n\n**Приклад #11 Использование`...`для доступа к аргументам**\n\n```php\n<?php\nfunction sum(...$numbers) {\n    $acc = 0;\n    foreach ($numbers as $n) {\n        $acc += $n;\n    }\n    return $acc;\n}\n\necho sum(1, 2, 3, 4);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n10\n```\n\nБагатокрапка (`...`) можна використовувати під час виклику функції, щоб розпакувати масив (array) або [Traversable](class.traversable.md)переменную в список аргументов:\n\n**Приклад #12 Использование`...`для передачи аргументов**\n\n```php\n<?php\nfunction add($a, $b) {\n    return $a + $b;\n}\n\necho add(...[1, 2]).\"\\n\";\n\n$a = [1, 2];\necho add(...$a);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n3\n3\n```\n\nМожна задати кілька аргументів у звичному вигляді, а потім додати `...`. В цьому випадку `...` помістить у масив лише аргументи, які знайшли відповідності зазначеним у оголошенні функції.\n\nТакож можна додати [оголошення типу](language.types.declarations.md)перед`...`. У цьому випадку всі аргументи, оброблені трьома крапками (`...`), повинні відповідати цьому типу параметра.\n\n**Приклад #13 Аргументи з підказкою типу**\n\n```php\n<?php\nfunction total_intervals($unit, DateInterval ...$intervals) {\n    $time = 0;\n    foreach ($intervals as $interval) {\n        $time += $interval->$unit;\n    }\n    return $time;\n}\n\n$a = new DateInterval('P1D');\n$b = new DateInterval('P2D');\necho total_intervals('d', $a, $b).' days';\n\n// Это не сработает, т.к. null не является объектом DateInterval.\necho total_intervals('d', null);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n3 days\nCatchable fatal error: Argument 2 passed to total_intervals() must be an instance of DateInterval, null given, called in - on line 14 and defined in - on line 2\n```\n\nЗрештою, можна передавати аргументи [за посиланням](functions.arguments.md#functions.arguments.by-reference). Для цього перед `...`нужно поставить амперсанд (`&`\n\n### Іменовані аргументи\n\nУ PHP 8.0.0 як продовження позиційних параметрів з'явилися іменовані аргументи. З їхньою допомогою аргументи функції можна передавати на ім'я параметра, а чи не з його позиції. Таким чином аргумент стає самодокументованим, незалежним від порядку та зазначеного значення за умовчанням.\n\nІменовані аргументи передаються шляхом додавання через двокрапки імені параметра перед його значенням. Як імена параметрів можна використовувати зарезервовані ключові слова. Ім'я параметра має бути ідентифікатором, тобто. він не може бути створений динамічно.\n\n**Приклад #14 Синтаксис іменованого аргументу**\n\n```php\n<?php\nmyFunction(paramName: $value);\narray_foobar(array: $value);\n\n// НЕ поддерживается.\nfunction_name($variableStoringParamName: $value);\n?>\n```\n\n**Приклад #15 Позиційні аргументи проти іменованими аргументами**\n\n```php\n<?php\n// Использование позиционных аргументов:\narray_fill(0, 100, 50);\n\n// Использование именованных аргументов:\narray_fill(start_index: 0, count: 100, value: 50);\n?>\n```\n\nПорядок, у якому передаються іменовані аргументи, немає значення.\n\n**Приклад #16 Той самий приклад, як і вище, але з іншим порядком параметрів**\n\n```php\n<?php\narray_fill(value: 50, count: 100, start_index: 0);\n?>\n```\n\nІменовані аргументи можна поєднувати з позиційними. У цьому випадку іменовані аргументи мають слідувати після позиційних аргументів. Також можна передати лише частину необов'язкових аргументів функції, незалежно від їх порядку.\n\n**Приклад #17 Об'єднання іменованих аргументів із позиційними аргументами**\n\n```php\n<?php\nhtmlspecialchars($string, double_encode: false);\n// То же самое\nhtmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, 'UTF-8', false);\n?>\n```\n\nПередача одного і того ж параметра кілька разів призводить до викидання винятку Error.\n\n**Приклад #18 Помилка, що виникає при передачі одного і того ж параметра кілька разів**\n\n```php\n<?php\nfunction foo($param) { ... }\n\nfoo(param: 1, param: 2);\n// Error: Named parameter $param overwrites previous argument\nfoo(1, param: 2);\n// Error: Named parameter $param overwrites previous argument\n?>\n```\n\nПочинаючи з PHP 8.1.0 можна використовувати іменовані аргументи після розпакування аргументів. Іменований аргумент *не повинен* перевизначати вже розпакований аргумент.\n\n**Приклад #19 Приклад використання іменованих аргументів після розпакування**\n\n```php\n<?php\nfunction foo($a, $b, $c = 3, $d = 4) {\n  return $a + $b + $c + $d;\n}\nvar_dump(foo(...[1, 2], d: 40)); // 46\nvar_dump(foo(...['b' => 2, 'a' => 1], d: 40)); // 46\nvar_dump(foo(...[1, 2], b: 20)); // Фатальная ошибка. Именованный аргумент $b переопределяет предыдущий аргумент\n?>\n```\n","title":"Аргументи функції","contentType":2,"navigation":[{"functions.user-defined.md":"« Функції, визначені користувачем"},{"functions.returning-values.md":"Повернення значень »"},{"index.md":"PHP Manual"},{"language.functions.md":"Функції"}]}},"__N_SSG":true}