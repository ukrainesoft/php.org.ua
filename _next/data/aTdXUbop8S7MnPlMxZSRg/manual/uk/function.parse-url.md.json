{"pageProps":{"page":{"slug":"function.parse-url.md","content":"# parse\\_url\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nparse\\_url — Розбирає URL та повертає його компоненти\n\n### Опис\n\n```methodsynopsis\nparse_url(string $url, int $component = -1): int|string|array|null|false\n```\n\nЦя функція розбирає URL-адресу і повертає асоціативний масив, що містить всі компоненти URL, які в ньому присутні. Елементи масиву *не будуть* декодовані як URL-адреса.\n\nЦя функція **не** призначена для перевірки на коректність даного URL, вона лише розбиває його на перелічені нижче частини. Часткові та неприпустимі URL також приймаються, **parse\\_url()** намагається зробити все можливе щоб розібрати їх коректно.\n\n### Список параметрів\n\n`url`\n\nURL для аналізу.\n\n`component`\n\nУкажите одну из констант\\*\\*`PHP_URL_SCHEME`\\*\\* **`PHP_URL_HOST`** **`PHP_URL_PORT`** **`PHP_URL_USER`** **`PHP_URL_PASS`** **`PHP_URL_PATH`** **`PHP_URL_QUERY`** або **`PHP_URL_FRAGMENT`**, щоб отримати лише конкретний компонент URL у вигляді рядка (string). Винятком є ​​вказівка **`PHP_URL_PORT`**, в цьому випадку значення, що повертається буде типу int.\n\n### Значення, що повертаються\n\nПри розборі значно некоректних URL-адрес **parse\\_url()** може повернути **`false`**\n\nЯкщо параметр `component` буде опущено, функція поверне асоціативний масив (array). У масиві буде принаймні один елемент. Можливі ключі у цьому масиві:\n\n-   scheme - наприклад, http\n-   host\n-   port\n-   user\n-   pass\n-   path\n-   query – після знака питання`?`\n-   fragment - після знаку ґрат`#`\n\nЯкщо параметр `component` визначено, функція **parse\\_url()** поверне рядок (string) (або число (int), у разі **`PHP_URL_PORT`**) замість масиву (array). Якщо запитаний компонент не існує в даній URL-адресі, буде повернено **`null`**. Починаючи з PHP 8.0.0, **parse\\_url()** розрізняє відсутні та порожні запити та фрагменти:\n\n```\nhttp://example.com/foo → query = null, fragment = null\nhttp://example.com/foo? → query = \"\",   fragment = null\nhttp://example.com/foo# → query = null, fragment = \"\"\nhttp://example.com/foo?# → query = \"\",   fragment = \"\"\n```\n\nРаніше у всіх випадках запит та фрагмент були **`null`**\n\nЗверніть увагу, що символи керування (дивіться [ctype\\_cntrl()](function.ctype-cntrl.md)) у компонентах замінюються підкресленням (`_`\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | **parse\\_url()** тепер розрізняє відсутні та порожні запити та фрагменти. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** parse\\_url()\\*\\*\\*\\*\n\n```php\n<?php\n$url = 'http://username:password@hostname:9090/path?arg=value#anchor';\n\nvar_dump(parse_url($url));\nvar_dump(parse_url($url, PHP_URL_SCHEME));\nvar_dump(parse_url($url, PHP_URL_USER));\nvar_dump(parse_url($url, PHP_URL_PASS));\nvar_dump(parse_url($url, PHP_URL_HOST));\nvar_dump(parse_url($url, PHP_URL_PORT));\nvar_dump(parse_url($url, PHP_URL_PATH));\nvar_dump(parse_url($url, PHP_URL_QUERY));\nvar_dump(parse_url($url, PHP_URL_FRAGMENT));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(8) {\n  [\"scheme\"]=>\n  string(4) \"http\"\n  [\"host\"]=>\n  string(8) \"hostname\"\n  [\"port\"]=>\n  int(9090)\n  [\"user\"]=>\n  string(8) \"username\"\n  [\"pass\"]=>\n  string(8) \"password\"\n  [\"path\"]=>\n  string(5) \"/path\"\n  [\"query\"]=>\n  string(9) \"arg=value\"\n  [\"fragment\"]=>\n  string(6) \"anchor\"\n}\nstring(4) \"http\"\nstring(8) \"username\"\nstring(8) \"password\"\nstring(8) \"hostname\"\nint(9090)\nstring(5) \"/path\"\nstring(9) \"arg=value\"\nstring(6) \"anchor\"\n```\n\n**Приклад #2 Приклад використання** parse\\_url()**при отсутствии протокола**\n\n```php\n<?php\n$url = '//www.example.com/path?googleguy=googley';\n\n// До 5.4.7 в path выводилось \"//www.example.com/path\"\nvar_dump(parse_url($url));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(3) {\n  [\"host\"]=>\n  string(15) \"www.example.com\"\n  [\"path\"]=>\n  string(5) \"/path\"\n  [\"query\"]=>\n  string(17) \"googleguy=googley\"\n}\n```\n\n### Примітки\n\n**Застереження**\n\nФункція може видати некоректні результати для відносних або недійсних URL-адрес і результати можуть навіть не відповідати загальному поведінці HTTP-клієнтів. Якщо потрібно проаналізувати URL-адреси з ненадійних вхідних даних, потрібна додаткова перевірка, наприклад, за допомогою [filter\\_var()](function.filter-var.md) з фільтром **`FILTER_VALIDATE_URL`**\n\n> **Зауваження** :\n> \n> Ця функція призначена спеціально для аналізу URL-адрес, а не URI. Однак, щоб відповідати вимогам зворотної сумісності PHP, вона робить виняток для протоколу file://, у якій допускаються потрійні сліші (file:///...). Для іншого протоколу це неприпустимо.\n\n### Дивіться також\n\n-   [pathinfo()](function.pathinfo.md) \\- Повертає інформацію про шлях до файлу\n-   [parse\\_str()](function.parse-str.md) \\- Розбирає рядок у змінні\n-   [http\\_build\\_query()](function.http-build-query.md) \\- Генерує URL-кодований рядок запиту\n-   [dirname()](function.dirname.md) \\- Повертає ім'я батьківського каталогу із зазначеного шляху\n-   [basename()](function.basename.md) \\- Повертає останній компонент імені із зазначеного шляху\n-   [» RFC 3986](http://www.faqs.org/rfcs/rfc3986)\n","title":"parse\\_url","contentType":2,"navigation":[{"function.http-build-query.md":"« http\\_build\\_query"},{"function.rawurldecode.md":"rawurldecode »"},{"index.md":"PHP Manual"},{"ref.url.md":"Функції URL"}]}},"__N_SSG":true}