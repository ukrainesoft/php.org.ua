{"pageProps":{"page":{"slug":"language.oop5.abstract.md","content":"## Абстрактні класи\n\nPHP підтримує визначення абстрактних класів та методів. На основі абстрактного класу не можна створювати об'єкти, і будь-який клас, що містить хоча б один абстрактний метод, має бути визначений як абстрактний. Методи, оголошені абстрактними, несуть, сутнісно, ​​лише описовий зміст і що неспроможні включати реалізацію.\n\nПри успадкування від абстрактного класу, всі методи, помічені абстрактними в батьківському класі, повинні бути визначені в дочірньому класі та дотримуватися звичайних правил [успадкування](language.oop5.inheritance.md) і [сумісності сигнатури](language.oop5.basic.md#language.oop.lsp)\n\n**Приклад #1 Приклад абстрактного класу**\n\n```php\n<?php\nabstract class AbstractClass\n{\n    // Данные методы должны быть определены в дочернем классе\n    abstract protected function getValue();\n    abstract protected function prefixValue($prefix);\n\n    // Общий метод\n    public function printOut() {\n        print $this->getValue() . \"\\n\";\n    }\n}\n\nclass ConcreteClass1 extends AbstractClass\n{\n    protected function getValue() {\n        return \"ConcreteClass1\";\n    }\n\n    public function prefixValue($prefix) {\n        return \"{$prefix}ConcreteClass1\";\n    }\n}\n\nclass ConcreteClass2 extends AbstractClass\n{\n    public function getValue() {\n        return \"ConcreteClass2\";\n    }\n\n    public function prefixValue($prefix) {\n        return \"{$prefix}ConcreteClass2\";\n    }\n}\n\n$class1 = new ConcreteClass1;\n$class1->printOut();\necho $class1->prefixValue('FOO_') .\"\\n\";\n\n$class2 = new ConcreteClass2;\n$class2->printOut();\necho $class2->prefixValue('FOO_') .\"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nConcreteClass1\nFOO_ConcreteClass1\nConcreteClass2\nFOO_ConcreteClass2\n```\n\n**Приклад #2 Приклад абстрактного класу**\n\n```php\n<?php\nabstract class AbstractClass\n{\n    // Наш абстрактный метод требует только определить необходимые аргументы\n    abstract protected function prefixName($name);\n\n}\n\nclass ConcreteClass extends AbstractClass\n{\n\n    // Наш дочерний класс может определить необязательные аргументы, не указанные в объявлении родительского метода\n    public function prefixName($name, $separator = \".\") {\n        if ($name == \"Pacman\") {\n            $prefix = \"Mr\";\n        } elseif ($name == \"Pacwoman\") {\n            $prefix = \"Mrs\";\n        } else {\n            $prefix = \"\";\n        }\n        return \"{$prefix}{$separator} {$name}\";\n    }\n}\n\n$class = new ConcreteClass;\necho $class->prefixName(\"Pacman\"), \"\\n\";\necho $class->prefixName(\"Pacwoman\"), \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nMr. Pacman\nMrs. Pacwoman\n```\n","title":"Абстрактні класи","contentType":2,"navigation":[{"language.oop5.static.md":"« Ключове слово static"},{"language.oop5.interfaces.md":"Інтерфейси об'єктів »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}