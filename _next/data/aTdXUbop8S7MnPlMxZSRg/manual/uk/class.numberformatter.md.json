{"pageProps":{"page":{"slug":"class.numberformatter.md","content":"# The NumberFormatter class\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL intl >= 1.0.0)\n\n## Вступ\n\nПрограми зберігають і оперують числами використовуючи незалежне від локалі бінарне подання. Коли вони виводяться на екран або друкуються, вони конвертуються в рядки відповідно до вимог локалі. Наприклад, число 12345.67 виведеться як \"12,345.67\" у локалі US, як \"12 345,67\" у французькій локалі і як \"12.345,67\" у німецькій.\n\nВикликаючи методи цього класу, ви можете форматувати числа, грошові одиниці та відсоткові величини у поданні потрібної локалі. Клас NumberFormatter чутливий до локалі, тому вам потрібно буде створювати новий екземпляр класу для кожної локалі. Методи NumberFormatter форматують примітивні типи чисел, такі як \"double\", і виводять їх у специфічному для локалі поданні.\n\nДля грошових одиниць можна використовувати тип форматування грошових одиниць, який повертає рядок з відформатованим числом та символом грошової одиниці. Звичайно NumberFormatter не знає про курси обміну, так що для всіх грошових одиниць буде повернуто одне і те ж число. Наприклад, для числа 9988776.65 результат буде таким:\n\n-   9 988 776,65 € для Франції\n-   9.988.776,65 € для Німеччини\n-   $9,988,776.65 для США\n\nДля форматування відсоткових величин використовується тип форматування. За такого форматування число 0.75 буде виведено як 75%.\n\nДля більш складного форматування, наприклад для аналізу числа, використовується форматування засноване на наборі правил.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class NumberFormatter\n     {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      PATTERN_DECIMAL;\n\n    public\n     const\n     int\n      DECIMAL;\n\n    public\n     const\n     int\n      CURRENCY;\n\n    public\n     const\n     int\n      PERCENT;\n\n    public\n     const\n     int\n      SCIENTIFIC;\n\n    public\n     const\n     int\n      SPELLOUT;\n\n    public\n     const\n     int\n      ORDINAL;\n\n    public\n     const\n     int\n      DURATION;\n\n    public\n     const\n     int\n      PATTERN_RULEBASED;\n\n    public\n     const\n     int\n      IGNORE;\n\n    public\n     const\n     int\n      CURRENCY_ACCOUNTING;\n\n    public\n     const\n     int\n      DEFAULT_STYLE;\n\n    public\n     const\n     int\n      ROUND_CEILING;\n\n    public\n     const\n     int\n      ROUND_FLOOR;\n\n    public\n     const\n     int\n      ROUND_DOWN;\n\n    public\n     const\n     int\n      ROUND_UP;\n\n    public\n     const\n     int\n      ROUND_HALFEVEN;\n\n    public\n     const\n     int\n      ROUND_HALFDOWN;\n\n    public\n     const\n     int\n      ROUND_HALFUP;\n\n    public\n     const\n     int\n      PAD_BEFORE_PREFIX;\n\n    public\n     const\n     int\n      PAD_AFTER_PREFIX;\n\n    public\n     const\n     int\n      PAD_BEFORE_SUFFIX;\n\n    public\n     const\n     int\n      PAD_AFTER_SUFFIX;\n\n    public\n     const\n     int\n      PARSE_INT_ONLY;\n\n    public\n     const\n     int\n      GROUPING_USED;\n\n    public\n     const\n     int\n      DECIMAL_ALWAYS_SHOWN;\n\n    public\n     const\n     int\n      MAX_INTEGER_DIGITS;\n\n    public\n     const\n     int\n      MIN_INTEGER_DIGITS;\n\n    public\n     const\n     int\n      INTEGER_DIGITS;\n\n    public\n     const\n     int\n      MAX_FRACTION_DIGITS;\n\n    public\n     const\n     int\n      MIN_FRACTION_DIGITS;\n\n    public\n     const\n     int\n      FRACTION_DIGITS;\n\n    public\n     const\n     int\n      MULTIPLIER;\n\n    public\n     const\n     int\n      GROUPING_SIZE;\n\n    public\n     const\n     int\n      ROUNDING_MODE;\n\n    public\n     const\n     int\n      ROUNDING_INCREMENT;\n\n    public\n     const\n     int\n      FORMAT_WIDTH;\n\n    public\n     const\n     int\n      PADDING_POSITION;\n\n    public\n     const\n     int\n      SECONDARY_GROUPING_SIZE;\n\n    public\n     const\n     int\n      SIGNIFICANT_DIGITS_USED;\n\n    public\n     const\n     int\n      MIN_SIGNIFICANT_DIGITS;\n\n    public\n     const\n     int\n      MAX_SIGNIFICANT_DIGITS;\n\n    public\n     const\n     int\n      LENIENT_PARSE;\n\n    public\n     const\n     int\n      POSITIVE_PREFIX;\n\n    public\n     const\n     int\n      POSITIVE_SUFFIX;\n\n    public\n     const\n     int\n      NEGATIVE_PREFIX;\n\n    public\n     const\n     int\n      NEGATIVE_SUFFIX;\n\n    public\n     const\n     int\n      PADDING_CHARACTER;\n\n    public\n     const\n     int\n      CURRENCY_CODE;\n\n    public\n     const\n     int\n      DEFAULT_RULESET;\n\n    public\n     const\n     int\n      PUBLIC_RULESETS;\n\n    public\n     const\n     int\n      DECIMAL_SEPARATOR_SYMBOL;\n\n    public\n     const\n     int\n      GROUPING_SEPARATOR_SYMBOL;\n\n    public\n     const\n     int\n      PATTERN_SEPARATOR_SYMBOL;\n\n    public\n     const\n     int\n      PERCENT_SYMBOL;\n\n    public\n     const\n     int\n      ZERO_DIGIT_SYMBOL;\n\n    public\n     const\n     int\n      DIGIT_SYMBOL;\n\n    public\n     const\n     int\n      MINUS_SIGN_SYMBOL;\n\n    public\n     const\n     int\n      PLUS_SIGN_SYMBOL;\n\n    public\n     const\n     int\n      CURRENCY_SYMBOL;\n\n    public\n     const\n     int\n      INTL_CURRENCY_SYMBOL;\n\n    public\n     const\n     int\n      MONETARY_SEPARATOR_SYMBOL;\n\n    public\n     const\n     int\n      EXPONENTIAL_SYMBOL;\n\n    public\n     const\n     int\n      PERMILL_SYMBOL;\n\n    public\n     const\n     int\n      PAD_ESCAPE_SYMBOL;\n\n    public\n     const\n     int\n      INFINITY_SYMBOL;\n\n    public\n     const\n     int\n      NAN_SYMBOL;\n\n    public\n     const\n     int\n      SIGNIFICANT_DIGIT_SYMBOL;\n\n    public\n     const\n     int\n      MONETARY_GROUPING_SEPARATOR_SYMBOL;\n\n    public\n     const\n     int\n      TYPE_DEFAULT;\n\n    public\n     const\n     int\n      TYPE_INT32;\n\n    public\n     const\n     int\n      TYPE_INT64;\n\n    public\n     const\n     int\n      TYPE_DOUBLE;\n\n    public\n     const\n     int\n      TYPE_CURRENCY;\n\n\n    /* Методы */\n    \n   public __construct(string $locale, int $style, ?string $pattern = null)\n\n    public static create(string $locale, int $style, ?string $pattern = null): ?NumberFormatter\npublic formatCurrency(float $amount, string $currency): string|false\npublic format(int|float $num, int $type = NumberFormatter::TYPE_DEFAULT): string|false\npublic getAttribute(int $attribute): int|float|false\npublic getErrorCode(): int\npublic getErrorMessage(): string\npublic getLocale(int $type = ULOC_ACTUAL_LOCALE): string|false\npublic getPattern(): string|false\npublic getSymbol(int $symbol): string|false\npublic getTextAttribute(int $attribute): string|false\npublic parseCurrency(string $string, string &$currency, int &$offset = null): float|false\npublic parse(string $string, int $type = NumberFormatter::TYPE_DOUBLE, int &$offset = null): int|float|false\npublic setAttribute(int $attribute, int|float $value): bool\npublic setPattern(string $pattern): bool\npublic setSymbol(int $symbol, string $value): bool\npublic setTextAttribute(int $attribute, string $value): bool\n\n   }\n```\n\n## Обумовлені константи\n\nЦі стилі використовуються функцією [numfmt\\_create()](numberformatter.create.md)для определения типа форматирования.\n\n**`NumberFormatter::PATTERN_DECIMAL`**\n\nФормат із десятковою точкою заданий шаблоном\n\n**`NumberFormatter::DECIMAL`**\n\nФормат із десятковою точкою\n\n**`NumberFormatter::CURRENCY`**\n\nгрошовий формат\n\n**`NumberFormatter::PERCENT`**\n\nВідсотковий формат\n\n**`NumberFormatter::SCIENTIFIC`**\n\nНауковий формат\n\n**`NumberFormatter::SPELLOUT`**\n\nРозібраний формат на основі правил\n\n**`NumberFormatter::ORDINAL`**\n\nЧисельний формат на основі правил\n\n**`NumberFormatter::DURATION`**\n\nФормат тривалості на основі правил\n\n**`NumberFormatter::PATTERN_RULEBASED`**\n\nФормат на основі правил за шаблоном\n\n**`NumberFormatter::CURRENCY_ACCOUNTING`**\n\nФормат валюти для обліку, наприклад, `($3.00)` для негативної суми у валюті замість `-$3.00`. Доступно з PHP 7.4.1 та ICU 53.\n\n**`NumberFormatter::DEFAULT_STYLE`**\n\nФормат за промовчанням для локалі\n\n**`NumberFormatter::IGNORE`**\n\nПсевдонім для PATTERN\\_DECIMAL\n\nДані константи визначають, як будуть розібрані чи відформатовані числа. Їх необхідно передавати функціям [numfmt\\_format()](numberformatter.format.md) і [numfmt\\_parse()](numberformatter.parse.md)\n\n**`NumberFormatter::TYPE_DEFAULT`**\n\nТип визначається типом змінної\n\n**`NumberFormatter::TYPE_INT32`**\n\nФорматування/розбір як 32-бітного цілого\n\n**`NumberFormatter::TYPE_INT64`**\n\nФорматування/розбір як 64-бітного цілого\n\n**`NumberFormatter::TYPE_DOUBLE`**\n\nФорматування/розбір як раціонального (float)\n\n**`NumberFormatter::TYPE_CURRENCY`**\n\nФорматування/розбір як грошової одиниці. Застаріло, починаючи з PHP 8.3.0\n\nАтрибут формата чисел для[numfmt\\_get\\_attribute()](numberformatter.getattribute.md) і [numfmt\\_set\\_attribute()](numberformatter.setattribute.md)\n\n**`NumberFormatter::PARSE_INT_ONLY`**\n\nРозбирати лише цілі.\n\n**`NumberFormatter::GROUPING_USED`**\n\nВикористовувати роздільник, що групує.\n\n**`NumberFormatter::DECIMAL_ALWAYS_SHOWN`**\n\nЗавжди показувати десяткову точку.\n\n**`NumberFormatter::MAX_INTEGER_DIGITS`**\n\nМаксимальна кількість цілих цифр.\n\n**`NumberFormatter::MIN_INTEGER_DIGITS`**\n\nМінімальна кількість цілих цифр.\n\n**`NumberFormatter::INTEGER_DIGITS`**\n\nЦілих цифр.\n\n**`NumberFormatter::MAX_FRACTION_DIGITS`**\n\nМаксимальна кількість цифр після коми.\n\n**`NumberFormatter::MIN_FRACTION_DIGITS`**\n\nМінімальна кількість цифр після коми.\n\n**`NumberFormatter::FRACTION_DIGITS`**\n\nЧисло цифр після коми.\n\n**`NumberFormatter::MULTIPLIER`**\n\nМножник.\n\n**`NumberFormatter::GROUPING_SIZE`**\n\nРозмір угруповання.\n\n**`NumberFormatter::ROUNDING_MODE`**\n\nРежим заокруглення.\n\n**`NumberFormatter::ROUNDING_INCREMENT`**\n\nЗбільшення округлення.\n\n**`NumberFormatter::FORMAT_WIDTH`**\n\nШирина, на яку буде доповнено виведення format().\n\n**`NumberFormatter::PADDING_POSITION`**\n\nПозиція з якою доповнення матиме місце. Дивіться опис констант доповнення.\n\n**`NumberFormatter::SECONDARY_GROUPING_SIZE`**\n\nВторинний розмір угруповання.\n\n**`NumberFormatter::SIGNIFICANT_DIGITS_USED`**\n\nВикористовувати цифри.\n\n**`NumberFormatter::MIN_SIGNIFICANT_DIGITS`**\n\nМінімальна кількість цифр.\n\n**`NumberFormatter::MAX_SIGNIFICANT_DIGITS`**\n\nМаксимальна кількість цифр.\n\n**`NumberFormatter::LENIENT_PARSE`**\n\nРежим поблажливий синтаксичного аналізу для заснованих на правилах форматів.\n\nАтрибути тексту форматування чисел, що використовуються в [numfmt\\_get\\_text\\_attribute()](numberformatter.gettextattribute.md) і [numfmt\\_set\\_text\\_attribute()](numberformatter.settextattribute.md)\n\n**`NumberFormatter::POSITIVE_PREFIX`**\n\nПозитивний префікс.\n\n**`NumberFormatter::POSITIVE_SUFFIX`**\n\nПозитивний суфікс.\n\n**`NumberFormatter::NEGATIVE_PREFIX`**\n\nНегативний префікс.\n\n**`NumberFormatter::NEGATIVE_SUFFIX`**\n\nНегативний суфікс.\n\n**`NumberFormatter::PADDING_CHARACTER`**\n\nСимвол для доповнення рядка.\n\n**`NumberFormatter::CURRENCY_CODE`**\n\nКод грошової одиниці ISO.\n\n**`NumberFormatter::DEFAULT_RULESET`**\n\nНабір стандартних правил. Доступно лише для форматування на основі правил.\n\n**`NumberFormatter::PUBLIC_RULESETS`**\n\nПублічний набір правил. Доступно лише для форматування на основі правил. Цей атрибут доступний лише для читання. Публічний набір правил повертається у вигляді рядка, в якому кожен набір правил відокремлений крапкою з комою (;).\n\nСимволи форматування чисел для [numfmt\\_get\\_symbol()](numberformatter.getsymbol.md) і [numfmt\\_set\\_symbol()](numberformatter.setsymbol.md)\n\n**`NumberFormatter::DECIMAL_SEPARATOR_SYMBOL`**\n\nДесятковий роздільник.\n\n**`NumberFormatter::GROUPING_SEPARATOR_SYMBOL`**\n\nРозділювач груп.\n\n**`NumberFormatter::PATTERN_SEPARATOR_SYMBOL`**\n\nРозділювач символ у шаблоні.\n\n**`NumberFormatter::PERCENT_SYMBOL`**\n\nВідсоток символ.\n\n**`NumberFormatter::ZERO_DIGIT_SYMBOL`**\n\nНуль.\n\n**`NumberFormatter::DIGIT_SYMBOL`**\n\nСимвол, що представляє цифру в шаблон.\n\n**`NumberFormatter::MINUS_SIGN_SYMBOL`**\n\nМінус знак.\n\n**`NumberFormatter::PLUS_SIGN_SYMBOL`**\n\nПлюс знак.\n\n**`NumberFormatter::CURRENCY_SYMBOL`**\n\nЗначок грошової одиниці символ.\n\n**`NumberFormatter::INTL_CURRENCY_SYMBOL`**\n\nThe international currency symbol.\n\n**`NumberFormatter::MONETARY_SEPARATOR_SYMBOL`**\n\nГрошовий роздільник.\n\n**`NumberFormatter::EXPONENTIAL_SYMBOL`**\n\nСимвол ступеня десяти.\n\n**`NumberFormatter::PERMILL_SYMBOL`**\n\nСимвол проміле.\n\n**`NumberFormatter::PAD_ESCAPE_SYMBOL`**\n\nЕкранування символ заповнювача.\n\n**`NumberFormatter::INFINITY_SYMBOL`**\n\nНескінченності символ.\n\n**`NumberFormatter::NAN_SYMBOL`**\n\nСимвол NAN (Not-a-number, нечисло).\n\n**`NumberFormatter::SIGNIFICANT_DIGIT_SYMBOL`**\n\nЗначок цифри.\n\n**`NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL`**\n\nРозділювач груп для фінансового формату.\n\nРежими округлення для [numfmt\\_get\\_attribute()](numberformatter.getattribute.md) і [numfmt\\_set\\_attribute()](numberformatter.setattribute.md) з атрибутом **`NumberFormatter::ROUNDING_MODE`**\n\n**`NumberFormatter::ROUND_CEILING`**\n\nОкруглення у бік позитивної нескінченності.\n\n**`NumberFormatter::ROUND_DOWN`**\n\nОкруглення вниз.\n\n**`NumberFormatter::ROUND_FLOOR`**\n\nОкруглення у бік негативної нескінченності.\n\n**`NumberFormatter::ROUND_HALFDOWN`**\n\nОкруглення у бік \"найближчого сусіда\" крім випадків, коли вони на однаковій відстані. І тут округлення вниз.\n\n**`NumberFormatter::ROUND_HALFEVEN`**\n\nОкруглення у бік \"найближчого сусіда\" крім випадків, коли вони на однаковій відстані. І тут округлення до парного значення.\n\n**`NumberFormatter::ROUND_HALFUP`**\n\nОкруглення у бік \"найближчого сусіда\" крім випадків, коли вони на однаковій відстані. В цьому випадку заокруглення вгору.\n\n**`NumberFormatter::ROUND_UP`**\n\nОкруглення вгору.\n\nЗначения позиции дополнения для[numfmt\\_get\\_attribute()](numberformatter.getattribute.md) і [numfmt\\_set\\_attribute()](numberformatter.setattribute.md) з атрибутом **`NumberFormatter::PADDING_POSITION`**\n\n**`NumberFormatter::PAD_AFTER_PREFIX`**\n\nСимволи доповнення вставляються після префіксу.\n\n**`NumberFormatter::PAD_AFTER_SUFFIX`**\n\nСимволи доповнення вставляються після суфіксу.\n\n**`NumberFormatter::PAD_BEFORE_PREFIX`**\n\nСимволи доповнення вставляються до префіксу.\n\n**`NumberFormatter::PAD_BEFORE_SUFFIX`**\n\nСимволи доповнення вставляються до суфіксу.\n\n## Дивіться також\n\n-   [»  ICU formatting documentation](https://unicode-org.github.io/icu/userguide/format_parse/)\n-   [» ICU. Форматування чисел](https://unicode-org.github.io/icu/userguide/format_parse/numbers/)\n-   [» ICU. Форматування десяткових дробів](https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classDecimalFormat.md)\n-   [» ICU. Форматування на основі правил](https://unicode-org.github.io/icu/userguide/format_parse/numbers/rbnf.md)\n\n## Зміст\n\n-   [NumberFormatter::create](numberformatter.create.md)— Створює засіб форматування чисел\n-   [NumberFormatter::formatCurrency](numberformatter.formatcurrency.md) \\- Форматує значення валюти\n-   [NumberFormatter::format](numberformatter.format.md) \\- Форматує число\n-   [NumberFormatter::getAttribute](numberformatter.getattribute.md)— Отримує атрибут\n-   [NumberFormatter::getErrorCode](numberformatter.geterrorcode.md)— Отримує останній код помилки засобу форматування\n-   [NumberFormatter::getErrorMessage](numberformatter.geterrormessage.md)— Отримує останнє повідомлення про помилку засобу форматування\n-   [NumberFormatter::getLocale](numberformatter.getlocale.md)— Отримує локаль засобу форматування\n-   [NumberFormatter::getPattern](numberformatter.getpattern.md)— Отримує шаблон засобу форматування\n-   [NumberFormatter::getSymbol](numberformatter.getsymbol.md)— Отримує значення символу\n-   [NumberFormatter::getTextAttribute](numberformatter.gettextattribute.md)— Отримує текстовий атрибут\n-   [NumberFormatter::parseCurrency](numberformatter.parsecurrency.md) \\- Розбирає номер валюти\n-   [NumberFormatter::parse](numberformatter.parse.md) \\- Розбирає число\n-   [NumberFormatter::setAttribute](numberformatter.setattribute.md) \\- Встановлює атрибут\n-   [NumberFormatter::setPattern](numberformatter.setpattern.md)— Встановлює шаблон засобу форматування\n-   [NumberFormatter::setSymbol](numberformatter.setsymbol.md)— Встановлює значення символу\n-   [NumberFormatter::setTextAttribute](numberformatter.settextattribute.md) \\- Встановлює текстовий атрибут\n","title":"The NumberFormatter class","contentType":2,"navigation":[{"collator.sort.md":"« Collator::sort"},{"numberformatter.create.md":"NumberFormatter::create »"},{"index.md":"PHP Manual"},{"book.intl.md":"intl"}]}},"__N_SSG":true}