{"pageProps":{"page":{"slug":"tutorial.forms.md","content":"# Робота з формами\n\nОдна з найголовніших переваг PHP - те, як він працює з формами HTML. Тут основним є те, що кожен елемент форми автоматично стає доступним вашим програмам на PHP. Для детальної інформації про використання форм у PHP читайте розділ [Змінні із зовнішніх джерел](language.variables.external.md). Ось приклад форми HTML:\n\n**Приклад #1 Найпростіша форма HTML**\n\nВаше имя:\n\n```\n<label for=\"age\">Ваш возраст:</label>\n<input name=\"age\" id=\"age\" type=\"number\">\n\n<button type=\"submit\">Submit</button>\n```\n\nУ цій формі немає нічого особливого. Це звичайна форма HTML без спеціальних тегів. Коли користувач заповнить форму та натисне кнопку відправки, буде викликана сторінка action.php. У цьому файлі може бути щось на кшталт:\n\n**Приклад #2 Виводимо дані форми**\n\n```php\nЗдравствуйте, <?php echo htmlspecialchars($_POST['name']); ?>.\nВам <?php echo (int)$_POST['age']; ?> лет.\n```\n\nПриклад виведення цієї програми:\n\n```\nЗдравствуйте, Сергей. Вам 30 лет.\n```\n\nЕсли не принимать во внимание куски кода с[htmlspecialchars()](function.mdspecialchars.md)и`(int)`, принцип роботи цього коду має бути простим і зрозумілим . [htmlspecialchars()](function.mdspecialchars.md) забезпечує правильне кодування \"особливих\" HTML-символів так, щоб шкідливий HTML або Javascript не було вставлено на вашу сторінку. Поле age, про яке нам відомо, що воно має бути число, ми можемо просто [перетворити](language.types.type-juggling.md#language.types.typecasting) в int, що автоматично позбавить нас небажаних символів. PHP також може зробити це автоматично за допомогою модуля [filter](ref.filter.md). Змінні [$\\_POST\\['name'\\]](reserved.variables.post.md) і [$\\_POST\\['age'\\]](reserved.variables.post.md) автоматично встановлені для вас засобами PHP. Раніше ми використовували суперглобальну змінну [$\\_SERVER](reserved.variables.server.md), тут же ми так само використовуємо суперглобальну змінну [$\\_POST](reserved.variables.post.md), яка містить усі POST-дані. Зауважимо, що *метод відправки* (method) нашої форми – POST. Якби ми використовували метод *GET*, то інформація нашої форми була б у суперглобальній змінній [$\\_GET](reserved.variables.get.md). Крім цього, можна використовувати змінну [$\\_REQUEST](reserved.variables.request.md)якщо джерело даних не має значення. Ця змінна містить суміш GET, POST, COOKIE.\n\nУ PHP можна також працювати і з XForms, хоча ви знайдете роботу із звичайними HTML-формами досить комфортною вже через деякий час. Незважаючи на те, що робота з XForms не для новачків, вони можуть здатися вам цікавими. У розділі можливостей PHP у нас також є [коротке введення в обробку даних з XForms](features.xforms.md)\n","title":"Робота з формами","contentType":2,"navigation":[{"tutorial.useful.md":"« Робимо щось корисне"},{"tutorial.whatsnext.md":"Що далі? »"},{"index.md":"PHP Manual"},{"tutorial.md":"Простий підручник"}]}},"__N_SSG":true}