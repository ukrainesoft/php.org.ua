{"pageProps":{"page":{"slug":"class.splpriorityqueue.md","content":"# Клас SplPriorityQueue\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\n## Вступ\n\nКлас SplPriorityQueue забезпечує основні функціональні можливості пріоритетної черги, реалізований за допомогою купи з максимальним елементом нагорі (max-heap).\n\n> **Зауваження**: Порядок елементів з однаковим пріоритетом *не визначений*. Він може відрізнятись від порядку, в якому елементи були вставлені.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class SplPriorityQueue\n    \n\n    \n     implements\n      Iterator,\n\n     Countable {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      EXTR_BOTH;\n\n    public\n     const\n     int\n      EXTR_PRIORITY;\n\n    public\n     const\n     int\n      EXTR_DATA;\n\n\n    /* Методы */\n    \n   public compare(mixed $priority1, mixed $priority2): int\npublic count(): int\npublic current(): mixed\npublic extract(): mixed\npublic getExtractFlags(): int\npublic insert(mixed $value, mixed $priority): true\npublic isCorrupted(): bool\npublic isEmpty(): bool\npublic key(): int\npublic next(): void\npublic recoverFromCorruption(): bool\npublic rewind(): void\npublic setExtractFlags(int $flags): int\npublic top(): mixed\npublic valid(): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`SplPriorityQueue::EXTR_BOTH`**\n\n**`SplPriorityQueue::EXTR_PRIORITY`**\n\n**`SplPriorityQueue::EXTR_DATA`**\n\n## Зміст\n\n-   [SplPriorityQueue::compare](splpriorityqueue.compare.md)— Порівнює пріоритети для коректного розміщення елементів у чергу\n-   [SplPriorityQueue::count](splpriorityqueue.count.md)— Здійснює підрахунок елементів у черзі\n-   [SplPriorityQueue::current](splpriorityqueue.current.md)— Повертає вузол, на який вказує ітератор.\n-   [SplPriorityQueue::extract](splpriorityqueue.extract.md)— Витягує вузол із початку черги і пересортує її.\n-   [SplPriorityQueue::getExtractFlags](splpriorityqueue.getextractflags.md)— Отримати прапори вилучення\n-   [SplPriorityQueue::insert](splpriorityqueue.insert.md)— Додає елемент у чергу та пересортує її\n-   [SplPriorityQueue::isCorrupted](splpriorityqueue.iscorrupted.md)— Вказує, чи є пріоритетна черга у пошкодженому стані\n-   [SplPriorityQueue::isEmpty](splpriorityqueue.isempty.md)— Перевіряє, чи черга є порожньою\n-   [SplPriorityQueue::key](splpriorityqueue.key.md)— Повертає індекс поточного сайту\n-   [SplPriorityQueue::next](splpriorityqueue.next.md) \\- Перехід до наступного вузла\n-   [SplPriorityQueue::recoverFromCorruption](splpriorityqueue.recoverfromcorruption.md) \\- Відновлює коректний стан черги\n-   [SplPriorityQueue::rewind](splpriorityqueue.rewind.md)— перекладає ітератор на початок черги\n-   [SplPriorityQueue::setExtractFlags](splpriorityqueue.setextractflags.md)— Встановлює режим вилучення вузлів\n-   [SplPriorityQueue::top](splpriorityqueue.top.md)— Повертає вузол, що знаходиться на початку черги\n-   [SplPriorityQueue::valid](splpriorityqueue.valid.md)— Перевіряє, чи є у черзі ще елементи\n","title":"Клас SplPriorityQueue","contentType":2,"navigation":[{"splminheap.compare.md":"« SplMinHeap::compare"},{"splpriorityqueue.compare.md":"SplPriorityQueue::compare »"},{"index.md":"PHP Manual"},{"spl.datastructures.md":"Структури даних"}]}},"__N_SSG":true}