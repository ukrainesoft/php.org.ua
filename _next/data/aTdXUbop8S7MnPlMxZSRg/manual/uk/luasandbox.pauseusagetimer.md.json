{"pageProps":{"page":{"slug":"luasandbox.pauseusagetimer.md","content":"# LuaSandbox::pauseUsageTimer\n\n(PECL luasandbox >= 1.4.0)\n\nLuaSandbox::pauseUsageTimer — Зупиняє таймер використання процесора\n\n### Опис\n\n```methodsynopsis\npublic LuaSandbox::pauseUsageTimer(): bool\n```\n\nЗупиняє таймер використання процесора.\n\nМає значення тільки за виклику з callback-функції Lua. Коли виконання повертається до Lua, таймер автоматично відновлює роботу. Якщо буде здійснено новий виклик у Lua, таймер буде відновлено під час цього виклику.\n\nЯкщо callback-функція PHP знову викликає Lua з не призупиненим таймером, а потім ця функція Lua знову викликає PHP, другий виклик PHP не зможе призупинити таймер. Логіка полягає в тому, що навіть якщо другий виклик PHP не враховує використання процесора відповідно до обмеження, перший виклик все одно його вважає.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає логічне значення (bool), що вказує, чи зупинено таймер.\n\n### Приклади\n\n**Приклад #1 Керування таймером використання**\n\n```php\n<?php\n\n// создание нового LuaSandbox и установка лимита процессора\n$sandbox = new LuaSandbox();\n$sandbox->setCPULimit( 1 );\n\nfunction doWait( $t ) {\n    $end = microtime( true ) + $t;\n    while ( microtime( true ) < $end ) {\n        // waste CPU cycles\n    }\n}\n\n// регистрация новой callback-функции PHP\n$sandbox->registerLibrary( 'php', [\n    'test' => function () use ( $sandbox ) {\n        $sandbox->pauseUsageTimer();\n        doWait( 5 );\n\n        $sandbox->unpauseUsageTimer();\n        doWait( 0.1 );\n    },\n    'test2' => function () use ( $sandbox ) {\n        $sandbox->pauseUsageTimer();\n        $sandbox->unpauseUsageTimer();\n        doWait( 1.1 );\n    }\n] );\n\necho \"Это не должно истекать...\\n\";\n$sandbox->loadString( 'php.test()' )->call();\n\necho \"Это должно истекать.\\n\";\ntry {\n    $sandbox->loadString( 'php.test2()' )->call();\n    echo \"Это не так?\\n\";\n} catch ( LuaSandboxTimeoutError $ex ) {\n    echo \"Это так! \" . $ex->getMessage() . \"\\n\";\n}\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nЭто не должно истекать...\nЭто должно истекать.\nЭто так! The maximum execution time for this script was exceeded\n```\n\n### Дивіться також\n\n-   [LuaSandbox::setCPULimit()](luasandbox.setcpulimit.md) \\- Встановлює обмеження часу процесора для середовища Lua\n-   [LuaSandbox::unpauseUsageTimer()](luasandbox.unpauseusagetimer.md) \\- Відновлює таймер, зупинений LuaSandbox::pauseUsageTimer\n","title":"LuaSandbox::pauseUsageTimer","contentType":2,"navigation":[{"luasandbox.loadstring.md":"« LuaSandbox::loadString"},{"luasandbox.registerlibrary.md":"LuaSandbox::registerLibrary »"},{"index.md":"PHP Manual"},{"class.luasandbox.md":"LuaSandbox"}]}},"__N_SSG":true}