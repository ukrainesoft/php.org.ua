{"pageProps":{"page":{"slug":"zookeeper.exists.md","content":"# Zookeeper::exists\n\n(PECL zookeeper >= 0.1.0)\n\nZookeeper::exists — Синхронно перевіряє наявність вузла в zookeeper\n\n### Опис\n\n```methodsynopsis\npublic\n   Zookeeper::exists(string $path, callable $watcher_cb = null): array\n```\n\n### Список параметрів\n\n`path`\n\nНазва вузла. Виражається як ім'я файлу з косою межею, що розділяє предків вузла.\n\n`watcher_cb`\n\nЯкщо не нуль, на сервері буде встановлено спостереження, щоб повідомити клієнта, якщо вузол змінюється. Спостереження буде встановлено, навіть якщо вузол немає.\n\n### Значення, що повертаються\n\nПовертає значення stat для шляху, якщо даний вузол існує, інакше повертає false.\n\n### Помилки\n\nМетод видає PHP повідомлення про помилку/попередження, коли кількість параметрів або їх типи є неправильними або не вдалося перевірити наявність вузла.\n\n**Застереження**\n\nПочинаючи з версії 0.3.0, метод викидає виняток [ZookeeperException](class.zookeeperexception.md) та його похідні.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Zookeeper::exists()\\*\\*\\*\\*\n\nПеревірте наявність вузла.\n\n```php\n<?php\n$zookeeper = new Zookeeper('locahost:2181');\n$path = '/path/to/node';\n$r = $zookeeper->exists($path);\nif ($r)\n  echo 'Существет';\nelse\n  echo 'Не определено или ошибка';\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nСуществет\n```\n\n### Дивіться також\n\n-   [Zookeeper::get()](zookeeper.get.md) \\- Синхронно отримує дані, пов'язані з вузлом\n-   [ZookeeperException](class.zookeeperexception.md)\n","title":"Zookeeper::exists","contentType":2,"navigation":[{"zookeeper.delete.md":"« Zookeeper::delete"},{"zookeeper.get.md":"Zookeeper::get »"},{"index.md":"PHP Manual"},{"class.zookeeper.md":"Zookeeper"}]}},"__N_SSG":true}