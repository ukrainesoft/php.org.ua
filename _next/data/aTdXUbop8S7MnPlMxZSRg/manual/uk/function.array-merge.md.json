{"pageProps":{"page":{"slug":"function.array-merge.md","content":"# array\\_merge\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\narray\\_merge - Зливає один або більше масивів\n\n### Опис\n\n```methodsynopsis\narray_merge(array ...$arrays): array\n```\n\nЗливає елементи одного або більшої кількості масивів таким чином, що значення одного масиву приєднуються до кінця попереднього. Результатом роботи функції є новий масив.\n\nЯкщо вхідні масиви мають однакові рядкові ключі, то кожне наступне значення буде замінювати попереднє. Однак, якщо масиви мають однакові числові ключі, значення, згадане останнім, **не замінить** вихідне значення, а буде додано до кінця масиву.\n\nУ результуючому масиві значення вихідного масиву з числовими ключами будуть перенумеровані у порядку, починаючи з нуля.\n\n### Список параметрів\n\n`arrays`\n\nЗливаються масиви.\n\n### Значення, що повертаються\n\nПовертає результуючий масив. Якщо викликається без аргументів, вертає порожній масив (array).\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.4.0 | Функцію тепер можна викликати без будь-яких параметрів. Раніше був потрібний хоча б один параметр. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** array\\_merge()\\*\\*\\*\\*\n\n```php\n<?php\n$array1 = array(\"color\" => \"red\", 2, 4);\n$array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4);\n$result = array_merge($array1, $array2);\nprint_r($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [color] => green\n    [0] => 2\n    [1] => 4\n    [2] => a\n    [3] => b\n    [shape] => trapezoid\n    [4] => 4\n)\n```\n\n**Приклад #2 Простий приклад використання **array\\_merge()****\n\n```php\n<?php\n$array1 = array();\n$array2 = array(1 => \"data\");\n$result = array_merge($array1, $array2);\n?>\n```\n\nПам'ятайте, що числові ключі будуть перенумеровані!\n\n```\nArray\n(\n    [0] => data\n)\n```\n\nЯкщо ви бажаєте доповнити перший масив елементами другого без перезапису елементів першого масиву та без переіндексації, використовуйте оператор об'єднання масивів `+` :\n\n```php\n<?php\n$array1 = array(0 => 'zero_a', 2 => 'two_a', 3 => 'three_a');\n$array2 = array(1 => 'one_b', 3 => 'three_b', 4 => 'four_b');\n$result = $array1 + $array2;\nvar_dump($result);\n?>\n```\n\nКлючі з першого масиву буде збережено. Якщо ключ масиву існує в обох масивах, то буде використаний елемент першого масиву, а відповідний елемент другого масиву буде проігнорований.\n\n```\narray(5) {\n  [0]=>\n  string(6) \"zero_a\"\n  [2]=>\n  string(5) \"two_a\"\n  [3]=>\n  string(7) \"three_a\"\n  [1]=>\n  string(5) \"one_b\"\n  [4]=>\n  string(6) \"four_b\"\n}\n```\n\n**Приклад #3 Приклад використання** array\\_merge()\\*\\* з не масивами\\*\\*\n\n```php\n<?php\n$beginning = 'foo';\n$end = array(1 => 'bar');\n$result = array_merge((array)$beginning, (array)$end);\nprint_r($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n    (\n        [0] => foo\n        [1] => bar\n    )\n```\n\n### Дивіться також\n\n-   [array\\_merge\\_recursive()](function.array-merge-recursive.md) \\- Рекурсивне злиття одного або більше масивів\n-   [array\\_replace()](function.array-replace.md) \\- Замінює елементи масиву елементами інших переданих масивів\n-   [array\\_combine()](function.array-combine.md) \\- Створює новий масив, використовуючи один масив як ключі, а інший для його значень\n-   [Оператори, що працюють із масивами](language.operators.array.md)\n","title":"array\\_merge","contentType":2,"navigation":[{"function.array-merge-recursive.md":"« array\\_merge\\_recursive"},{"function.array-multisort.md":"array\\_multisort »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}