{"pageProps":{"page":{"slug":"security.database.storage.md","content":"## Шифрування сховища бази даних\n\nВи можете встановити з'єднання через SSL для шифрування зв'язку клієнт/сервер для підвищення безпеки, або ви можете використовувати ssh для шифрування з'єднання між клієнтами і сервером бази даних. Якщо будь-який з них використовується, моніторинг вашого трафіку і отримання інформації про вашу базу даних буде важким для потенційного зловмисника.\n\nУ випадку, якщо зломщик отримав безпосередній доступ до БД (в обхід веб-сервера), він може отримати дані, що цікавлять, або порушити їх цілісність, якщо інформація не захищена на рівні самої БД. Шифрування даних - хороший спосіб запобігти такій ситуації, але лише незначна кількість БД надають таку можливість.\n\nНайпростіше вирішення цієї проблеми - встановити спочатку звичайний програмний пакет для шифрування даних, а потім використовувати його у ваших PHP-скриптів. PHP може вам допомогти з цим завданням за допомогою таких модулів як [OpenSSL](book.openssl.md) і [Sodium](book.sodium.md), що реалізують досить велику кількість алгоритмів шифрування. При такому підході скрипт спочатку шифрує дані, що зберігаються, а потім дешифрує їх при запиті. Нижче наведено приклади того, як працює шифрування даних у PHP-скриптах.\n\n### Хешування\n\nУ разі роботи із прихованими службовими даними, якщо не потрібне їхнє нешифроване подання (тобто його не потрібно показувати), то, як наслідок, можна використовувати хешування. Добре відомий приклад хешування - зберігання криптографічного хешу від пароля БД, замість зберігання оригінального значення.\n\nФункция[password](ref.password.md) дозволяє зручно хешувати конфіденційні дані та працювати з цими хешами.\n\n[password\\_hash()](function.password-hash.md) дозволяє хешувати заданий рядок найсильнішим з доступних алгоритмом і [password\\_verify()](function.password-verify.md) перевіряє, що заданий пароль збігається зі збереженим у БД хешем.\n\n**Приклад #1 Хешування полів із паролями**\n\n```php\n<?php\n\n// Сохраняем хеш пароля\n$query  = sprintf(\"INSERT INTO users(name,pwd) VALUES('%s','%s');\",\n            pg_escape_string($username),\n            password_hash($password, PASSWORD_DEFAULT));\n$result = pg_query($connection, $query);\n\n// проверка введённого пользователем пароля на корректность\n$query = sprintf(\"SELECT pwd FROM users WHERE name='%s';\",\n            pg_escape_string($username));\n$row = pg_fetch_assoc(pg_query($connection, $query));\n\nif ($row && password_verify($password, $row['pwd'])) {\n    echo 'Добро пожаловать, ' . htmlspecialchars($username) . '!';\n} else {\n    echo 'Ошибка авторизации, ' . htmlspecialchars($username) . '.';\n}\n\n?>\n```\n","title":"Шифрування сховища бази даних","contentType":2,"navigation":[{"security.database.connection.md":"« З'єднання з базою даних"},{"security.database.sql-injection.md":"SQL-ін'єкції »"},{"index.md":"PHP Manual"},{"security.database.md":"Безпека баз даних"}]}},"__N_SSG":true}