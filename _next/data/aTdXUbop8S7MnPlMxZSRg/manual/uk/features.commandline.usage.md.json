{"pageProps":{"page":{"slug":"features.commandline.usage.md","content":"## Виконання PHP-файлів\n\nУ CLI SAPI є три різні способи запуску PHP-коду:\n\n1.  Вказує конкретний файл для запуску.\n    \n    ```\n    $ php my_script.php\n    \n    $ php -f my_script.php\n    ```\n    \n    Обидва способи (із зазначенням опції**\\-f**або без) запустять файл my\\_script.php. Немає обмежень, який файл запускати; зокрема, файли не повинні мати розширення`.php`\n    \n2.  Надіслати PHP-код безпосередньо в командному рядку.\n    \n    ```\n    $ php -r 'print_r(get_defined_constants());'\n    ```\n    \n    Необхідно бути особливо обережним під час використання цього, т.к. може статися підстановка змінних оболонок під час використання подвійних лапок.\n    \n    > **Зауваження** :\n    > \n    > Уважно прочитайте приклад: у ньому немає тегів, що відкривають і закривають! Опція**\\-r**просто їх не потребує, і їх використання призведе до помилки розбору.\n    \n3.  Передати PHP-код через стандартний потік введення (`stdin`\n    \n    Це дає потужну можливість створювати PHP-код і передавати його файлу, що запускається, як показано в цьому (вигаданому) прикладі:\n    \n    ```\n    $ some_application | some_filter | php | sort -u > final_output.txt\n    ```\n    \n\nВи не можете комбінувати будь-який із цих трьох способів запуску коду.\n\nЯк і будь-яка інша консольна програма, бінарний файл PHP приймає аргументи, але PHP-скрипт також може отримувати аргументи. PHP не обмежує кількість аргументів, що передаються в скрипт (оболонка консолі встановлює певний поріг кількості символів, які можуть бути передані; зазвичай цього ліміту вистачає). Передані аргументи доступні у глобальному масиві [$argv](reserved.variables.argv.md). Перший індекс (нуль) завжди містить ім'я скрипта з командного рядка. Врахуйте, що якщо код викликається на льоту з командного рядка за допомогою опції **\\-r**, значением[$argv\\[0\\]](reserved.variables.argv.md)будет`\"Стандартний потік\"` (\"Standard input code\"); до PHP 7.2.0 це був дефіс (`\"-\"`). Те саме вірно і для коду, переданого через конвеєр з `STDIN`\n\nДруга зареєстрована глобальна змінна - це [$argc](reserved.variables.argc.md), що містить кількість елементів у масиві [$argv](reserved.variables.argv.md)(а**не** кількість аргументів, переданих скрипту).\n\nЯкщо аргументи, що передаються, не починаються з символу `-`, то особливих проблем не повинно бути. Передається в скрипт аргумент, який починається з `-` створить проблеми, т.к. PHP вирішить, що він сам має його обробити. Для запобігання такій поведінці використовуйте роздільник списку аргументів `--`. Після того, як цей роздільник буде проаналізовано PHP, всі наступні аргументи будуть передані в скрипт незайманими.\n\n```\n# Эта команда не запустит данный код, но покажет информацию об использовании PHP\n$ php -r 'var_dump($argv);' -h\nUsage: php [options] [-f] <file> [args...]\n[...]\n\n# Эта команда передаст аргумент '-h' в скрипт, предотвратив показ справки PHP\n$ php -r 'var_dump($argv);' -- -h\narray(2) {\n  [0]=>\n  string(1) \"-\"\n  [1]=>\n  string(2) \"-h\"\n}\n```\n\nОднак у Unix-системах є ще один спосіб використання PHP для консольних скриптів. Можна написати скрипт, перший рядок якого буде починатися з `#!/usr/bin/php` (або інший коректний шлях до бінарного файлу PHP CLI). Після цього рядка можна помістити звичайний PHP-код, укладений у теги PHP, що відкривають і закривають. Як тільки буде встановлено коректні атрибути запуску на файл (наприклад, **chmod +x test**), скрипт може бути запущений як звичайний консольний або perl-скрипт:\n\n**Приклад #1 Запуск PHP-скрипту як консольного**\n\n```php\n#!/usr/bin/php\n<?php\nvar_dump($argv);\n?>\n```\n\nПрипускаючи, що цей файл названий test і знаходиться в поточній директорії, можна зробити таке:\n\n```\n$ chmod +x test\n$ ./test -h -- foo\narray(4) {\n  [0]=>\n  string(6) \"./test\"\n  [1]=>\n  string(2) \"-h\"\n  [2]=>\n  string(2) \"--\"\n  [3]=>\n  string(3) \"foo\"\n}\n```\n\nЯк можна побачити, у цьому випадку не потрібно дбати про передачу параметрів, які починаються з `-`\n\nPHP-файл, що виконується, може використовуватися для запуску PHP-скриптів незалежно від веб-сервера. У разі роботи в Unix-подібній системі необхідно додати в перший рядок файлу `#!` (називається також \"shebang\") щоб вказати, яка програма повинна запускати скрипт. На Windows-платформах можна призначити php.exe для файлів з розширеннями `.php` або створити пакетний (.bat) файл для запуску скриптів за допомогою PHP. Рядок, що додається на початку скрипту для Unix-систем, не впливає на їх роботу в Windows, таким чином можна створювати кросплатформові скрипти. Нижче наведено простий приклад скрипта, який виконується з командного рядка:\n\n**Приклад #2 Скрипт призначений для запуску з командного рядка (script.php)**\n\n```php\n#!/usr/bin/php\n<?php\n\nif ($argc != 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {\n?>\n\nЭто консольный PHP-скрипт, принимающий один аргумент.\n\n  Использование:\n  <?php echo $argv[0]; ?> <option>\n\n  <option> Любое слово, которое вы хотели бы\n  напечатать. Опции  --help, -help, -h,\n  или -? покажут текущую справочную информацию.\n\n<?php\n} else {\n    echo $argv[1];\n}\n?>\n```\n\nУ наведеному вище скрипті в першому рядку міститься shebang, що вказує на те, що цей файл повинен запускатися PHP. Робота ведеться з CLI-версією, тому не буде виведено жодного HTTP-заголовка.\n\nСкрипт спочатку перевіряє наявність обов'язкового одного аргументу (на додаток до імені скрипта, який також підраховується). Якщо їх немає, або якщо переданий аргумент був **\\--help** **\\-help** **\\-h** або **\\-?** , виводиться довідкове повідомлення з використанням [$argv\\[0\\]](reserved.variables.argv.md), яке містить ім'я скрипта, що виконується. Інакше просто виводиться отриманий аргумент.\n\nДля запуску наведеного прикладу в Unix-системі потрібно зробити його виконуваним і просто виконати в консолі **script.php echothis** або **script.php -h**. У Windows-системі можна створити пакетний файл:\n\n**Приклад #3 Пакетний файл для запуску PHP-скрипту з командного рядка (script.bat)**\n\n@echo OFF \"C:\\\\php\\\\php.exe\" script.php %\\*\n\nПрипускаючи, що наведений вище скрипт називається script.php, а повний шлях до CLI php.exe знаходиться в C:\\\\php\\\\php.exe, цей пакетний файл запустить його з переданими параметрами: **script.bat echothis** або **script.bat -h**\n\nТакож можна ознайомитись із модулем [Readline](ref.readline.md) для отримання додаткових функцій, які можна використовувати для покращення консольного PHP-скрипту.\n\nУ Windows запуск PHP можна налаштувати без необхідності вказувати C:\\\\php\\\\php.exe або розширення `.php`. Докладніше цю тему описано в розділі [Запуск PHP з командного рядка у Microsoft Windows](install.windows.commandline.md)\n\n> **Зауваження** :\n> \n> У Windows рекомендується запускати PHP під актуальним обліковим записом користувача. Під час роботи в мережній службі деякі операції не будуть виконані, оскільки \"порівняння імен облікових записів та ідентифікаторів безпеки не виконано\".\n","title":"Виконання PHP-файлів","contentType":2,"navigation":[{"features.commandline.options.md":"« Опції"},{"features.commandline.io-streams.md":"Потоки введення/виводу »"},{"index.md":"PHP Manual"},{"features.commandline.md":"Робота з PHP з командного рядка"}]}},"__N_SSG":true}