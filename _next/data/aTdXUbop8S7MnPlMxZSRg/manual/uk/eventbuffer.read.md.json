{"pageProps":{"page":{"slug":"eventbuffer.read.md","content":"# EventBuffer::read\n\n(PECL event >= 1.6.0)\n\nEventBuffer::read — Читає дані з evbuffer і виснажує прочитані байти\n\n### Опис\n\n```methodsynopsis\npublic\n   EventBuffer::read(\n    int\n     $max_bytes\n   ): string\n```\n\nПрочитайте перші `max_bytes` з буфера та виснажіть прочитані байти. Якщо більше запрошено `max_bytes`, Чим доступно в буфері, він витягує стільки байтів, скільки доступно.\n\n### Список параметрів\n\n`max_bytes`\n\nМаксимальна кількість байтів для читання із буфера.\n\n### Значення, що повертаються\n\nПовертає прочитаний рядок або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL event 1.6.0 | Перейменований з **EventBuffer::read()** (старе ім'я методу) **EventBuffer::read()**. . **EventBuffer::read()** тепер приймає лише аргумент `max_bytes`; повертає рядок замість цілого числа. |\n\n### Дивіться також\n\n-   [EventBuffer::copyout()](eventbuffer.copyout.md) \\- Копіює вказану кількість байтів з початку буфера\n-   [EventBuffer::drain()](eventbuffer.drain.md) \\- Видаляє вказану кількість байтів з початку буфера, нікуди не копіюючи\n-   [EventBuffer::pullup()](eventbuffer.pullup.md) \\- Лінеаризує дані в буфері та повертає їх вміст у вигляді рядка\n-   [EventBuffer::readLine()](eventbuffer.readline.md) \\- Витягує рядок із початку буфера\n-   [EventBuffer::appendFrom()](eventbuffer.appendfrom.md) \\- Переміщує вказану кількість байтів з вихідного буфера до кінця поточного буфера\n","title":"EventBuffer::read","contentType":2,"navigation":[{"eventbuffer.pullup.md":"« EventBuffer::pullup"},{"eventbuffer.readfrom.md":"EventBuffer::readFrom »"},{"index.md":"PHP Manual"},{"class.eventbuffer.md":"EventBuffer"}]}},"__N_SSG":true}