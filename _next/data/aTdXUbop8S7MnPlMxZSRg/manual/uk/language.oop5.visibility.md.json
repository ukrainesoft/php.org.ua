{"pageProps":{"page":{"slug":"language.oop5.visibility.md","content":"## Область видимості\n\nОбласть видимості властивості, методу чи константи (починаючи з PHP 7.1.0) визначають, додаючи перед оголошенням ключове слово: `public` `protected`или`private`. Доступ до властивостей та методів класу, оголошених як public (загальнодоступний), дозволено звідусіль. Модифікатор protected (захищений) дозволяє доступ самому класу, його класам і батьківським класам. Модифікатор private (закритий) обмежує область видимості так, що тільки клас, де оголошено сам елемент, має доступ до нього.\n\n### Область видимості якості\n\nВластивості класу можуть бути визначені як public, private або protected. Властивості, оголошені без явного ключового слова області видимості, визначаються загальнодоступними (public).\n\n**Приклад #1 Оголошення якості класу**\n\n```php\n<?php\n/**\n * Определение MyClass\n */\nclass MyClass\n{\n    public $public = 'Public';\n    protected $protected = 'Protected';\n    private $private = 'Private';\n\n    function printHello()\n    {\n        echo $this->public;\n        echo $this->protected;\n        echo $this->private;\n    }\n}\n\n$obj = new MyClass();\necho $obj->public; // Работает\necho $obj->protected; // Неисправимая ошибка\necho $obj->private; // Неисправимая ошибка\n$obj->printHello(); // Выводит Public, Protected и Private\n\n\n/**\n * Определение MyClass2\n */\nclass MyClass2 extends MyClass\n{\n    // Мы можем переопределить общедоступные и защищённые свойства, но не закрытые\n    public $public = 'Public2';\n    protected $protected = 'Protected2';\n\n    function printHello()\n    {\n        echo $this->public;\n        echo $this->protected;\n        echo $this->private;\n    }\n}\n\n$obj2 = new MyClass2();\necho $obj2->public; // Работает\necho $obj2->private; // Неопределён\necho $obj2->protected; // Неисправимая ошибка\n$obj2->printHello(); // Выводит Public2, Protected2, Undefined\n\n?>\n```\n\n### Область видимості методу\n\nМетоди класу можуть бути визначені як public, private або protected. Методи, оголошені без вказівки на область видимості, визначаються як public.\n\n**Приклад #2 Оголошення методу**\n\n```php\n<?php\n/**\n * Определение MyClass\n */\nclass MyClass\n{\n    // Объявление общедоступного конструктора\n    public function __construct() { }\n\n    // Объявление общедоступного метода\n    public function MyPublic() { }\n\n    // Объявление защищённого метода\n    protected function MyProtected() { }\n\n    // Объявление закрытого метода\n    private function MyPrivate() { }\n\n    // Это общедоступный метод\n    function Foo()\n    {\n        $this->MyPublic();\n        $this->MyProtected();\n        $this->MyPrivate();\n    }\n}\n\n$myclass = new MyClass;\n$myclass->MyPublic(); // Работает\n$myclass->MyProtected(); // Неисправимая ошибка\n$myclass->MyPrivate(); // Неисправимая ошибка\n$myclass->Foo(); // Работает общедоступный, защищённый и закрытый\n\n\n/**\n * Определение MyClass2\n */\nclass MyClass2 extends MyClass\n{\n    // Это общедоступный метод\n    function Foo2()\n    {\n        $this->MyPublic();\n        $this->MyProtected();\n        $this->MyPrivate(); // Неисправимая ошибка\n    }\n}\n\n$myclass2 = new MyClass2;\n$myclass2->MyPublic(); // Работает\n$myclass2->Foo2(); // Работает общедоступный и защищённый, закрытый не работает\n\nclass Bar\n{\n    public function test() {\n        $this->testPrivate();\n        $this->testPublic();\n    }\n\n    public function testPublic() {\n        echo \"Bar::testPublic\\n\";\n    }\n\n    private function testPrivate() {\n        echo \"Bar::testPrivate\\n\";\n    }\n}\n\nclass Foo extends Bar\n{\n    public function testPublic() {\n        echo \"Foo::testPublic\\n\";\n    }\n\n    private function testPrivate() {\n        echo \"Foo::testPrivate\\n\";\n    }\n}\n\n$myFoo = new Foo();\n$myFoo->test(); // Bar::testPrivate\n                // Foo::testPublic\n?>\n```\n\n### Область видимості констант\n\nПочинаючи з PHP 7.1.0, константи класу можуть бути визначені як public, private чи protected. Константи, оголошені без зазначення області видимості, визначаються як public.\n\n**Приклад #3 Оголошення констант, починаючи з PHP 7.1.0**\n\n```php\n<?php\n/**\n * Объявление класса MyClass\n */\nclass MyClass\n{\n    // Объявление общедоступной константы\n    public const MY_PUBLIC = 'public';\n\n    // Объявление защищённой константы\n    protected const MY_PROTECTED = 'protected';\n\n    // Объявление закрытой константы\n    private const MY_PRIVATE = 'private';\n\n    public function foo()\n    {\n        echo self::MY_PUBLIC;\n        echo self::MY_PROTECTED;\n        echo self::MY_PRIVATE;\n    }\n}\n\n$myclass = new MyClass();\nMyClass::MY_PUBLIC; // Работает\nMyClass::MY_PROTECTED; // Неисправимая ошибка\nMyClass::MY_PRIVATE; // Неисправимая ошибка\n$myclass->foo(); // Выводятся константы public, protected и private\n\n\n/**\n * Объявление класса MyClass2\n */\nclass MyClass2 extends MyClass\n{\n    // Публичный метод\n    function foo2()\n    {\n        echo self::MY_PUBLIC;\n        echo self::MY_PROTECTED;\n        echo self::MY_PRIVATE; // Неисправимая ошибка\n    }\n}\n\n$myclass2 = new MyClass2;\necho MyClass2::MY_PUBLIC; // Работает\n$myclass2->foo2(); // Выводятся константы public и protected, но не private\n?>\n```\n\n### Видимість з інших об'єктів\n\nОб'єкти, які мають загальний тип (успадковуються від одного класу), мають доступ до елементів з модифікаторами private і protected один одного, навіть якщо не є одним і тим самим екземпляром. Це тим, що реалізація видимості елементів відома всередині цих об'єктів.\n\n**Приклад #4 Доступ до елементів із модифікатором private з об'єктів одного типу**\n\n```php\n<?php\nclass Test\n{\n    private $foo;\n\n    public function __construct($foo)\n    {\n        $this->foo = $foo;\n    }\n\n    private function bar()\n    {\n        echo 'Доступ к закрытому методу.';\n    }\n\n    public function baz(Test $other)\n    {\n        // Мы можем изменить закрытое свойство:\n        $other->foo = 'привет';\n        var_dump($other->foo);\n\n        // Мы также можем вызвать закрытый метод:\n        $other->bar();\n    }\n}\n\n$test = new Test('test');\n\n$test->baz(new Test('other'));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(6) \"привет\"\nДоступ к закрытому методу.\n```\n","title":"Область видимості","contentType":2,"navigation":[{"language.oop5.decon.md":"« Конструктори та деструктори"},{"language.oop5.inheritance.md":"Наслідування »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}