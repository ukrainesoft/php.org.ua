{"pageProps":{"page":{"slug":"class.iterator.md","content":"# Інтерфейс Iterator\n\n(PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nІнтерфейс для зовнішніх ітераторів чи об'єктів, які можуть повторювати себе зсередини.\n\n## Огляд інтерфейсів\n\n```classsynopsis\n\n    interface Iterator\n\n    extends\n      Traversable {\n\n    /* Методы */\n    \n   public current(): mixed\npublic key(): mixed\npublic next(): void\npublic rewind(): void\npublic valid(): bool\n\n   }\n```\n\n## Обумовлені ітератори\n\nPHP вже надає деякі ітератори для багатьох повсякденних завдань. Дивіться список [ітераторів SPL](spl.iterators.md) для детальнішої інформації.\n\n## Приклади\n\n**Приклад #1 Основи використання**\n\nЦей приклад демонструє, у якому порядку викликаються методи, коли використовується з ітератором оператор. [foreach](control-structures.foreach.md)\n\n```php\n<?php\nclass myIterator implements Iterator {\n    private $position = 0;\n    private $array = array(\n        \"firstelement\",\n        \"secondelement\",\n        \"lastelement\",\n    );\n\n    public function __construct() {\n        $this->position = 0;\n    }\n\n    public function rewind(): void {\n        var_dump(__METHOD__);\n        $this->position = 0;\n    }\n\n    #[\\ReturnTypeWillChange]\n    public function current() {\n        var_dump(__METHOD__);\n        return $this->array[$this->position];\n    }\n\n    #[\\ReturnTypeWillChange]\n    public function key() {\n        var_dump(__METHOD__);\n        return $this->position;\n    }\n\n    public function next(): void {\n        var_dump(__METHOD__);\n        ++$this->position;\n    }\n\n    public function valid(): bool {\n        var_dump(__METHOD__);\n        return isset($this->array[$this->position]);\n    }\n}\n\n$it = new myIterator;\n\nforeach($it as $key => $value) {\n    var_dump($key, $value);\n    echo \"\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nstring(18) \"myIterator::rewind\"\nstring(17) \"myIterator::valid\"\nstring(19) \"myIterator::current\"\nstring(15) \"myIterator::key\"\nint(0)\nstring(12) \"firstelement\"\n\nstring(16) \"myIterator::next\"\nstring(17) \"myIterator::valid\"\nstring(19) \"myIterator::current\"\nstring(15) \"myIterator::key\"\nint(1)\nstring(13) \"secondelement\"\n\nstring(16) \"myIterator::next\"\nstring(17) \"myIterator::valid\"\nstring(19) \"myIterator::current\"\nstring(15) \"myIterator::key\"\nint(2)\nstring(11) \"lastelement\"\n\nstring(16) \"myIterator::next\"\nstring(17) \"myIterator::valid\"\n```\n\n## Дивіться також\n\nСмотрите также раздел[Ітератори об'єктів](language.oop5.iterations.md)\n\n## Зміст\n\n-   [Iterator::current](iterator.current.md)— Повернення поточного елемента\n-   [Iterator::key](iterator.key.md)— Повертає ключ поточного елемента\n-   [Iterator::next](iterator.next.md)— Переходить до наступного елементу\n-   [Iterator::rewind](iterator.rewind.md) \\- Повертає ітератор на перший елемент\n-   [Iterator::valid](iterator.valid.md) \\- Перевіряє коректність поточної позиції\n","title":"Інтерфейс Iterator","contentType":2,"navigation":[{"class.traversable.md":"« Traversable"},{"iterator.current.md":"Iterator::current »"},{"index.md":"PHP Manual"},{"reserved.interfaces.md":"Вбудовані інтерфейси та класи"}]}},"__N_SSG":true}