{"pageProps":{"page":{"slug":"function.socket-create-pair.md","content":"# socket\\_create\\_pair\n\n(PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8)\n\nsocket\\_create\\_pair - Створює пару нерозрізнених сокетів і зберігає їх у масиві\n\n### Опис\n\n```methodsynopsis\nsocket_create_pair(    int $domain,    int $type,    int $protocol,    array &$pair): bool\n```\n\n**socket\\_create\\_pair()** створює два сполучених і нерозрізняються сокети, і зберігає їх у масиві `pair`. Ця функція зазвичай використовується IPC (міжпроцесної взаємодії).\n\n### Список параметрів\n\n`domain`\n\nПараметр`domain` визначає сімейство протоколів, яке використовуватиметься сокетом. Перегляньте їх повний список в описі функції [socket\\_create()](function.socket-create.md)\n\n`type`\n\nПараметр`type` вказує тип комунікації, яка використовуватиметься сокетом. Перегляньте їх повний список в описі функції [socket\\_create()](function.socket-create.md)\n\n`protocol`\n\nПараметр`protocol` встановлює певний протокол у зазначеному сімействі протоколів `domain`, який використовуватиметься у зв'язку з отриманими сокетами. Відповідне значення може бути отримано на ім'я за допомогою функції [getprotobyname()](function.getprotobyname.md). Якщо потрібний протокол TCP чи UDP, то відповідні константи **`SOL_TCP`** і **`SOL_UDP`** також можуть бути використані.\n\nДивіться повний список протоколів, що підтримуються в описі функції [socket\\_create()](function.socket-create.md)\n\n`pair`\n\nПосилання на масив, в який буде вставлено два екземпляри [Socket](class.socket.md)\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `pair` є посиланням на масив екземплярів [Socket](class.socket.md); раніше був посиланням на масив ресурсів (resource). |\n\n### Приклади\n\n**Приклад #1 Приклад використання** socket\\_create\\_pair()\\*\\*\\*\\*\n\n```php\n<?php\n$sockets = array();\n\n/* На Windows нам нужно использовать AF_INET */\n$domain = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? AF_INET : AF_UNIX);\n\n/* Создаём пару сокетов */\nif (socket_create_pair($domain, SOCK_STREAM, 0, $sockets) === false) {\n    echo \"Не получилось выполнить socket_create_pair. Причина: \".socket_strerror(socket_last_error());\n}\n/* Отправляем и получаем данные */\nif (socket_write($sockets[0], \"ABCdef123\\n\", strlen(\"ABCdef123\\n\")) === false) {\n    echo \"Не получилось выполнить socket_write(). Причина: \".socket_strerror(socket_last_error($sockets[0]));\n}\nif (($data = socket_read($sockets[1], strlen(\"ABCdef123\\n\"), PHP_BINARY_READ)) === false) {\n    echo \"Не получилось выполнить socket_read(). Причина: \".socket_strerror(socket_last_error($sockets[1]));\n}\nvar_dump($data);\n\n/* Закрываем сокеты */\nsocket_close($sockets[0]);\nsocket_close($sockets[1]);\n?>\n```\n\n**Приклад #2 Приклад використання** socket\\_create\\_pair()**в IPC**\n\n```php\n<?php\n$ary = array();\n$strone = 'Сообщение от родительского процесса.';\n$strtwo = 'Сообщение от дочернего процесса.';\n\nif (socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $ary) === false) {\n    echo \"Не получилось выполнить socket_create_pair(). Причина: \".socket_strerror(socket_last_error());\n}\n$pid = pcntl_fork();\nif ($pid == -1) {\n    echo 'Не могу создать новый процесс.';\n} elseif ($pid) {\n    /*родительский процесс*/\n    socket_close($ary[0]);\n    if (socket_write($ary[1], $strone, strlen($strone)) === false) {\n        echo \"Не получилось выполнить socket_write(). Причина: \".socket_strerror(socket_last_error($ary[1]));\n    }\n    if (socket_read($ary[1], strlen($strtwo), PHP_BINARY_READ) == $strtwo) {\n        echo \"Получено $strtwo\\n\";\n    }\n    socket_close($ary[1]);\n} else {\n    /*дочерний процесс*/\n    socket_close($ary[1]);\n    if (socket_write($ary[0], $strtwo, strlen($strtwo)) === false) {\n        echo \"Не получилось выполнить socket_write(). Причина: \".socket_strerror(socket_last_error($ary[0]));\n    }\n    if (socket_read($ary[0], strlen($strone), PHP_BINARY_READ) == $strone) {\n        echo \"Получено $strone\\n\";\n    }\n    socket_close($ary[0]);\n}\n?>\n```\n\n### Дивіться також\n\n-   [socket\\_create()](function.socket-create.md) \\- створює сокет (кінцеву точку для обміну інформацією)\n-   [socket\\_create\\_listen()](function.socket-create-listen.md) \\- Відкриває сокет на вказаному порту для прийняття з'єднань\n-   [socket\\_bind()](function.socket-bind.md) \\- Прив'язує ім'я до сокету\n-   [socket\\_listen()](function.socket-listen.md) \\- Прослуховує вхідні з'єднання на сокеті\n-   [socket\\_last\\_error()](function.socket-last-error.md) \\- Повертає останню помилку на сокеті\n-   [socket\\_strerror()](function.socket-strerror.md) \\- Повертає рядок, що описує помилку сокету\n","title":"socket\\_create\\_pair","contentType":2,"navigation":[{"function.socket-create-listen.md":"« socket\\_create\\_listen"},{"function.socket-create.md":"socket\\_create »"},{"index.md":"PHP Manual"},{"ref.sockets.md":"Опції сокету"}]}},"__N_SSG":true}