{"pageProps":{"page":{"slug":"pdo.lobs.md","content":"# Великі об'єкти (LOB)\n\nІноді для роботи програми необхідно зберігати великі порції даних у базі. Зазвичай під великим розуміють обсяг даних \"близько 4 кілобайт або більше\", хоча деякі бази даних можуть спокійно обробляти до 32 кілобайт, перш ніж розмір даних стає \"великим\". Великі об'єкти можуть бути текстовими або бінарними. PDO дозволяє працювати з такими об'єктами шляхом встановлення типу даних **`PDO::PARAM_LOB`** у методах [PDOStatement::bindParam()](pdostatement.bindparam.md) або [PDOStatement::bindColumn()](pdostatement.bindcolumn.md). . **`PDO::PARAM_LOB`** повідомляє PDO, що потрібно позначити ці дані як потік. І відповідно працювати з такими об'єктами можна, використовуючи [API потоків PHP](ref.stream.md)\n\n**Приклад #1 Виведення зображення, що зберігається у базі даних**\n\nУ цьому прикладі змінної $lob задають у відповідність великий об'єкт LOB, а потім відсилають її до браузера за допомогою функції [fpassthru()](function.fpassthru.md). Оскільки LOB представляється як потоку, з ним можуть працювати такі функції, як [fgets()](function.fgets.md) [fread()](function.fread.md) і [stream\\_get\\_contents()](function.stream-get-contents.md)\n\n```php\n<?php\n$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');\n$stmt = $db->prepare(\"select contenttype, imagedata from images where id=?\");\n$stmt->execute(array($_GET['id']));\n$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);\n$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);\n$stmt->fetch(PDO::FETCH_BOUND);\n\nheader(\"Content-Type: $type\");\nfpassthru($lob);\n?>\n```\n\n**Приклад #2 Вставлення зображення до бази даних**\n\nУ цьому прикладі буде відкриватися файл із зображенням, його файловий покажчик передається PDO, який у свою чергу вставляє зображення до бази у вигляді LOB. PDO витягне вміст файлу і помістить його в базу найбільш ефективним способом.\n\n```php\n<?php\n$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');\n$stmt = $db->prepare(\"insert into images (id, contenttype, imagedata) values (?, ?, ?)\");\n$id = get_new_id(); // какая-то функция для выделения нового ID\n\n// предположим, что мы находимся на странице загрузки файлов на удалённый сервер\n\n$fp = fopen($_FILES['file']['tmp_name'], 'rb');\n\n$stmt->bindParam(1, $id);\n$stmt->bindParam(2, $_FILES['file']['type']);\n$stmt->bindParam(3, $fp, PDO::PARAM_LOB);\n\n$db->beginTransaction();\n$stmt->execute();\n$db->commit();\n?>\n```\n\n**Приклад #3 Вставлення зображення до бази даних: Oracle**\n\nУ випадку з базами Oracle потрібен інший синтаксис для вилучення вмісту файлу і приміщення в базу. Також необхідно виконувати вставку в рамках транзакції, інакше вставлений LOB буде зафіксований у базі з нульовою довжиною, оскільки якщо не позначити межі транзакції, зміни фіксуватимуться після кожного виконаного запиту.\n\n```php\n<?php\n$db = new PDO('oci:', 'scott', 'tiger');\n$stmt = $db->prepare(\"insert into images (id, contenttype, imagedata) \" .\n\"VALUES (?, ?, EMPTY_BLOB()) RETURNING imagedata INTO ?\");\n$id = get_new_id(); // какая-то функция для выделения ID\n\n// предположим, что мы находимся на странице загрузки файлов на удалённый сервер\n\n$fp = fopen($_FILES['file']['tmp_name'], 'rb');\n\n$stmt->bindParam(1, $id);\n$stmt->bindParam(2, $_FILES['file']['type']);\n$stmt->bindParam(3, $fp, PDO::PARAM_LOB);\n\n$db->beginTransaction();\n$stmt->execute();\n$db->commit();\n?>\n```\n","title":"Великі об'єкти (LOB)","contentType":2,"navigation":[{"pdo.error-handling.md":"« Помилки та їх обробка"},{"class.pdo.md":"PDO »"},{"index.md":"PHP Manual"},{"book.pdo.md":"PDO"}]}},"__N_SSG":true}