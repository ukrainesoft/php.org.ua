{"pageProps":{"page":{"slug":"function.assert.md","content":"# assert\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nassert — Перевіряє затвердження\n\n### Опис\n\n```methodsynopsis\nassert(mixed $assertion, Throwable|string|null $description = null): bool\n```\n\nФункция**assert()** — дозволяє визначення очікувань: твердження, які набувають чинності у середовищах розробки та тестування, але оптимізовані так, що у виробничому середовищі мають нульову вартість.\n\nЗатвердження слід використовувати лише як налагоджувальну функцію. Один із варіантів їх використання — перевірка на осудність попередніх умов, які завжди мають бути **`true`** і якщо вони не виконуються, це свідчить про помилки програмування. Інший випадок використання – переконатися в наявності певних можливостей, наприклад, функцій модуля або певних обмежень та можливостей системи.\n\nОскільки твердження можуть бути налаштовані на відмову від них, їх *не* слід використовувати для звичайних операцій під час виконання, як-от перевірка вхідних параметрів. Як правило, код повинен поводитися так, як очікується, навіть якщо перевірка тверджень вимкнена.\n\nФункция**assert()** перевіряє, чи виконується очікування, задане у параметрі `assertion`. Якщо ні, і в результаті повернулося значення **`false`**, то функция**assert()** виконає задану конфігурацією дію.\n\nПоведение конструкции**assert()** визначається наступними налаштуваннями INI:\n\n**Опції налаштування конструкції assert**\n\n| Имя | По умолчанию | Опис | Список изменений |\n| --- | --- | --- | --- |\n| [zend.assertions](ini.core.md#ini.zend.assertions) |  |  |  |\n\n-   : генерує та виконує код (режим розробки)\n-   : генерує код, але перестрибує через нього під час виконання\n-   `-1`: не генерує код (робочий режим)\n\n[assert.active](info.configuration.md#ini.assert.active) **`true`** | Якщо **`false`**, функция**assert()** не перевіряє очікування та повертає **`true`**, безоговорочно. | Устарела с PHP 8.3.0. | |[assert.callback](info.configuration.md#ini.assert.callback) **`null`** | Функція, що визначається користувачем, викликана у разі невдалої перевірки затвердження. Її сигнатура має бути такою:\n\n```methodsynopsis\nassert_callback(    string $file,    int $line,    null $assertion,    string $description = ?): void\n```\n\nЗастаріла із PHP 8.3.0. | До PHP 8.0.0 сигнатура callback-функції має бути:\n\n```methodsynopsis\nassert_callback(    string $file,    int $line,    string $assertion,    string $description = ?): void\n```\n\n[assert.exception](info.configuration.md#ini.assert.exception) **`true`** | Якщо **`true`**, буде викинута помилка [AssertionError](class.assertionerror.md)в случае неудачной проверки утверждения. | Устарела с PHP 8.3.0. | |[assert.bail](info.configuration.md#ini.assert.bail) **`false`** | Якщо **`true`**, виконання PHP-скрипту перерветься у разі невдалої перевірки затвердження. | Застаріла із PHP 8.3.0. | | [assert.warning](info.configuration.md#ini.assert.warning) **`true`** | Якщо **`true`**, у разі невдалої перевірки затвердження буде видано помилку рівня **`E_WARNING`**. Ця INI-настройка неефективна, якщо включена директива [assert.exception](info.configuration.md#ini.assert.exception)| Устарела с PHP 8.3.0. |\n\n### Список параметрів\n\n`assertion`\n\nБудь-який вираз, що повертає значення, яке буде виконано, а результат використовується для вказівки того, чи вдалася чи не вдалася перевірка затвердження.\n\n**Увага**\n\nДо версії PHP 8.0.0, якщо параметр `assertion` був рядком (string), він інтерпретований як PHP-код і виконувався за допомогою функції [eval()](function.eval.md). Цей рядок передавався в callback-функцію як третій аргумент. Ця поведінка *ЗАСТАРІЛО* в PHP 7.2.0 та *ВИДАЛЕНО* у PHP 8.0.0.\n\n`description`\n\nЯкщо параметр `description` є екземпляром класу [Throwable](class.throwable.md), він буде викинутий лише в тому випадку, якщо перевірка затвердження `assertion` не вдастся.\n\n> **Зауваження** :\n> \n> Починаючи з PHP 8.0.0, це робиться *до* виклику потенційно певної callback-функції затвердження.\n\n> **Зауваження** :\n> \n> Починаючи з PHP 8.0.0, об'єкт (object) буде викинутий незалежно від конфігурації параметра [assert.exception](info.configuration.md#ini.assert.exception)\n\n> **Зауваження** :\n> \n> Начиная с PHP 8.0.0, параметр[assert.bail](info.configuration.md#ini.assert.bail) немає жодного ефекту у разі.\n\nЯкщо параметр `description` є рядком (string), це повідомлення використовуватиметься у разі викидання виключення чи попередження. Необов'язковий опис, який буде включено до повідомлення, якщо перевірка затвердження `assertion` не вдастся.\n\nЯкщо параметр `description` опущений. Під час компіляції створюється опис за промовчанням, що дорівнює вихідному коду для виклику **assert()**\n\n### Значення, що повертаються\n\nФункция**assert()** завжди повертатиме значення \\*\\*`true`\\*\\*якщо істинно хоча б одне з наступних тверджень:\n\n-   `zend.assertions=0`\n-   `zend.assertions=-1`\n-   `assert.exception=1`\n-   `assert.bail=1`\n-   Об'єкт виключення користувача передано до параметра`description`\n\nЯкщо жодна з умов не є істинною, функція **assert()** поверне значення **`true`**, якщо параметр `assertion` правда, інакше поверне значення **`false`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.0 | Всі INI-налаштування `assert.`устарели. |\n| 8.0.0 | Функция**assert()** більше не буде оцінювати строкові аргументи, натомість вони розглядатимуться як будь-який інший аргумент. Замість `assert('$a == $b')` слід використовувати assert($a == $b). Директива `assert.quiet_eval` php.ini та константа **`ASSERT_QUIET_EVAL`** також були видалені, оскільки вони більше не матимуть жодного ефекту. |\n| 8.0.0 | Якщо параметр `description` є екземпляром класу [Throwable](class.throwable.md), об'єкт викидається у разі невдалої перевірки затвердження, незалежно від значення [assert.exception](info.configuration.md#ini.assert.exception) |\n| 8.0.0 | Якщо параметр `description` є екземпляром класу [Throwable](class.throwable.md), користувальницька callback-функція не викликається, навіть якщо вона встановлена. |\n| 8.0.0 | Оголошення функції з ім'ям `assert()` всередині простору імен більше не допускається та видає помилку рівня **`E_COMPILE_ERROR`** |\n| 7.3.0 | Оголошення функції `assert()` усередині простору імен застаріло. Таке оголошення тепер видає помилку рівня **`E_DEPRECATED`** |\n| 7.2.0 | Використання рядка (string) як `assertion` застаріло. Тепер воно видає помилку рівня **`E_DEPRECATED`**, коли значення та [assert.active](info.configuration.md#ini.assert.active) і [zend.assertions](ini.core.md#ini.zend.assertions) одно |\n\n### Приклади\n\n**Приклад #1 Приклад використання функції** assert()\\*\\*\\*\\*\n\n```php\n<?php\nassert(1 > 2);\necho 'Привет!';\n```\n\nЯкщо твердження включені ([`zend.assertions=1`](ini.core.md#ini.zend.assertions)), то приклад вище виведе:\n\n```\nFatal error: Uncaught AssertionError: assert(1 > 2) in example.php:2\nStack trace:\n#0 example.php(2): assert(false, 'assert(1 > 2)')\n#1 {main}\n  thrown in example.php on line 2\n```\n\nЯкщо твердження вимкнено (`zend.assertions=0`or`zend.assertions=-1`), то приклад вище виведе:\n\n```\nПривет!\n```\n\n**Приклад #2 Приклад повідомлення користувача**\n\n```php\n<?php\nassert(1 > 2, \"Ожидается, что один больше двух\");\necho 'Привет!';\n```\n\nЯкщо твердження включені, приклад вище виведе:\n\n```\nFatal error: Uncaught AssertionError: Ожидается, что один больше двух in example.php:2\nStack trace:\n#0 example.php(2): assert(false, 'Expected one to...')\n#1 {main}\n  thrown in example.php on line 2\n```\n\nЯкщо твердження вимкнені, то приклад виведе:\n\n```\nПривет!\n```\n\n**Приклад #3 Приклад використання користувальницького класу виключення**\n\n```php\n<?php\nclass ArithmeticAssertionError extends AssertionError {}\n\nassert(1 > 2, new ArithmeticAssertionError(\"Ожидается, что один больше двух\"));\necho 'Hi!';\n```\n\nЯкщо твердження включені, то приклад виведе:\n\n```\nFatal error: Uncaught ArithmeticAssertionError: Ожидается, что один больше двух in example.php:4\nStack trace:\n#0 {main}\n  thrown in example.php on line 4\n```\n\nЯкщо твердження вимкнені, приклад виведе:\n\n```\nПривет!\n```\n\n### Дивіться також\n\n-   [assert\\_options()](function.assert-options.md) \\- Встановлення та отримання налаштувань механізму перевірки тверджень\n","title":"assert","contentType":2,"navigation":[{"function.assert-options.md":"« assert\\_options"},{"function.cli-get-process-title.md":"cli\\_get\\_process\\_title »"},{"index.md":"PHP Manual"},{"ref.info.md":"Опції PHP/інформаційні функції"}]}},"__N_SSG":true}