{"pageProps":{"page":{"slug":"class.phar.md","content":"# Клас Phar\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 1.0.0)\n\n## Вступ\n\nКлас Phar надає високорівневий інтерфейс для доступу та створення архівів phar.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class Phar\n    \n\n    \n     extends\n      RecursiveDirectoryIterator\n    \n\n    \n     implements\n      Countable,\n\n     ArrayAccess {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      FilesystemIterator::CURRENT_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_PATHNAME;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_FILEINFO;\npublic\n     const\n     int\n      FilesystemIterator::CURRENT_AS_SELF;\npublic\n     const\n     int\n      FilesystemIterator::KEY_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::KEY_AS_PATHNAME;\npublic\n     const\n     int\n      FilesystemIterator::FOLLOW_SYMLINKS;\npublic\n     const\n     int\n      FilesystemIterator::KEY_AS_FILENAME;\npublic\n     const\n     int\n      FilesystemIterator::NEW_CURRENT_AND_KEY;\npublic\n     const\n     int\n      FilesystemIterator::OTHER_MODE_MASK;\npublic\n     const\n     int\n      FilesystemIterator::SKIP_DOTS;\npublic\n     const\n     int\n      FilesystemIterator::UNIX_PATHS;\n\n\n    /* Константы */\n    const\n     int\n      BZ2;\n\n    const\n     int\n      GZ;\n\n    const\n     int\n      NONE;\n\n    const\n     int\n      PHAR;\n\n    const\n     int\n      TAR;\n\n    const\n     int\n      ZIP;\n\n    const\n     int\n      COMPRESSED;\n\n    const\n     int\n      PHP;\n\n    const\n     int\n      PHPS;\n\n    const\n     int\n      MD5;\n\n    const\n     int\n      OPENSSL;\n\n    const\n     int\n      OPENSSL_SHA256;\n\n    const\n     int\n      OPENSSL_SHA512;\n\n    const\n     int\n      SHA1;\n\n    const\n     int\n      SHA256;\n\n    const\n     int\n      SHA512;\n\n\n    /* Методы */\n    \n   public __construct(string $filename, int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS, ?string $alias = null)\n\n    public addEmptyDir(string $directory): void\npublic addFile(string $filename, ?string $localName = null): void\npublic addFromString(string $localName, string $contents): void\nfinal public static apiVersion(): string\npublic buildFromDirectory(string $directory, string $pattern = \"\"): array\npublic buildFromIterator(Traversable $iterator, ?string $baseDirectory = null): array\nfinal public static canCompress(int $compression = 0): bool\nfinal public static canWrite(): bool\npublic compress(int $compression, ?string $extension = null): ?Phar\npublic compressFiles(int $compression): void\npublic convertToData(?int $format = null, ?int $compression = null, ?string $extension = null): ?PharData\npublic convertToExecutable(?int $format = null, ?int $compression = null, ?string $extension = null): ?Phar\npublic copy(string $from, string $to): bool\npublic count(int $mode = COUNT_NORMAL): int\nfinal public static createDefaultStub(?string $index = null, ?string $webIndex = null): string\npublic decompress(?string $extension = null): ?Phar\npublic decompressFiles(): bool\npublic delMetadata(): bool\npublic delete(string $localName): bool\npublic extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool\npublic getAlias(): ?string\npublic getMetadata(array $unserializeOptions = []): mixed\npublic getModified(): bool\npublic getPath(): string\npublic getSignature(): array|false\npublic getStub(): string\nfinal public static getSupportedCompression(): array\nfinal public static getSupportedSignatures(): array\npublic getVersion(): string\npublic hasMetadata(): bool\nfinal public static interceptFileFuncs(): void\npublic isBuffering(): bool\npublic isCompressed(): int|false\npublic isFileFormat(int $format): bool\nfinal public static isValidPharFilename(string $filename, bool $executable = true): bool\npublic isWritable(): bool\nfinal public static loadPhar(string $filename, ?string $alias = null): bool\nfinal public static mapPhar(?string $alias = null, int $offset = 0): bool\nfinal public static mount(string $pharPath, string $externalPath): void\nfinal public static mungServer(array $variables): void\npublic offsetExists(string $localName): bool\npublic offsetGet(string $localName): SplFileInfo\npublic offsetSet(string $localName, resource|string $value): void\npublic offsetUnset(string $localName): void\nfinal public static running(bool $returnPhar = true): string\npublic setAlias(string $alias): bool\npublic setDefaultStub(?string $index = null, ?string $webIndex = null): bool\npublic setMetadata(mixed $metadata): void\npublic setSignatureAlgorithm(int $algo, ?string $privateKey = null): void\npublic setStub(resource|string $stub, int $length = -1): bool\npublic startBuffering(): void\npublic stopBuffering(): void\nfinal public static unlinkArchive(string $filename): bool\nfinal public static webPhar(    ?string $alias = null,    ?string $index = null,    ?string $fileNotFoundScript = null,    array $mimeTypes = [],    ?callable $rewrite = null): void\n\n    public __destruct()\n\n\n    /* Наследуемые методы */\n    public RecursiveDirectoryIterator::getChildren(): RecursiveDirectoryIterator\npublic RecursiveDirectoryIterator::getSubPath(): string\npublic RecursiveDirectoryIterator::getSubPathname(): string\npublic RecursiveDirectoryIterator::hasChildren(bool $allowLinks = false): bool\npublic RecursiveDirectoryIterator::key(): string\npublic RecursiveDirectoryIterator::next(): void\npublic RecursiveDirectoryIterator::rewind(): void\n\n    public FilesystemIterator::current(): string|SplFileInfo|FilesystemIterator\npublic FilesystemIterator::getFlags(): int\npublic FilesystemIterator::key(): string\npublic FilesystemIterator::next(): void\npublic FilesystemIterator::rewind(): void\npublic FilesystemIterator::setFlags(int $flags): void\n\n    public DirectoryIterator::current(): mixed\npublic DirectoryIterator::getBasename(string $suffix = \"\"): string\npublic DirectoryIterator::getExtension(): string\npublic DirectoryIterator::getFilename(): string\npublic DirectoryIterator::isDot(): bool\npublic DirectoryIterator::key(): mixed\npublic DirectoryIterator::next(): void\npublic DirectoryIterator::rewind(): void\npublic DirectoryIterator::seek(int $offset): void\npublic DirectoryIterator::__toString(): string\npublic DirectoryIterator::valid(): bool\n\n    public SplFileInfo::getATime(): int|false\npublic SplFileInfo::getBasename(string $suffix = \"\"): string\npublic SplFileInfo::getCTime(): int|false\npublic SplFileInfo::getExtension(): string\npublic SplFileInfo::getFileInfo(?string $class = null): SplFileInfo\npublic SplFileInfo::getFilename(): string\npublic SplFileInfo::getGroup(): int|false\npublic SplFileInfo::getInode(): int|false\npublic SplFileInfo::getLinkTarget(): string|false\npublic SplFileInfo::getMTime(): int|false\npublic SplFileInfo::getOwner(): int|false\npublic SplFileInfo::getPath(): string\npublic SplFileInfo::getPathInfo(?string $class = null): ?SplFileInfo\npublic SplFileInfo::getPathname(): string\npublic SplFileInfo::getPerms(): int|false\npublic SplFileInfo::getRealPath(): string|false\npublic SplFileInfo::getSize(): int|false\npublic SplFileInfo::getType(): string|false\npublic SplFileInfo::isDir(): bool\npublic SplFileInfo::isExecutable(): bool\npublic SplFileInfo::isFile(): bool\npublic SplFileInfo::isLink(): bool\npublic SplFileInfo::isReadable(): bool\npublic SplFileInfo::isWritable(): bool\npublic SplFileInfo::openFile(string $mode = \"r\", bool $useIncludePath = false, ?resource $context = null): SplFileObject\npublic SplFileInfo::setFileClass(string $class = SplFileObject::class): void\npublic SplFileInfo::setInfoClass(string $class = SplFileInfo::class): void\npublic SplFileInfo::__toString(): string\n\n   }\n```\n\n## Зміст\n\n-   [Phar::addEmptyDir](phar.addemptydir.md)— Додає в phar-архів порожню директорію\n-   [Phar::addFile](phar.addfile.md)— Додає в phar-архів файл із файлової системи\n-   [Phar::addFromString](phar.addfromstring.md)— Додає в phar-архів файл із рядка\n-   [Phar::apiVersion](phar.apiversion.md)— Повертає версію API\n-   [Phar::buildFromDirectory](phar.buildfromdirectory.md)— Створює phar-архів із файлів, розташованих усередині директорії\n-   [Phar::buildFromIterator](phar.buildfromiterator.md) \\- Створює phar-архів з ітератора\n-   [Phar::canCompress](phar.cancompress.md)— Перевіряє, чи модуль phar підтримує стиснення з використанням zlib або bzip2\n-   [Phar::canWrite](phar.canwrite.md)— Перевіряє, чи підтримує модуль phar збереження та створення phar-архівів\n-   [Phar::compress](phar.compress.md) \\- Стискає весь Phar-архів за допомогою Gzip- або Bzip2-стиснення\n-   [Phar::compressFiles](phar.compressfiles.md)— Стискає всі файли у поточному Phar-архіві\n-   [Phar::\\_\\_construct](phar.construct.md)— Створює об'єкт Phar-архіву\n-   [Phar::convertToData](phar.converttodata.md)— Конвертує phar-архів у tar-або zip-файл, що не виконується.\n-   [Phar::convertToExecutable](phar.converttoexecutable.md)— Конвертує phar-архів в інший формат файлу, що виконується.\n-   [Phar::copy](phar.copy.md)— Копіює один файл усередині phar-архіву в інший новий файл усередині phar-архіву\n-   [Phar::count](phar.count.md)— Повертає кількість записів (файлів) у Phar-архіві\n-   [Phar::createDefaultStub](phar.createdefaultstub.md)— Створити заглушку у форматі phar-архіву\n-   [Phar::decompress](phar.decompress.md) \\- Розпаковує весь Phar-архів\n-   [Phar::decompressFiles](phar.decompressfiles.md)— Розпаковує всі файли в поточному Phar-архіві\n-   [Phar::delMetadata](phar.delmetadata.md)— Видалити глобальні метадані в архіві phar\n-   [Phar::delete](phar.delete.md)— Видаляє файл усередині phar-архіву\n-   [Phar::\\_\\_destruct](phar.destruct.md)— Знищує об'єкт архіву Phar\n-   [Phar::extractTo](phar.extractto.md)— Витягти вміст phar-архіву в директорію\n-   [Phar::getAlias](phar.getalias.md) \\- Отримати псевдонім для Phar\n-   [Phar::getMetadata](phar.getmetadata.md)— Витягти метадані phar-архіву\n-   [Phar::getModified](phar.getmodified.md)— Визначити, чи змінювався phar-архів\n-   [Phar::getPath](phar.getpath.md)— Отримати реальний шлях до Phar-архіву на диску\n-   [Phar::getSignature](phar.getsignature.md)— Отримати MD5/SHA1/SHA256/SHA512/OpenSSL підпис Phar-архіву\n-   [Phar::getStub](phar.getstub.md)— Отримати завантажувач PHP або завантажувач заглушки Phar-архіву\n-   [Phar::getSupportedCompression](phar.getsupportedcompression.md)— Повертає масив підтримуваних алгоритмів стиснення.\n-   [Phar::getSupportedSignatures](phar.getsupportedsignatures.md)— Отримати масив підтримуваних алгоритмів підпису архіву\n-   [Phar::getVersion](phar.getversion.md)— Отримати версію Phar-архіву\n-   [Phar::hasMetadata](phar.hasmetadata.md)— Перевірити, чи містить phar-архів глобальні метадані\n-   [Phar::interceptFileFuncs](phar.interceptfilefuncs.md) \\- Вказує phar перехоплювати fopen, file\\_get\\_contents, opendir та всі stat-функції\n-   [Phar::isBuffering](phar.isbuffering.md)— Перевірити, чи будуть операції з Phar-архівом буферизовані чи записані безпосередньо на диск\n-   [Phar::isCompressed](phar.iscompressed.md) \\- Повертає Phar::GZ або PHAR::BZ2, якщо phar-архів стиснутий повністю (.tar.gz/tar.bz і так далі)\n-   [Phar::isFileFormat](phar.isfileformat.md)— Перевірити, що phar-архів має заданий формат (tar/phar/zip)\n-   [Phar::isValidPharFilename](phar.isvalidpharfilename.md)— Перевіряє, що ім'я файлу є коректним ім'ям phar-архіву.\n-   [Phar::isWritable](phar.iswritable.md) \\- Перевіряє, чи можна модифікувати phar-архів\n-   [Phar::loadPhar](phar.loadphar.md)— Завантажити phar-архів із псевдонімом\n-   [Phar::mapPhar](phar.mapphar.md)— Прочитати поточний запущений phar-архів та зареєструвати його маніфест\n-   [Phar::mount](phar.mount.md)— Монтування зовнішнього шляху або файлу до віртуального шляху в phar-архіві\n-   [Phar::mungServer](phar.mungserver.md) \\- Визначити список до чотирьох $\\_SERVER-змінних, які мають бути змінені для запуску\n-   [Phar::offsetExists](phar.offsetexists.md)— Визначити, чи є файл у архіві\n-   [Phar::offsetGet](phar.offsetget.md)— Отримати PharFileInfo об'єкт для конкретного файлу\n-   [Phar::offsetSet](phar.offsetset.md)— Зміна вмісту файлу\n-   [Phar::offsetUnset](phar.offsetunset.md)— Видалити файл із phar-архіву\n-   [Phar::running](phar.running.md)— Отримати повний шлях на диску або повний URL запущеного Phar-архіву\n-   [Phar::setAlias](phar.setalias.md)— Встановити псевдонім для Phar-архіву\n-   [Phar::setDefaultStub](phar.setdefaultstub.md)— Встановити завантажувач PHP або початкову заглушку Phar-архіву в завантажувач за замовчуванням\n-   [Phar::setMetadata](phar.setmetadata.md)— Встановити метадані phar-архіву\n-   [Phar::setSignatureAlgorithm](phar.setsignaturealgorithm.md)— Встановити алгоритм підписання phar-архіву та застосування його\n-   [Phar::setStub](phar.setstub.md)— Встановити завантажувач або заглушку в Phar-архів\n-   [Phar::startBuffering](phar.startbuffering.md)— Запуск буферизації операцій запису, відключаючи запис змін Phar-архіву на диск\n-   [Phar::stopBuffering](phar.stopbuffering.md)— Зупиняє буферизацію та записує всі зміни на диск\n-   [Phar::unlinkArchive](phar.unlinkarchive.md)— Повністю видалити архів із пам'яті та з диска\n-   [Phar::webPhar](phar.webphar.md)— Надсилає запит із браузера у внутрішній файл у phar-архіві\n","title":"Клас Phar","contentType":2,"navigation":[{"phar.fileformat.signature.md":"« Формат підпису Phar"},{"phar.addemptydir.md":"Phar::addEmptyDir »"},{"index.md":"PHP Manual"},{"book.phar.md":"Phar"}]}},"__N_SSG":true}