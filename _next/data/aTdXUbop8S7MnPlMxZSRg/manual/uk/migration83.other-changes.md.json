{"pageProps":{"page":{"slug":"migration83.other-changes.md","content":"## Інші зміни\n\n### Зміни у ядрі\n\n#### Клас FFI\n\nМетод[FFI::load()](ffi.load.md) тепер дозволено в режимі попереднього завантаження, коли опція [opcache.preload\\_user](opcache.configuration.md#ini.opcache.preload-user) - Це поточний користувач системи. Раніше виклик методу [FFI::load()](ffi.load.md) не було можливе під час передзавантаження, якщо налаштування директиви [opcache.preload\\_user](opcache.configuration.md#ini.opcache.preload-user) була встановлена.\n\n#### Менеджер процесів FPM\n\nПеревірка FPM CLI тепер завершується невдачею, якщо шлях до сокету довший, ніж підтримує операційна система.\n\n#### Модуль Opcache\n\nУ CLI та phpdbg SAPIs попереднє завантаження більше не вимагає налаштування директиви [opcache.preload\\_user](opcache.configuration.md#ini.opcache.preload-user) під час запуску від імені користувача root. В інших SAPIs ця директива потрібна при запуску від імені користувача root, тому що передзавантаження виконувалось до того, як SAPI переключиться на непривілейованого користувача.\n\n#### Потоки\n\nБлокування функцією [fread()](function.fread.md) при підключенні до сокету повертається негайно, якщо є будь-які буферизовані дані замість очікування додаткових даних.\n\nПотік пам'яті більше не завершується збоєм, якщо усунення пошуку перевищило кінцеве значення. Натомість пам'ять буде збільшена при наступному записі, а дані між старим кінцем і усуненням заповняться нульовими байтами, аналогічно роботі файлів.\n\nОперации доступа функции[stat()](function.stat.md) на кшталт функції [file\\_exists()](function.file-exists.md) і тепер схожі користуються реальним шляхом замість фактичного шляху потоку. Це відповідає відкриттю потоку.\n\n### Зміни у модулях SAPI\n\n#### Командний рядок (CLI)\n\nПотоки\\*\\*`STDOUT`\\*\\* **`STDERR`** і **`STDIN`** більше не закриваються при знищенні ресурсів, що зазвичай трапляється при завершенні роботи CLI. Однак, все ще можна явно закрити ці потоки через функцію [fclose()](function.fclose.md) та схожі.\n\n### Змінені функції\n\n#### Ядро\n\nУ функцію [gc\\_status()](function.gc-status.md)добавлено 8 следующих полей:\n\n-   `running` => bool\n-   `protected` => bool\n-   `full` => bool\n-   `buffer_size` => int\n-   `application_time` => float: Повний час роботи програми в секундах (включаючи час, витрачений полем collector\\_time)\n-   `collector_time` => float: Час у секундах, витрачений циклами складання (включаючи час, витрачений полями destructor\\_time та free\\_time)\n-   `destructor_time` => float: Час у секундах, витрачений деструкторами протягом циклу складання\n-   `free_time` => float: Час у секундах, витрачений на звільнення значень під час циклу складання\n\nФункция[class\\_alias()](function.class-alias.md) Тепер підтримує створення псевдонімів внутрішнього класу.\n\nНастройка[open\\_basedir](ini.core.md#ini.open-basedir) з викликом під час виконання функції `ini_set('open_basedir', ...);` більше не приймає шляхів, що містять батьківську директорію ( `.. .` ). Раніше заборонялися тільки шляхи, що починаються з `.. .` . Це можна легко обійти, додавши `./`к пути.\n\nОбробники винятків користувача тепер перехоплюють їх під час завершення роботи.\n\nРезультирующий HTML в функциях[highlight\\_string()](function.highlight-string.md) і [highlight\\_file()](function.highlight-file.md) був змінений. Пробіл між зовнішніми HTML-тегами видалено. Нові рядки та пробіли більше не перетворюються на HTML-сутності. Повний HTML тепер обернутий тегом `<pre>`Внешний тег`<span>` був злитий з тегом `<code>`\n\n#### Модуль Calendar\n\nФункция[easter\\_date()](function.easter-date.md) тепер підтримує роки з 1970 по 2000000000 на 64-бітних системах, раніше вона підтримувала лише роки в діапазоні 1970-2037.\n\n#### Модуль Curl\n\nФункция[curl\\_getinfo()](function.curl-getinfo.md) тепер підтримує дві нові константи: **`CURLINFO_CAPATH`** і **`CURLINFO_CAINFO`**Если параметр option принимает значение**`null`**, будуть представлені два наступні додаткові ключі: `capath`и`cainfo`\n\n#### Модуль DOM\n\nУ метода[DOMCharacterData::appendData()](domcharacterdata.appenddata.md) певний тип значення, що повертається, змінився на true.\n\nУ методов[DOMDocument::loadHTML()](domdocument.loadhtml.md) [DOMDocument::loadHTMLFile()](domdocument.loadhtmlfile.md) і [DOMDocument::loadXML()](domdocument.loadxml.md) попередній тип значення, що повертається, був змінений на bool. Раніше це було задокументовано як `DOMDocument|bool`, але починаючи з PHP 8.0.0 об'єкт класу [DOMDocument](class.domdocument.md) не може бути повернутий, оскільки він більше не може бути спричинений статично.\n\n#### Модуль Gd\n\nСигнатура функции[imagerotate()](function.imagerotate.md)изменилась. Параметр`$ignore_transparent` було видалено, оскільки він ігнорувався з версії PHP 5.5.0.\n\n#### Модуль інтернаціоналізації Intl\n\nФункция[datefmt\\_set\\_timezone()](intldateformatter.settimezone.md) (і її псевдонім - метод [IntlDateformatter::setTimeZone()](intldateformatter.settimezone.md)) тепер повертають значення **`true`** за успішного виконання, раніше вони повертали значення **`null`**\n\nМетод[IntlBreakiterator::setText()](intlbreakiterator.settext.md) тепер повертає значення **`false`**при сбое, ранее он возвращал значение**`null`**. Тепер він повертає значення **`true`** при успішному виконанні, раніше поверталося значення **`null`**\n\nМетод[IntlChar::enumCharNames()](intlchar.enumcharnames.md) тепер повертає логічне значення. Раніше він повертав значення **`null`** при успішному виконанні та значення **`false`** при невдалому завершенні.\n\nМетод[IntlDateFormatter::\\_\\_construct()](intldateformatter.create.md) викидає виняток **`U_ILLEGAL_ARGUMENT_ERROR`** під час встановлення неприпустимого мовного стандарту (локалі).\n\n#### Модуль MBString\n\nФункції [mb\\_strtolower()](function.mb-strtolower.md) і [mb\\_convert\\_case()](function.mb-convert-case.md) дотримуються правил умовного регістру для грецької літери сигма (? → σ). У функції [mb\\_convert\\_case()](function.mb-convert-case.md) умовний регістр застосовується лише для режимів **`MB_CASE_LOWER`** і **`MB_CASE_TITLE`**, але не для **`MB_CASE_LOWER_SIMPLE`** і **`MB_CASE_TITLE_SIMPLE`**\n\nФункция[mb\\_decode\\_mimeheader()](function.mb-decode-mimeheader.md) інтерпретує підкреслення в QPrint-кодованому MIME-кодуванні слів так, як вимагає стандарт RFC 2047; вони перетворюються на прогалини. Підкреслення повинні бути закодовані в `«=5F»` з таких MIME-кодованих слів.\n\nВ редких случаях функция[mb\\_encode\\_mimeheader()](function.mb-encode-mimeheader.md) буде застосовувати кодування передачі до свого вхідного рядка, щоб воно могло передати його як необроблений ASCII PHP 8.2.\n\nФункция[mb\\_encode\\_mimeheader()](function.mb-encode-mimeheader.md) більше не скидає NUL-байти при QPrint-кодуванні вхідного рядка. Раніше це іноді призводило до пошкодження функцією mb\\_encode\\_mimeheader рядків у ряді текстових кодувань, особливо UTF-16 і UTF-32.\n\n\"Нестрогий\" режим функції [mb\\_detect\\_encoding()](function.mb-detect-encoding.md) тепер поводиться як описано у документації. Раніше вона повертала значення \\*\\*`false`\\*\\*якщо той же байт (наприклад, перший) вхідного рядка був неприпустимим у всіх кодуваннях, що перевіряються. У загальному сенсі, вона виключала запропоновані кодування з розгляду, якщо був виявлений неприпустимий байт, і якщо той же вхідний байт виключив всі кодування, що залишилися, все ще знаходяться на розгляді, вона могла повернути значення **`false`**. З іншого боку, якщо всі запропоновані крім одного кодування були виключені з розгляду, вона повертала останню, що залишилася, без урахування того, скільки помилок кодування може зустрітися пізніше в рядку. Це відрізняється від поведінки, описаної в документації, яка говорила: «Якщо параметр strict встановлений у значення false, буде повернуто перше збігається кодування».\n\n#### Модуль mysqli\n\nФункция[mysqli\\_fetch\\_object()](mysqli-result.fetch-object.md) тепер викидає виняток [ValueError](class.valueerror.md)вместо исключения[Exception](class.exception.md), когда в параметр`$constructor_args` передано непустий аргумент, а класі не визначено конструктор.\n\nФункция[mysqli\\_poll()](mysqli.poll.md) тепер викидає виняток [ValueError](class.valueerror.md), коли не передано жодні аргументи параметра `$read`ні аргументи параметра `$error`\n\nУ функції [mysqli\\_field\\_seek()](mysqli-result.field-seek.md)и методе[mysqli\\_result::field\\_seek()](mysqli-result.field-seek.md) тип, що повертається тепер визначений як true замість bool.\n\n#### Програмний інтерфейс ODBC\n\nТеперь для параметра`$enable`функция[odbc\\_autocommit()](function.odbc-autocommit.md)принимает значение\\*\\*`null`**При передаче значения**`null`\\*\\* функція поводитиметься так само, як і при передачі значення тільки для одного параметра, тобто — покаже, чи включена автофіксація чи ні.\n\n#### Модуль PGSQL\n\nФункция[pg\\_fetch\\_object()](function.pg-fetch-object.md) тепер викидає виняток [ValueError](class.valueerror.md)вместо исключения[Exception](class.exception.md), когда в параметр`$constructor_args` передається непустий аргумент, а класі не визначений конструктор.\n\nФункция[pg\\_insert()](function.pg-insert.md) тепер викидає виняток [ValueError](class.valueerror.md) замість помилки рівня **`E_WARNING`**, коли вказана таблиця неприпустима.\n\nФункції [pg\\_insert()](function.pg-insert.md) і [pg\\_convert()](function.pg-convert.md) викидають винятки [ValueError](class.valueerror.md) або [TypeError](class.typeerror.md) замість помилки рівня **`E_WARNING`**, коли значення/тип поля правильно не співпадає з типом PostgreSQL.\n\nПараметр`$row`функций[pg\\_fetch\\_result()](function.pg-fetch-result.md) [pg\\_field\\_prtlen()](function.pg-field-prtlen.md) і [pg\\_field\\_is\\_null()](function.pg-field-is-null.md) тепер може набувати значення **`null`**\n\n#### Модуль Random\n\nЗмінено функції [mt\\_srand()](function.mt-srand.md) і [srand()](function.srand.md)щоб не перевіряти кількість аргументів для визначення, чи потрібно використовувати випадкове початкове число. Передача значення \\*\\*`null`\\*\\*сгенерирует случайное начальное число, при передаче значения воно і буде обрано випадковим числом. Робота функції тепер узгоджена з методом [Random\\\\Engine\\\\Mt19937::\\_\\_construct()](random-engine-mt19937.construct.md)\n\n#### Клас Reflection\n\nТип методу, що повертається [ReflectionClass::getStaticProperties()](reflectionclass.getstaticproperties.md) більше не може набувати значення **`null`**\n\n#### Стандартні функції\n\nВиклик помилки рівня **`E_NOTICE`** у функції [unserialize()](function.unserialize.md) був підвищений до **`E_WARNING`**\n\nФункция[unserialize()](function.unserialize.md) тепер видає помилку рівня \\*\\*`E_WARNING`\\*\\*якщо вхідні дані містять невикористані байти.\n\nФункция[array\\_pad()](function.array-pad.md) тепер обмежена лише максимальною кількістю елементів, які можуть містити масив. Раніше за один раз вона могла додати лише 1048576 елементів.\n\nФункция[strtok()](function.strtok.md) видає помилку рівня **`E_WARNING`**, якщо токен не надано під час запуску токенізації.\n\nФункция[password\\_hash()](function.password-hash.md) тепер буде зв'язувати в ланцюжок базовий виняток [Random\\\\RandomException](class.random-randomexception.md)как исключение[Exception](class.exception.md)свойства`$previous`исключения[ValueError](class.valueerror.md)коли генерація солі завершиться невдачею.\n\nПереданий параметр `$command` функції [proc\\_open()](function.proc-open.md) масив тепер має містити хоча б один непустий елемент. Або буде викинуто виняток [ValueError](class.valueerror.md)\n\nФункция[proc\\_open()](function.proc-open.md) повертає значення **`false`**, якщо передано до параметра `$command` масив - це не допустима команда, а об'єкт ресурсу, який видає попередження пізніше. Це вже було в Windows, але тепер це також має місце, якщо вибрано реалізацію posix\\_spawn (більша частина платформ Linux, BSD та MacOS). Ще існують старі платформи, на яких ця поведінка не змінена, оскільки posix\\_spawn на них не підтримується.\n\nФункції [array\\_sum()](function.array-sum.md) і [array\\_product()](function.array-product.md) тепер попереджають, коли значення масиві не можуть бути перетворені в ціле число/число з плаваючою точкою. Раніше масиви та об'єкти ігнорувалися, тоді як усі інші значення наводилися до цілих чисел (int). Більше того, об'єкти, що визначають числове наведення (наприклад, [GMP](book.gmp.md)), тепер наводяться, а чи не ігноруються.\n\nПараметр`$decimal` функції [number\\_format()](function.number-format.md) тепер правильно обробляє негативні цілі числа. Округлення з негативним значенням для параметра `$decimal` означає, що значення параметра `$num` округляється до встановлених у параметрі `$decimals` значущих цифр перед десятковою точкою. Раніше негативні значення параметра `$decimals` мовчки ігнорувалися і число округлялося до нуля десяткових знаків.\n\nНовий параметр `$before_needle` був доданий у функцію [strrchr()](function.strrchr.md). Він поводиться так само, як його аналог у функціях [strstr()](function.strstr.md) або [stristr()](function.stristr.md)\n\nФункції [str\\_getcsv()](function.str-getcsv.md) і [fgetcsv()](function.fgetcsv.md) тепер повертають порожній рядок замість рядка з одним нульовим байтом для останнього поля, що містить лише незавершене вкладення.\n\n### Інші зміни у модулях\n\n#### Ядро\n\nУказание[операторів інкременту/декременту](language.operators.increment.md) `++` `--`) На логічних значеннях (bool) тепер видає попередження. Це тому, що поки це не дає ефекту, але в майбутньому поводитиметься як `$bool += 1`\n\nУказание[оператора декременту](language.operators.increment.md) `--`) На значення null тепер видає попередження. Це тому, що поки це не дає ефекту, але в майбутньому поводитиметься як `$null -= 1`\n\nВнутрішні об'єкти, що реалізують приведення \\_IS\\_NUMBER, але не оброблювач do\\_operator, який перевизначає складання і віднімання, тепер можна збільшувати або зменшувати на одиницю, начебто виконували вирази `$o += 1`или`$o -= 1`\n\n#### Модуль DOM\n\nМеханізм життєвого циклу модуля DOM був перероблений так, щоб неявно віддалені вузли, як і раніше, можна було отримати. Раніше це призводило до виключення.\n\n#### Клас SQLite3\n\nКласс[SQLite3](class.sqlite3.md) тепер замість виключення [Exception](class.exception.md) викидає виняток [SQLite3Exception](class.sqlite3exception.md)(расширяя класс исключения[Exception](class.exception.md)\n\nКод помилки класу SQLite тепер передається в код помилки виключення, а не входить до повідомлення про помилку.\n\n### Зміни обробки INI-файлу\n\n-   INI-директиви`assert.*`застаріли для конфігураційних налаштувань. Сюди входять наступні налаштування INI:\n    \n    -   [assert.active](info.configuration.md#ini.assert.active)\n    -   [assert.bail](info.configuration.md#ini.assert.bail)\n    -   [assert.callback](info.configuration.md#ini.assert.callback)\n    -   [assert.exception](info.configuration.md#ini.assert.exception)\n    -   [assert.warning](info.configuration.md#ini.assert.warning)\n    \n    Якщо значення настройки дорівнює значенням за промовчанням, повідомлення про старіння не буде видане. Натомість потрібно користуватися INI-директивою[zend.assertions](ini.core.md#ini.zend.assertions)\n    \n-   zend.max\\_allowed\\_stack\\_size - це нова INI-директива, яка встановлює максимальний розмір стека. Можливі значення – це (Визначає максимальний розмір стека процесів або потоків),`-1`(без обмежень) чи позитивне ціле число байтів. Значення за замовчуванням - . Коли вона не може визначити максимальний розмір стека процесів або потоків, буде вибрано відоме системне значення за промовчанням. Установка надмірно великого значення дасть той самий ефект, що й відключення обмеження розміру стека. Максимальний розмір стека для файбер встановлюють директивою fiber.stack\\_size. Викидається помилка[Error](class.error.md)коли стек викликів процесів перевищує встановлений директивою zend.max\\_allowed\\_stack\\_size-zend.reserved\\_stack\\_size розмір байтів, щоб запобігти помилкам сегментації, викликаних переповненням стека, спрощення процесу налагодження. Розмір стека збільшується під час неконтрольованих рекурсій за участю внутрішніх функцій або магічних методів.[\\_\\_toString()](language.oop5.magic.md#object.tostring) [\\_\\_clone()](language.oop5.cloning.md#object.clone) [\\_\\_sleep()](language.oop5.magic.md#object.sleep) [\\_\\_destruct()](language.oop5.decon.md#object.destruct). Це не пов'язано з переповненням стека буфера і не пов'язане з безпекою.\n    \n-   zend.reserved\\_stack\\_size - це нова INI-директива, яка встановлює зарезервований розмір стека в байтах. Це значення віднімається з максимального розміру стека як буфера під час перевірки розміру стека.\n    \n\n### Продуктивність\n\n#### Модуль DOM\n\nПід час циклічного перегляду списку вузлів в об'єкті [DOMNodeList](class.domnodelist.md) тепер працює кешування. Тому запит елементів за замовчуванням не займає квадратичний час.\n\nОтримання текстового вмісту з вузлів тепер уникає виділення пам'яті, що дає приріст продуктивності.\n\nМетод[DOMChildNode::remove()](domchildnode.remove.md) тепер працює з продуктивністю O(1).\n\n#### Standard\n\nПеревірка помилок прапорів у функції [file()](function.file.md) тепер приблизно на 7% швидше.\n\n#### Бібліотека SPL\n\nКласс[RecursiveDirectoryIterator](class.recursivedirectoryiterator.md) тепер виконує менше операцій введення-виведення при циклічному переборі каталогу.\n","title":"Інші зміни","contentType":2,"navigation":[{"migration83.deprecated.md":"« Застаріла функціональність"},{"migration83.windows-support.md":"Підтримка Windows »"},{"index.md":"PHP Manual"},{"migration83.md":"Міграція з PHP 8.2.x на PHP 8.3.x"}]}},"__N_SSG":true}