{"pageProps":{"page":{"slug":"recursivefilteriterator.construct.md","content":"# RecursiveFilterIterator::\\_\\_construct\n\n(PHP 5 >= 5.1.0, PHP 7, PHP 8)\n\nRecursiveFilterIterator::\\_\\_construct — Створює об'єкт RecursiveFilterIterator на основі об'єкта-ітератора RecursiveIterator\n\n### Опис\n\npublic **RecursiveFilterIterator::\\_\\_construct** [RecursiveIterator](class.recursiveiterator.md) `$iterator`) .\n\nСтворює ітератор [RecursiveFilterIterator](class.recursivefilteriterator.md)на основе[RecursiveIterator](class.recursiveiterator.md)\n\n### Список параметрів\n\n`iterator`\n\nОб'єкт-ітератор [RecursiveIterator](class.recursiveiterator.md)елементи якого потрібно відфільтрувати.\n\n### Приклади\n\n**Приклад #1 Приклад використання** RecursiveFilterIterator()\\*\\*\\*\\*\n\n```php\n<?php\nclass TestsOnlyFilter extends RecursiveFilterIterator {\n    public function accept() {\n        // текущий элемент пройдёт фильтр, если имеет дочерние элементы или\n        // его значение начинается со строки \"test\"\n        return $this->hasChildren() || (strpos($this->current(), \"test\") !== FALSE);\n    }\n}\n\n$array    = array(\"test1\", array(\"taste2\", \"test3\", \"test4\"), \"test5\");\n$iterator = new RecursiveArrayIterator($array);\n$filter   = new TestsOnlyFilter($iterator);\n\nforeach(new RecursiveIteratorIterator($filter) as $key => $value)\n{\n    echo $value . \"\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\ntest1\ntest3\ntest4\ntest5\n```\n\n**Приклад #2 Ще приклад з **RecursiveFilterIterator()****\n\n```php\n<?php\nclass StartsWithFilter extends RecursiveFilterIterator {\n\n    protected $word;\n\n    public function __construct(RecursiveIterator $rit, $word) {\n        $this->word = $word;\n        parent::__construct($rit);\n    }\n\n    public function accept() {\n        return $this->hasChildren() OR strpos($this->current(), $this->word) === 0;\n    }\n\n    public function getChildren() {\n        return new self($this->getInnerIterator()->getChildren(), $this->word);\n    }\n}\n\n$array    = array(\"test1\", array(\"taste2\", \"test3\", \"test4\"), \"test5\");\n$iterator = new RecursiveArrayIterator($array);\n$filter   = new StartsWithFilter($iterator, \"test\");\n\nforeach(new RecursiveIteratorIterator($filter) as $key => $value)\n{\n    echo $value . \"\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\ntest1\ntest3\ntest4\ntest5\n```\n\n### Дивіться також\n\n-   [RecursiveFilterIterator::getChildren()](recursivefilteriterator.getchildren.md) \\- Повертає дочірні елементи внутрішнього ітератора у вигляді об'єкта RecursiveFilterIterator\n-   [RecursiveFilterIterator::hasChildren()](recursivefilteriterator.haschildren.md) \\- Перевіряє, чи має поточний елемент внутрішнього ітератора дочірні елементи\n-   [FilterIterator::accept()](filteriterator.accept.md) \\- Перевіряє, чи є поточний елемент ітератора допустимим\n","title":"RecursiveFilterIterator::\\_\\_construct","contentType":2,"navigation":[{"class.recursivefilteriterator.md":"« RecursiveFilterIterator"},{"recursivefilteriterator.getchildren.md":"RecursiveFilterIterator::getChildren »"},{"index.md":"PHP Manual"},{"class.recursivefilteriterator.md":"RecursiveFilterIterator"}]}},"__N_SSG":true}