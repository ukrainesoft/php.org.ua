{"pageProps":{"page":{"slug":"language.types.integer.md","content":"## Цілі числа\n\nint - це число з множини ℤ = {..., -2, -1, 0, 1, 2, ...}.\n\n### Дивіться також\n\n-   [Числа з плаваючою точкою](language.types.float.md)\n-   [Обчислення над числами з довільною точністю BCMath](book.bc.md)\n-   [Обчислення над цілими числами з довільною точністю (GNU Multiple Precision)](book.gmp.md)\n\n### Синтаксис\n\nЦілі числа (int) можуть бути вказані в десятковій (підстава 10), шістнадцятковій (підстава 16), вісімковій (підстава 8) або двійковій (підстава 2) системі числення. Для завдання негативних цілих (int) використовують [оператор заперечення](language.operators.arithmetic.md)\n\nДля запису у восьмеричній системі числення перед числом ставлять (нуль). Починаючи з PHP 8.1.0 восьмічної нотації також може передувати `0o`или`0O`Для записи в шестнадцатеричной системе счисления необходимо поставить перед числом`0x`Для записи в двоичной системе счисления необходимо поставить перед числом`0b`\n\nПочинаючи з PHP 7.4.0 цілочисленні літерали можуть містити підкреслення (`_`) між цифрами для кращого читання літералів. Ці підкреслення видаляються сканером PHP.\n\n**Приклад #1 Цілі числа**\n\n```php\n<?php\n\n$a = 1234; // десятичное число\n$a = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)\n$a = 0o123; // восьмеричное число (начиная с PHP 8.1.0)\n$a = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)\n$a = 0b11111111; // двоичное число (эквивалентно 255 в десятичной системе)\n$a = 1_234_567; // десятичное число (с PHP 7.4.0)\n?>\n```\n\nФормально структура цілих чисел int прийнята в PHP 8.1.0 (раніше не допускалися восьмеричні префікси `0o`или`0O`, а до PHP 7.4.0 не допускалося підкреслення):\n\n```\nдесятичные        : [1-9][0-9]*(_[0-9]+)*\n                  | 0\n\nшестнадцатеричные : 0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*\n\nвосьмеричные      : 0[oO]?[0-7]+(_[0-7]+)*\n\nдвоичные          : 0[bB][01]+(_[01]+)*\n\nцелые             : десятичные\n                  | шестнадцатеричные\n                  | восьмеричные\n                  | двоичные\n```\n\nРозмір типу int залежить від платформи, хоча, як правило, максимальне значення приблизно дорівнює 2 мільярдам (це 32-бітове знакове). 64-бітові платформи зазвичай мають максимальне значення близько 9E18. PHP не підтримує беззнакові цілі числа (int). Розмір int може бути визначений за допомогою константи **`PHP_INT_SIZE`**, максимальне значення - за допомогою константи **`PHP_INT_MAX`**, а за допомогою константи **`PHP_INT_MIN`** можна визначити мінімальне значення.\n\n### Переповнення цілих чисел\n\nЯкщо PHP виявив, що число перевищує розмір типу int, він буде інтерпретувати його як float. Аналогічно, якщо результат операції лежить за межами типу int, він буде перетворений на float.\n\n**Приклад #2 Переповнення цілих на 32-бітових системах**\n\n```php\n<?php\n\n$large_number = 2147483647;\nvar_dump($large_number);                     // int(2147483647)\n\n$large_number = 2147483648;\nvar_dump($large_number);                     // float(2147483648)\n\n$million = 1000000;\n$large_number =  50000 * $million;\nvar_dump($large_number);                     // float(50000000000)\n?>\n```\n\n**Приклад #3 Переповнення цілих на 64-бітових системах**\n\n```php\n<?php\n$large_number = 9223372036854775807;\nvar_dump($large_number);                     // int(9223372036854775807)\n\n$large_number = 9223372036854775808;\nvar_dump($large_number);                     // float(9.2233720368548E+18)\n\n$million = 1000000;\n$large_number =  50000000000000 * $million;\nvar_dump($large_number);                     // float(5.0E+19)\n?>\n```\n\nУ PHP немає оператора цілого (int) поділу, для цього існує функція [intdiv()](function.intdiv.md)Результатом`1/2`будет float`0.5`. Якщо привести значення до int, воно буде заокруглено вниз, тобто буде відкинута дрібна частина числа. Для більшого контролю за округленням використовують функцію [round()](function.round.md)\n\n```php\n<?php\n\nvar_dump(25/7);         // float(3.5714285714286)\nvar_dump((int) (25/7)); // int(3)\nvar_dump(round(25/7));  // float(4)\n?>\n```\n\n### Перетворення на ціле\n\nДля явного преобразования в тип int используют приведение`(int)`или`(integer)`. Однак у більшості випадків у приведенні типу немає необхідності, оскільки значення буде автоматично перетворено, якщо оператор, функція або структура, що управляє, вимагає аргумент типу int. Значення також може бути перетворено на тип int функцією [intval()](function.intval.md)\n\nЯкщо значенням з типом resource перетворюється на значенням з типом int, результатом буде унікальний номер ресурсу, прив'язаний до resource під час виконання PHP програми.\n\nСмотрите также:[Маніпуляції з типами](language.types.type-juggling.md)\n\n#### Из[логічного](language.types.boolean.md)типа\n\nЛогічне значення **`false`** перетворюється на (нуль), а **`true`** - в (единицу).\n\n#### Из[чисел із плаваючою точкою](language.types.float.md)\n\nПри преобразовании из float в int число будет округлено*вниз*. Починаючи з PHP 8.1.0 при неявному перетворенні неінтегрального числа з плаваючою точкою (float) у ціле число (int), яке втрачає точність, видається повідомлення про старіння.\n\n```php\n<?php\n\nfunction foo($value): int {\n  return $value;\n}\n\nvar_dump(foo(8.1)); // \"Deprecated: Implicit conversion from float 8.1 to int loses precision\" начиная с PHP 8.1.0\nvar_dump(foo(8.1)); // 8 до PHP 8.1.0\nvar_dump(foo(8.0)); // 8 в обоих случаях\n\nvar_dump((int)8.1); // 8 в обоих случаях\nvar_dump(intval(8.1)); // 8 в обоих случаях\n?>\n```\n\nЯкщо число з точкою, що плаває, перевищує розміри int (зазвичай `­± 2.15e+9 = 2^31` на 32-бітових системах та `± 9.22e+18 = 2^63` На 64-бітових системах, результат буде невизначеним, тому що float не має достатньої точності, щоб повернути правильний результат у вигляді цілого числа (int). У цьому випадку не буде виведено ні попередження, ні зауваження!\n\n> **Зауваження** :\n> \n> Значення NaN та Infinity при приведенні до int стають рівними нулю, замість невизначеного значення залежно від платформи.\n\n**Увага**\n\nНе можна приводити невідомий дріб до типу int, оскільки це може дати несподівані результати.\n\n```php\n<?php\necho (int) ( (0.1+0.7) * 10 ); // выводит 7!\n?>\n```\n\nДокладніше про це розказано в [попередження про точність чисел з плаваючою точкою](language.types.float.md#warn.float-precision)\n\n#### З рядків\n\nЯкщо рядок [містить число](language.types.numeric-strings.md) або провідну числову послідовність, тоді вона буде перетворена на відповідне ціле число, в іншому випадку вона перетворюється на нуль (\n\n#### З NULL\n\nЗначение\\*\\*`null`\\*\\* завжди перетворюється на нуль (\n\n#### З інших типів\n\n**Застереження**\n\nДля других типов поведение преобразования в int не определено*Не потрібно*полагаться на наблюдаемое ранее поведение, так как оно может измениться без предупреждения.\n","title":"Цілі числа","contentType":2,"navigation":[{"language.types.boolean.md":"« Логічний тип"},{"language.types.float.md":"Числа з плаваючою точкою »"},{"index.md":"PHP Manual"},{"language.types.md":"Типи"}]}},"__N_SSG":true}