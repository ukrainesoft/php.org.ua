{"pageProps":{"page":{"slug":"reflectionproperty.isinitialized.md","content":"# ReflectionProperty::isInitialized\n\n(PHP 7 >= 7.4.0, PHP 8)\n\nReflectionProperty::isInitialized — Перевірити, чи ініціалізована властивість\n\n### Опис\n\n```methodsynopsis\npublic ReflectionProperty::isInitialized(?object $object = null): bool\n```\n\nПеревіряє, чи ініціалізована властивість.\n\n### Список параметрів\n\n`object`\n\nЯкщо властивість не статична, необхідно передати об'єкт, котрій буде проводитися перевірка.\n\n### Значення, що повертаються\n\nПовертає **`false`** для типизованих властивостей, яким не було надано значення і для властивостей, до яких явно застосували функцію [unset()](function.unset.md). Для решти властивостей повертає **`true`**\n\n### Помилки\n\nКидає виняток [ReflectionException](class.reflectionexception.md) якщо властивість недоступна. Доступ до protected і private властивостей можна отримати за допомогою [ReflectionProperty::setAccessible()](reflectionproperty.setaccessible.md)\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `object` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ReflectionProperty::isInitialized()\\*\\*\\*\\*\n\n```php\n<?php\nclass User\n{\n    public string $name;\n}\n\n$rp = new ReflectionProperty('User', 'name');\n$user = new User;\nvar_dump($rp->isInitialized($user));\n$user->name = 'Nikita';\nvar_dump($rp->isInitialized($user));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(false)\nbool(true)\n```\n\n### Дивіться також\n\n-   [ReflectionProperty::hasType()](reflectionproperty.hastype.md) \\- Перевірити, чи заданий для властивості тип\n","title":"ReflectionProperty::isInitialized","contentType":2,"navigation":[{"reflectionproperty.isdefault.md":"« ReflectionProperty::isDefault"},{"reflectionproperty.isprivate.md":"ReflectionProperty::isPrivate »"},{"index.md":"PHP Manual"},{"class.reflectionproperty.md":"ReflectionProperty"}]}},"__N_SSG":true}