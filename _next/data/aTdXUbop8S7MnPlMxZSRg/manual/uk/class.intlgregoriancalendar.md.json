{"pageProps":{"page":{"slug":"class.intlgregoriancalendar.md","content":"# Клас IntlGregorianCalendar\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\n## Вступ\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class IntlGregorianCalendar\n    \n\n    \n     extends\n      IntlCalendar\n     {\n\n    /* Наследуемые константы */\n    \n     public\n     const\n     int\n      IntlCalendar::FIELD_ERA;\npublic\n     const\n     int\n      IntlCalendar::FIELD_YEAR;\npublic\n     const\n     int\n      IntlCalendar::FIELD_MONTH;\npublic\n     const\n     int\n      IntlCalendar::FIELD_WEEK_OF_YEAR;\npublic\n     const\n     int\n      IntlCalendar::FIELD_WEEK_OF_MONTH;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DATE;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DAY_OF_YEAR;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DAY_OF_WEEK;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DAY_OF_WEEK_IN_MONTH;\npublic\n     const\n     int\n      IntlCalendar::FIELD_AM_PM;\npublic\n     const\n     int\n      IntlCalendar::FIELD_HOUR;\npublic\n     const\n     int\n      IntlCalendar::FIELD_HOUR_OF_DAY;\npublic\n     const\n     int\n      IntlCalendar::FIELD_MINUTE;\npublic\n     const\n     int\n      IntlCalendar::FIELD_SECOND;\npublic\n     const\n     int\n      IntlCalendar::FIELD_MILLISECOND;\npublic\n     const\n     int\n      IntlCalendar::FIELD_ZONE_OFFSET;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DST_OFFSET;\npublic\n     const\n     int\n      IntlCalendar::FIELD_YEAR_WOY;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DOW_LOCAL;\npublic\n     const\n     int\n      IntlCalendar::FIELD_EXTENDED_YEAR;\npublic\n     const\n     int\n      IntlCalendar::FIELD_JULIAN_DAY;\npublic\n     const\n     int\n      IntlCalendar::FIELD_MILLISECONDS_IN_DAY;\npublic\n     const\n     int\n      IntlCalendar::FIELD_IS_LEAP_MONTH;\npublic\n     const\n     int\n      IntlCalendar::FIELD_FIELD_COUNT;\npublic\n     const\n     int\n      IntlCalendar::FIELD_DAY_OF_MONTH;\npublic\n     const\n     int\n      IntlCalendar::DOW_SUNDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_MONDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_TUESDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_WEDNESDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_THURSDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_FRIDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_SATURDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_TYPE_WEEKDAY;\npublic\n     const\n     int\n      IntlCalendar::DOW_TYPE_WEEKEND;\npublic\n     const\n     int\n      IntlCalendar::DOW_TYPE_WEEKEND_OFFSET;\npublic\n     const\n     int\n      IntlCalendar::DOW_TYPE_WEEKEND_CEASE;\npublic\n     const\n     int\n      IntlCalendar::WALLTIME_FIRST;\npublic\n     const\n     int\n      IntlCalendar::WALLTIME_LAST;\npublic\n     const\n     int\n      IntlCalendar::WALLTIME_NEXT_VALID;\n\n\n    /* Методы */\n    \n   public __construct(IntlTimeZone $tz = ?, string $locale = ?)\npublic __construct(int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth)\npublic __construct(    int $timeZoneOrYear,    int $localeOrMonth,    int $dayOfMonth,    int $hour,    int $minute,    int $second = ?)\n\n    public createFromDate(int $year, int $month, int $dayOfMonth): static\npublic createFromDateTime(    int $year,    int $month,    int $dayOfMonth,    int $hour,    int $minute,    int $second = null): static\npublic getGregorianChange(): float\npublic isLeapYear(int $year): bool\npublic setGregorianChange(float $timestamp): bool\n\n\n    /* Наследуемые методы */\n    public IntlCalendar::add(int $field, int $value): bool\npublic IntlCalendar::after(IntlCalendar $other): bool\npublic IntlCalendar::before(IntlCalendar $other): bool\npublic IntlCalendar::clear(?int $field = null): true\npublic static IntlCalendar::createInstance(IntlTimeZone|DateTimeZone|string|null $timezone = null, ?string $locale = null): ?IntlCalendar\npublic IntlCalendar::equals(IntlCalendar $other): bool\npublic IntlCalendar::fieldDifference(float $timestamp, int $field): int|false\npublic static IntlCalendar::fromDateTime(DateTime|string $datetime, ?string $locale = null): ?IntlCalendar\npublic IntlCalendar::get(int $field): int|false\npublic IntlCalendar::getActualMaximum(int $field): int|false\npublic IntlCalendar::getActualMinimum(int $field): int|false\npublic static IntlCalendar::getAvailableLocales(): array\npublic IntlCalendar::getDayOfWeekType(int $dayOfWeek): int|false\npublic IntlCalendar::getErrorCode(): int|false\npublic IntlCalendar::getErrorMessage(): string|false\npublic IntlCalendar::getFirstDayOfWeek(): int|false\npublic IntlCalendar::getGreatestMinimum(int $field): int|false\npublic static IntlCalendar::getKeywordValuesForLocale(string $keyword, string $locale, bool $onlyCommon): IntlIterator|false\npublic IntlCalendar::getLeastMaximum(int $field): int|false\npublic IntlCalendar::getLocale(int $type): string|false\npublic IntlCalendar::getMaximum(int $field): int|false\npublic IntlCalendar::getMinimalDaysInFirstWeek(): int|false\npublic IntlCalendar::getMinimum(int $field): int|false\npublic static IntlCalendar::getNow(): float\npublic IntlCalendar::getRepeatedWallTimeOption(): int\npublic IntlCalendar::getSkippedWallTimeOption(): int\npublic IntlCalendar::getTime(): float|false\npublic IntlCalendar::getTimeZone(): IntlTimeZone|false\npublic IntlCalendar::getType(): string\npublic IntlCalendar::getWeekendTransition(int $dayOfWeek): int|false\npublic IntlCalendar::inDaylightTime(): bool\npublic IntlCalendar::isEquivalentTo(IntlCalendar $other): bool\npublic IntlCalendar::isLenient(): bool\npublic IntlCalendar::isSet(int $field): bool\npublic IntlCalendar::isWeekend(?float $timestamp = null): bool\npublic IntlCalendar::roll(int $field, int|bool $value): bool\npublic IntlCalendar::set(int $field, int $value): true\npublic IntlCalendar::set(    int $year,    int $month,    int $dayOfMonth = NULL,    int $hour = NULL,    int $minute = NULL,    int $second = NULL): true\npublic IntlCalendar::setDate(int $year, int $month, int $dayOfMonth): void\npublic IntlCalendar::setDateTime(    int $year,    int $month,    int $dayOfMonth,    int $hour,    int $minute,    int $second = null): void\npublic IntlCalendar::setFirstDayOfWeek(int $dayOfWeek): true\npublic IntlCalendar::setLenient(bool $lenient): true\npublic IntlCalendar::setMinimalDaysInFirstWeek(int $days): true\npublic IntlCalendar::setRepeatedWallTimeOption(int $option): true\npublic IntlCalendar::setSkippedWallTimeOption(int $option): true\npublic IntlCalendar::setTime(float $timestamp): bool\npublic IntlCalendar::setTimeZone(IntlTimeZone|DateTimeZone|string|null $timezone): bool\npublic IntlCalendar::toDateTime(): DateTime|false\n\n   }\n```\n\n## Зміст\n\n-   [IntlGregorianCalendar::\\_\\_construct](intlgregoriancalendar.construct.md) \\- Конструктор класу григоріанського календаря\n-   [IntlGregorianCalendar::createFromDate](intlgregoriancalendar.createfromdate.md)— Створює новий екземпляр Intel GregorianCalendar із дати\n-   [IntlGregorianCalendar::createFromDateTime](intlgregoriancalendar.createfromdatetime.md)— Створює новий екземпляр Intel GregorianCalendar із дати та часу\n-   [IntlGregorianCalendar::getGregorianChange](intlgregoriancalendar.getgregorianchange.md)— Отримує дату зміни григоріанського календаря\n-   [IntlGregorianCalendar::isLeapYear](intlgregoriancalendar.isleapyear.md)— Визначає, чи цей рік є високосним.\n-   [IntlGregorianCalendar::setGregorianChange](intlgregoriancalendar.setgregorianchange.md)— Встановлює дату зміни у григоріанському календарі\n","title":"Клас IntlGregorianCalendar","contentType":2,"navigation":[{"intlcalendar.todatetime.md":"« IntlCalendar::toDateTime"},{"intlgregoriancalendar.construct.md":"IntlGregorianCalendar::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.intl.md":"intl"}]}},"__N_SSG":true}