{"pageProps":{"page":{"slug":"function.json-decode.md","content":"# json\\_decode\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8, PECL json >= 1.2.0)\n\njson\\_decode — Декодує рядок JSON\n\n### Опис\n\n```methodsynopsis\njson_decode(    string $json,    ?bool $associative = null,    int $depth = 512,    int $flags = 0): mixed\n```\n\nПриймає закодований у JSON рядок і перетворює його на PHP-значення.\n\n### Список параметрів\n\n`json`\n\nСтрока (string)`json` для декодування.\n\nФункція працює тільки з рядками кодування UTF-8.\n\n> **Зауваження** :\n> \n> PHP реалізує надмножина JSON, який описаний у початковому [» RFC 7159](http://www.faqs.org/rfcs/rfc7159)\n\n`associative`\n\nЯкщо **`true`**, об'єкти JSON будуть повернуті як асоціативні масиви (array); якщо **`false`**, об'єкти JSON будуть повернуті як об'єкти (object). Якщо **`null`**, об'єкти JSON будуть повернуті як асоціативні масиви (array) або об'єкти (object) в залежності від того, чи встановлена \\*\\*`JSON_OBJECT_AS_ARRAY`\\*\\*в`flags`\n\n`depth`\n\nМаксимальна глибина вкладеності структури, на яку проводитиметься декодування. Значення має бути більшим і менше чи одно `2147483647`\n\n`flags`\n\nБитовая маска из констант\\*\\*`JSON_BIGINT_AS_STRING`\\*\\* **`JSON_INVALID_UTF8_IGNORE`** **`JSON_INVALID_UTF8_SUBSTITUTE`** **`JSON_OBJECT_AS_ARRAY`** **`JSON_THROW_ON_ERROR`**. Поведінка цих констант описано на сторінці [JSON-констант](json.constants.md)\n\n### Значення, що повертаються\n\nПовертає дані `json`, перетворені на типи PHP. Не укладені в лапки значення `true` `false`и`null` повертаються як типізовані значення **`true`** \\*\\*`false`** і **`null`**Значение с типом**`null`\\*\\*также возвращается в случаях, когда параметр`json` не може бути перетворений або глибина вкладеності структури перевищує встановлену межу.\n\n### Помилки\n\nПочинаючи з PHP 8.0.0, якщо значення параметра `depth` виходить за межі допустимого діапазону, функція викидає виняток [ValueError](class.valueerror.md); раніше видавалася помилка рівня **`E_WARNING`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.3.0 | Добавлена константа\\*\\*`JSON_THROW_ON_ERROR`\\*\\*для параметра`flags` |\n| 7.2.0 | `associative` тепер nullable. |\n| 7.2.0 | Додані константи \\*\\*`JSON_INVALID_UTF8_IGNORE`** і **`JSON_INVALID_UTF8_SUBSTITUTE`\\*\\*для параметра`flags` |\n| 7.1.0 | Порожній ключ JSON (\"\") буде перетворено на порожню властивість об'єкта, а не на властивість зі значенням `_empty_` |\n\n### Приклади\n\n**Приклад #1 Приклади використання **json\\_decode()****\n\n```php\n<?php\n$json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json, true));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(stdClass)#1 (5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}\n\narray(5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}\n```\n\n**Приклад #2 Доступ до властивостей об'єктів із неправильними іменами**\n\nДоступ до елементів об'єкта, які містять символи, неприпустимі відповідно до угоди про імена PHP (тобто дефіс), може бути виконаний шляхом обрамлення імені елемента фігурними дужками та апострофами.\n\n```php\n<?php\n\n$json = '{\"foo-bar\": 12345}';\n\n$obj = json_decode($json);\nprint $obj->{'foo-bar'}; // 12345\n\n?>\n```\n\n**Приклад #3 Поширена помилка під час використання **json\\_decode()****\n\n```php\n<?php\n\n// Следующие строки являются валидным кодом JavaScript, но не валидными JSON-данными\n\n// Имя и значение должны помещаться в двойные кавычки\n// Одинарные кавычки использовать нельзя\n$bad_json = \"{ 'bar': 'baz' }\";\njson_decode($bad_json); // null\n\n// Имя должно обрамляться в двойные кавычки\n$bad_json = '{ bar: \"baz\" }';\njson_decode($bad_json); // null\n\n// Не должно быть завершающей запятой (без последующего элемента)\n$bad_json = '{ bar: \"baz\", }';\njson_decode($bad_json); // null\n\n?>\n```\n\n**Приклад #4 Помилки з глибиною вкладених об'єктів (`depth`) .**\n\n```php\n<?php\n// Закодируем данные с глубиной вложенности 4 (array -> array -> array -> string).\n$json = json_encode(\n    array(\n        1 => array(\n            'English' => array(\n                'One',\n                'January'\n            ),\n            'French' => array(\n                'Une',\n                'Janvier'\n            )\n        )\n    )\n);\n\n// Напечатаем ошибки для разных глубин.\nvar_dump(json_decode($json, true, 4));\necho 'Последняя ошибка: ', json_last_error_msg(), PHP_EOL, PHP_EOL;\n\nvar_dump(json_decode($json, true, 3));\necho 'Последняя ошибка: ', json_last_error_msg(), PHP_EOL, PHP_EOL;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(1) {\n  [1]=>\n  array(2) {\n    [\"English\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"One\"\n      [1]=>\n      string(7) \"January\"\n    }\n    [\"French\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"Une\"\n      [1]=>\n      string(7) \"Janvier\"\n    }\n  }\n}\nПоследняя ошибка: No error\n\nNULL\nПоследняя ошибка: Maximum stack depth exceeded\n```\n\n**Приклад #5**json\\_decode()\\*\\* з великими цілими числами\\*\\*\n\n```php\n<?php\n$json = '{\"number\": 12345678901234567890}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(stdClass)#1 (1) {\n  [\"number\"]=>\n  float(1.2345678901235E+19)\n}\nobject(stdClass)#1 (1) {\n  [\"number\"]=>\n  string(20) \"12345678901234567890\"\n}\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Специфікація JSON – це не JavaScript, а його підмножина.\n\n> **Зауваження** :\n> \n> У разі виникнення помилки декодування можна використовувати [json\\_last\\_error()](function.json-last-error.md) визначення її причини.\n\n### Дивіться також\n\n-   [json\\_encode()](function.json-encode.md) \\- Повертає JSON-подання даних\n-   [json\\_last\\_error()](function.json-last-error.md) \\- Повертає останню помилку\n","title":"json\\_decode","contentType":2,"navigation":[{"ref.json.md":"« Функції JSON"},{"function.json-encode.md":"json\\_encode »"},{"index.md":"PHP Manual"},{"ref.json.md":"Функції JSON"}]}},"__N_SSG":true}