{"pageProps":{"page":{"slug":"function.simdjson-is-valid.md","content":"# simdjson\\_is\\_valid\n\n(PECL simdjson >= 2.0.0)\n\nsimdjson\\_is\\_valid — Перевіряє, чи є рядок JSON коректним.\n\n### Опис\n\n```methodsynopsis\nsimdjson_is_valid(string $json = false, int $depth = 512): bool\n```\n\nПриймає рядок, закодований JSON і повертає true, якщо він коректний.\n\n### Список параметрів\n\n`json`\n\nСтрока (string) в формате`json` для перевірки.\n\nФункція працює тільки з рядками кодування UTF-8.\n\nФункція аналізує допустимі вхідні дані, які функція [json\\_decode()](function.json-decode.md) може декодувати, за умови, що їхня довжина не перевищує 4 Гб.\n\n`depth`\n\nМаксимальна глибина вкладеності структури, що декодується. Значення має бути більшим і менше чи одно `2147483647`. Команда, що викликає, повинна використовувати досить маленькі значення, оскільки велика глибина вимагають більше місця в буфері і збільшують глибину рекурсії, на відміну від поточної реалізації функції [json\\_decode()](function.json-decode.md)\n\n### Значення, що повертаються\n\nПовертає **`true`**, якщо параметр `json` є коректним рядком JSON, інакше повертає **`false`**\n\n### Помилки\n\nЯкщо параметр `json` більше 4 ГБ, то починаючи з версії PECL simdjson 2.1.0 викидається виняток [SimdJsonException](class.simdjsonexception.md); раніше викидався виняток [RuntimeException](class.runtimeexception.md)\n\nЯкщо параметр `depth` знаходиться поза допустимим діапазоном, то починаючи з версії PECL simdjson 3.0.0 викидається виняток [SimdJsonValueError](class.simdjsonvalueerror.md), тоді як раніше видавалася помилка рівня **`E_WARNING`**\n\n### Приклади\n\n**Приклад #1 Приклад использования[simdjson\\_decode()](function.simdjson-decode.md)**\n\n```php\n<?php\n$json = '{\"a\":1,\"b\":2,\"c\":3}';\n$invalidJson = '{\"a\":1,\"b\":2,\"c\":';\n\nvar_dump(simdjson_is_valid($json));\nvar_dump(simdjson_is_valid($invalidJson));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(true)\nbool(false)\n```\n\n**Приклад #2 Ошибки`depth`**\n\n```php\n<?php\n// Кодирование данных с максимальной глубиной 4\n// (array -> array -> array -> string)\n$json = json_encode(\n    [\n        1 => [\n            'English' => [\n                'One',\n                'January'\n            ],\n            'French' => [\n                'Une',\n                'Janvier'\n            ]\n        ]\n    ]\n);\n\n// Отображает ошибки для разных глубин.\nvar_dump(simdjson_is_valid($json, 4));\nvar_dump(simdjson_is_valid($json, 3));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(true)\nbool(false)\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Специфікація JSON - це не JavaScript, а підмножина JavaScript.\n\n> **Зауваження** :\n> \n> У разі виникнення помилки декодування викидається виняток [SimdJsonException](class.simdjsonexception.md), а**SimdJsonException::getCode()** і **SimdJsonException::getMessage()** можуть бути використані визначення точної природи помилки.\n\n### Дивіться також\n\n-   [json\\_encode()](function.json-encode.md) \\- Повертає JSON-подання даних\n-   [json\\_decode()](function.json-decode.md) \\- Декодує рядок JSON\n","title":"simdjson\\_is\\_valid","contentType":2,"navigation":[{"function.simdjson-decode.md":"« simdjson\\_decode"},{"function.simdjson-key-count.md":"simdjson\\_key\\_count »"},{"index.md":"PHP Manual"},{"ref.simdjson.md":"Функції Simdjson"}]}},"__N_SSG":true}