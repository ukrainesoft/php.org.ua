{"pageProps":{"page":{"slug":"function.socket-get-option.md","content":"# socket\\_get\\_option\n\n(PHP 4 >= 4.3.0, PHP 5, PHP 7, PHP 8)\n\nsocket\\_get\\_option — Отримує опції потоку для сокету\n\n### Опис\n\n```methodsynopsis\nsocket_get_option(Socket $socket, int $level, int $option): array|int|false\n```\n\nФункция**socket\\_get\\_option()** витягує значення для опції, вказаної параметром `option`для заданного`socket`\n\n### Список параметрів\n\n`socket`\n\nЕкземпляр [Socket](class.socket.md), створений за допомогою [socket\\_create()](function.socket-create.md) або [socket\\_accept()](function.socket-accept.md)\n\n`level`\n\nПараметр`level` вказує рівень протоколу, у якому перебуває опція. Наприклад, для отримання опцій на рівні сокету повинен використовувати параметр `level`, рівний **`SOL_SOCKET`**. Інші рівні, такі як **`TCP`**, можна використовувати, вказавши номер протоколу цього рівня. Номери протоколів можна знайти за допомогою функції [getprotobyname()](function.getprotobyname.md)\n\n`option`\n\n**Доступні опції сокету**\n\n| Опция | Опис | Тип |\n| --- | --- | --- |\n| **`SO_DEBUG`** | Повідомляє, чи записується налагоджувальна інформація. | int |\n| **`SO_BROADCAST`** | Повідомляє, чи підтримується передача широкомовних повідомлень. | int |\n| **`SO_REUSEADDR`** | Повідомляє, чи локальні адреси можуть використовуватися повторно. | int |\n| **`SO_REUSEPORT`** | Повідомляє, чи локальні порти можуть використовуватися повторно. | int |\n| **`SO_KEEPALIVE`** | Повідомляє, чи підтримуються з'єднання з періодичною передачею повідомлень. Якщо підключений сокет не відповідає на ці повідомлення, підключення переривається і процеси запису до цього сокету повідомляються сигналом SIGPIPE. | int |\n| **`SO_LINGER`** |  |  |\n| Повідомляє, чи буде `socket` зупинятися на [socket\\_close()](function.socket-close.md), якщо дані є. За умовчанням, коли сокет закритий, він спробує надіслати всі ненадіслані дані. У разі сокету, орієнтованого на підключення, [socket\\_close()](function.socket-close.md) чекатиме, поки його одноранговий вузол підтвердить дані. |  |  |\n\nЯкщо l\\_onoff відмінний від нуля, а l\\_linger дорівнює нулю, всі ненадіслані дані будуть відкинуті і RST (скидання) відправлений одноранговому вузлу у разі сокету, орієнтованого на підключення.\n\nЗ іншого боку, якщо l\\_onoff та l\\_linger відмінні від нуля, [socket\\_close()](function.socket-close.md) буде блокуватися до тих пір, поки всі дані не будуть надіслані або якщо час, вказаний у l\\_linger, не закінчиться. Якщо сокет не блокується, [socket\\_close()](function.socket-close.md) зазнає невдачі і поверне помилку.\n\n| array. Масив міститиме два ключі: l\\_onoff та l\\_linger. | |**`SO_OOBINLINE`** | Повідомляє, чи виходить `socket` із вбудованих даних. | int | | **`SO_SNDBUF`** | Повідомляє розмір надісланого буфера. | int | | **`SO_RCVBUF`** | Повідомляє розмір отриманого буфера. | int | | **`SO_ERROR`** | Повідомляє інформацію про статус помилки та очищає її. | int (не може бути встановлений [socket\\_set\\_option()](function.socket-set-option.md) **`SO_TYPE`** | Повідомляє про тип `socket`(наПриклад,**`SOCK_STREAM`**). | int (не може бути встановлений [socket\\_set\\_option()](function.socket-set-option.md) **`SO_DONTROUTE`** | Повідомляє, що вихідні повідомлення оминають стандартні засоби маршрутизації. | int | | **`SO_RCVLOWAT`** | Повідомляє мінімальну кількість байтів для обробки операцій уведення `socket`| int | |**`SO_RCVTIMEO`** | Повідомляє про значення часу очікування для операцій введення. | array. Масив буде містити два ключі: sec, який є частиною секунд для значення часу очікування та usec, який є мікросекундною частиною значення часу очікування. | | **`SO_SNDTIMEO`** | Повідомляє про значення часу очікування, що вказує кількість часу, який блокує функція виведення, оскільки керування потоком запобігає відправленню даних. | array. Масив буде містити два ключі: sec, який є частиною секунд для значення часу очікування та usec, який є мікросекундною частиною значення часу очікування. | | **`SO_SNDLOWAT`** | Повідомляє мінімальну кількість байтів для обробки операцією виводу `socket`| int | |**`TCP_NODELAY`** | Повідомляє, чи відключено алгоритм Nagle TCP. | int | | **`MCAST_JOIN_GROUP`** | Приєднується до багатоадресної групи. | масив (array) із ключами `\"group\"`, вказавши рядок (string) з багатоадресною адресою IPv4 або IPv6 та `\"interface\"`, вказавши або номер інтерфейсу (тип int), або рядок (`string`) з ім'ям інтерфейсу, наприклад `\"eth0\"`. . можна вказати, щоб повідомити, що інтерфейс має бути обраний за допомогою правил маршрутизації. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`MCAST_LEAVE_GROUP`**| Оставляет многоадресную группу. | массив (array). Смотрите\\*\\*`MCAST_JOIN_GROUP`\\*\\* для отримання додаткової інформації. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`MCAST_BLOCK_SOURCE`** | Блокує пакети, що надходять із певного джерела в певну групу багатоадресної передачі, які мають бути попередньо з'єднані. | масив (array) з такими ж ключами, як у **`MCAST_JOIN_GROUP`**плюс один додатковий ключ, `source`, який представляє рядок (string), що вказує IPv4 або IPv6 адресу джерела, який повинен бути заблокований. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`MCAST_UNBLOCK_SOURCE`** | Розблокує (починає прийом знову) пакети, що надходять з певної вихідної адреси певну групу багатоадресної передачі, яка повинна попередньо з'єднана. | масив (array) з таким самим форматом, як у **`MCAST_BLOCK_SOURCE`**. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`MCAST_JOIN_SOURCE_GROUP`** | Отримувати пакети, призначені для конкретної групи багатоадресної передачі, вихідна адреса якого збігається з певним значенням. | масив (array) з тим самим форматом, що у **`MCAST_BLOCK_SOURCE`**. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`MCAST_LEAVE_SOURCE_GROUP`** | Зупинити прийом пакетів, призначених для конкретної групи багатоадресної передачі, вихідна адреса якого збігається з певним значенням. | масив (array) з тим самим форматом, що у **`MCAST_BLOCK_SOURCE`**. (може використовуватися тільки в [socket\\_set\\_option()](function.socket-set-option.md) **`IP_MULTICAST_IF`** | Вихідний інтерфейс для багатоадресних пакетів IPv4. | Будь-яке ціле число (int), що вказує на номер інтерфейсу або рядок (string) з ім'ям інтерфейсу, наприклад, `eth0`. Значення 0 можна використовувати для вказівки, що таблиця маршрутизації використовується для вибору інтерфейсу. Функція **socket\\_get\\_option()** повертає індекс інтерфейсу. Зверніть увагу, що на відміну від C API, ця опція НЕ приймає IP-адресу. Це усуває різницю в інтерфейсі між **`IP_MULTICAST_IF`** і **`IPV6_MULTICAST_IF`**. **`IPV6_MULTICAST_IF`** | Вихідний інтерфейс для багатоадресних пакетів IPv6. | Те саме, що і **`IP_MULTICAST_IF`**. **`IP_MULTICAST_LOOP`** | Політика петлі групової передачі для пакетів IPv4 включає або вимикає передачу вихідних багатоадресних розсилок, які мають бути попередньо приєднані. Ефект, однак, відрізняється, залежно від застосування в Unix або Windows: у першому випадку на шляху отримання, а в другому - на шляху надсилання. | ціле число (int) (або , либо ). Для[socket\\_set\\_option()](function.socket-set-option.md) Будь-яке значення буде прийнято і перетворено на тип boolean, згідно з звичайними правилами PHP. | | **`IPV6_MULTICAST_LOOP`** | Аналогічно **`IP_MULTICAST_LOOP`**, но для IPv6. | int. See**`IP_MULTICAST_LOOP`**. **`IP_MULTICAST_TTL`** | Час очікування вихідних пакетів IPv4 для багатоадресної передачі. Це має бути значення між 0 (не залишати інтерфейс) та 255. Значення за умовчанням - 1 (досягається лише локальна мережа). | ціле число (int) між 0 та 255. | | **`IPV6_MULTICAST_HOPS`** | Аналогічно **`IP_MULTICAST_TTL`**, але для пакетів IPv6. Значення -1 також приймається, що означає використання за промовчанням маршруту. | ціле число (int) між 0 та 255. | | **`SO_MARK`** | Встановлює ідентифікатор сокету для фільтрації пакетів у Linux. | int | | **`SO_ACCEPTFILTER`** | Додає фільтр прийому на сокет, що прослуховується (FreeBSD/NetBSD). Модуль ядра фільтра прийому має бути попередньо завантажений у FreeBSD (наприклад, accf\\_http). | Строка (string) имя фильтра (длина не более 15). | |**`SO_USER_COOKIE`** | Встановлює ідентифікатор сокету для фільтрації пакетів FreeBSD. | int | | **`SO_RTABLE`** | Встановлює ідентифікатор сокету для фільтрації пакетів OpenBSD. | int | | **`SO_DONTTRUNC`** | Зберігає непрочитані дані. | int | | **`SO_WANTMORE`** | Підказує, коли буде доступно більше даних. | int | | **`TCP_DEFER_ACCEPT`** | Не повідомляє слухач, поки дані не будуть готові. | int | | **`SO_INCOMING_CPU`**| Получает/устанавливает сродство к процессору для сокета. | int | |**`SO_MEMINFO`**| Получает meminfo сокета. | int | |**`SO_BPF_EXTENSIONS`** | Отримує підтримувані ядром модулі BPF для приєднання до сокету. | int | | **`SO_SETFIB`** | Встановлює таблицю маршрутизації (FIB) сокету (лише FreeBSD). | int | | **`SOL_FILTER`** | Фільтри, що приписуються сокету (лише Solaris/Illumos). | int | | **`TCP_KEEPCNT`** | Встановлює максимальну кількість keepalive зондів, які TCP повинен відправити перед розривом з'єднання. | int | | **`TCP_KEEPIDLE`** | Встановлює час, протягом якого з'єднання має простоювати. | int | | **`TCP_KEEPINTVL`** | Встановлює час між окремими keepalive зондами. | int | | **`TCP_KEEPALIVE`** | Встановлює час, протягом якого з'єднання має простоюватись (лише для macOS). | int | | **`TCP_NOTSENT_LOWAT`** | Встановлює граничну кількість ненаправлених даних у черзі на запис потоком сокету (лише для Linux). | int |\n\n### Значення, що повертаються\n\nПовертає значення заданої опції або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `socket` тепер екземпляр класу [Socket](class.socket.md); раніше був ресурсом (resource). |\n\n### Приклади\n\n**Приклад #1 Приклад використання** socket\\_get\\_option()\\*\\*\\*\\*\n\n```php\n<?php\n$socket = socket_create_listen(1223);\n\n$linger = array('l_linger' => 1, 'l_onoff' => 1);\nsocket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);\n\nvar_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));\n?>\n```\n\n### Дивіться також\n\n-   [socket\\_create\\_listen()](function.socket-create-listen.md) \\- Відкриває сокет на вказаному порту для прийняття з'єднань\n-   [socket\\_set\\_option()](function.socket-set-option.md) \\- Встановлює опції для сокету\n","title":"socket\\_get\\_option","contentType":2,"navigation":[{"function.socket-export-stream.md":"« socket\\_export\\_stream"},{"function.socket-getopt.md":"socket\\_getopt »"},{"index.md":"PHP Manual"},{"ref.sockets.md":"Опції сокету"}]}},"__N_SSG":true}