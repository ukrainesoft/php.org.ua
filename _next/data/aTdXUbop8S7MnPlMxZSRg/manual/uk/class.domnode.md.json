{"pageProps":{"page":{"slug":"class.domnode.md","content":"# Клас DOMNode\n\n(PHP 5, PHP 7, PHP 8)\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class DOMNode\n     {\n\n    /* Свойства */\n    \n     public\n     readonly\n     string\n      $nodeName;\n\n    public\n     ?string\n      $nodeValue;\n\n    public\n     readonly\n     int\n      $nodeType;\n\n    public\n     readonly\n     ?DOMNode\n      $parentNode;\n\n    public\n     readonly\n     ?DOMElement\n      $parentElement;\n\n    public\n     readonly\n     DOMNodeList\n      $childNodes;\n\n    public\n     readonly\n     ?DOMNode\n      $firstChild;\n\n    public\n     readonly\n     ?DOMNode\n      $lastChild;\n\n    public\n     readonly\n     ?DOMNode\n      $previousSibling;\n\n    public\n     readonly\n     ?DOMNode\n      $nextSibling;\n\n    public\n     readonly\n     ?DOMNamedNodeMap\n      $attributes;\n\n    public\n     readonly\n     bool\n      $isConnected;\n\n    public\n     readonly\n     ?DOMDocument\n      $ownerDocument;\n\n    public\n     readonly\n     ?string\n      $namespaceURI;\n\n    public\n     string\n      $prefix;\n\n    public\n     readonly\n     ?string\n      $localName;\n\n    public\n     readonly\n     ?string\n      $baseURI;\n\n    public\n     string\n      $textContent;\n\n\n    /* Методы */\n    \n   public appendChild(DOMNode $node): DOMNode|false\npublic C14N(    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): string|false\npublic C14NFile(    string $uri,    bool $exclusive = false,    bool $withComments = false,    ?array $xpath = null,    ?array $nsPrefixes = null): int|false\npublic cloneNode(bool $deep = false): DOMNode|false\npublic contains(DOMNode|DOMNameSpaceNode|null $other): bool\npublic getLineNo(): int\npublic getNodePath(): ?string\npublic getRootNode(array $options = null): DOMNode\npublic hasAttributes(): bool\npublic hasChildNodes(): bool\npublic insertBefore(DOMNode $node, ?DOMNode $child = null): DOMNode|false\npublic isDefaultNamespace(string $namespace): bool\npublic isEqualNode(?DOMNode $otherNode): bool\npublic isSameNode(DOMNode $otherNode): bool\npublic isSupported(string $feature, string $version): bool\npublic lookupNamespaceURI(?string $prefix): ?string\npublic lookupPrefix(string $namespace): ?string\npublic normalize(): void\npublic removeChild(DOMNode $child): DOMNode|false\npublic replaceChild(DOMNode $node, DOMNode $child): DOMNode|false\n\n   }\n```\n\n## Властивості\n\nnodeName\n\nПовертає найточніше ім'я для поточного типу вузла\n\nnodeValue\n\nЗначення цього вузла, залежно з його типу. Значення вузлів [DOMElement](class.domelement.md), на відміну від специфікації W3C, рівні [DOMNode::textContent](class.domnode.md#domnode.props.textcontent), а не\\*\\*`null`\\*\\*\n\nnodeType\n\nПовертає тип вузла. Одна з можливих [констант XML\\_xxx\\_NODE](dom.constants.md)\n\nparentNode\n\nБатьківський вузол вузла. Якщо такого вузла немає, повертає **`null`**\n\nparentElement\n\nБатьківський елемент поточного елемента. Якщо такого елемента немає, буде повернено значення **`null`**\n\nchildNodes\n\nОб'єкт [DOMNodeList](class.domnodelist.md)містить всіх нащадків вузла. Якщо нащадків немає, повертається порожній об'єкт [DOMNodeList](class.domnodelist.md)\n\nfirstChild\n\nПерший дочірній вузол вузла. Якщо такого вузла немає, повертає **`null`**\n\nlastChild\n\nОстанній дочірній вузол цього вузла. Якщо такого вузла немає, повертає **`null`**\n\npreviousSibling\n\nВузол, що безпосередньо передує поточному вузлу. Якщо такого вузла немає, повертає **`null`**\n\nnextSibling\n\nВузол безпосередньо наступний за вузлом. Якщо такого вузла немає, повертає **`null`**\n\nattributes\n\nОб'єкт [DOMNamedNodeMap](class.domnamednodemap.md), що містить атрибути вузла (тільки якщо це [DOMElement](class.domelement.md)), інакше поверне **`null`**\n\nisConnected\n\nВказує, чи приєднаний вузол до документа\n\nownerDocument\n\nОб'єкт [DOMDocument](class.domdocument.md), пов'язаний з вузлом, або **`null`**, якщо вузол - об'єкт класу [DOMDocument](class.domdocument.md)\n\nnamespaceURI\n\nURI простір імен вузла або \\*\\*`null`\\*\\*якщо він не вказаний.\n\nprefix\n\nПрефікс простору імен вузла.\n\nlocalName\n\nПовертає локальну частину кваліфікованого імені вузла.\n\nbaseURI\n\nАбсолютний базовий URI вузла або \\*\\*`null`\\*\\*якщо реалізація не змогла отримати абсолютний URI.\n\ntextContent\n\nТекстовий вміст вузла та його нащадків\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.0 | Додано властивості DOMNode::$parentElement і DOMNode::$isConnected. |\n| 8.0.0 | Нереалізовані методи **DOMNode::compareDocumentPosition()** [DOMNode::isEqualNode()](domnode.isequalnode.md) **DOMNode::getFeature()** **DOMNode::setUserData()** і **DOMNode::getUserData()** були вилучені. |\n\n## Примітки\n\n> **Зауваження** :\n> \n> Модуль DOM працює з кодуванням UTF-8. Для роботи з іншими кодуваннями користуються функціями [mb\\_convert\\_encoding()](function.mb-convert-encoding.md) [UConverter::transcode()](uconverter.transcode.md) або [iconv()](function.iconv.md)\n\n## Дивіться також\n\n-   [» Специфікація W3C елемента Node](http://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/DOM3-Core.md#core-ID-1950641247)\n\n## Зміст\n\n-   [DOMNode::appendChild](domnode.appendchild.md)— Додає новий дочірній вузол до кінця списку нащадків.\n-   [DOMNode::C14N](domnode.c14n.md) \\- Канонізувати вузли в рядок\n-   [DOMNode::C14NFile](domnode.c14nfile.md) \\- Канонізувати вузли у файл\n-   [DOMNode::cloneNode](domnode.clonenode.md) \\- Клонує вузол\n-   [DOMNode::contains](domnode.contains.md)— Перевіряє, чи містить вузол інший вузол\n-   [DOMNode::getLineNo](domnode.getlineno.md)— Отримує номер рядка вузла\n-   [DOMNode::getNodePath](domnode.getnodepath.md) \\- Отримання XPath вузла\n-   [DOMNode::getRootNode](domnode.getrootnode.md)— Отримує кореневий вузол\n-   [DOMNode::hasAttributes](domnode.hasattributes.md)— Перевіряє, чи цей вузол має атрибути.\n-   [DOMNode::hasChildNodes](domnode.haschildnodes.md)— Перевіряє, чи цей вузол має нащадків.\n-   [DOMNode::insertBefore](domnode.insertbefore.md)— Додає новий дочірній вузол перед вказаним вузлом\n-   [DOMNode::isDefaultNamespace](domnode.isdefaultnamespace.md)— Перевіряє, чи вказаний URI простору імен вузла є простором імен за умовчанням чи ні\n-   [DOMNode::isEqualNode](domnode.isequalnode.md)— Перевіряє, що обидва вузли ідентичні\n-   [DOMNode::isSameNode](domnode.issamenode.md)— Вказує, чи є два вузли одним і тим самим вузлом\n-   [DOMNode::isSupported](domnode.issupported.md)— Перевіряє, чи підтримується можливість у певній версії\n-   [DOMNode::lookupNamespaceURI](domnode.lookupnamespaceuri.md)— Отримує URI простору імен вузла за префіксом\n-   [DOMNode::lookupPrefix](domnode.lookupprefix.md)— Повертає префікс простору імен вузла із URI простору імен\n-   [DOMNode::normalize](domnode.normalize.md) \\- Нормалізує вузол\n-   [DOMNode::removeChild](domnode.removechild.md) \\- Видаляє дочірній вузол зі списку нащадків.\n-   [DOMNode::replaceChild](domnode.replacechild.md) \\- Замінює дочірній вузол\n","title":"Клас DOMNode","contentType":2,"navigation":[{"class.domnamespacenode.md":"« DOMNameSpaceNode"},{"domnode.appendchild.md":"DOMNode::appendChild »"},{"index.md":"PHP Manual"},{"book.dom.md":"DOM"}]}},"__N_SSG":true}