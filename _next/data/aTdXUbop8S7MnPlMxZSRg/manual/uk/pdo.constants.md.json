{"pageProps":{"page":{"slug":"pdo.constants.md","content":"# Обумовлені константи\n\nНаведені нижче константи визначені цим модулем і доступні або в збірках PHP з підтримкою цього модуля, або коли модуль динамічно завантажений під час виконання коду.\n\n**`PDO::PARAM_BOOL`**(int)\n\nПодає логічний тип даних.\n\n**`PDO::PARAM_NULL`**(int)\n\nНадає тип даних SQL NULL.\n\n**`PDO::PARAM_INT`**(int)\n\nНадає тип даних SQL INTEGER.\n\n**`PDO::PARAM_STR`**(int)\n\nНадає типи даних SQL CHAR, VARCHAR та інші рядкові типи.\n\n**`PDO::PARAM_STR_NATL`**(int)\n\nПрапор для позначення, що рядки використовують національний набір символів. Константа доступна з версії PHP 7.2.0\n\n**`PDO::PARAM_STR_CHAR`**(int)\n\nПрапор для позначення того, що рядки використовують звичайний набір символів. Константа доступна з версії PHP 7.2.0\n\n**`PDO::PARAM_LOB`**(int)\n\nЯвляє тип даних великих об'єктів SQL.\n\n**`PDO::PARAM_STMT`**(int)\n\nПредставляє тип recordset. На даний момент не підтримується драйверами.\n\n**`PDO::PARAM_INPUT_OUTPUT`**(int)\n\nВказує, що параметр є параметром INOUT для процедури, що зберігається. Для завдання типу даних необхідно застосувати побітове АБО цієї константи з константою типу PDO::PARAM\\_\\*\n\n**`PDO::FETCH_DEFAULT`**(int)\n\nВказує, що потрібно використовувати режим вибірки за промовчанням. Доступно з PHP 8.0.7.\n\n**`PDO::FETCH_LAZY`**(int)\n\nВказує, що метод вибірки даних повинен повертати кожний рядок у вигляді об'єкта з іменами властивостей, які відповідають іменам стовпців, які повернуто в результуючому наборі. Константа **`PDO::FETCH_LAZY`** повертає об'єкт класу [PDORow](class.pdorow.md)що створює імена властивостей об'єкта в міру доступу до них. Константа недійсна всередині методу [PDOStatement::fetchAll()](pdostatement.fetchall.md)\n\n**`PDO::FETCH_ASSOC`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати кожен рядок результуючого набору у вигляді асоціативного масиву, індекси якого відповідають іменам стовпців результату вибірки. Якщо у результуючому наборі кілька стовпців з однаковими іменами, **`PDO::FETCH_ASSOC`** повертатиме за одним значенням для кожного стовпця. Значення стовпців, що дублюються, будуть втрачені.\n\n**`PDO::FETCH_NAMED`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати кожен рядок результуючого набору у вигляді асоціативного масиву, індекси якого відповідають іменам стовпців результату вибірки. Якщо у результуючому наборі кілька стовпців з однаковими іменами, **`PDO::FETCH_NAMED`** повертає масив значень кожного імені стовпця.\n\n**`PDO::FETCH_NUM`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати кожний рядок результуючого набору у вигляді масиву, індекси якого відповідають порядковим номерам стовпців результату вибірки. Нумерація починається із 0.\n\n**`PDO::FETCH_BOTH`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати кожний рядок результуючого набору у вигляді масиву. Індексація масиву проводиться і за іменами стовпців та за їх порядковими номерами в результуючій таблиці. Нумерація починається із 0.\n\n**`PDO::FETCH_OBJ`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати кожен рядок результуючого набору у вигляді об'єкта, імена властивостей якого відповідають іменам стовпців результуючої таблиці.\n\n**`PDO::FETCH_BOUND`**(int)\n\nВказує, що метод, що здійснює вибірку даних, повинен повертати TRUE і надавати значення стовпців таблиці змінним PHP, які були прив'язані методами [PDOStatement::bindParam()](pdostatement.bindparam.md) або [PDOStatement::bindColumn()](pdostatement.bindcolumn.md)\n\n**`PDO::FETCH_COLUMN`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен повертати значення лише одного стовпця з наступного рядка результуючого набору.\n\n**`PDO::FETCH_CLASS`**(int)\n\nВказує, що спосіб, що здійснює вибірку даних, повинен повертати новий об'єкт запитуваного класу, заповнюючи іменовані характеристики класу значеннями стовпців результуючої таблиці.\n\n> **Зауваження**: Якщо в класі немає властивості з необхідним ім'ям, буде викликаний магічний метод [**\\_\\_set()**](language.oop5.overloading.md#language.oop5.overloading.members)\n\n**`PDO::FETCH_INTO`**(int)\n\nВказує, що метод, який здійснює вибірку даних, повинен оновлювати існуючий об'єкт класу, що запитується, заповнюючи іменовані властивості класу значеннями стовпців результуючої таблиці.\n\n**`PDO::FETCH_FUNC`**(int)\n\nДозволяє налаштувати обробку даних «на льоту» під час вибірки (константа дійсна лише для функції [PDOStatement::fetchAll()](pdostatement.fetchall.md)\n\n**`PDO::FETCH_GROUP`**(int)\n\nУгруповання значень, що повертаються. Зазвичай комбінується з константами **`PDO::FETCH_COLUMN`** або **`PDO::FETCH_KEY_PAIR`**\n\n**`PDO::FETCH_UNIQUE`**(int)\n\nВибирати лише унікальні значення, виключати дублі з результату.\n\n**`PDO::FETCH_KEY_PAIR`**(int)\n\nВибірка з двох стовпців буде поміщена масив, в якому значення першого стовпця приймаються за ключі, а значення другого - за значення.\n\n**`PDO::FETCH_CLASSTYPE`**(int)\n\nВизначення імені класу за значенням першого стовпця.\n\n**`PDO::FETCH_SERIALIZE`**(int)\n\nАналогична\\*\\*`PDO::FETCH_INTO`\\*\\*але об'єкт представлений у вигляді серіалізованого рядка. Конструктор класу не буде викликаний, якщо цей прапор встановлено. Оголошена застарілою починаючи з PHP 8.1.0.\n\n**`PDO::FETCH_PROPS_LATE`**(int)\n\nВикликати конструктор до встановлення властивостей.\n\n**`PDO::ATTR_AUTOCOMMIT`**(int)\n\nЕсли значение\\*\\*`false`\\*\\*, PDO спробує відключити автоматичну фіксацію змін у базі даних, таким чином початком транзакції буде встановлення з'єднання.\n\n**`PDO::ATTR_PREFETCH`**(int)\n\nЗміною розміру буфера передвиборки регулюють баланс між витратою пам'яті та швидкістю роботи з базою даних. Не всі зв'язки база/драйвер підтримують зміну розміру цього буфера. Чим більший цей розмір, тим вища швидкодія, але й вища витрата пам'яті.\n\n**`PDO::ATTR_TIMEOUT`**(int)\n\nЗадає час у секундах, протягом якого має бути завершено обмін із базою даних.\n\n**`PDO::ATTR_ERRMODE`**(int)\n\nДетально про цей атрибут розказано у розділі [Помилки та їх обробка](pdo.error-handling.md)\n\n**`PDO::ATTR_SERVER_VERSION`**(int)\n\nЦей атрибут призначений лише для читання; він зберігає інформацію про версії сервера баз даних, якого підключено модуль PDO.\n\n**`PDO::ATTR_CLIENT_VERSION`**(int)\n\nЦей атрибут призначений лише для читання; він зберігає відомості про версію бібліотек клієнтів, які використовує драйвер PDO.\n\n**`PDO::ATTR_SERVER_INFO`**(int)\n\nЦей атрибут призначений лише для читання; він зберігає інформацію про сервер бази даних, до якого підключений модуль PDO.\n\n**`PDO::ATTR_CONNECTION_STATUS`**(int)\n\n**`PDO::ATTR_CASE`**(int)\n\nПриведення імен шпальт до потрібного регістру, який задається константами `PDO::CASE_*`\n\n**`PDO::ATTR_CURSOR_NAME`**(int)\n\nОтримати або встановити назву курсору. Особливо корисно для роботи з курсорами, що прокручуються, або оновлення даних у конкретних позиціях.\n\n**`PDO::ATTR_CURSOR`**(int)\n\nВибір типу курсору. Драйвер PDO підтримує два типи курсорів: **`PDO::CURSOR_FWDONLY`** і **`PDO::CURSOR_SCROLL`**. Якщо немає впевненості, що потрібен саме курсор, що прокручується, вибирають курсор **`PDO::CURSOR_FWDONLY`**\n\n**`PDO::ATTR_DRIVER_NAME`**(string)\n\nПовертає ім'я драйвера.\n\n**Приклад #1 Приклад використання константи **`PDO::ATTR_DRIVER_NAME`****\n\n```php\n<?php\nif ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {\n  echo \"Работаем с mysql; делаем что-то специфичное для mysql\\n\";\n}\n?>\n```\n\n**`PDO::ATTR_ORACLE_NULLS`**(int)\n\nПеретворення порожніх рядків у SQL NULL у вибірках.\n\n**`PDO::ATTR_PERSISTENT`** [mixed](language.types.declarations.md#language.types.declarations.mixed)) .\n\nЗапитувати постійне з'єднання замість встановлення нового підключення. Докладніше про цей атрибут дивіться розділ [Підключення та керування підключеннями](pdo.connections.md)\n\n**`PDO::ATTR_STATEMENT_CLASS`**(int)\n\nВстановлює ім'я класу, котрому повертаються запити (statements).\n\n**`PDO::ATTR_FETCH_CATALOG_NAMES`**(int)\n\nПрипис передувати імена стовпців іменами каталогів у результуючому наборі. Ім'я стовпця відокремлюється від імені каталогу десятковою точкою (.). Підтримка цього атрибута закладена лише на рівні драйвера; цей функціонал підтримується не всі драйвери.\n\n**`PDO::ATTR_FETCH_TABLE_NAMES`**(int)\n\nПрипис передувати імена стовпців іменами вихідних таблиць в результуючому наборі. Ім'я стовпця відокремлюється від імені таблиці десятковою точкою (.). Підтримка цього атрибута закладена лише на рівні драйвера; цей функціонал підтримується не всі драйвери.\n\n**`PDO::ATTR_STRINGIFY_FETCHES`**(int)\n\nПримусово перетворювати всі значення в рядки.\n\n**`PDO::ATTR_MAX_COLUMN_LEN`**(int)\n\nВстановлює максимальну довжину імені стовпця.\n\n**`PDO::ATTR_DEFAULT_FETCH_MODE`**(int)\n\n**`PDO::ATTR_EMULATE_PREPARES`**(int)\n\n**`PDO::ATTR_DEFAULT_STR_PARAM`**(int)\n\nВстановлює тип рядкового параметра за промовчанням, значенням може бути одна з констант: \\*\\*`PDO::PARAM_STR_NATL`** або **`PDO::PARAM_STR_CHAR`\\*\\*Константа доступна с версии PHP 7.2.0.\n\n**`PDO::ERRMODE_SILENT`**(int)\n\nПрипис не викидати винятків у разі помилок. Очікується, що розробник явно стежитиме за тим, щоб не з'являлися помилки. Це стандартний режим. Докладніше про цей атрибут розказано у розділі [Помилки та їх обробка](pdo.error-handling.md)\n\n**`PDO::ERRMODE_WARNING`**(int)\n\nПрипис видавати повідомлення про помилку рівня PHP **`E_WARNING`**. Докладніше про цей атрибут розказано у розділі [Помилки та їх обробка](pdo.error-handling.md)\n\n**`PDO::ERRMODE_EXCEPTION`**(int)\n\nПрипис викидати виняток [PDOException](class.pdoexception.md) при помилках. Докладніше про цей атрибут розказано у розділі [Помилки та їх обробка](pdo.error-handling.md)\n\n**`PDO::CASE_NATURAL`**(int)\n\nРозпорядження залишати імена стовпців такими, якими їх видав драйвер бази даних.\n\n**`PDO::CASE_LOWER`**(int)\n\nНаводити імена стовпців до нижнього регістру.\n\n**`PDO::CASE_UPPER`**(int)\n\nНаводити імена стовпців до верхнього регістру.\n\n**`PDO::NULL_NATURAL`**(int)\n\n**`PDO::NULL_EMPTY_STRING`**(int)\n\n**`PDO::NULL_TO_STRING`**(int)\n\n**`PDO::FETCH_ORI_NEXT`**(int)\n\nНаказ вибрати наступний рядок з результуючого набору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::FETCH_ORI_PRIOR`**(int)\n\nРозпорядження вибрати попередній рядок з результуючого набору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::FETCH_ORI_FIRST`**(int)\n\nНаказ вибрати перший рядок з результуючого набору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::FETCH_ORI_LAST`**(int)\n\nНаказ вибрати останній рядок з результуючого набору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::FETCH_ORI_ABS`**(int)\n\nПрипис вибрати рядок із зазначеним номером із результуючого набору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::FETCH_ORI_REL`**(int)\n\nПрипис вибрати рядок із результуючого набору щодо поточного положення курсору. Константа дійсна тільки для курсорів, що прокручуються.\n\n**`PDO::CURSOR_FWDONLY`**(int)\n\nРозпорядження створити об'єкт [PDOStatement](class.pdostatement.md) із послідовним курсором. Послідовні курсори вибрані за замовчуванням, оскільки це найбільш загальний і швидкий PHP шаблон доступу до даних.\n\n**`PDO::CURSOR_SCROLL`**(int)\n\nРозпорядження створити об'єкт [PDOStatement](class.pdostatement.md) з курсором, що прокручується. Передача констант `PDO::FETCH_ORI_*` задає режим роботи курсору, те, як вибиратимуться рядки з результуючого набору запиту.\n\n**`PDO::ERR_NONE`**(string)\n\nВідповідає коду SQLSTATE '00000', який говорить про те, що SQL-запит успішно виконаний без помилок або попереджень. Ця константа підвищує зручність під час роботи з методами [PDO::errorCode()](pdo.errorcode.md) або [PDOStatement::errorCode()](pdostatement.errorcode.md) для перевірки появи помилок. Можна також перевіряти, чи є помилка всередині методу, порівнюючи код повернення з цією константою.\n\n**`PDO::PARAM_EVT_ALLOC`**(int)\n\nПодія, що виникає при виділенні пам'яті під об'єкт\n\n**`PDO::PARAM_EVT_FREE`**(int)\n\nПодія, що виникає при звільненні пам'яті, що займається об'єктом\n\n**`PDO::PARAM_EVT_EXEC_PRE`**(int)\n\nПодія, що виникає перед запуском запиту.\n\n**`PDO::PARAM_EVT_EXEC_POST`**(int)\n\nПодія, що виникає після запуску запиту.\n\n**`PDO::PARAM_EVT_FETCH_PRE`**(int)\n\nПодія, що виникає перед вибіркою даних із результуючого набору.\n\n**`PDO::PARAM_EVT_FETCH_POST`**(int)\n\nПодія, що виникає після вибірки даних із результуючого набору.\n\n**`PDO::PARAM_EVT_NORMALIZE`**(int)\n\nПодія, що виникає під час реєстрації параметрів, дозволяє драйверу нормалізувати імена параметрів.\n\n**`PDO::SQLITE_DETERMINISTIC`**(int)\n\nВказує, що функція створена методом [PDO::sqliteCreateFunction()](pdo.sqlitecreatefunction.md) детермінована, тобто вона завжди повертає однаковий результат для однакових вхідних даних в одному виразі SQL. (Доступно з PHP 7.1.4.)\n","title":"Обумовлені константи","contentType":2,"navigation":[{"pdo.resources.md":"« Типи ресурсів"},{"pdo.connections.md":"Підключення та керування підключеннями »"},{"index.md":"PHP Manual"},{"book.pdo.md":"PDO"}]}},"__N_SSG":true}