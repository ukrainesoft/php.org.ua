{"pageProps":{"page":{"slug":"class.ffi.md","content":"# Основний інтерфейс до коду та даних C\n\n(PHP 7 >= 7.4.0, PHP 8)\n\n## Вступ\n\nОб'єкти цього класу створюються фабричними методами [FFI::cdef()](ffi.cdef.md) [FFI::load()](ffi.load.md) і [FFI::scope()](ffi.scope.md). Оголошені змінні C доступні як властивості екземпляра FFI, а функції як його методи. Оголошені типи C можна використовувати для створення структур даних за допомогою [FFI::new()](ffi.new.md) і [FFI::type()](ffi.type.md)\n\nРозбір оголошень FFI і завантаження бібліотеки, що розділяється, може зайняти значний час. Немає сенсу робити це для кожного HTTP-запиту в оточенні Web. Проте можна перезавантажити оголошення FFI та бібліотеки під час старту PHP та інстанціювати об'єкти FFI за потребою. Заголовні файли можуть бути розширені спеціальними оголошеннями `FFI_SCOPE`(наПриклад,`#define FFI_SCOPE \"foo\"`; скоуп за замовчуванням \"C\") і завантажені за допомогою [FFI::load()](ffi.load.md) під час завантаження. Це призведе до створення постійних прив'язок, які будуть доступні для всіх запитів через [FFI::scope()](ffi.scope.md). Докладніше читайте на сторінці [Прості приклади використання FFI](ffi.examples-complete.md)\n\nУ той самий скоуп можна завантажити кілька заголовних файлів.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     final\n     class FFI\n     {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      __BIGGEST_ALIGNMENT__;\n\n\n    /* Методы */\n    \n   public static addr(FFI\\CData &$ptr): FFI\\CData\npublic static alignof(FFI\\CData|FFI\\CType &$ptr): int\npublic static arrayType(FFI\\CType $type, array $dimensions): FFI\\CType\npublic static cast(FFI\\CType|string $type, FFI\\CData|int|float|bool|null &$ptr): ?FFI\\CData\npublic cast(FFI\\CType|string $type, FFI\\CData|int|float|bool|null &$ptr): ?FFI\\CData\npublic static cdef(string $code = \"\", ?string $lib = null): FFI\npublic static free(FFI\\CData &$ptr): void\npublic static isNull(FFI\\CData &$ptr): bool\npublic static load(string $filename): ?FFI\npublic static memcmp(string|FFI\\CData &$ptr1, string|FFI\\CData &$ptr2, int $size): int\npublic static memcpy(FFI\\CData &$to, FFI\\CData|string &$from, int $size): void\npublic static memset(FFI\\CData &$ptr, int $value, int $size): void\npublic static new(FFI\\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\\CData\npublic new(FFI\\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\\CData\npublic static scope(string $name): FFI\npublic static sizeof(FFI\\CData|FFI\\CType &$ptr): int\npublic static string(FFI\\CData &$ptr, ?int $size = null): string\npublic static type(string $type): ?FFI\\CType\npublic type(string $type): ?FFI\\CType\npublic static typeof(FFI\\CData &$ptr): FFI\\CType\n\n   }\n```\n\n## Обумовлені константи\n\n**`FFI::__BIGGEST_ALIGNMENT__`**\n\n## Зміст\n\n-   [FFI::addr](ffi.addr.md)— Створює некерований покажчик даних C\n-   [FFI::alignof](ffi.alignof.md) \\- Повертає величину вирівнювання\n-   [FFI::arrayType](ffi.arraytype.md)— Динамічно конструює новий тип масиву\n-   [FFI::cast](ffi.cast.md)— Здійснює перетворення типу C\n-   [FFI::cdef](ffi.cdef.md)— Створює новий об'єкт FFI\n-   [FFI::free](ffi.free.md)— Вивільняє некеровану структуру даних\n-   [FFI::isNull](ffi.isnull.md)— Перевіряє, чи є FFI\\\\CData нульовим покажчиком\n-   [FFI::load](ffi.load.md)— Завантажити декларації C із заголовного файлу\n-   [FFI::memcmp](ffi.memcmp.md)— Порівнює дві області пам'яті\n-   [FFI::memcpy](ffi.memcpy.md)— Копіює вміст однієї області пам'яті в іншу\n-   [FFI::memset](ffi.memset.md)— Заповнити область пам'яті\n-   [FFI::new](ffi.new.md) \\- Створює структуру даних C\n-   [FFI::scope](ffi.scope.md)— Інстанціює об'єкт FFI відповідно до декларації С, розібраної на етапі передзавантаження\n-   [FFI::sizeof](ffi.sizeof.md)— Повертає розмір даних або типу C\n-   [FFI::string](ffi.string.md)— Створює рядок PHP із області пам'яті\n-   [FFI::type](ffi.type.md)— Створює об'єкт FFI\\\\CType із декларації С\n-   [FFI::typeof](ffi.typeof.md)— Отримує FFI\\\\CType для FFI\\\\CData\n","title":"Основний інтерфейс до коду та даних C","contentType":2,"navigation":[{"ffi.examples-complete.md":"« Комплексний приклад PHP/FFI/preloading"},{"ffi.addr.md":"FFI::addr »"},{"index.md":"PHP Manual"},{"book.ffi.md":"FFI"}]}},"__N_SSG":true}