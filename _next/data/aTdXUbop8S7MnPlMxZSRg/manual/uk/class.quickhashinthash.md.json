{"pageProps":{"page":{"slug":"class.quickhashinthash.md","content":"# Клас QuickHashIntHash\n\n(PECL quickhash >= Unknown)\n\n## Вступ\n\nКлас-обгортка для хеш-таблиці з ключами та значеннями, що є цілими числами. Також реалізує інтерфейс [ArrayAccess](class.arrayaccess.md)\n\nКлас реалізує інтерфейс [Iterator](class.iterator.md)що дає можливість перебору за допомогою конструкції [`foreach`](control-structures.foreach.md). Порядок проходження елементів не гарантується.\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      class QuickHashIntHash\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      CHECK_FOR_DUPES = 1;\n\n    const\n     int\n      DO_NOT_USE_ZEND_ALLOC = 2;\n\n    const\n     int\n      HASHER_NO_HASH = 256;\n\n    const\n     int\n      HASHER_JENKINS1 = 512;\n\n    const\n     int\n      HASHER_JENKINS2 = 1024;\n\n\n    /* Методы */\n    \n   public add(int $key, int $value = ?): bool\npublic __construct(int $size, int $options = ?)\npublic delete(int $key): bool\npublic exists(int $key): bool\npublic get(int $key): int\npublic getSize(): int\npublic static loadFromFile(string $filename, int $options = ?): QuickHashIntHash\npublic static loadFromString(string $contents, int $options = ?): QuickHashIntHash\npublic saveToFile(string $filename): void\npublic saveToString(): string\npublic set(int $key, int $value): bool\npublic update(int $key, int $value): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`QuickHashIntHash::CHECK_FOR_DUPES`**\n\nЯкщо увімкнено, то додавання повторюваних елементів до набору (за допомогою методів [QuickHashIntHash::add()](quickhashinthash.add.md) або [QuickHashIntHash::loadFromFile()](quickhashinthash.loadfromfile.md)) призведе до відкидання цих елементів. Ця функціональність дещо уповільнює роботу, так що має використовуватися лише якщо дійсно необхідний.\n\n**`QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC`**\n\nЗабороняє використання вбудованого в PHP менеджера пам'яті внутрішніх структур. Якщо увімкнено цю опцію, то пам'ять, що використовується, не враховуватиметься налаштуванням [memory\\_limit](ini.core.md#ini.memory-limit)\n\n**`QuickHashIntHash::HASHER_NO_HASH`**\n\nВказує, що не потрібно використовувати хешування, а замість неї, для пошуку індексу в ланцюжку, використовувати модуль. Це не швидше за звичайне хешування і породжує більше колізій.\n\n**`QuickHashIntHash::HASHER_JENKINS1`**\n\nФункція, що хешує, за замовчуванням.\n\n**`QuickHashIntHash::HASHER_JENKINS2`**\n\nІнший хешуючий алгоритм.\n\n## Зміст\n\n-   [QuickHashIntHash::add](quickhashinthash.add.md)— Додати елемент у хеш\n-   [QuickHashIntHash::\\_\\_construct](quickhashinthash.construct.md)— Створює об'єкт QuickHashIntHash\n-   [QuickHashIntHash::delete](quickhashinthash.delete.md)— Метод видаляє запис із хешу\n-   [QuickHashIntHash::exists](quickhashinthash.exists.md)— Метод перевіряє, чи є ключ частиною хешу\n-   [QuickHashIntHash::get](quickhashinthash.get.md)— Метод отримує значення з хеша за його ключем.\n-   [QuickHashIntHash::getSize](quickhashinthash.getsize.md)— Повертає кількість елементів у хеші\n-   [QuickHashIntHash::loadFromFile](quickhashinthash.loadfromfile.md)— Фабричний метод створює хеш із файлу\n-   [QuickHashIntHash::loadFromString](quickhashinthash.loadfromstring.md)— Фабричний метод створює хеш із рядка\n-   [QuickHashIntHash::saveToFile](quickhashinthash.savetofile.md)— Метод зберігає хеш у пам'яті на диск\n-   [QuickHashIntHash::saveToString](quickhashinthash.savetostring.md)— Метод повертає серіалізовану версію хешу\n-   [QuickHashIntHash::set](quickhashinthash.set.md)— Метод оновлює запис у хеші новим значенням або додає новий, якщо запис не існує\n-   [QuickHashIntHash::update](quickhashinthash.update.md)— Метод оновлює запис у хеші новим значенням\n","title":"Клас QuickHashIntHash","contentType":2,"navigation":[{"quickhashintset.savetostring.md":"« QuickHashIntSet::saveToString"},{"quickhashinthash.add.md":"QuickHashIntHash::add »"},{"index.md":"PHP Manual"},{"book.quickhash.md":"Quickhash"}]}},"__N_SSG":true}