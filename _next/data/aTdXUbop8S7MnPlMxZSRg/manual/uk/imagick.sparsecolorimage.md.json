{"pageProps":{"page":{"slug":"imagick.sparsecolorimage.md","content":"# Imagick::sparseColorImage\n\n(PECL imagick 2 >= 2.3.0, PECL imagick 3)\n\nImagick::sparseColorImage — Інтерполює кольори\n\n### Опис\n\n```methodsynopsis\npublic Imagick::sparseColorImage(int $SPARSE_METHOD, array $arguments, int $channel = Imagick::CHANNEL_DEFAULT): bool\n```\n\nВраховуючи масив аргументів, що містить числові значення, метод інтерполює кольори, знайдені з цими координатами, по всьому зображенню, використовуючи `sparse_method`. Цей метод доступний, якщо Imagick був скомпільований з версією ImageMagick 6.4.5 або старшим.\n\n### Список параметрів\n\n`SPARSE_METHOD`\n\nЗверніться до цього списку [sparse method constants](imagick.constants.md#imagick.constants.sparsecolormethod)\n\n`arguments`\n\nМасив, що містить координати. Масив у форматі `array(1,1, 2,45)`\n\n`channel`\n\nПередайте будь-яку коректну для вашого режиму каналу константу. Для застосування до більш ніж одного каналу комбінуйте [константи каналів](imagick.constants.md#imagick.constants.channel) за допомогою побітових операторів. За замовчуванням одно \\*\\*`Imagick::CHANNEL_DEFAULT`\\*\\*Обратитесь к списку[констант каналів](imagick.constants.md#imagick.constants.channel)\n\n### Значення, що повертаються\n\nУ разі успішної роботи повертає **`true`**\n\n### Помилки\n\nВикликає ImagickException у разі виникнення помилки.\n\n### Приклади\n\n**Приклад #1 SPARSECOLORMETHOD\\_BARYCENTRIC**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\n    function renderImageBarycentric2() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(\n            400, 400,\n            $points,\n            \\Imagick::SPARSECOLORMETHOD_BARYCENTRIC\n        );\n        header(\"Content-Type: image/png\");\n        echo $imagick->getImageBlob();\n    }\n\n?>\n```\n\n**Приклад #2 SPARSECOLORMETHOD\\_BILINEAR**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\n    function renderImageBilinear() {\n        $points = [[0.30, 0.10, 'red'], [0.10, 0.80, 'blue'], [0.70, 0.60, 'lime'], [0.80, 0.20, 'yellow'],];\n        $imagick = createGradientImage(500, 500, $points, \\Imagick::SPARSECOLORMETHOD_BILINEAR);\n        header(\"Content-Type: image/png\");\n        echo $imagick->getImageBlob();\n    }\n\n?>\n```\n\n**Приклад #3 SPARSECOLORMETHOD\\_SPEPARDS**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\n    function renderImageShepards() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(600, 600, $points, \\Imagick::SPARSECOLORMETHOD_SPEPARDS);\n        header(\"Content-Type: image/png\");\n        echo $imagick->getImageBlob();\n    }\n\n?>\n```\n\n**Приклад #4 SPARSECOLORMETHOD\\_VORONOI**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\n    function renderImageVoronoi() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(500, 500, $points, \\Imagick::SPARSECOLORMETHOD_VORONOI);\n        header(\"Content-Type: image/png\");\n        echo $imagick->getImageBlob();\n    }\n\n?>\n```\n\n**Приклад #5 SPARSECOLORMETHOD\\_BARYCENTRIC**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\n    function renderImageBarycentric() {\n        $points = [\n            [0, 0, 'skyblue'],\n            [-1, 1, 'skyblue'],\n            [1, 1, 'black'],\n        ];\n        $imagick = createGradientImage(600, 200, $points, \\Imagick::SPARSECOLORMETHOD_BARYCENTRIC);\n        header(\"Content-Type: image/png\");\n        echo $imagick->getImageBlob();\n    }\n\n?>\n```\n\n**Приклад #6 createGradientImage is used by other examples**Imagick::sparseColorImage()\\*\\*\\*\\*\n\n```php\n<?php\nfunction createGradientImage($width, $height, $colorPoints, $sparseMethod, $absolute = false) {\n\n    $imagick = new \\Imagick();\n    $imagick->newImage($width, $height, \"white\");\n    $imagick->setImageFormat(\"png\");\n\n    $barycentricPoints = array();\n\n    foreach ($colorPoints as $colorPoint) {\n\n        if ($absolute == true) {\n            $barycentricPoints[] = $colorPoint[0];\n            $barycentricPoints[] = $colorPoint[1];\n        }\n        else {\n            $barycentricPoints[] = $colorPoint[0] * $width;\n            $barycentricPoints[] = $colorPoint[1] * $height;\n        }\n\n        if (is_string($colorPoint[2])) {\n            $imagickPixel = new \\ImagickPixel($colorPoint[2]);\n        }\n        else if ($colorPoint[2] instanceof \\ImagickPixel) {\n            $imagickPixel = $colorPoint[2];\n        }\n        else{\n            $errorMessage = sprintf(\n                \"Значение %s не является ни строкой, ни классом ImagickPixel. Не может использовать в качестве цвета.\",\n                $colorPoint[2]\n            );\n\n            throw new \\InvalidArgumentException(\n                $errorMessage\n            );\n        }\n\n        $red = $imagickPixel->getColorValue(\\Imagick::COLOR_RED);\n        $green = $imagickPixel->getColorValue(\\Imagick::COLOR_GREEN);\n        $blue = $imagickPixel->getColorValue(\\Imagick::COLOR_BLUE);\n        $alpha = $imagickPixel->getColorValue(\\Imagick::COLOR_ALPHA);\n\n        $barycentricPoints[] = $red;\n        $barycentricPoints[] = $green;\n        $barycentricPoints[] = $blue;\n        $barycentricPoints[] = $alpha;\n    }\n\n    $imagick->sparseColorImage($sparseMethod, $barycentricPoints);\n\n    return $imagick;\n}\n\n?>\n```\n","title":"Imagick::sparseColorImage","contentType":2,"navigation":[{"imagick.solarizeimage.md":"« Imagick::solarizeImage"},{"imagick.spliceimage.md":"Imagick::spliceImage »"},{"index.md":"PHP Manual"},{"class.imagick.md":"Imagick"}]}},"__N_SSG":true}