{"pageProps":{"page":{"slug":"function.oci-execute.md","content":"# oci\\_execute\n\n(PHP 5, PHP 7, PHP 8, PECL OCI8 >= 1.1.0)\n\noci\\_execute — Виконує підготовлений вираз\n\n### Опис\n\n```methodsynopsis\noci_execute(resource $statement, int $mode = OCI_COMMIT_ON_SUCCESS): bool\n```\n\nВиконує підготовлений вираз `statement`, створене за допомогою функції [oci\\_parse()](function.oci-parse.md)\n\nВідразу після виконання такого вираження `INSERT`, за промовчанням всі дані одразу будуть збережені в базі даних. Для подібних виразів `SELECT`, виконується лише логіка запиту. Результат же запиту можна отримати пізніше в PHP за допомогою подібних функцій [oci\\_fetch\\_array()](function.oci-fetch-array.md)\n\nКожне підготовлене вираз може бути виконано кілька разів для економії витратах від повторної підготовки запиту. Це найчастіше застосовується для виразів `INSERT`, коли до них прив'язані дані за допомогою [oci\\_bind\\_by\\_name()](function.oci-bind-by-name.md)\n\n### Список параметрів\n\n`statement`\n\nПравильне підготовлене вираження OCI.\n\n`mode`\n\nНеобов'язковий другий параметр з одним із наступних значень:\n\n**Режим виконання**\n\n| Константа | Опис |\n| --- | --- |\n| **`OCI_COMMIT_ON_SUCCESS`** | Автоматично зберігати всі незбережені зміни, здійснені за поточну сесію у разі успішного виконання виразу. Цей режим встановлено за замовчуванням. |\n| **`OCI_DESCRIBE_ONLY`** | Робить доступними метадані запити для подібних функцій [oci\\_field\\_name()](function.oci-field-name.md), але створює результат виконання висловлювання. Будь-яке подальше отримання даних, наприклад, за допомогою [oci\\_fetch\\_array()](function.oci-fetch-array.md) не буде зроблено. |\n| **`OCI_NO_AUTO_COMMIT`** | Не зберігати автоматично зміни. |\n\nИспользование режима\\*\\*`OCI_NO_AUTO_COMMIT`\\*\\* відкриває чи продовжує транзакцію. Ця транзакція автоматично відкочується під час закриття з'єднання або завершення скрипту. Використовуйте [oci\\_commit()](function.oci-commit.md) для завершення транзакції та [oci\\_rollback()](function.oci-rollback.md) для її скасування.\n\nПри вставці та оновленні даних рекомендується використання транзакцій для реляційної цілісності даних та для покращення продуктивності.\n\nЯкщо для якогось виразу використовується режим **`OCI_NO_AUTO_COMMIT`**, і згодом не використовуються [oci\\_commit()](function.oci-commit.md) або [oci\\_rollback()](function.oci-rollback.md), то OCI8 буде виконувати відкат при завершенні скрипта навіть якщо дані не були змінені. Для уникнення непотрібних відкатів більшість скриптів не використовують режим **`OCI_NO_AUTO_COMMIT`** для запитів або PL/SQL. Будьте уважні, щоб забезпечити належну узгодженість транзакцій під час використання **oci\\_execute()** із різними режимами в одному скрипті.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1**oci\\_execute()\\*\\* під час виконання запитів\\*\\*\n\n```php\n<?php\n\n$conn = oci_connect('hr', 'welcome', 'localhost/XE');\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"\") . \"</td>\\n\";\n    }\n    echo \"</tr>\\n\";\n}\necho \"</table>\\n\";\n\n?>\n```\n\n**Приклад #2**oci\\_execute()\\*\\* без вказівки певного режиму\\*\\*\n\n```php\n<?php\n\n// Перед выполнением создайте таблицу:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');\n\noci_execute($stid); // Строка сохранена и становится видимой для других пользователей\n\n?>\n```\n\n**Приклад #3**oci\\_execute()**с**`OCI_NO_AUTO_COMMIT`\\*\\*\\*\\*\n\n```php\n<?php\n\n// Перед выполнением создайте таблицу:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (:bv)');\noci_bind_by_name($stid, ':bv', $i, 10);\nfor ($i = 1; $i <= 5; ++$i) {\n    oci_execute($stid, OCI_NO_AUTO_COMMIT);\n}\noci_commit($conn);  // сохранение все новых значений: 1, 2, 3, 4, 5\n\n?>\n```\n\n**Приклад #4**oci\\_execute()\\*\\* з різними режимами\\*\\*\n\n```php\n<?php\n\n// Перед выполнением создайте таблицу:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');\noci_execute($stid, OCI_NO_AUTO_COMMIT);  // data not committed\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (456)');\noci_execute($stid);  // commits both 123 and 456 values\n\n?>\n```\n\n**Приклад #5**oci\\_execute()**с**`OCI_DESCRIBE_ONLY`\\*\\*\\*\\*\n\n```php\n<?php\n\n$conn = oci_connect('hr', 'welcome', 'localhost/XE');\n\n$stid = oci_parse($conn, 'SELECT * FROM locations');\noci_execute($s, OCI_DESCRIBE_ONLY);\nfor ($i = 1; $i <= oci_num_fields($stid); ++$i) {\n    echo oci_field_name($stid, $i) . \"<br>\\n\";\n}\n\n?>\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Транзакції автоматично відкочуються під час закриття з'єднання або завершення виконання скрипту. Примусово викликайте [oci\\_commit()](function.oci-commit.md) для завершення транзакції.\n> \n> Будь-який виклик **oci\\_execute()**, який примусово використовує **`OCI_COMMIT_ON_SUCCESS`** або за умовчанням завершуватиме будь-яку попередню незакриту транзакцію.\n> \n> Будь-який вираз Oracle DDL подібний `CREATE`или`DROP` буде автоматично завершувати будь-яку. незакриту транзакцію.\n\n> **Зауваження** :\n> \n> Оскільки функція **oci\\_execute()** зазвичай відправляє вирази до бази даних, то **oci\\_execute()** може знайти деякі незначні синтаксичні помилки, коли локальна [oci\\_parse()](function.oci-parse.md)их не находит.\n\n### Дивіться також\n\n-   [oci\\_parse()](function.oci-parse.md) \\- готує запит до виконання\n","title":"oci\\_execute","contentType":2,"navigation":[{"function.oci-error.md":"« oci\\_error"},{"function.oci-fetch-all.md":"oci\\_fetch\\_all »"},{"index.md":"PHP Manual"},{"ref.oci8.md":"OCI8 Функції"}]}},"__N_SSG":true}