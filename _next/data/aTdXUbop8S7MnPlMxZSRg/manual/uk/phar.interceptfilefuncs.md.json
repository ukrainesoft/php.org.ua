{"pageProps":{"page":{"slug":"phar.interceptfilefuncs.md","content":"# Phar::interceptFileFuncs\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 2.0.0)\n\nPhar::interceptFileFuncs — Вказує phar перехоплювати fopen, file\\_get\\_contents, opendir та всі stat-функції\n\n### Опис\n\n```methodsynopsis\nfinal public static Phar::interceptFileFuncs(): void\n```\n\nВказує phar перехоплювати [fopen()](function.fopen.md) [readfile()](function.readfile.md) [file\\_get\\_contents()](function.file-get-contents.md) [opendir()](function.opendir.md) та всі stat-функції. Якщо будь-яка з цих функцій буде викликана з phar-архіву з відносним шляхом, виклик буде модифіковано для доступу до вмісту архіву. У випадку з абсолютними шляхами працюватимуть штатні функції доступу до файлової системи.\n\nЦя функція дозволяє писати програми, які працюють не прив'язані до жорсткого диска.\n\n### Список параметрів\n\nNo parameters.\n\n### Значення, що повертаються\n\n### Приклади\n\n**Приклад #1 Приклад використання** Phar::interceptFileFuncs()\\*\\*\\*\\*\n\n```php\n<?php\nPhar::interceptFileFuncs();\ninclude 'phar://' . __FILE__ . '/file.php';\n?>\n```\n\nПрипустимо, що ми маємо `/path/to/myphar.phar` і в ньому містяться файли `file.php`и`file2.txt`. . `file.php` містить такий код:\n\n**Приклад #2 Приклад використання** Phar::interceptFileFuncs()\\*\\*\\*\\*\n\n```php\n<?php\necho file_get_contents('file2.txt');\n?>\n```\n\nУ звичайному режимі PHP шукатиме `file2.txt` у поточній директорії, що є директорією запуску file.php, або поточною директорією у разі використання командного рядка . **Phar::interceptFileFuncs()** вкаже PHP, що поточна директорія - це `phar:///path/to/myphar.phar/` і, наприклад, буде відкритий файл `phar:///path/to/myphar.phar/file2.txt`\n","title":"Phar::interceptFileFuncs","contentType":2,"navigation":[{"phar.hasmetadata.md":"« Phar::hasMetadata"},{"phar.isbuffering.md":"Phar::isBuffering »"},{"index.md":"PHP Manual"},{"class.phar.md":"Phar"}]}},"__N_SSG":true}