{"pageProps":{"page":{"slug":"ds-hashable.hash.md","content":"# Ds\\\\Hashable::hash\n\n(PECL ds >= 1.0.0)\n\nDs\\\\Hashable::hash — Повертає скалярне значення для використання як значення хешу\n\n### Опис\n\n```methodsynopsis\nabstract public Ds\\Hashable::hash(): mixed\n```\n\nПовертає скалярне значення, яке використовуватиметься як значення хеша об'єктів.\n\nУ той час як значення хеша саме по собі не гарантує ідентичність об'єктів, але все ж таки всі об'єкти, рівні при перевірці за допомогою функції [Ds\\\\Hashable::equals()](ds-hashable.equals.md), повинні мати те саме значення хеша. Значення хешей для однакових об'єктів мають бути унікальними, наприклад ви можете легко повертати **`true`** для всіх об'єктів нічого не зламається. Єдиним наслідком буде те, що ваша хеш-таблиця перетвориться на пов'язаний список, тому що хеші всіх об'єктів будуть утримуватися в одному блоці. З цього випливає, що важливо вибирати хороше значення хеша, наприклад, унікальний ідентифікатор або адресу електронної пошти.\n\nЦей метод дозволяє використовувати об'єкти як ключі в таких структурах як [Ds\\\\Map](class.ds-map.md) і [Ds\\\\Set](class.ds-set.md) або будь-які інші структури, що розпізнають цей інтерфейс.\n\n**Застереження**\n\nНе вибираєте значення, яке може змінитися, наприклад, із загальнодоступних властивостей. Пошук у хеш-таблиці завершиться невдачею, якщо це значення зміниться.\n\n**Застереження**\n\nВсі однакові об'єкти повинні мати те саме значення хешу.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nСкалярне значення використовувати як значення хеша.\n\n### Приклади\n\n**Приклад #1 Приклад використання**Ds\\\\Hashable::hash()\\*\\*\\*\\*\n\n```php\n<?php\nclass HashableObject implements \\Ds\\Hashable\n{\n    private $name;\n    private $email;\n\n    public function __construct($name, $email)\n    {\n        $this->name  = $name;\n        $this->email = $email;\n    }\n\n    /**\n     * Должно возвращать одинаковое значение для всех объектов, которые\n     * должны считаться идентичными. Это значение не должно использоваться\n     * в простом сравнении для определения идентичности объектов.\n     */\n    public function hash()\n    {\n        return $this->email;\n    }\n\n    /**\n     * Функция определения идентичности объектов. Обычно проверяют, что\n     * значения хешей обоих объектов совпадают. Но можно добавить\n     * дополнительные проверки.\n     */\n    public function equals($obj): bool\n    {\n        return $this->name  === $obj->name\n            && $this->hash() === $obj->hash();\n    }\n}\n?>\n```\n","title":"Ds\\\\Hashable::hash","contentType":2,"navigation":[{"ds-hashable.equals.md":"« Ds\\\\Hashable::equals"},{"class.ds-sequence.md":"Ds\\\\Sequence »"},{"index.md":"PHP Manual"},{"class.ds-hashable.md":"Ds\\\\Hashable"}]}},"__N_SSG":true}