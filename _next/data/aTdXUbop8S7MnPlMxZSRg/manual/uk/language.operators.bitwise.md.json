{"pageProps":{"page":{"slug":"language.operators.bitwise.md","content":"## Побітові оператори\n\nПобітові оператори дозволяють зчитувати та встановлювати конкретні біти цілих чисел.\n\n**Побітові оператори**\n\n| Приклад | Название | Результат |\n| --- | --- | --- |\n| **`$a & $b`** | І | Біти, встановлені і в змінній $a, і в змінній $b. |\n| \\*\\*\\`$a | $b\\`\\*\\* | Або |\n| **`$a ^ $b`** | Виключне або | Будуть задані біти, які встановлені або лише в змінній $a, або тільки в змінній $b, але не в обох одночасно. |\n| **`~ $a`** | Заперечення | Будуть задані біти, які не встановлені у змінній $a, і навпаки. |\n| **`$a << $b`** | Зрушення вліво | Усі біти змінної $a зсуваються вліво на кількість позицій, зазначених у змінній $b (кожна позиція передбачає «множення на 2») |\n| **`$a >> $b`** | Зсув праворуч | Усі біти змінної $a зсуваються вправо на кількість позицій, зазначених у змінній $b (кожна позиція передбачає «розподіл на 2») |\n\nПобітове зрушення в PHP - це арифметична операція. Біти, зрушені межі числа, відкидаються. Зсув вліво доповнює число нулями праворуч, при цьому зсуваючи знаковий біт числа вліво, що означає, що знак операнда не зберігається. Зсув праворуч зберігає копію зрушеного знакового біта зліва, що означає, що знак операнда зберігається.\n\n[Пріоритет операторів](language.operators.precedence.md) змінюють дужками. Наприклад, вираз `$a & $b == true` спочатку перевіряє на рівність, а потім виконує побітове \"І\"; тоді як вираз `($a & $b) == true` спочатку виконує побітове \"І\", а потім виконує перевірку на рівність.\n\nЕсли оба операнда для операторов`&` и`^` Рядки, то операція буде проведена з кодами ASCII всіх символів рядка і в результаті поверне рядок. У всіх інших випадках, обидва операнди будуть [перетворені на ціле](language.types.integer.md#language.types.integer.casting) і результатом буде ціле число.\n\nЯкщо операнд для оператора `~` рядок, то операція буде проведена з кодами ASCII всіх символів рядка і в результаті поверне рядок, інакше як операнд, так і результат будуть вважатися цілими.\n\nІ операнди, і результат виконання операторів `<<`и`>>` розглядаються як цілі числа.\n\n```\n В PHP ini-настройка error\\_reporting использует побитовые значения,\n показывая, как практически снимать значения битов.\n Чтобы показать все ошибки, кроме замечаний,\n инструкции в файле php.ini говорят, что нужно указать:\n **`E_ALL & ~E_NOTICE`**\n\n\n Начинаем со значения E\\_ALL:\n 00000000000000000111011111111111\n Затем берём значение E\\_NOTICE...\n 00000000000000000000000000001000\n ... и инвертируем его оператором `~`:\n 11111111111111111111111111110111\n Наконец, указываем побитовое И (&), чтобы установить только те биты,\n которые установлены в единицу в обоих значениях:\n 00000000000000000111011111110111\n\n\n Другой способ достичь этого  — использовать ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR, `^`),\n чтобы получить только те биты, которые установлены в единицу\n либо только в одном, либо только в другом значении:\n **`E_ALL ^ E_NOTICE`**\n\n\n Через настройку опции error\\_reporting можно также показать,\n как устанавливать биты. Показать только ошибки и обрабатываемые ошибки можно\n так:\n **`E_ERROR | E_RECOVERABLE_ERROR`**\n\n\n Здесь процесс сочетает E\\_ERROR\n 00000000000000000000000000000001\n и\n 00000000000000000001000000000000\n через оператор ИЛИ (`|`),\n чтобы получить биты, установленные хотя бы в одном операнде:\n 00000000000000000001000000000001\n```\n\n**Приклад #1 Побітові операції І, АБО і ВИКЛЮЧНЕ АБО (AND, OR і XOR) над цілими числами**\n\n```php\n<?php\n\n/*\n * Не обращайте внимания на верхний раздел кода,\n * это просто форматирование для более ясного вывода.\n */\n$format = '(%1$2d = %1$04b) = (%2$2d = %2$04b)'\n        . ' %3$s (%4$2d = %4$04b)' . \"\\n\";\n\necho <<<EOH\n ----------  ----------- -- ----------\n результат   значение    оп тест\n ----------  ----------- -- ----------\nEOH;\n\n\n/*\n * Вот сами Приклады.\n */\n\n$values = array(0, 1, 2, 4, 8);\n$test = 1 + 4;\n\necho \"\\n Побитовое И (AND) \\n\";\nforeach ($values as $value) {\n    $result = $value & $test;\n    printf($format, $result, $value, '&', $test);\n}\n\necho \"\\n Побитовое (включающее) ИЛИ (OR) \\n\";\nforeach ($values as $value) {\n    $result = $value | $test;\n    printf($format, $result, $value, '|', $test);\n}\n\necho \"\\n Побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR) \\n\";\nforeach ($values as $value) {\n    $result = $value ^ $test;\n    printf($format, $result, $value, '^', $test);\n}\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n---------     ---------  -- ---------\n result         value     op test\n ---------     ---------  -- ---------\n Побитовое И\n( 0 = 0000) = ( 0 = 0000) & ( 5 = 0101)\n( 1 = 0001) = ( 1 = 0001) & ( 5 = 0101)\n( 0 = 0000) = ( 2 = 0010) & ( 5 = 0101)\n( 4 = 0100) = ( 4 = 0100) & ( 5 = 0101)\n( 0 = 0000) = ( 8 = 1000) & ( 5 = 0101)\n\n Побитовое ИЛИ\n( 5 = 0101) = ( 0 = 0000) | ( 5 = 0101)\n( 5 = 0101) = ( 1 = 0001) | ( 5 = 0101)\n( 7 = 0111) = ( 2 = 0010) | ( 5 = 0101)\n( 5 = 0101) = ( 4 = 0100) | ( 5 = 0101)\n(13 = 1101) = ( 8 = 1000) | ( 5 = 0101)\n\n Побитовое исключающее ИЛИ (XOR)\n( 5 = 0101) = ( 0 = 0000) ^ ( 5 = 0101)\n( 4 = 0100) = ( 1 = 0001) ^ ( 5 = 0101)\n( 7 = 0111) = ( 2 = 0010) ^ ( 5 = 0101)\n( 1 = 0001) = ( 4 = 0100) ^ ( 5 = 0101)\n(13 = 1101) = ( 8 = 1000) ^ ( 5 = 0101)\n```\n\n**Приклад #2 Побітова операція ВИКЛЮЧАЛЬНЕ АБО (XOR) над рядками**\n\n```php\n<?php\n\necho 12 ^ 9; // Выводит '5'\n\necho \"12\" ^ \"9\"; // Выводит символ Backspace (ascii 8)\n                 // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8\n\necho \"hallo\" ^ \"hello\"; // Выводит ascii-значения #0 #4 #0 #0 #0\n                        // 'a' ^ 'e' = #4\n\necho 2 ^ \"3\"; // Выводит 1\n              // 2 ^ ((int)\"3\") == 1\n\necho \"2\" ^ 3; // Выводит 1\n              // ((int)\"2\") ^ 3 == 1\n```\n\n**Приклад #3 Зсув бітів у цілих числах**\n\n```php\n<?php\n\n/*\n * Несколько Прикладов.\n */\n\necho \"\\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\\n\";\n\n$val = 4;\n$places = 1;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'слева была вставлена копия знакового бита');\n\n$val = 4;\n$places = 2;\n$res = $val >> $places;\np($res, $val, '>>', $places);\n\n$val = 4;\n$places = 3;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'биты были выдвинуты за правый край');\n\n$val = 4;\n$places = 4;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше 0');\n\necho \"\\n--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\\n\";\n\n$val = -4;\n$places = 1;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'слева была вставлена копия знакового бита');\n\n$val = -4;\n$places = 2;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'биты были выдвинуты за правый край');\n\n$val = -4;\n$places = 3;\n$res = $val >> $places;\np($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше -1');\n\necho \"\\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\\n\";\n\n$val = 4;\n$places = 1;\n$res = $val << $places;\np($res, $val, '<<', $places, 'правый край был дополнен нулями');\n\n$val = 4;\n$places = (PHP_INT_SIZE * 8) - 4;\n$res = $val << $places;\np($res, $val, '<<', $places);\n\n$val = 4;\n$places = (PHP_INT_SIZE * 8) - 3;\n$res = $val << $places;\np($res, $val, '<<', $places, 'знаковые биты были выдвинуты');\n\n$val = 4;\n$places = (PHP_INT_SIZE * 8) - 2;\n$res = $val << $places;\np($res, $val, '<<', $places, 'биты были выдвинуты за левый край');\n\necho \"\\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\\n\";\n\n$val = -4;\n$places = 1;\n$res = $val << $places;\np($res, $val, '<<', $places, 'правый край был дополнен нулями');\n\n$val = -4;\n$places = (PHP_INT_SIZE * 8) - 3;\n$res = $val << $places;\np($res, $val, '<<', $places);\n\n$val = -4;\n$places = (PHP_INT_SIZE * 8) - 2;\n$res = $val << $places;\np($res, $val, '<<', $places, 'биты были выдвинуты за левый край, включая знаковый бит');\n\n/*\n * Не обращайте внимания на этот нижний раздел кода,\n * это просто форматирование для более ясного вывода.\n */\n\nfunction p($res, $val, $op, $places, $note = '') {\n    $format = '%0' . (PHP_INT_SIZE * 8) . \"b\\n\";\n\n    printf(\"Выражение: %d = %d %s %d\\n\", $res, $val, $op, $places);\n\n    echo \" Десятичный вид:\\n\";\n    printf(\" val=%d\\n\", $val);\n    printf(\" res=%d\\n\", $res);\n\n    echo \" Двоичный вид:\\n\";\n    printf(' val=' . $format, $val);\n    printf(' res=' . $format, $res);\n\n    if ($note) {\n        echo \" ЗАМЕЧАНИЕ: $note\\n\";\n    }\n\n    echo \"\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу на 32-бітових машинах:\n\n```\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\nВыражение: 2 = 4 >> 1\n Десятичный вид:\n  val=4\n  res=2\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000000010\n ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита\n\nВыражение: 1 = 4 >> 2\n Десятичный вид:\n  val=4\n  res=1\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000000001\n\nВыражение: 0 = 4 >> 3\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за правый край\n\nВыражение: 0 = 4 >> 4\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000000000\n ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0\n\n--- СДВИГ ВПРАВО НА ОТРИЦАТЕЛЬНЫХ ЦЕЛЫХ ЧИСЛАХ ---\nВыражение: -2 = -4 >> 1\n Десятичный вид:\n  val=-4\n  res=-2\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=11111111111111111111111111111110\n ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита\n\nВыражение: -1 = -4 >> 2\n Десятичный вид:\n  val=-4\n  res=-1\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=11111111111111111111111111111111\n ЗАМЕЧАНИЕ: биты были выдвинуты за правый край\n\nВыражение: -1 = -4 >> 3\n Десятичный вид:\n  val=-4\n  res=-1\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=11111111111111111111111111111111\n ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1\n\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\nВыражение: 8 = 4 << 1\n Десятичный вид:\n  val=4\n  res=8\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000001000\n ЗАМЕЧАНИЕ: правый край был дополнен нулями\n\nВыражение: 1073741824 = 4 << 28\n Десятичный вид:\n  val=4\n  res=1073741824\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=01000000000000000000000000000000\n\nВыражение: -2147483648 = 4 << 29\n Десятичный вид:\n  val=4\n  res=-2147483648\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=10000000000000000000000000000000\n ЗАМЕЧАНИЕ: знаковые биты были выдвинуты\n\nВыражение: 0 = 4 << 30\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=00000000000000000000000000000100\n  res=00000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за левый край\n\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\nВыражение: -8 = -4 << 1\n Десятичный вид:\n  val=-4\n  res=-8\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=11111111111111111111111111111000\n ЗАМЕЧАНИЕ: правый край был дополнен нулями\n\nВыражение: -2147483648 = -4 << 29\n Десятичный вид:\n  val=-4\n  res=-2147483648\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=10000000000000000000000000000000\n\nВыражение: 0 = -4 << 30\n Десятичный вид:\n  val=-4\n  res=0\n Двоичный вид:\n  val=11111111111111111111111111111100\n  res=00000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит\n```\n\nРезультат виконання наведеного прикладу на 64-бітних машинах:\n\n```\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\nВыражение: 2 = 4 >> 1\n Десятичный вид:\n  val=4\n  res=2\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000000010\n ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита\n\nВыражение: 1 = 4 >> 2\n Десятичный вид:\n  val=4\n  res=1\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000000001\n\nВыражение: 0 = 4 >> 3\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за правый край\n\nВыражение: 0 = 4 >> 4\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000000000\n ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0\n\n--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\nВыражение: -2 = -4 >> 1\n Десятичный вид:\n  val=-4\n  res=-2\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=1111111111111111111111111111111111111111111111111111111111111110\n ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита\n\nВыражение: -1 = -4 >> 2\n Десятичный вид:\n  val=-4\n  res=-1\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=1111111111111111111111111111111111111111111111111111111111111111\n ЗАМЕЧАНИЕ: биты были выдвинуты за правый край\n\nВыражение: -1 = -4 >> 3\n Десятичный вид:\n  val=-4\n  res=-1\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=1111111111111111111111111111111111111111111111111111111111111111\n ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1\n\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\nВыражение: 8 = 4 << 1\n Десятичный вид:\n  val=4\n  res=8\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000001000\n ЗАМЕЧАНИЕ: правый край был дополнен нулями\n\nВыражение: 4611686018427387904 = 4 << 60\n Десятичный вид:\n  val=4\n  res=4611686018427387904\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0100000000000000000000000000000000000000000000000000000000000000\n\nВыражение: -9223372036854775808 = 4 << 61\n Десятичный вид:\n  val=4\n  res=-9223372036854775808\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=1000000000000000000000000000000000000000000000000000000000000000\n ЗАМЕЧАНИЕ: знаковые биты были выдвинуты\n\nВыражение: 0 = 4 << 62\n Десятичный вид:\n  val=4\n  res=0\n Двоичный вид:\n  val=0000000000000000000000000000000000000000000000000000000000000100\n  res=0000000000000000000000000000000000000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за левый край\n\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\nВыражение: -8 = -4 << 1\n Десятичный вид:\n  val=-4\n  res=-8\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=1111111111111111111111111111111111111111111111111111111111111000\n ЗАМЕЧАНИЕ: правый край был дополнен нулями\n\nВыражение: -9223372036854775808 = -4 << 61\n Десятичный вид:\n  val=-4\n  res=-9223372036854775808\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=1000000000000000000000000000000000000000000000000000000000000000\n\nВыражение: 0 = -4 << 62\n Десятичный вид:\n  val=-4\n  res=0\n Двоичный вид:\n  val=1111111111111111111111111111111111111111111111111111111111111100\n  res=0000000000000000000000000000000000000000000000000000000000000000\n ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит\n```\n\n**Увага**\n\nДля побітових операцій над числами, більшими за значення константи `PHP_INT_MAX`, викликають функції модуля [gmp](book.gmp.md)\n\n### Дивіться також\n\n-   [pack()](function.pack.md)\n-   [unpack()](function.unpack.md)\n-   [gmp\\_and()](function.gmp-and.md)\n-   [gmp\\_or()](function.gmp-or.md)\n-   [gmp\\_xor()](function.gmp-xor.md)\n-   [gmp\\_testbit()](function.gmp-testbit.md)\n-   [gmp\\_clrbit()](function.gmp-clrbit.md)\n","title":"Побітові оператори","contentType":2,"navigation":[{"language.operators.assignment.md":"« Привласнення"},{"language.operators.comparison.md":"Порівняння »"},{"index.md":"PHP Manual"},{"language.operators.md":"Оператори"}]}},"__N_SSG":true}