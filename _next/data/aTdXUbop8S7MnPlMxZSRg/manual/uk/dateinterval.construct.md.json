{"pageProps":{"page":{"slug":"dateinterval.construct.md","content":"# DateInterval::\\_\\_construct\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nDateInterval::\\_\\_construct — Створює новий об'єкт DateInterval\n\n### Опис\n\npublic **DateInterval::\\_\\_construct**(string`$duration`) .\n\nСтворює новий об'єкт DateInterval.\n\n### Список параметрів\n\n`duration`\n\nОпис інтервалу.\n\nФормат опису інтервалу починається з літери `P`. Кожен період інтервалу представлений цілим числом, за яким слідує покажчик його типу. Можливі типи наведено у таблиці. Якщо інтервал містить періоди, що позначають час, їх опису повинна передувати буква `T`\n\n**Вказівники періодів `duration`**\n\n| Указатель периода | Опис |\n| --- | --- |\n| `Y` | Роки |\n| `M` | Місяці |\n| `D` | Дні |\n| `W` | Тижня. Перетворюються на дні. До PHP 8.0.0 не міг бути використаний спільно з `D` |\n| `H` | годинник |\n| `M` | хвилини |\n| `S` | секунди |\n\nОсь кілька простих прикладів. Два дні - `P2D`. Дві секунди `PT2S`. Шість років і п'ять хвилин `P6YT5M`\n\n> **Зауваження** :\n> \n> Покажчики повинні записуватися від більшої величини (ліворуч) до меншої величини (праворуч). Тобто, роки мають бути до місяців, місяці до днів, дні до хвилин і так далі. Таким чином, один рік і чотири дні повинні бути представлені як `P1Y4D`, але не `P4D1Y`\n\nЗадати період також можна у вигляді дати та часу. Приклад одного року та чотирьох днів може описуватися як `P0001-00-04T00:00:00`. Але значення у цьому форматі не повинні виходити за рамки допустимих значень дати та часу (наприклад, `25` годин неприпустимо)\n\nЦі формати засновані на [» спеціфікації ISO 8601](http://en.wikipedia.org/wiki/Iso8601#Durations)\n\n### Помилки\n\nКогда параметр`duration` не може бути розібраний аналізатором як інтервал, викидається виняток [DateMalformedIntervalStringException](class.datemalformedintervalstringexception.md). До PHP 8.3 викидався виняток [Exception](class.exception.md)\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.0 | Тепер замість винятку [Exception](class.exception.md) викидається виняток [DateMalformedIntervalStringException](class.datemalformedintervalstringexception.md) |\n| 8.2.0 | Буде видно тільки `y`в`f` `invert`и`days`, включаючи нову логічну властивість `from_string` |\n| 8.0.0 | `W` тепер може використовуватися спільно з `D` |\n\n### Приклади\n\n**Приклад #1 Приклад створення та використання об'єктів [DateInterval](class.dateinterval.md)**\n\n```php\n<?php\n// Создание определённой даты\n$someDate = \\DateTime::createFromFormat(\"Y-m-d H:i\", \"2022-08-25 14:18\");\n\n// Создание интервала\n$interval = new \\DateInterval(\"P7D\");\n\n// Добавление интервала\n$someDate->add($interval);\n\n// Преобразование интервала в строку\necho $interval->format(\"%d\");\n```\n\nРезультат виконання наведеного прикладу:\n\n**Приклад #2 Приклад использования[DateInterval](class.dateinterval.md)**\n\n```php\n<?php\n\n$interval = new DateInterval('P1W2D');\nvar_dump($interval);\n\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 8.2:\n\n```\nobject(DateInterval)#1 (10) {\n  [\"y\"]=>\n  int(0)\n  [\"m\"]=>\n  int(0)\n  [\"d\"]=>\n  int(9)\n  [\"h\"]=>\n  int(0)\n  [\"i\"]=>\n  int(0)\n  [\"s\"]=>\n  int(0)\n  [\"f\"]=>\n  float(0)\n  [\"invert\"]=>\n  int(0)\n  [\"days\"]=>\n  bool(false)\n  [\"from_string\"]=>\n  bool(false)\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 8:\n\n```\nobject(DateInterval)#1 (16) {\n  [\"y\"]=>\n  int(0)\n  [\"m\"]=>\n  int(0)\n  [\"d\"]=>\n  int(9)\n  [\"h\"]=>\n  int(0)\n  [\"i\"]=>\n  int(0)\n  [\"s\"]=>\n  int(0)\n  [\"f\"]=>\n  float(0)\n  [\"weekday\"]=>\n  int(0)\n  [\"weekday_behavior\"]=>\n  int(0)\n  [\"first_last_day_of\"]=>\n  int(0)\n  [\"invert\"]=>\n  int(0)\n  [\"days\"]=>\n  bool(false)\n  [\"special_type\"]=>\n  int(0)\n  [\"special_amount\"]=>\n  int(0)\n  [\"have_weekday_relative\"]=>\n  int(0)\n  [\"have_special_relative\"]=>\n  int(0)\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nobject(DateInterval)#1 (16) {\n  [\"y\"]=>\n  int(0)\n  [\"m\"]=>\n  int(0)\n  [\"d\"]=>\n  int(2)\n  [\"h\"]=>\n  int(0)\n  [\"i\"]=>\n  int(0)\n  [\"s\"]=>\n  int(0)\n  [\"f\"]=>\n  float(0)\n  [\"weekday\"]=>\n  int(0)\n  [\"weekday_behavior\"]=>\n  int(0)\n  [\"first_last_day_of\"]=>\n  int(0)\n  [\"invert\"]=>\n  int(0)\n  [\"days\"]=>\n  bool(false)\n  [\"special_type\"]=>\n  int(0)\n  [\"special_amount\"]=>\n  int(0)\n  [\"have_weekday_relative\"]=>\n  int(0)\n  [\"have_special_relative\"]=>\n  int(0)\n}\n```\n\n### Дивіться також\n\n-   [DateInterval::format()](dateinterval.format.md) \\- Форматує інтервал\n-   [DateTime::add()](datetime.add.md) \\- Змінює об'єкт DateTime, додаючи кількість днів, місяців, років, годин, хвилин та секунд\n-   [DateTime::sub()](datetime.sub.md) \\- Віднімає дні, місяці, роки, години, хвилини та секунди з об'єкта DateTime\n-   [DateTime::diff()](datetime.diff.md) \\- Повертає різницю між двома об'єктами DateTime\n","title":"DateInterval::\\_\\_construct","contentType":2,"navigation":[{"class.dateinterval.md":"« DateInterval"},{"dateinterval.createfromdatestring.md":"DateInterval::createFromDateString »"},{"index.md":"PHP Manual"},{"class.dateinterval.md":"DateInterval"}]}},"__N_SSG":true}