{"pageProps":{"page":{"slug":"random-engine.generate.md","content":"# Random\\\\Engine::generate\n\n(PHP 8 >= 8.2.0)\n\nRandom\\\\Engine::generate — Створює випадкову послідовність\n\n### Опис\n\n```methodsynopsis\npublic Random\\Engine::generate(): string\n```\n\nПовертає випадкову послідовність та пересуває стан алгоритму на один крок.\n\nВипадкова послідовність представлена ​​двійковим рядком, що містить довільні байти. Таке уявлення дозволяє однозначно інтерпретувати випадкові біти, що генеруються алгоритмом, наприклад, адаптації різних розмірів виведення, використовуваних різними алгоритмами.\n\nАлгоритми, які спочатку оперують цілими значеннями, повинні повертати ціле число в порядку little-endian байтів, наприклад, використовуючи функцію [pack()](function.pack.md)с кодом формата`P`. Високорівневий інтерфейс, що надається класом [Random\\\\Randomizer](class.random-randomizer.md), буде інтерпретувати випадкові байти, що повертаються, як цілі числа без знака з малим порядком зростання, якщо потрібно числове уявлення.\n\nНастійно рекомендується, щоб кожен біт рядка, що повертається, був обраний рівномірно і незалежно, оскільки деякі додатки вимагають для коректної роботи випадковості на рівні бітів. Наприклад, лінійні конгруентні генератори часто генерують менш якісну випадкову послідовність для молодших бітів цілого значення, що повертається, і тому не підходять для додатків, що вимагають випадкової послідовності на рівні бітів.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\n### Приклади\n\n**Приклад #1 Приклад використання** Random\\\\Engine::generate()\\*\\*\\*\\*\n\n```php\n<?php\n/**\n * Реализует линейный конгруэнтный генератор с модулем 65536,\n * множителем 61 и инкрементом 17, возвращающий 8-битное целое число.\n *\n * Примечание: Движок предназначен только для демонстрационных целей.\n *       Линейные конгруэнтные генераторы обычно генерируют случайность низкого\n *       качества, а данная конкретная реализация имеет\n *       очень короткий 16-битный период, который не подходит практически\n *       ни для одного реального случая использования.\n */\nfinal class LinearCongruentialGenerator implements \\Random\\Engine\n{\n    private int $state;\n\n    public function __construct(?int $seed = null)\n    {\n        if ($seed === null) {\n            $seed = random_int(0, 0xffff);\n        }\n\n        $this->state = $seed & 0xffff;\n    }\n\n    public function generate(): string\n    {\n        $this->state = (61 * $this->state + 17) & 0xffff;\n\n        return pack('C', $this->state >> 8);\n    }\n}\n\n$r = new \\Random\\Randomizer(\n    new LinearCongruentialGenerator(seed: 1)\n);\n\necho \"Счастливое число: \", $r->getInt(0, 99), \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nСчастливое число: 4\n```\n","title":"Random\\\\Engine::generate","contentType":2,"navigation":[{"class.random-engine.md":"« Random\\\\Engine"},{"class.random-cryptosafeengine.md":"Random\\\\CryptoSafeEngine »"},{"index.md":"PHP Manual"},{"class.random-engine.md":"Random\\\\Engine"}]}},"__N_SSG":true}