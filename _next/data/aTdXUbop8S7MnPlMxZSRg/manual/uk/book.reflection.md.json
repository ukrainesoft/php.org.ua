{"pageProps":{"page":{"slug":"book.reflection.md","content":"# Reflection\n\n-   [Вступ](intro.reflection.md)\n-   [Встановлення та налаштування](reflection.setup.md)\n    -   [Вимоги](reflection.requirements.md)\n    -   [Установка](reflection.installation.md)\n    -   [Налаштування під час виконання](reflection.configuration.md)\n    -   [Типи ресурсів](reflection.resources.md)\n-   [Обумовлені константи](reflection.constants.md)\n-   [Приклади](reflection.examples.md)\n-   [Розширення](reflection.extending.md)\n-   [Reflection](class.reflection.md) \\- Клас Reflection\n    -   [Reflection::export](reflection.export.md) \\- Експортує Reflection\n    -   [Reflection::getModifierNames](reflection.getmodifiernames.md)— Отримання імен модифікаторів\n-   [ReflectionClass](class.reflectionclass.md) \\- Клас ReflectionClass\n    -   [ReflectionClass::\\_\\_construct](reflectionclass.construct.md)— Створює об'єкт класу ReflectionClass\n    -   [ReflectionClass::export](reflectionclass.export.md) \\- Експортує клас\n    -   [ReflectionClass::getAttributes](reflectionclass.getattributes.md)— Отримує атрибути\n    -   [ReflectionClass::getConstant](reflectionclass.getconstant.md)— Повертає певну константу\n    -   [ReflectionClass::getConstants](reflectionclass.getconstants.md)— Повертає константи\n    -   [ReflectionClass::getConstructor](reflectionclass.getconstructor.md) \\- Повертає конструктор класу\n    -   [ReflectionClass::getDefaultProperties](reflectionclass.getdefaultproperties.md)— Повертає властивості за промовчанням\n    -   [ReflectionClass::getDocComment](reflectionclass.getdoccomment.md)— Повертає doc-блоки коментарів\n    -   [ReflectionClass::getEndLine](reflectionclass.getendline.md)— Повертає номер останнього рядка\n    -   [ReflectionClass::getExtension](reflectionclass.getextension.md)— Повертає об'єкт класу ReflectionExtension для модуля, що визначає клас\n    -   [ReflectionClass::getExtensionName](reflectionclass.getextensionname.md) \\- Повертає ім'я модуля, що визначає клас\n    -   [ReflectionClass::getFileName](reflectionclass.getfilename.md)— Повертає ім'я файлу, у якому визначено клас\n    -   [ReflectionClass::getInterfaceNames](reflectionclass.getinterfacenames.md)— Повертає імена інтерфейсів\n    -   [ReflectionClass::getInterfaces](reflectionclass.getinterfaces.md)— Повертає інтерфейси\n    -   [ReflectionClass::getMethod](reflectionclass.getmethod.md)— Повертає екземпляр ReflectionMethod для методу класу\n    -   [ReflectionClass::getMethods](reflectionclass.getmethods.md)— Повертає список методів у вигляді масиву\n    -   [ReflectionClass::getModifiers](reflectionclass.getmodifiers.md)— Повертає інформацію про модифікаторів класу\n    -   [ReflectionClass::getName](reflectionclass.getname.md) \\- Повертає ім'я класу\n    -   [ReflectionClass::getNamespaceName](reflectionclass.getnamespacename.md)— Повертає назву простору імен\n    -   [ReflectionClass::getParentClass](reflectionclass.getparentclass.md) \\- Повертає батьківський клас\n    -   [ReflectionClass::getProperties](reflectionclass.getproperties.md) \\- Повертає властивості\n    -   [ReflectionClass::getProperty](reflectionclass.getproperty.md)— Повертає екземпляр ReflectionProperty для якості класу\n    -   [ReflectionClass::getReflectionConstant](reflectionclass.getreflectionconstant.md)— Отримує ReflectionClassConstant для константи класу\n    -   [ReflectionClass::getReflectionConstants](reflectionclass.getreflectionconstants.md)— Отримує константи класу\n    -   [ReflectionClass::getShortName](reflectionclass.getshortname.md) \\- Повертає коротке ім'я\n    -   [ReflectionClass::getStartLine](reflectionclass.getstartline.md)— Повертає номер початкового рядка\n    -   [ReflectionClass::getStaticProperties](reflectionclass.getstaticproperties.md)— Повертає статичні властивості\n    -   [ReflectionClass::getStaticPropertyValue](reflectionclass.getstaticpropertyvalue.md)— Повертає значення статичної властивості\n    -   [ReflectionClass::getTraitAliases](reflectionclass.gettraitaliases.md)— Повертає масив псевдонімів трейтів\n    -   [ReflectionClass::getTraitNames](reflectionclass.gettraitnames.md)— Повертає масив імен трейтів, які використовуються у цьому класі\n    -   [ReflectionClass::getTraits](reflectionclass.gettraits.md)— Повертає масив трейтів, які використовуються у цьому класі.\n    -   [ReflectionClass::hasConstant](reflectionclass.hasconstant.md)— Перевіряє, чи визначено константу\n    -   [ReflectionClass::hasMethod](reflectionclass.hasmethod.md)— Перевіряє, чи заданий метод\n    -   [ReflectionClass::hasProperty](reflectionclass.hasproperty.md)— Перевіряє, чи визначено властивість\n    -   [ReflectionClass::implementsInterface](reflectionclass.implementsinterface.md)— Перевіряє, чи реалізується інтерфейс\n    -   [ReflectionClass::inNamespace](reflectionclass.innamespace.md)— Перевіряє, чи визначений клас у просторі імен\n    -   [ReflectionClass::isAbstract](reflectionclass.isabstract.md)— Перевіряє, чи клас є абстрактним.\n    -   [ReflectionClass::isAnonymous](reflectionclass.isanonymous.md)— Перевіряє, чи є клас анонімним\n    -   [ReflectionClass::isCloneable](reflectionclass.iscloneable.md)— Перевіряє, чи можна клонувати цей клас\n    -   [ReflectionClass::isEnum](reflectionclass.isenum.md)— Повертає, чи є клас перерахуванням\n    -   [ReflectionClass::isFinal](reflectionclass.isfinal.md)— Перевіряє, чи клас остаточний (final)\n    -   [ReflectionClass::isInstance](reflectionclass.isinstance.md)— Перевіряє, чи об'єкт належить класу\n    -   [ReflectionClass::isInstantiable](reflectionclass.isinstantiable.md)— Перевіряє, чи можна створити екземпляр класу\n    -   [ReflectionClass::isInterface](reflectionclass.isinterface.md)— Перевіряє, чи клас є інтерфейсом\n    -   [ReflectionClass::isInternal](reflectionclass.isinternal.md)— Перевіряє, чи є клас вбудованим у модуль чи ядро\n    -   [ReflectionClass::isIterable](reflectionclass.isiterable.md)— Перевірити, чи клас ітерується.\n    -   [ReflectionClass::isIterateable](reflectionclass.isiterateable.md) \\- Псевдонім ReflectionClass::isIterable\n    -   [ReflectionClass::isReadOnly](reflectionclass.isreadonly.md)— Перевіряє, чи є клас доступним лише для читання\n    -   [ReflectionClass::isSubclassOf](reflectionclass.issubclassof.md)— Перевіряє, чи є клас підкласом\n    -   [ReflectionClass::isTrait](reflectionclass.istrait.md)— Перевіряє, чи це є трейтом.\n    -   [ReflectionClass::isUserDefined](reflectionclass.isuserdefined.md)— Перевіряє, чи є клас для користувача\n    -   [ReflectionClass::newInstance](reflectionclass.newinstance.md) \\- Створює екземпляр класу з переданими аргументами\n    -   [ReflectionClass::newInstanceArgs](reflectionclass.newinstanceargs.md) \\- Створює екземпляр класу з переданими параметрами\n    -   [ReflectionClass::newInstanceWithoutConstructor](reflectionclass.newinstancewithoutconstructor.md) \\- Створює новий екземпляр класу без виклику конструктора\n    -   [ReflectionClass::setStaticPropertyValue](reflectionclass.setstaticpropertyvalue.md) \\- Встановлює значення статичної властивості\n    -   [ReflectionClass::\\_\\_function toString() { \\[native code\\] }](reflectionclass.tostring.md)— Повертає рядкову виставу об'єкта класу ReflectionClass\n-   [ReflectionClassConstant](class.reflectionclassconstant.md) \\- Клас ReflectionClassConstant\n    -   [ReflectionClassConstant::\\_\\_construct](reflectionclassconstant.construct.md)— Створює об'єкт ReflectionClassConstant\n    -   [ReflectionClassConstant::export](reflectionclassconstant.export.md) \\- Експорт\n    -   [ReflectionClassConstant::getAttributes](reflectionclassconstant.getattributes.md)— Отримує атрибути\n    -   [ReflectionClassConstant::getDeclaringClass](reflectionclassconstant.getdeclaringclass.md)— Отримує оголошуючий клас\n    -   [ReflectionClassConstant::getDocComment](reflectionclassconstant.getdoccomment.md)— Отримує doc-коментарі\n    -   [ReflectionClassConstant::getModifiers](reflectionclassconstant.getmodifiers.md)— Отримує модифікатори константи класу\n    -   [ReflectionClassConstant::getName](reflectionclassconstant.getname.md)— Отримати ім'я константи\n    -   [ReflectionClassConstant::getValue](reflectionclassconstant.getvalue.md)— Отримує значення\n    -   [ReflectionClassConstant::isEnumCase](reflectionclassconstant.isenumcase.md)— Перевіряє, чи константа класу є варіантом перерахування\n    -   [ReflectionClassConstant::isFinal](reflectionclassconstant.isfinal.md)— Перевіряє, чи константа класу є остаточною\n    -   [ReflectionClassConstant::isPrivate](reflectionclassconstant.isprivate.md)— Перевіряє, чи константа закрита\n    -   [ReflectionClassConstant::isProtected](reflectionclassconstant.isprotected.md)— Перевіряє, чи константа захищена\n    -   [ReflectionClassConstant::isPublic](reflectionclassconstant.ispublic.md)— Перевіряє, чи константа є загальнодоступною\n    -   [ReflectionClassConstant::\\_\\_function toString() { \\[native code\\] }](reflectionclassconstant.tostring.md)— Повертає строкове представлення об'єкта ReflectionClassConstant\n-   [ReflectionEnum](class.reflectionenum.md) \\- Клас ReflectionEnum\n    -   [ReflectionEnum::\\_\\_construct](reflectionenum.construct.md)— Створює об'єкт ReflectionEnum\n    -   [ReflectionEnum::getBackingType](reflectionenum.getbackingtype.md)— Отримує тип перерахування, якщо є\n    -   [ReflectionEnum::getCase](reflectionenum.getcase.md)— Повертає певний варіант перерахування\n    -   [ReflectionEnum::getCases](reflectionenum.getcases.md)— Повертає список усіх варіантів перерахування\n    -   [ReflectionEnum::hasCase](reflectionenum.hascase.md) \\- Перевіряє варіант перерахування\n    -   [ReflectionEnum::isBacked](reflectionenum.isbacked.md)— Визначає, чи є перерахування типовим\n-   [ReflectionEnumUnitCase](class.reflectionenumunitcase.md) \\- Клас ReflectionEnumUnitCase\n    -   [ReflectionEnumUnitCase::\\_\\_construct](reflectionenumunitcase.construct.md)— Створює екземпляр об'єкту ReflectionEnumUnitCase\n    -   [ReflectionEnumUnitCase::getEnum](reflectionenumunitcase.getenum.md)— Отримує Reflection-об'єкт перерахування цього варіанта\n    -   [ReflectionEnumUnitCase::getValue](reflectionenumunitcase.getvalue.md)— Отримує об'єкт варіанта перерахування, описаний Reflection-об'єктом\n-   [ReflectionEnumBackedCase](class.reflectionenumbackedcase.md) \\- Клас ReflectionEnumBackedCase\n    -   [ReflectionEnumBackedCase::\\_\\_construct](reflectionenumbackedcase.construct.md)— Створює об'єкт ReflectionEnumBackedCase\n    -   [ReflectionEnumBackedCase::getBackingValue](reflectionenumbackedcase.getbackingvalue.md)— Отримує скалярне значення варіанта перерахування\n-   [ReflectionZendExtension](class.reflectionzendextension.md) \\- Клас ReflectionZendExtension\n    -   [ReflectionZendExtension::\\_\\_clone](reflectionzendextension.clone.md) \\- Обробник клонування\n    -   [ReflectionZendExtension::\\_\\_construct](reflectionzendextension.construct.md)— Створює об'єкт ReflectionZendExtension\n    -   [ReflectionZendExtension::export](reflectionzendextension.export.md) \\- Експорт\n    -   [ReflectionZendExtension::getAuthor](reflectionzendextension.getauthor.md)— Отримує автора\n    -   [ReflectionZendExtension::getCopyright](reflectionzendextension.getcopyright.md)— Отримує авторські права\n    -   [ReflectionZendExtension::getName](reflectionzendextension.getname.md)— Отримує ім'я\n    -   [ReflectionZendExtension::getURL](reflectionzendextension.geturl.md)— Отримує URL\n    -   [ReflectionZendExtension::getVersion](reflectionzendextension.getversion.md)— Отримує версію\n    -   [ReflectionZendExtension::\\_\\_function toString() { \\[native code\\] }](reflectionzendextension.tostring.md) \\- Обробник перетворення в рядок\n-   [ReflectionExtension](class.reflectionextension.md) \\- Клас ReflectionExtension\n    -   [ReflectionExtension::\\_\\_clone](reflectionextension.clone.md) \\- Клонує об'єкт\n    -   [ReflectionExtension::\\_\\_construct](reflectionextension.construct.md)— Створює об'єкт класу ReflectionExtension\n    -   [ReflectionExtension::export](reflectionextension.export.md) \\- Експортує модуль\n    -   [ReflectionExtension::getClasses](reflectionextension.getclasses.md) \\- Повертає класи\n    -   [ReflectionExtension::getClassNames](reflectionextension.getclassnames.md) \\- Отримання імен класів\n    -   [ReflectionExtension::getConstants](reflectionextension.getconstants.md) \\- Отримання констант\n    -   [ReflectionExtension::getDependencies](reflectionextension.getdependencies.md) \\- Отримання залежностей\n    -   [ReflectionExtension::getFunctions](reflectionextension.getfunctions.md)— Отримання функцій модуля\n    -   [ReflectionExtension::getINIEntries](reflectionextension.getinientries.md)— Отримання ini-налаштувань модуля\n    -   [ReflectionExtension::getName](reflectionextension.getname.md)— Отримання імені модуля\n    -   [ReflectionExtension::getVersion](reflectionextension.getversion.md)— Отримання версії модуля\n    -   [ReflectionExtension::info](reflectionextension.info.md)— Виведення інформації про модуль\n    -   [ReflectionExtension::isPersistent](reflectionextension.ispersistent.md)— Визначає, чи модуль є постійним\n    -   [ReflectionExtension::isTemporary](reflectionextension.istemporary.md)— Визначає, чи модуль є тимчасовим\n    -   [ReflectionExtension::\\_\\_function toString() { \\[native code\\] }](reflectionextension.tostring.md)— Перетворення на рядок\n-   [ReflectionFunction](class.reflectionfunction.md) \\- Клас ReflectionFunction\n    -   [ReflectionFunction::\\_\\_construct](reflectionfunction.construct.md) \\- Конструктор класу ReflectionFunction\n    -   [ReflectionFunction::export](reflectionfunction.export.md) \\- Експортує функції\n    -   [ReflectionFunction::getClosure](reflectionfunction.getclosure.md)— Повертає динамічно створене замикання функції\n    -   [ReflectionFunction::invoke](reflectionfunction.invoke.md) \\- Викликає функцію\n    -   [ReflectionFunction::invokeArgs](reflectionfunction.invokeargs.md) \\- Виклик функції з передачею аргументів\n    -   [ReflectionFunction::isAnonymous](reflectionfunction.isanonymous.md)— Перевіряє, чи є функція анонімною\n    -   [ReflectionFunction::isDisabled](reflectionfunction.isdisabled.md)— Перевіряє, що функцію вимкнено\n    -   [ReflectionFunction::\\_\\_function toString() { \\[native code\\] }](reflectionfunction.tostring.md)— Повертає рядкову виставу об'єкта ReflectionFunction\n-   [ReflectionFunctionAbstract](class.reflectionfunctionabstract.md) \\- Клас ReflectionFunctionAbstract\n    -   [ReflectionFunctionAbstract::\\_\\_clone](reflectionfunctionabstract.clone.md) \\- Клонує функцію\n    -   [ReflectionFunctionAbstract::getAttributes](reflectionfunctionabstract.getattributes.md)— Отримує атрибути\n    -   [ReflectionFunctionAbstract::getClosureScopeClass](reflectionfunctionabstract.getclosurescopeclass.md)— Повертає клас, в рамках якого було оголошено замикання\n    -   [ReflectionFunctionAbstract::getClosureThis](reflectionfunctionabstract.getclosurethis.md)— Повертає покажчик, прив'язаний до замикання\n    -   [ReflectionFunctionAbstract::getClosureUsedVariables](reflectionfunctionabstract.getclosureusedvariables.md)— Повертає масив змінних, що використовуються в замиканні.\n    -   [ReflectionFunctionAbstract::getDocComment](reflectionfunctionabstract.getdoccomment.md)— Отримує doc-коментар\n    -   [ReflectionFunctionAbstract::getEndLine](reflectionfunctionabstract.getendline.md)— Отримує номер рядка завершення опису функції\n    -   [ReflectionFunctionAbstract::getExtension](reflectionfunctionabstract.getextension.md)— Отримує інформацію про модуль\n    -   [ReflectionFunctionAbstract::getExtensionName](reflectionfunctionabstract.getextensionname.md)— Отримання імені модуля\n    -   [ReflectionFunctionAbstract::getFileName](reflectionfunctionabstract.getfilename.md)— Отримує ім'я файлу\n    -   [ReflectionFunctionAbstract::getName](reflectionfunctionabstract.getname.md)— Отримує ім'я функції\n    -   [ReflectionFunctionAbstract::getNamespaceName](reflectionfunctionabstract.getnamespacename.md)— Отримання імені простору імен\n    -   [ReflectionFunctionAbstract::getNumberOfParameters](reflectionfunctionabstract.getnumberofparameters.md)— Отримує кількість параметрів\n    -   [ReflectionFunctionAbstract::getNumberOfRequiredParameters](reflectionfunctionabstract.getnumberofrequiredparameters.md)— Отримує кількість обов'язкових параметрів\n    -   [ReflectionFunctionAbstract::getParameters](reflectionfunctionabstract.getparameters.md)— Отримує параметри\n    -   [ReflectionFunctionAbstract::getReturnType](reflectionfunctionabstract.getreturntype.md)— Отримує оголошений тип значення, що повертається функцією значення\n    -   [ReflectionFunctionAbstract::getShortName](reflectionfunctionabstract.getshortname.md)— Отримує коротке ім'я функції\n    -   [ReflectionFunctionAbstract::getStartLine](reflectionfunctionabstract.getstartline.md)— Отримує початковий номер рядка\n    -   [ReflectionFunctionAbstract::getStaticVariables](reflectionfunctionabstract.getstaticvariables.md)— Отримує статичні змінні\n    -   [ReflectionFunctionAbstract::getTentativeReturnType](reflectionfunctionabstract.gettentativereturntype.md)— Повертає попередній тип значення, що повертається, пов'язаний з функцією\n    -   [ReflectionFunctionAbstract::hasReturnType](reflectionfunctionabstract.hasreturntype.md)— Перевіряє, чи має функція оголошений тип значення, що повертається\n    -   [ReflectionFunctionAbstract::hasTentativeReturnType](reflectionfunctionabstract.hastentativereturntype.md)— Визначає, чи має функція попередній тип значення, що повертається.\n    -   [ReflectionFunctionAbstract::inNamespace](reflectionfunctionabstract.innamespace.md)— Перевіряє, чи є функція у просторі імен\n    -   [ReflectionFunctionAbstract::isClosure](reflectionfunctionabstract.isclosure.md) \\- Перевіряє, чи є функція замиканням (Closure)\n    -   [ReflectionFunctionAbstract::isDeprecated](reflectionfunctionabstract.isdeprecated.md)— Перевіряє, чи є функція застарілої\n    -   [ReflectionFunctionAbstract::isGenerator](reflectionfunctionabstract.isgenerator.md)— Перевіряє, чи функція є генератором\n    -   [ReflectionFunctionAbstract::isInternal](reflectionfunctionabstract.isinternal.md)— Перевіряє, чи функція є внутрішньою\n    -   [ReflectionFunctionAbstract::isStatic](reflectiofunctionabstract.isstatic.md)— Перевіряє, чи є статична функція\n    -   [ReflectionFunctionAbstract::isUserDefined](reflectionfunctionabstract.isuserdefined.md)— Перевіряє, чи функція є певною користувачем\n    -   [ReflectionFunctionAbstract::isVariadic](reflectionfunctionabstract.isvariadic.md)— Перевіряє, чи є функція зі змінною кількістю аргументів\n    -   [ReflectionFunctionAbstract::returnsReference](reflectionfunctionabstract.returnsreference.md) \\- Перевіряє, що функція повертає посилання\n    -   [ReflectionFunctionAbstract::\\_\\_function toString() { \\[native code\\] }](reflectionfunctionabstract.tostring.md)— Повертає рядкову виставу об'єкта ReflectionFunctionAbstract\n-   [ReflectionMethod](class.reflectionmethod.md) \\- Клас ReflectionMethod\n    -   [ReflectionMethod::\\_\\_construct](reflectionmethod.construct.md) \\- Конструктор класу ReflectionMethod\n    -   [ReflectionMethod::createFromMethodName](reflectionmethod.createfrommethodname.md)— Створює об'єкт класу ReflectionMethod\n    -   [ReflectionMethod::export](reflectionmethod.export.md) \\- Експорт відбитого методу\n    -   [ReflectionMethod::getClosure](reflectionmethod.getclosure.md)— Повертає динамічно створене замикання для методу\n    -   [ReflectionMethod::getDeclaringClass](reflectionmethod.getdeclaringclass.md)— Отримує клас, що оголошує відбитий метод\n    -   [ReflectionMethod::getModifiers](reflectionmethod.getmodifiers.md)— Отримує модифікатори методу\n    -   [ReflectionMethod::getPrototype](reflectionmethod.getprototype.md)— Отримує прототип методу (якщо такий є)\n    -   [ReflectionMethod::hasPrototype](reflectionmethod.hasprototype.md)— Визначає, чи має метод прототип\n    -   [ReflectionMethod::invoke](reflectionmethod.invoke.md) \\- Виклик\n    -   [ReflectionMethod::invokeArgs](reflectionmethod.invokeargs.md) \\- Виклик методу з передачею аргументів масивом\n    -   [ReflectionMethod::isAbstract](reflectionmethod.isabstract.md)— Перевіряє, чи є метод абстрактним\n    -   [ReflectionMethod::isConstructor](reflectionmethod.isconstructor.md)— Перевіряє, чи є метод конструктором\n    -   [ReflectionMethod::isDestructor](reflectionmethod.isdestructor.md)— Перевіряє, чи є метод деструктором\n    -   [ReflectionMethod::isFinal](reflectionmethod.isfinal.md)— Перевіряє, чи є метод остаточним\n    -   [ReflectionMethod::isPrivate](reflectionmethod.isprivate.md)— Перевіряє, чи є метод закритим\n    -   [ReflectionMethod::isProtected](reflectionmethod.isprotected.md)— Перевіряє, чи метод захищений\n    -   [ReflectionMethod::isPublic](reflectionmethod.ispublic.md)— Перевіряє, чи є метод загальнодоступним\n    -   [ReflectionMethod::setAccessible](reflectionmethod.setaccessible.md)— Робить метод доступним\n    -   [ReflectionMethod::\\_\\_function toString() { \\[native code\\] }](reflectionmethod.tostring.md)— Повертає рядкову виставу об'єкта ReflectionMethod\n-   [ReflectionNamedType](class.reflectionnamedtype.md)— Клас ReflectionNamedType\n    -   [ReflectionNamedType::getName](reflectionnamedtype.getname.md)— Отримує ім'я типу у вигляді рядка\n    -   [ReflectionNamedType::isBuiltin](reflectionnamedtype.isbuiltin.md)— Перевіряє, чи тип вбудований\n-   [ReflectionObject](class.reflectionobject.md) \\- Клас ReflectionObject\n    -   [ReflectionObject::\\_\\_construct](reflectionobject.construct.md) \\- Конструктор класу ReflectionObject\n    -   [ReflectionObject::export](reflectionobject.export.md) \\- Експорт\n-   [ReflectionParameter](class.reflectionparameter.md) \\- Клас ReflectionParameter\n    -   [ReflectionParameter::allowsNull](reflectionparameter.allowsnull.md)— Перевіряє, чи допустиме значення null для параметра\n    -   [ReflectionParameter::canBePassedByValue](reflectionparameter.canbepassedbyvalue.md)— Перевіряє, чи можна передати цей аргумент за значенням\n    -   [ReflectionParameter::\\_\\_clone](reflectionparameter.clone.md) \\- Клонувати\n    -   [ReflectionParameter::\\_\\_construct](reflectionparameter.construct.md) \\- Конструктор\n    -   [ReflectionParameter::export](reflectionparameter.export.md) \\- Експорт\n    -   [ReflectionParameter::getAttributes](reflectionparameter.getattributes.md)— Отримує атрибути\n    -   [ReflectionParameter::getClass](reflectionparameter.getclass.md)— Отримує об'єкт ReflectionClass для параметра, що відображається, або null\n    -   [ReflectionParameter::getDeclaringClass](reflectionparameter.getdeclaringclass.md)— Отримання класу, що оголошує\n    -   [ReflectionParameter::getDeclaringFunction](reflectionparameter.getdeclaringfunction.md)— Отримання функції, що оголошує\n    -   [ReflectionParameter::getDefaultValue](reflectionparameter.getdefaultvalue.md)— Отримання стандартного значення для параметра\n    -   [ReflectionParameter::getDefaultValueConstantName](reflectionparameter.getdefaultvalueconstantname.md)— Повертає ім'я константи за промовчанням, якщо значення за промовчанням константа або null\n    -   [ReflectionParameter::getName](reflectionparameter.getname.md)— Отримання імені параметра\n    -   [ReflectionParameter::getPosition](reflectionparameter.getposition.md)— Отримання позиції параметра\n    -   [ReflectionParameter::getType](reflectionparameter.gettype.md)— Отримати тип параметра\n    -   [ReflectionParameter::hasType](reflectionparameter.hastype.md)— Перевірити, чи вказано тип параметра\n    -   [ReflectionParameter::isArray](reflectionparameter.isarray.md)— Перевіряє, чи очікує аргумент масив як значення\n    -   [ReflectionParameter::isCallable](reflectionparameter.iscallable.md)— Визначити, чи має бути параметр типу callable\n    -   [ReflectionParameter::isDefaultValueAvailable](reflectionparameter.isdefaultvalueavailable.md)— Перевіряє, чи є значення за замовчуванням\n    -   [ReflectionParameter::isDefaultValueConstant](reflectionparameter.isdefaultvalueconstant.md)— Визначити, чи значення параметра за промовчанням є константою\n    -   [ReflectionParameter::isOptional](reflectionparameter.isoptional.md)— Перевіряє, чи аргумент є необов'язковим\n    -   [ReflectionParameter::isPassedByReference](reflectionparameter.ispassedbyreference.md)— Перевіряє, чи передано параметр за посиланням\n    -   [ReflectionParameter::isVariadic](reflectionparameter.isvariadic.md)— Перевірити, чи параметр є параметром зі змінною кількістю аргументів\n    -   [ReflectionParameter::\\_\\_function toString() { \\[native code\\] }](reflectionparameter.tostring.md)— Перетворення на рядок\n-   [ReflectionProperty](class.reflectionproperty.md) \\- Клас ReflectionProperty\n    -   [ReflectionProperty::\\_\\_clone](reflectionproperty.clone.md) \\- Клонувати\n    -   [ReflectionProperty::\\_\\_construct](reflectionproperty.construct.md) \\- Конструктор класу ReflectionProperty\n    -   [ReflectionProperty::export](reflectionproperty.export.md) \\- Експорт\n    -   [ReflectionProperty::getAttributes](reflectionproperty.getattributes.md)— Отримує атрибути\n    -   [ReflectionProperty::getDeclaringClass](reflectionproperty.getdeclaringclass.md)— Отримання класу, що оголошує\n    -   [ReflectionProperty::getDefaultValue](reflectionproperty.getdefaultvalue.md)— Повертає значення за промовчанням, задане для якості\n    -   [ReflectionProperty::getDocComment](reflectionproperty.getdoccomment.md)— Отримання doc-коментаря для якості\n    -   [ReflectionProperty::getModifiers](reflectionproperty.getmodifiers.md) \\- Отримання модифікаторів властивостей класу\n    -   [ReflectionProperty::getName](reflectionproperty.getname.md) \\- Отримання імені властивості\n    -   [ReflectionProperty::getType](reflectionproperty.gettype.md)— Отримати тип якості\n    -   [ReflectionProperty::getValue](reflectionproperty.getvalue.md)— Отримує значення\n    -   [ReflectionProperty::hasDefaultValue](reflectionproperty.hasdefaultvalue.md)— Перевіряє, чи встановлено значення за промовчанням для властивості.\n    -   [ReflectionProperty::hasType](reflectionproperty.hastype.md)— Перевірити, чи заданий для якості тип\n    -   [ReflectionProperty::isDefault](reflectionproperty.isdefault.md)— Перевіряє, чи значення є властивістю за умовчанням\n    -   [ReflectionProperty::isInitialized](reflectionproperty.isinitialized.md)— Перевірити, чи ініціалізована властивість\n    -   [ReflectionProperty::isPrivate](reflectionproperty.isprivate.md)— Перевіряє, чи властивість закрита.\n    -   [ReflectionProperty::isPromoted](reflectionproperty.ispromoted.md)— Перевіряє, чи визначено властивість у конструкторі\n    -   [ReflectionProperty::isProtected](reflectionproperty.isprotected.md)— Перевіряє, чи властивість захищена\n    -   [ReflectionProperty::isPublic](reflectionproperty.ispublic.md)— Перевіряє, чи є властивість загальнодоступною.\n    -   [ReflectionProperty::isReadOnly](reflectionproperty.isreadonly.md)— Перевіряє, чи властивість є readonly-властивістю\n    -   [ReflectionProperty::isStatic](reflectionproperty.isstatic.md)— Перевірка, чи властивість статична\n    -   [ReflectionProperty::setAccessible](reflectionproperty.setaccessible.md)— Робить властивість доступною\n    -   [ReflectionProperty::setValue](reflectionproperty.setvalue.md) \\- Встановлення значення властивості\n    -   [ReflectionProperty::\\_\\_function toString() { \\[native code\\] }](reflectionproperty.tostring.md)— Перетворення на рядок\n-   [ReflectionType](class.reflectiontype.md) \\- Клас ReflectionType\n    -   [ReflectionType::allowsNull](reflectiontype.allowsnull.md)— Перевіряє, чи допустимо NULL\n    -   [ReflectionType::\\_\\_function toString() { \\[native code\\] }](reflectiontype.tostring.md)— Перетворення на рядок\n-   [ReflectionUnionType](class.reflectionuniontype.md) \\- Клас ReflectionUnionType\n    -   [ReflectionUnionType::getTypes](reflectionuniontype.gettypes.md)— Повертає типи, включені до типу union\n-   [ReflectionGenerator](class.reflectiongenerator.md) \\- Клас ReflectionGenerator\n    -   [ReflectionGenerator::\\_\\_construct](reflectiongenerator.construct.md) \\- Конструктор ReflectionGenerator\n    -   [ReflectionGenerator::getExecutingFile](reflectiongenerator.getexecutingfile.md)— Отримати ім'я файлу, з якого запущено генератор\n    -   [ReflectionGenerator::getExecutingGenerator](reflectiongenerator.getexecutinggenerator.md)— Отримати запущений об'єкт Generator\n    -   [ReflectionGenerator::getExecutingLine](reflectiongenerator.getexecutingline.md)— Отримати поточний рядок генератора, що виконується.\n    -   [ReflectionGenerator::getFunction](reflectiongenerator.getfunction.md) \\- Отримати ім'я функції генератора\n    -   [ReflectionGenerator::getThis](reflectiongenerator.getthis.md)— Отримує значення $this генератора\n    -   [ReflectionGenerator::getTrace](reflectiongenerator.gettrace.md)— Отримати трасування запущеного генератора\n-   [ReflectionFiber](class.reflectionfiber.md) \\- Клас ReflectionFiber\n    -   [ReflectionFiber::\\_\\_construct](reflectionfiber.construct.md)— Створює об'єкт ReflectionFiber\n    -   [ReflectionFiber::getCallable](reflectionfiber.getcallable.md)— Отримує об'єкт, що використовується для створення файбера.\n    -   [ReflectionFiber::getExecutingFile](reflectionfiber.getexecutingfile.md)— Отримує ім'я файлу поточної точки виконання\n    -   [ReflectionFiber::getExecutingLine](reflectionfiber.getexecutingline.md)— Отримує номер рядка поточної точки виконання\n    -   [ReflectionFiber::getFiber](reflectionfiber.getfiber.md)— Отримує відбитий екземпляр файбера\n    -   [ReflectionFiber::getTrace](reflectionfiber.gettrace.md)— Отримує зворотне трасування поточної точки виконання\n-   [ReflectionIntersectionType](class.reflectionintersectiontype.md) \\- Клас ReflectionIntersectionType\n    -   [ReflectionIntersectionType::getTypes](reflectionintersectiontype.gettypes.md)— Повертає типи, що перетинаються.\n-   [ReflectionReference](class.reflectionreference.md) \\- Клас ReflectionReference\n    -   [ReflectionReference::\\_\\_construct](reflectionreference.construct.md)— Закритий конструктор, який забороняє створення екземпляра безпосередньо\n    -   [ReflectionReference::fromArrayElement](reflectionreference.fromarrayelement.md)— Створює ReflectionReference із елементу масиву\n    -   [ReflectionReference::getId](reflectionreference.getid.md)— Отримати унікальний ідентифікатор посилання\n-   [ReflectionAttribute](class.reflectionattribute.md) \\- Клас ReflectionAttribute\n    -   [ReflectionAttribute::\\_\\_construct](reflectionattribute.construct.md)— Закритий конструктор, який забороняє створення об'єкта безпосередньо\n    -   [ReflectionAttribute::getArguments](reflectionattribute.getarguments.md)— Повертає аргументи, передані атрибуту\n    -   [ReflectionAttribute::getName](reflectionattribute.getname.md) \\- Повертає ім'я атрибута\n    -   [ReflectionAttribute::getTarget](reflectionattribute.gettarget.md)— Повертає мету атрибуту у вигляді бітової маски\n    -   [ReflectionAttribute::isRepeated](reflectionattribute.isrepeated.md)— Визначає, чи атрибут з таким ім'ям був вказаний багаторазово в елементі коду\n    -   [ReflectionAttribute::newInstance](reflectionattribute.newinstance.md)— Створює екземпляр класу атрибута, використовуючи ім'я класу та аргументи, що містяться в об'єкті ReflectionAttribute.\n-   [Reflector](class.reflector.md) \\- Інтерфейс Reflector\n    -   [Reflector::export](reflector.export.md) \\- Експорт\n-   [ReflectionException](class.reflectionexception.md) \\- Клас ReflectionException\n","title":"Reflection","contentType":2,"navigation":[{"quickhashintstringhash.update.md":"« QuickHashIntStringHash::update"},{"intro.reflection.md":"Вступ \""},{"index.md":"PHP Manual"},{"refs.basic.vartype.md":"Модулі, що відносяться до змінних та типів"}]}},"__N_SSG":true}