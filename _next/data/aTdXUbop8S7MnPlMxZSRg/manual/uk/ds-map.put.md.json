{"pageProps":{"page":{"slug":"ds-map.put.md","content":"# Ds\\\\Map::put\n\n(PECL ds >= 1.0.0)\n\nDs\\\\Map::put — Встановлення значення за заданим ключем\n\n### Опис\n\n```methodsynopsis\npublic Ds\\Map::put(mixed $key, mixed $value): void\n```\n\nЗв'язує ключ `key`со значением`value`якщо елемент з таким ключем вже існує - його значення перезаписується.\n\n> **Зауваження** :\n> \n> Підтримуються значення типу об'єкта. Якщо об'єкт реалізує інтерфейс [Ds\\\\Hashable](class.ds-hashable.md), перевірка здійснюється шляхом виклику методу об'єкта `equals`. Якщо об'єкт не реалізує інтерфейс [Ds\\\\Hashable](class.ds-hashable.md), об'єкти повинні посилатися на той самий екземпляр класу.\n\n> **Зауваження** :\n> \n> Ви можете використовувати синтаксис масиву для доступу до значень, тобто . `$map[\"key\"]`\n\n**Застереження**\n\nБудьте обережні під час використання синтаксису масиву. Скалярні ключі будуть приведені до всіх двигунів PHP. Наприклад, `$map[\"1\"]` буде намагатися звернутися до `int(1)`, тогда как`$map->get(\"1\")` звернеться до правильного елемента.\n\nСмотрите раздел [Масиви](language.types.array.md)\n\n### Список параметрів\n\n`key`\n\nКлюч.\n\n`value`\n\nзначення.\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Ds\\\\Map::put()\\*\\*\\*\\*\n\n```php\n<?php\n$map = new \\Ds\\Map();\n\n$map->put(\"a\", 1);\n$map->put(\"b\", 2);\n$map->put(\"c\", 3);\n\nprint_r($map);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nDs\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)\n```\n\n**Приклад #2 Приклад використання** Ds\\\\Map::put()\\*\\* з об'єктами як ключі\\*\\*\n\n```php\n<?php\nclass HashableObject implements \\Ds\\Hashable\n{\n    /**\n     * Значение, которое мы будем использовать в качестве хеша. Не определяет идентичность.\n     */\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function hash()\n    {\n        return $this->value;\n    }\n\n    public function equals($obj): bool\n    {\n        return $this->value === $obj->value;\n    }\n}\n\n$map = new \\Ds\\Map();\n\n$obj = new \\ArrayIterator([]);\n\n// Использование одного и того же экземпляра объекта несколько раз будет каждый раз\n// перезаписывать значение\n$map->put($obj, 1);\n$map->put($obj, 2);\n\n// Использование разных экземпляров одного и того же класса будет создавать новые\n// элементы\n$map->put(new \\stdClass(), 3);\n$map->put(new \\stdClass(), 4);\n\n// Использование одинаковых hashable-экземпляров несколько раз будет перезаписывать\n// предыдущие значения\n$map->put(new \\HashableObject(1), 5);\n$map->put(new \\HashableObject(1), 6);\n$map->put(new \\HashableObject(2), 7);\n$map->put(new \\HashableObject(2), 8);\n\nvar_dump($map);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(Ds\\Map)#1 (5) {\n  [0]=>\n  object(Ds\\Pair)#7 (2) {\n    [\"key\"]=>\n    object(ArrayIterator)#2 (1) {\n      [\"storage\":\"ArrayIterator\":private]=>\n      array(0) {\n      }\n    }\n    [\"value\"]=>\n    int(2)\n  }\n  [1]=>\n  object(Ds\\Pair)#8 (2) {\n    [\"key\"]=>\n    object(stdClass)#3 (0) {\n    }\n    [\"value\"]=>\n    int(3)\n  }\n  [2]=>\n  object(Ds\\Pair)#9 (2) {\n    [\"key\"]=>\n    object(stdClass)#4 (0) {\n    }\n    [\"value\"]=>\n    int(4)\n  }\n  [3]=>\n  object(Ds\\Pair)#10 (2) {\n    [\"key\"]=>\n    object(HashableObject)#5 (1) {\n      [\"value\":\"HashableObject\":private]=>\n      int(1)\n    }\n    [\"value\"]=>\n    int(6)\n  }\n  [4]=>\n  object(Ds\\Pair)#11 (2) {\n    [\"key\"]=>\n    object(HashableObject)#6 (1) {\n      [\"value\":\"HashableObject\":private]=>\n      int(2)\n    }\n    [\"value\"]=>\n    int(8)\n  }\n}\n```\n","title":"Ds\\\\Map::put","contentType":2,"navigation":[{"ds-map.pairs.md":"« Ds\\\\Map::pairs"},{"ds-map.putall.md":"Ds\\\\Map::putAll »"},{"index.md":"PHP Manual"},{"class.ds-map.md":"Ds\\\\Map"}]}},"__N_SSG":true}