{"pageProps":{"page":{"slug":"mongodb.tutorial.library.md","content":"# Робота бібліотеки PHP із драйвером MongoDB (PHPLIB)\n\nПісля початкового налаштування драйвера продовжиться пояснення того, як розпочати роботу з драйвером MongoDB та користувальницькою бібліотекою, щоб створити перший проект.\n\n## Встановлення бібліотеки PHP через Composer\n\nОстаннє, що необхідно встановити перед тим, як почати писати програму, це бібліотека PHP.\n\nБібліотеку встановлюватимемо через пакетний менеджер [» Composer](https://getcomposer.org/). Інструкції зі встановлення Composer на різні платформи опубліковані на його сайті.\n\nБібліотеку встановлюють так:\n\n$ composer require mongodb/mongodb\n\nБуде виведено щось на кшталт:\n\n./composer.json has been created Loading composer repositories with package information Updating dependencies (including require-dev)\n\n-   Installing mongodb/mongodb (1.0.0) Downloading: 100%\n\nWriting lock file Generating autoload files\n\nComposer створить кілька файлів: `composer.json` `composer.lock` та директорію `vendor`, що містить саму бібліотеку та інші залежності, які будуть потрібні в проекті.\n\n## Робота з бібліотекою PHP\n\nКрім управління залежностями, Composer також містить автозавантажувач класів цих залежностей. Необхідно переконатися, що цей автозавантажувач включений у початок скрипту або код початкового завантаження програми:\n\n```php\n<?php\n// Этот путь должен указывать на автозагрузчик Composer\nrequire 'vendor/autoload.php';\n```\n\nПісля цього можна використовувати бібліотеку як описано [» в документації](https://www.mongodb.com/docs/php-library/current/)\n\nЯкщо раніше доводилося працювати з драйвером MongoDB іншими мовами, API бібліотеки буде виглядати знайомим. Він містить клас [» Client](https://www.mongodb.com/docs/php-library/master/reference/class/MongoDBClient/)для соединения с MongoDB, класс[» Database](https://www.mongodb.com/docs/php-library/master/reference/class/MongoDBDatabase/) для операцій рівня бази даних (наприклад, команди, керування колекціями) та клас [» Collection](https://www.mongodb.com/docs/php-library/master/reference/class/MongoDBCollection)для операций уровня коллекций (наПриклад, операций[» CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete), Управління індексами).\n\nНаприклад, ось як вставити документ у колекцію *beers* бази даних *demo* :\n\n```php\n<?php\nrequire 'vendor/autoload.php'; // подключаем автозагрузчик классов Composer\n\n$client = new MongoDB\\Client(\"mongodb://localhost:27017\");\n$collection = $client->demo->beers;\n\n$result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );\n\necho \"Идентификатор вставленного документа '{$result->getInsertedId()}'\";\n?>\n```\n\nОскільки вставлений документ не містив поля `_id`драйвер згенерує для сервера об'єкт [MongoDB\\\\BSON\\\\ObjectId](class.mongodb-bson-objectid.md), щоб використовувати як `_id`. Це значення також стає доступним методу, що викликається на об'єкті результату `insertOne`\n\nПісля вставки можна запросити щойно вставлені дані. Для цього викликають метод `find`, який повертає курсор, що ітерується:\n\n```php\n<?php\nrequire 'vendor/autoload.php'; // подключаем автозагрузчик классов Composer\n\n$client = new MongoDB\\Client(\"mongodb://localhost:27017\");\n$collection = $client->demo->beers;\n\n$result = $collection->find( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );\n\nforeach ($result as $entry) {\n    echo $entry['_id'], ': ', $entry['name'], \"\\n\";\n}\n?>\n```\n\nХоча після знайомства з прикладами може бути неочевидно, але документи BSON і масиви за умовчанням десеріалізовані як типи класів у бібліотеці. Ці класи дають гарантію, що значення збережуть типи при серіалізації назад у BSON, що унеможливлює проблеми зі старими драйверами, коли масиви могли перетворитися на документи і навпаки. А також цей тип класів розширює клас [ArrayObject](class.arrayobject.md)що підвищує зручність роботи з ними. Докладніше про серіалізацію та десеріалізацію між змінними PHP та BSON розказано у специфікації [Постійні дані](mongodb.persistence.md)\n","title":"Робота бібліотеки PHP із драйвером MongoDB (PHPLIB)","contentType":2,"navigation":[{"mongodb.tutorial.md":"\" Навчальні матеріали"},{"mongodb.tutorial.apm.md":"Моніторинг продуктивності програми (Application Performance Monitoring або APM) »"},{"index.md":"PHP Manual"},{"mongodb.tutorial.md":"Навчальні матеріали"}]}},"__N_SSG":true}