{"pageProps":{"page":{"slug":"imagick.morphology.md","content":"# Imagick::morphology\n\n(PECL imagick 3 >= 3.3.0)\n\nImagick::morphology — Застосовує зображення ядро, надане користувачем, відповідно до заданого методу морфології\n\n### Опис\n\n```methodsynopsis\npublic Imagick::morphology(    int $morphologyMethod,    int $iterations,    ImagickKernel $ImagickKernel,    int $channel = Imagick::CHANNEL_DEFAULT): bool\n```\n\nЗастосовує зображення ядро, надане користувачем, відповідно до заданого методу морфології.\n\n### Список параметрів\n\n`morphologyMethod`\n\nЯкий метод морфології використовувати: одна з констант \\\\Imagick::MORPHOLOGY\\_\\*\n\n`iterations`\n\nКількість ітерацій до застосування морфологічної функції. Значення -1 означає цикл, доки не буде знайдено жодних змін. Як це застосовується, може залежати від методу морфології. Зазвичай це значення дорівнює 1.\n\n`ImagickKernel`\n\n`channel`\n\n### Значення, що повертаються\n\nУ разі успішної роботи повертає **`true`**\n\n### Приклади\n\n**Приклад #1 Приклад использования метода Convolve**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$imagick = $this->getCharacter();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_GAUSSIAN, \"5,1\");\n$imagick->morphology(\\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);\nheader(\"Content-Type: image/png\");\necho $imagick->getImageBlob();\n\n?>\n```\n\n**Приклад #2 Приклад использования метода Correlate**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n// Верхний левый пиксель должен быть чёрным.\n// Нижний правый пиксель должен быть белым\n// На остальное нам всё равно.\n\n$imagick = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);\n$imagick->morphology(\\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $imagick->getImageBlob();\n\n?>\n```\n\n**Приклад #3 Приклад использования метода Erode**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_ERODE, 2, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #4 Приклад использования метода Erode Intensity**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacter();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"1\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #5 Приклад использования метода Dilate**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DILATE, 4, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #6 Приклад использования метода Dilate intensity**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacter();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"1\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #7 Приклад использования метода Distance с ядром Chebyshev**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_CHEBYSHEV, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n$canvas->autoLevelImage();\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #8 Приклад использования метода Distance с ядром Manhattan**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_MANHATTAN, \"5\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n$canvas->autoLevelImage();\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #9 Приклад использования метода Distance с ядром ocatagonal**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGONAL, \"5\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n$canvas->autoLevelImage();\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #10 Приклад использования метода Distance с ядром Euclidean**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_EUCLIDEAN, \"4\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n$canvas->autoLevelImage();\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #11 Приклад использования метода Edge**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_EDGE, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #12 Приклад использования метода Open**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n// В результате вы увидите, что \"Open\" сглаживает контур, округляя все острые точки, и удаляет все части, которые меньше используемой формы.\n// Он также отключит или откроет любые тонкие мосты.\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_OPEN, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #13 Приклад использования метода Open intensity**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n// В результате вы увидите, что \"Open\" сглаживает контур, округляя все острые точки, и удаляет все части, которые меньше используемой формы.\n// Он также отключит или откроет любые тонкие мосты.\n\n$canvas = $this->getCharacter();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #14 Приклад использования метода Close**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n// Основное использование метода \"Close\" - уменьшить или удалить любые дыры или пробелы в размере Структурного элемента ядра.\n// Это \"близкие\" части фона Прикладно такого размера.\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #15 Приклад использования метода Close Intensity**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n// Основное использование метода \"Close\" - уменьшить или удалить любые дыры или пробелы в размере Структурного элемента ядра.\n// Это \"близкие\" части фона Прикладно такого размера.\n$canvas = $this->getCharacter();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #16 Приклад использования метода Smooth**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #17 Приклад использования метода Edge in**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #18 Приклад использования метода Edge out**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #19 Метод \"TopHat\", або, точніше, \"White TopHat\", повертає пікселі, які були видалені відкриттям фігури, тобто пікселі, які були видалені для заокруглення крапок, та з'єднання, з'єднане мостом між фігурами. . **Imagick::morphology()****\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"5\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #20 Метод \"TopHat\", або, точніше, \"Black TopHat\", повертає пікселі, видалені закриттям фігури, тобто пікселі, які використовувалися для заповнення дірок, зазорів і мостів. . **Imagick::morphology()****\n\n```php\n<?php\n\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"5\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #21 Приклад використання методу Hit та Miss **Imagick::morphology()****\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n// Находит все пиксели с 3 пикселями правого края\n$matrix = [[1, false, false, 0]];\n$kernel = \\ImagickKernel::fromMatrix(\n    $matrix,\n    [0, 0]\n);\n$canvas->morphology(\\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #22 Приклад использования метода Thinning**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$leftEdgeKernel = \\ImagickKernel::fromMatrix([[0, 1]], [1, 0]);\n$rightEdgeKernel = \\ImagickKernel::fromMatrix([[1, 0]], [0, 0]);\n$leftEdgeKernel->addKernel($rightEdgeKernel);\n\n$canvas->morphology(\\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #23 Приклад использования метода Thicken**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$leftEdgeKernel = \\ImagickKernel::fromMatrix([[0, 1]], [1, 0]);\n$rightEdgeKernel = \\ImagickKernel::fromMatrix([[1, 0]], [0, 0]);\n$leftEdgeKernel->addKernel($rightEdgeKernel);\n\n$canvas->morphology(\\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #24 Приклад використання методу Thick для створення опуклої оболонки **Imagick::morphology()****\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$diamondKernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DIAMOND, \"1\");\n$convexKernel =  \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_CONVEX_HULL, \"\");\n\n// Утолщённая морфология не справляется с небольшими зазорами.\n// Закрываем их близкой морфологией.\n$canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);\n$canvas->morphology(\\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);\n$canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);\n\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #25 Приклад использования метода Iterative morphology**Imagick::morphology()\\*\\*\\*\\*\n\n```php\n<?php\n$canvas = $this->getCharacterOutline();\n$kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"2\");\n$canvas->morphology(\\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);\n$canvas->autoLevelImage();\nheader(\"Content-Type: image/png\");\necho $canvas->getImageBlob();\n\n?>\n```\n\n**Приклад #26 Приклад використання допоміжної функції для отримання силуету зображення **Imagick::morphology()****\n\n```php\n<?php\n\nfunction getCharacterOutline() {\n    $imagick = new \\Imagick(realpath(\"./images/character.png\"));\n    $character = new \\Imagick();\n    $character->newPseudoImage(\n        $imagick->getImageWidth(),\n        $imagick->getImageHeight(),\n        \"canvas:white\"\n    );\n    $canvas = new \\Imagick();\n    $canvas->newPseudoImage(\n        $imagick->getImageWidth(),\n        $imagick->getImageHeight(),\n        \"canvas:black\"\n    );\n\n    $character->compositeimage(\n        $imagick,\n        \\Imagick::COMPOSITE_COPYOPACITY,\n        0, 0\n    );\n    $canvas->compositeimage(\n        $character,\n        \\Imagick::COMPOSITE_ATOP,\n        0, 0\n    );\n    $canvas->setFormat('png');\n\n    return $canvas;\n}\n?>\n```\n","title":"Imagick::morphology","contentType":2,"navigation":[{"imagick.morphimages.md":"« Imagick::morphImages"},{"imagick.mosaicimages.md":"Imagick::mosaicImages »"},{"index.md":"PHP Manual"},{"class.imagick.md":"Imagick"}]}},"__N_SSG":true}