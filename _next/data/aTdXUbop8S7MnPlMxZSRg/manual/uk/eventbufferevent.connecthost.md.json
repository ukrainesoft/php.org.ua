{"pageProps":{"page":{"slug":"eventbufferevent.connecthost.md","content":"# EventBufferEvent::connectHost\n\n(PECL event >= 1.2.6-beta)\n\nEventBufferEvent::connectHost — Підключається на ім'я хоста з можливістю асинхронного дозволу DNS\n\n### Опис\n\n```methodsynopsis\npublic\n   EventBufferEvent::connectHost(    \n    EventDnsBase\n     $dns_base\n   ,    \n    string\n     $hostname\n   ,    \n    int\n     $port\n   ,    \n    int\n     $family\n     = EventUtil::AF_UNSPEC\n   ): bool\n```\n\nРазрешает имя хоста DNS-имени, ища адреса типа`family` (Константи `EventUtil::AF_*`). Якщо дозвіл імені не вдалося зробити, викликає callback-функцію події з подією помилки. У разі успішного виконання робить спробу підключення так само, як [EventBufferEvent::connect()](eventbufferevent.connect.md)\n\nПараметр`dns_base` не є обов'язковим. Він може мати значення **`null`** або посилатися на об'єкт, створений за допомогою [EventDnsBase::\\_\\_construct()](eventdnsbase.construct.md). Для асинхронного дозволу імені хоста необхідно передати дійсний базовий ресурс події DNS. В іншому випадку дозвіл імені хоста буде заблоковано.\n\n> **Зауваження** :\n> \n> [EventDnsBase](class.eventdnsbase.md) доступний, тільки якщо `Event` налаштований з **\\--with-event-extra**(библиотека`event_extra` *підтримка функцій протоколу libevent, включаючи HTTP, DNS та RPC*\n\n> **Зауваження** :\n> \n> **EventBufferEvent::connectHost()** вимагає `libevent-2.0.3-alpha` або вище.\n\n### Список параметрів\n\n`dns_base`\n\nОб'єкт [EventDnsBase](class.eventdnsbase.md) у випадку, якщо DNS потрібно дозволити асинхронно . **`null`** в іншому випадку.\n\n`hostname`\n\nІм'я хоста для підключення. Формати, що розпізнаються:\n\n[www.example.com](http://www.example.com)(hostname) 1.2.3.4 (ipv4address) ::1 (ipv6address)\\[::1\\] \\[ipv6address\\]) .\n\n`port`\n\nНомер порту.\n\n`family`\n\nСемейство адресов\\*\\*`EventUtil::AF_UNSPEC`\\*\\* \\*\\*`EventUtil::AF_INET`** або **`EventUtil::AF_INET6`\\*\\*Обратитесь к списку[констант EventUtil](class.eventutil.md#eventutil.constants)\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1**Приклад використання EventBufferEvent::connectHost()\\*\\*\\*\\*\n\n```php\n<?php\n/* Callback-функция чтения */\nfunction readcb($bev, $base) {\n    //$input = $bev->input; //$bev->getInput();\n\n    //$pos = $input->search(\"TTP\");\n    $pos = $bev->input->search(\"TTP\");\n\n    while (($n = $bev->input->remove($buf, 1024)) > 0) {\n        echo $buf;\n    }\n}\n\n/* Callback-функция события */\nfunction eventcb($bev, $events, $base) {\n    if ($events & EventBufferEvent::CONNECTED) {\n        echo \"Подключено.\\n\";\n    } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"Ошибка DNS: \", $bev->getDnsErrorString(), PHP_EOL;\n        }\n\n        echo \"Закрытие\\n\";\n        $base->exit();\n        exit(\"Выполнено\\n\");\n    }\n}\n\n$base = new EventBase();\n\n$dns_base = new EventDnsBase($base, TRUE); // Использование асинхронного разрешения DNS\nif (!$dns_base) {\n    exit(\"Не удалось запустить базу DNS\\n\");\n}\n\n$bev = new EventBufferEvent($base, /* использование внутреннего сокета */ NULL,\n    EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,\n    \"readcb\", /* writecb */ NULL, \"eventcb\", $base\n);\nif (!$bev) {\n    exit(\"Не удалось создать сокет bufferevent\\n\");\n}\n\n//$bev->setCallbacks(\"readcb\", /* writecb */ NULL, \"eventcb\", $base);\n$bev->enable(Event::READ | Event::WRITE);\n\n$output = $bev->output; //$bev->getOutput();\nif (!$output->add(\n    \"GET {$argv[2]} HTTP/1.0\\r\\n\".\n    \"Host: {$argv[1]}\\r\\n\".\n    \"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\"Не удалось добавить запрос в выходной буфер\\n\");\n}\n\nif (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {\n    exit(\"Не удалось подключиться к хосту {$argv[1]}\\n\");\n}\n\n$base->dispatch();\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nConnected.\nHTTP/1.0 301 Moved Permanently\nLocation: http://www.google.co.uk/\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 09 Mar 2013 12:21:19 GMT\nExpires: Mon, 08 Apr 2013 12:21:19 GMT\nCache-Control: public, max-age=2592000\nServer: gws\nContent-Length: 221\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: SAMEORIGIN\n\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF=\"http://www.google.co.uk/\">here</A>.\n</BODY></HTML>\nClosing\nDone\n```\n\n### Дивіться також\n\n-   [EventBufferEvent::connect()](eventbufferevent.connect.md) \\- Підключає файловий дескриптор події буфера до вказаної адреси або сокету UNIX\n","title":"EventBufferEvent::connectHost","contentType":2,"navigation":[{"eventbufferevent.connect.md":"« EventBufferEvent::connect"},{"eventbufferevent.construct.md":"EventBufferEvent::\\_\\_construct »"},{"index.md":"PHP Manual"},{"class.eventbufferevent.md":"EventBufferEvent"}]}},"__N_SSG":true}