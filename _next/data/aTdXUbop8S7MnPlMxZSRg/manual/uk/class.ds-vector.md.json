{"pageProps":{"page":{"slug":"class.ds-vector.md","content":"# Клас Vector\n\n(PECL ds >= 1.0.0)\n\n## Вступ\n\nВектор – це послідовність значень у безперервному буфері, який росте та обрізається автоматично. Це найбільш ефективна послідовна структура, оскільки індекси значень прямо відображаються на їхній індекс у буфері, і фактор зростання не впливає на складність доступу.\n\n## Сильні сторони\n\n-   Підтримує синтаксис масиву (квадратні дужки).\n-   Використовує менше пам'яті, ніж масив (array) із тією ж кількістю елементів.\n-   Автоматично звільняє пам'ять, коли кількість елементів зменшується.\n-   Місткість не обмежена ступенями двійки.\n-   **get()** **set()** \\*\\*push()** і **pop()\\*\\*мають складність O(1).\n\n## Слабкі сторони\n\n-   **shift()** **unshift()** \\*\\*insert()** і **remove()\\*\\*мають складність O(n).\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n\n    \n    \n\n     class Ds\\Vector\n     implements  Ds\\Sequence,  ArrayAccess {\n    \n    /* Константы */\n    \n     const\n     int\n      MIN_CAPACITY = 10;\n\n\n    /* Методы */\n    \n   public allocate(int $capacity): void\npublic apply(callable $callback): void\npublic capacity(): int\npublic clear(): void\npublic contains(mixed ...$values): bool\npublic copy(): Ds\\Vector\npublic filter(callable $callback = ?): Ds\\Vector\npublic find(mixed $value): mixed\npublic first(): mixed\npublic get(int $index): mixed\npublic insert(int $index, mixed ...$values): void\npublic isEmpty(): bool\npublic join(string $glue = ?): string\npublic last(): mixed\npublic map(callable $callback): Ds\\Vector\npublic merge(mixed $values): Ds\\Vector\npublic pop(): mixed\npublic push(mixed ...$values): void\npublic reduce(callable $callback, mixed $initial = ?): mixed\npublic remove(int $index): mixed\npublic reverse(): void\npublic reversed(): Ds\\Vector\npublic rotate(int $rotations): void\npublic set(int $index, mixed $value): void\npublic shift(): mixed\npublic slice(int $index, int $length = ?): Ds\\Vector\npublic sort(callable $comparator = ?): void\npublic sorted(callable $comparator = ?): Ds\\Vector\npublic sum(): int|float\npublic toArray(): array\npublic unshift(mixed $values = ?): void\n\n   }\n```\n\n## Обумовлені константи\n\n**`Ds\\Vector::MIN_CAPACITY`**\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL ds 1.3.0 | Тепер клас реалізує [ArrayAccess](class.arrayaccess.md) |\n\n## Зміст\n\n-   [Ds\\\\Vector::allocate](ds-vector.allocate.md)— Виділяє пам'ять під зазначену місткість\n-   [Ds\\\\Vector::apply](ds-vector.apply.md) \\- Оновлює всі значення, застосовуючи до них передану callback-функцію\n-   [Ds\\\\Vector::capacity](ds-vector.capacity.md)— Повертає поточну місткість\n-   [Ds\\\\Vector::clear](ds-vector.clear.md) \\- Видаляє всі значення\n-   [Ds\\\\Vector::\\_\\_construct](ds-vector.construct.md) \\- Створює новий екземпляр\n-   [Ds\\\\Vector::contains](ds-vector.contains.md)— Перевіряє, чи міститься у векторі задані значення\n-   [Ds\\\\Vector::copy](ds-vector.copy.md)— Повертає поверхневу копію вектора\n-   [Ds\\\\Vector::count](ds-vector.count.md)— Повертає кількість елементів вектора\n-   [Ds\\\\Vector::filter](ds-vector.filter.md)— Створює новий вектор із елементів, вибраних за допомогою заданої callback-функції\n-   [Ds\\\\Vector::find](ds-vector.find.md) \\- Пошук індексу за значенням\n-   [Ds\\\\Vector::first](ds-vector.first.md)— Повертає перший елемент вектора\n-   [Ds\\\\Vector::get](ds-vector.get.md)— Повертає значення за індексом\n-   [Ds\\\\Vector::insert](ds-vector.insert.md)— Вставляє значення за вказаним індексом\n-   [Ds\\\\Vector::isEmpty](ds-vector.isempty.md)— Перевіряє, чи вектор порожній.\n-   [Ds\\\\Vector::join](ds-vector.join.md) \\- Склеює всі значення в рядок\n-   [Ds\\\\Vector::jsonSerialize](ds-vector.jsonserialize.md)— Повертає вектор у JSON-представництві\n-   [Ds\\\\Vector::last](ds-vector.last.md)— Повертає останнє значення вектора\n-   [Ds\\\\Vector::map](ds-vector.map.md)— Повертає результат застосування callback-функції до всіх значень вектора\n-   [Ds\\\\Vector::merge](ds-vector.merge.md)— Повертає результат додавання всіх заданих значень у вектор.\n-   [Ds\\\\Vector::pop](ds-vector.pop.md)— Видаляє та повертає останнє значення\n-   [Ds\\\\Vector::push](ds-vector.push.md)— Додає значення до кінця вектора\n-   [Ds\\\\Vector::reduce](ds-vector.reduce.md) \\- Зменшує вектор до одного значення, використовуючи callback-функцію\n-   [Ds\\\\Vector::remove](ds-vector.remove.md)— Видаляє та повертає значення за індексом\n-   [Ds\\\\Vector::reverse](ds-vector.reverse.md)— Перевертає поточний вектор\n-   [Ds\\\\Vector::reversed](ds-vector.reversed.md)— Повертає перегорнуту копію вектора\n-   [Ds\\\\Vector::rotate](ds-vector.rotate.md)— Перемотує вектор на задану кількість значень\n-   [Ds\\\\Vector::set](ds-vector.set.md)— Замінює значення за вказаним індексом\n-   [Ds\\\\Vector::shift](ds-vector.shift.md)— Видаляє та повертає перше значення\n-   [Ds\\\\Vector::slice](ds-vector.slice.md)— Повертає підвектор із заданого діапазону\n-   [Ds\\\\Vector::sort](ds-vector.sort.md)— Сортує вектор\n-   [Ds\\\\Vector::sorted](ds-vector.sorted.md)— Повертає копію колекції, відсортовану за значенням.\n-   [Ds\\\\Vector::sum](ds-vector.sum.md)— Повертає суму всіх значень колекції\n-   [Ds\\\\Vector::toArray](ds-vector.toarray.md)— Перетворює колекцію на масив (array)\n-   [Ds\\\\Vector::unshift](ds-vector.unshift.md)— Додає значення на початок вектора\n","title":"Клас Vector","contentType":2,"navigation":[{"ds-sequence.unshift.md":"« Ds\\\\Sequence::unshift"},{"ds-vector.allocate.md":"Ds\\\\Vector::allocate »"},{"index.md":"PHP Manual"},{"book.ds.md":"Структури даних"}]}},"__N_SSG":true}