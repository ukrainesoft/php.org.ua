{"pageProps":{"page":{"slug":"simplexmlelement.children.md","content":"# SimpleXMLElement::children\n\n(PHP 5, PHP 7, PHP 8)\n\nSimpleXMLElement::children — Знаходить дочірні елементи цього сайту\n\n### Опис\n\n```methodsynopsis\npublic SimpleXMLElement::children(?string $namespaceOrPrefix = null, bool $isPrefix = false): ?SimpleXMLElement\n```\n\nЦей метод знаходить усі дочірні елементи вузла. Результат підкоряється стандартним правилам ітерації.\n\n> **Зауваження**: SimpleXML містить правило додавання ітеративних властивостей до більшості методів. Вони не можуть бути переглянуті з використанням [var\\_dump()](function.var-dump.md) чи будь-яких інших засобів аналізу об'єктів.\n\n### Список параметрів\n\n`namespaceOrPrefix`\n\nНеобов'язковий простір імен XML.\n\n`isPrefix`\n\nЯкщо `isPrefix`установлен в\\*\\*`true`\\*\\* `namespaceOrPrefix` буде розглянуто як префікс. Якщо **`false`** `namespaceOrPrefix` буде розглянуто як простір імен URL.\n\n### Значення, що повертаються\n\nПовертає елемент [SimpleXMLElement](class.simplexmlelement.md)навіть якщо вузол не має дочірніх елементів, якщо вузол не представляє атрибут, у цьому випадку функція повертає **`null`**\n\n### Приклади\n\n**Приклад #1 Обхід псевдомасиву `children()`**\n\n```php\n<?php\n$xml = new SimpleXMLElement(\n'<person>\n <child role=\"сын\">\n  <child role=\"дочь\"/>\n </child>\n <child role=\"дочь\">\n  <child role=\"сын\">\n   <child role=\"сын\"/>\n  </child>\n </child>\n</person>');\n\nforeach ($xml->children() as $second_gen) {\n    echo ' У человека родился(-ась) ' . $second_gen['role'];\n\n    foreach ($second_gen->children() as $third_gen) {\n        echo ', у которого родился(-ась) ' . $third_gen['role'] . ';';\n\n        foreach ($third_gen->children() as $fourth_gen) {\n            echo ' и у ' . $third_gen['role'] .\n                ' родился(-ась) ' . $fourth_gen['role'];\n        }\n    }\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nУ человека родился(-ась) сын, у которого родился(-ась) дочь; У человека\nродился(-ась) дочь, у которого родился(-ась) сын; и у сын родился(-ась) сын\n```\n\n**Приклад #2 Використання простору імен**\n\n```php\n<?php\n$xml = '<example xmlns:foo=\"my.foo.urn\">\n  <foo:a>Яблоко</foo:a>\n  <foo:b>Банан</foo:b>\n  <c>Вишня</c>\n</example>';\n\n$sxe = new SimpleXMLElement($xml);\n\n$kids = $sxe->children('foo');\nvar_dump(count($kids));\n\n$kids = $sxe->children('foo', TRUE);\nvar_dump(count($kids));\n\n$kids = $sxe->children('my.foo.urn');\nvar_dump(count($kids));\n\n$kids = $sxe->children('my.foo.urn', TRUE);\nvar_dump(count($kids));\n\n$kids = $sxe->children();\nvar_dump(count($kids));\n?>\n```\n\n```\nint(0)\nint(2)\nint(2)\nint(0)\nint(1)\n```\n\n### Дивіться також\n\n-   [SimpleXMLElement::count()](simplexmlelement.count.md) \\- Підраховує кількість дочірніх елементів у поточного елемента\n-   [count()](function.count.md) \\- Підраховує кількість елементів масиву або Countable об'єкті\n","title":"SimpleXMLElement::children","contentType":2,"navigation":[{"simplexmlelement.attributes.md":"« SimpleXMLElement::attributes"},{"simplexmlelement.construct.md":"SimpleXMLElement::\\_\\_construct »"},{"index.md":"PHP Manual"},{"class.simplexmlelement.md":"SimpleXMLElement"}]}},"__N_SSG":true}