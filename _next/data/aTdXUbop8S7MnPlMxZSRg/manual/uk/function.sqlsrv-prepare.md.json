{"pageProps":{"page":{"slug":"function.sqlsrv-prepare.md","content":"# sqlsrv\\_prepare\n\n(No version information available, might only be in Git)\n\nsqlsrv\\_prepare — Підготовка запиту до виконання\n\n### Опис\n\n```methodsynopsis\nsqlsrv_prepare(    resource $conn,    string $sql,    array $params = ?,    array $options = ?): mixed\n```\n\nПідготовка запиту до виконання. Функція ідеально підходить для підготовки запиту, який буде виконуватись кілька разів із різними значеннями параметрів.\n\n### Список параметрів\n\n`conn`\n\nРесурс підключення, що повертається [sqlsrv\\_connect()](function.sqlsrv-connect.md)\n\n`sql`\n\nРядок, що визначає запит, який потрібно підготувати та виконати.\n\n`params`\n\nМасив, що визначає інформацію про параметри під час виконання запиту. Елементи масиву можуть бути будь-якими з наступних:\n\n-   Строкове значення\n-   Змінна PHP\n-   Масив із такою структурою: array($value\\[, $direction\\[, $phpType\\[, $sqlType\\]\\]\\]) .\n\nУ наступній таблиці описані елементи у структурі масиву вище:\n\n**Структура масиву**\n\n| Элемент | Опис |\n| --- | --- |\n| $value | Рядкове значення, змінна PHP або змінна PHP, передана за посиланням. |\n| $direction (необов'язковий) | Одна з наступних констант SQLSRV, що використовуються для вказівки напряму параметра: SQLSRV\\_PARAM\\_IN, SQLSRV\\_PARAM\\_OUT, SQLSRV\\_PARAM\\_INOUT. Значення за промовчанням - SQLSRV\\_PARAM\\_IN. |\n| $phpType (необов'язковий) | Константа SQLSRV\\_PHPTYPE\\_\\*, що вказує тип даних PHP значення, що повертається. |\n| $sqlType (необов'язковий) | Константа SQLSRV\\_SQLTYPE\\_\\*вказує тип даних SQL Server вхідного значення. |\n\n`options`\n\nМасив, визначальний параметри властивостей запиту. Ключі, що підтримуються, описані в наступній таблиці:\n\n**Опції запиту**\n\n| Ключ | Значения | Опис |\n| --- | --- | --- |\n| QueryTimeout | Позитивне ціле значення. | Встановлює час очікування в секундах. За замовчуванням драйвер очікуватиме результатів нескінченно. |\n| SendStreamParamsAtExec | **`true`** або **`false`** (за замовчуванням **`true`**) . | Налаштовує драйвер для надсилання всіх даних потоку під час виконання (**`true`**) або для надсилання даних потоку частинами (**`false`**). За замовчуванням встановлено значення **`true`**. . Для отримання додаткової інформації дивіться [sqlsrv\\_send\\_stream\\_data()](function.sqlsrv-send-stream-data.md) |\n| Scrollable | SQLSRV\\_CURSOR\\_FORWARD, SQLSRV\\_CURSOR\\_STATIC, SQLSRV\\_CURSOR\\_DYNAMIC, або SQLSRV\\_CURSOR\\_KEYSET | Смотрите[» Вказівка ​​типу курсору та вибір рядків](http://msdn.microsoft.com/en-us/library/ee376927.aspx)в документации Microsoft SQLSRV. |\n\n### Значення, що повертаються\n\nПовертає ресурс оператора у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад використання** sqlsrv\\_prepare()\\*\\*\\*\\*\n\nУ цьому прикладі показано, як підготувати оператор за допомогою **sqlsrv\\_prepare()** та повторно виконати його кілька разів (з різними значеннями параметрів) за допомогою [sqlsrv\\_execute()](function.sqlsrv-execute.md)\n\n```php\n<?php\n$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"UPDATE Table_1\n        SET OrderQty = ?\n        WHERE SalesOrderID = ?\";\n\n// Инициализация параметров и подготовка запроса.\n// Переменные $qty и $id связаны с оператором $stmt.\n$qty = 0; $id = 0;\n$stmt = sqlsrv_prepare( $conn, $sql, array( &$qty, &$id));\nif( !$stmt ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n// Настройка информации SalesOrderDetailID и OrderQty.\n// Этот массив сопоставляет идентификатор заказа с количеством заказа в парах ключ => значение.\n$orders = array( 1=>10, 2=>20, 3=>30);\n\n// Выполнение запроса для каждого заказа.\nforeach( $orders as $id => $qty) {\n    // Поскольку $id и $qty привязаны к $stmt1,\n    // их обновлённые значения используются при каждом выполнении запроса.\n    if( sqlsrv_execute( $stmt ) === false ) {\n          die( print_r( sqlsrv_errors(), true));\n    }\n}\n?>\n```\n\n### Примітки\n\nКоли ви підготуєте запит, який використовує змінні як параметри, змінні прив'язуються до оператора. Це означає, що якщо ви оновите значення змінних, наступного разу, коли ви виконаєте запит, він буде працювати з оновленими значеннями параметрів. Для операторів, які ви плануєте виконати лише один раз, використовуйте [sqlsrv\\_query()](function.sqlsrv-query.md)\n\n### Дивіться також\n\n-   [sqlsrv\\_execute()](function.sqlsrv-execute.md) \\- Виконує запит підготовлений за допомогою sqlsrv\\_prepare\n-   [sqlsrv\\_query()](function.sqlsrv-query.md) \\- готує та виконує запит\n","title":"sqlsrv\\_prepare","contentType":2,"navigation":[{"function.sqlsrv-num-rows.md":"« sqlsrv\\_num\\_rows"},{"function.sqlsrv-query.md":"sqlsrv\\_query »"},{"index.md":"PHP Manual"},{"ref.sqlsrv.md":"Функції SQLSRV"}]}},"__N_SSG":true}