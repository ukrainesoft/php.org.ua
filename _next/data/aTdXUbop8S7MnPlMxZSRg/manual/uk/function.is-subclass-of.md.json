{"pageProps":{"page":{"slug":"function.is-subclass-of.md","content":"# is\\_subclass\\_of\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nis\\_subclass\\_of — Перевіряє, чи містить об'єкт у дереві предків зазначений клас чи прямо реалізує його\n\n### Опис\n\n```methodsynopsis\nis_subclass_of(mixed $object_or_class, string $class, bool $allow_string = true): bool\n```\n\nПеревіряє, чи містить об'єкт `object_or_class` у своєму дереві предків клас `class`либо прямо реализует его.\n\n### Список параметрів\n\n`object_or_class`\n\nНазва класу або екземпляр об'єкта. У разі відсутності такого класу жодної помилки згенеровано не буде.\n\n`class`\n\nІм'я класу\n\n`allow_string`\n\nЕсли параметр установлен в false, то не допускается имя класса в виде строки в качестве параметра`object_or_class`. Це також запобігає виклику автозавантажувача, якщо клас не існує.\n\n### Значення, що повертаються\n\nЦя функція повертає **`true`**, якщо об'єкт `object_or_class`принадлежит к классу, наследующему от`class`, інакше вона повертає **`false`**\n\n### Приклади\n\n**Приклад #1 Приклад використання** is\\_subclass\\_of()\\*\\*\\*\\*\n\n```php\n<?php\n// объявляем класс\nclass WidgetFactory\n{\n  var $oink = 'moo';\n}\n\n// объявляем наследника\nclass WidgetFactory_Child extends WidgetFactory\n{\n  var $oink = 'oink';\n}\n\n// создаём новый объект\n$WF = new WidgetFactory();\n$WFC = new WidgetFactory_Child();\n\nif (is_subclass_of($WFC, 'WidgetFactory')) {\n  echo \"да, \\$WFC наследует WidgetFactory\\n\";\n} else {\n  echo \"нет, \\$WFC не наследует WidgetFactory\\n\";\n}\n\n\nif (is_subclass_of($WF, 'WidgetFactory')) {\n  echo \"да, \\$WF наследует WidgetFactory\\n\";\n} else {\n  echo \"нет, \\$WF не наследует WidgetFactory\\n\";\n}\n\nif (is_subclass_of('WidgetFactory_Child', 'WidgetFactory')) {\n  echo \"да, WidgetFactory_Child наследует WidgetFactory\\n\";\n} else {\n  echo \"нет, WidgetFactory_Child не наследует WidgetFactory\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nда, $WFC наследует WidgetFactory\nнет, $WF не наследует WidgetFactory\nда, WidgetFactory_Child наследует WidgetFactory\n```\n\n**Приклад #2 Приклад використання** is\\_subclass\\_of()\\*\\* з інтерфейсами\\*\\*\n\n```php\n<?php\n// Определяем интерфейс\ninterface MyInterface\n{\n  public function MyFunction();\n}\n\n// Определяем класс с реализацией интерфейса\nclass MyClass implements MyInterface\n{\n  public function MyFunction()\n  {\n    return \"MyClass реализует MyInterface!\";\n  }\n}\n\n// Создаём объект\n$my_object = new MyClass;\n\n// Код ниже работает с PHP 5.3.7\n\n// Проверка с помощью экземпляра объекта\nif (is_subclass_of($my_object, 'MyInterface')) {\n  echo \"Да, \\$my_object является подклассом MyInterface\\n\";\n} else {\n  echo \"Нет, \\$my_object не является подклассом MyInterface\\n\";\n}\n\n// Проверка с помощью имени класса в виде строки\nif (is_subclass_of('MyClass', 'MyInterface')) {\n  echo \"Да, MyClass является подклассом MyInterface\\n\";\n} else {\n  echo \"Нет, MyClass не является подклассом MyInterface\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nДа, $my_object является подклассом MyInterface\nДа, MyClass является подклассом MyInterface\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Виклик цієї функції буде використовувати всі зареєстровані [функції автозавантаження](language.oop5.autoload.md)якщо клас ще не відомий.\n\n### Дивіться також\n\n-   [get\\_class()](function.get-class.md) \\- Повертає ім'я класу, до якого належить об'єкт\n-   [get\\_parent\\_class()](function.get-parent-class.md) \\- Повертає ім'я батьківського класу для об'єкта чи класу\n-   [is\\_a()](function.is-a.md) \\- Перевіряє, чи об'єкт належить до типу або підтипу\n-   [class\\_parents()](function.class-parents.md) \\- Повертає список батьківських класів заданого класу\n","title":"is\\_subclass\\_of","contentType":2,"navigation":[{"function.is-a.md":"« is\\_a"},{"function.method-exists.md":"method\\_exists »"},{"index.md":"PHP Manual"},{"ref.classobj.md":"Функції роботи з класами та об'єктами"}]}},"__N_SSG":true}