{"pageProps":{"page":{"slug":"recursiveregexiterator.haschildren.md","content":"# RecursiveRegexIterator::hasChildren\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nRecursiveRegexIterator::hasChildren — Визначає, чи можлива навігація за вмістом поточного елемента\n\n### Опис\n\n```methodsynopsis\npublic RecursiveRegexIterator::hasChildren(): bool\n```\n\nВизначає, чи можлива навігація вмісту поточного елемента. Якщо поточний елемент має дочірні елементи, ітератор для них можна отримати методом [RecursiveRegexIterator::getChildren()](recursiveregexiterator.getchildren.md)\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає **`true`**, якщо можлива навігація вмісту поточного елемента, **`false`** в іншому випадку.\n\n### Приклади\n\n**Приклад #1 Приклад використання** RecursiveRegexIterator::hasChildren()\\*\\*\\*\\*\n\n```php\n<?php\n$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));\n$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '/^test/',\n    RecursiveRegexIterator::ALL_MATCHES);\n\nforeach ($rRegexIterator as $value) {\n    var_dump($rRegexIterator->hasChildren());\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(false)\nbool(true)\n```\n\n### Дивіться також\n\n-   [RecursiveRegexIterator::getChildren()](recursiveregexiterator.getchildren.md) \\- Повертає ітератор для поточного елемента\n","title":"RecursiveRegexIterator::hasChildren","contentType":2,"navigation":[{"recursiveregexiterator.getchildren.md":"« RecursiveRegexIterator::getChildren"},{"class.recursivetreeiterator.md":"RecursiveTreeIterator »"},{"index.md":"PHP Manual"},{"class.recursiveregexiterator.md":"RecursiveRegexIterator"}]}},"__N_SSG":true}