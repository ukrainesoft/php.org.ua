{"pageProps":{"page":{"slug":"function.array-diff.md","content":"# array\\_diff\n\n(PHP 4 >= 4.0.1, PHP 5, PHP 7, PHP 8)\n\narray\\_diff - Обчислює розбіжність масивів\n\n### Опис\n\n```methodsynopsis\narray_diff(array $array, array ...$arrays): array\n```\n\nПорівнює масив, переданий у параметр `array`, з одним або декількома іншими масивами та повертає значення з масиву `array`, які відсутні у всіх інших масивах\n\n### Список параметрів\n\n`array`\n\nВихідний масив\n\n`arrays`\n\nМасиви, з якими йде порівняння\n\n### Значення, що повертаються\n\nПовертає масив (array), що містить ті елементи масиву `array`, яких немає у будь-якому іншому масиві. Ключі в масиві `array` зберігаються.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер функцію можна викликати лише з одним параметром. Раніше потрібно не менше двох параметрів. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** array\\_diff()\\*\\*\\*\\*\n\n```php\n<?php\n$array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\");\n$array2 = array(\"b\" => \"green\", \"yellow\", \"red\");\n$result = array_diff($array1, $array2);\n\nprint_r($result);\n?>\n```\n\nМножинні збіги $array1 обробляються як одне. Результат буде наступним:\n\n```\nArray\n(\n    [1] => blue\n)\n```\n\n**Приклад #2 Приклад використання** array\\_diff()\\*\\* з несхожими типами\\*\\*\n\nДва елементи вважаються рівними тоді і лише тоді, коли `(string) $elem1 === (string) $elem2`. Тобто коли [рядкове подання](language.types.string.md#language.types.string.casting)одинаково.\n\n```php\n<?php\n// Это сгенерирует уведомление о том, что массив не может быть преобразован в строку.\n$source = [1, 2, 3, 4];\n$filter = [3, 4, [5], 6];\n$result = array_diff($source, $filter);\n\n// В то же время это нормально, поскольку объекты могут быть преобразованы в строку.\nclass S {\n  private $v;\n\n  public function __construct(string $v) {\n    $this->v = $v;\n  }\n\n  public function __toString() {\n    return $this->v;\n  }\n}\n\n$source = [new S('a'), new S('b'), new S('c')];\n$filter = [new S('b'), new S('c'), new S('d')];\n\n$result = array_diff($source, $filter);\n\n// $result теперь содержит один экземпляр S('a');\n?>\n```\n\nЩоб використати альтернативну функцію порівняння, дивіться [array\\_udiff()](function.array-udiff.md)\n\n### Примітки\n\n> **Зауваження** :\n> \n> Зверніть увагу, що ця функція обробляє лише один вимір n-розмірного масиву. Звичайно, ви можете обробляти і більш глибокі рівні вкладеності, наприклад, використовуючи `array_diff($array1[0], $array2[0]);`\n\n### Дивіться також\n\n-   [array\\_diff\\_assoc()](function.array-diff-assoc.md) \\- обчислює розбіжність масивів з додатковою перевіркою індексу\n-   [array\\_udiff()](function.array-udiff.md) \\- обчислює розбіжність масивів, використовуючи для порівняння callback-функцію\n-   [array\\_intersect()](function.array-intersect.md) \\- обчислює перетин масивів\n-   [array\\_intersect\\_assoc()](function.array-intersect-assoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу\n","title":"array\\_diff","contentType":2,"navigation":[{"function.array-diff-ukey.md":"« array\\_diff\\_ukey"},{"function.array-fill-keys.md":"array\\_fill\\_keys »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}