{"pageProps":{"page":{"slug":"function.parse-ini-file.md","content":"# parse\\_ini\\_file\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nparse\\_ini\\_file — Обробляє файл конфігурації\n\n### Опис\n\n```methodsynopsis\nparse_ini_file(string $filename, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false\n```\n\n**parse\\_ini\\_file()** завантажує ini-файл, вказаний у аргументі `filename`, і повертає його налаштування у вигляді асоціативного масиву.\n\nСтруктура ini-файлу схожа структуру php.ini.\n\n### Список параметрів\n\n`filename`\n\nІм'я ini-файлу, що обробляється. Якщо використовується відносний шлях, він оцінюється щодо поточного робочого каталогу, а потім [include\\_path](ini.core.md#ini.include-path)\n\n`process_sections`\n\nУстановив параметр`process_sections`в\\*\\*`true`**, Ви отримуєте багатовимірний масив, який включає як назву окремих налаштувань, так і секції. За замовчуванням `process_sections`равен**`false`\\*\\*\n\n`scanner_mode`\n\nМоже приймати такі значення: **`INI_SCANNER_NORMAL`**(по умолчанию) или\\*\\*`INI_SCANNER_RAW`**Если указано значение**`INI_SCANNER_RAW`\\*\\*то значення опцій не будуть оброблятися.\n\nЗ версії PHP 5.6.1 можна також задати **`INI_SCANNER_TYPED`**. У цьому режимі типи boolean, null і integer, по можливості, зберігатимуться. Строкові значення `\"true\"` `\"on\"`и`\"yes\"` будуть перетворені на **`true`**. . `\"false\"` `\"off\"` `\"no\"`и`\"none\"`в\\*\\*`false`\\*\\*. . `\"null\"` перетворюється на **`null`**. Крім цього, усі числові рядки будуть, по можливості, перетворені до цілих чисел.\n\n### Значення, що повертаються\n\nУ разі успішного виконання налаштування повертаються у вигляді асоціативного масиву (array). У разі виникнення помилки повертається **`false`**\n\n### Приклади\n\n**Приклад #1 Вміст sample.ini**\n\n```\n; Это Приклад файла настроек\n; Комментарии начинаются с ';', как в php.ini\n\n[first_section]\none = 1\nfive = 5\nanimal = BIRD\n\n[second_section]\npath = \"/usr/local/bin\"\nURL = \"http://www.example.com/~username\"\n\n[third_section]\nphpversion[] = \"5.0\"\nphpversion[] = \"5.1\"\nphpversion[] = \"5.2\"\nphpversion[] = \"5.3\"\n\nurls[svn] = \"http://svn.php.net\"\nurls[git] = \"http://git.php.net\"\n```\n\n**Приклад #2 Приклад використання функції** parse\\_ini\\_file()\\*\\*\\*\\*\n\n[Константи](language.constants.md) (але не \"магічні константи\" на кшталт **`__FILE__`**) також можуть оброблятися в ini-файлах, тому якщо ви оголосите константу у вигляді значення для ini-файла до виклику **parse\\_ini\\_file()**, то константа буде коректно опрацьована. Тільки значення опцій будуть оброблятись і значення має бути просто константою. Наприклад:\n\n```php\n<?php\n\ndefine('BIRD', 'Птица додо');\n\n// Обрабатываем без секций\n$ini_array = parse_ini_file(\"sample.ini\");\nprint_r($ini_array);\n\n// Обрабатываем с секциями\n$ini_array = parse_ini_file(\"sample.ini\", true);\nprint_r($ini_array);\n\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nArray\n(\n    [one] => 1\n    [five] => 5\n    [animal] => Птица додо\n    [path] => /usr/local/bin\n    [URL] => http://www.example.com/~username\n    [phpversion] => Array\n        (\n            [0] => 5.0\n            [1] => 5.1\n            [2] => 5.2\n            [3] => 5.3\n        )\n\n    [urls] => Array\n        (\n            [svn] => http://svn.php.net\n            [git] => http://git.php.net\n        )\n\n)\nArray\n(\n    [first_section] => Array\n        (\n            [one] => 1\n            [five] => 5\n            [animal] => Птица додо\n        )\n\n    [second_section] => Array\n        (\n            [path] => /usr/local/bin\n            [URL] => http://www.example.com/~username\n        )\n\n    [third_section] => Array\n        (\n            [phpversion] => Array\n                (\n                    [0] => 5.0\n                    [1] => 5.1\n                    [2] => 5.2\n                    [3] => 5.3\n                )\n\n            [urls] => Array\n                (\n                    [svn] => http://svn.php.net\n                    [git] => http://git.php.net\n                )\n\n        )\n\n)\n```\n\n**Приклад #3 Обробка файлу php.ini функцією **parse\\_ini\\_file()****\n\n```php\n<?php\n// Простая функция для сравнения результатов\nfunction yesno($expression)\n{\n    return($expression ? 'Да' : 'Нет');\n}\n\n// Получаем путь к php.ini с помощью функции php_ini_loaded_file()\n$ini_path = php_ini_loaded_file();\n\n// Обрабатываем php.ini\n$ini = parse_ini_file($ini_path);\n\n// Выводим и сравниваем значения, учтите, что использование get_cfg_var()\n// даст одинаковые результаты для используемых здесь значений parsed (загруженное из файла) и loaded (используемое в данный момент)\necho '(parsed) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL;\necho '(loaded) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n(parsed) magic_quotes_gpc = Да\n(loaded) magic_quotes_gpc = Да\n```\n\n**Приклад #4 Інтерполяція значень**\n\nКрім оцінки констант, деякі символи мають особливе значення у значенні ini-файлів. Крім того, змінні середовища та раніше визначені параметри конфігурації (див. [get\\_cfg\\_var()](function.get-cfg-var.md)) можуть бути прочитані з використанням синтаксису `${}`\n\n```\n; | используется для побитового ИЛИ\nthree = 2|3\n\n; & используется для побитового AND\nfour = 6&5\n\n; ^ используется для побитового XOR\nfive = 3^6\n\n; ~ используется для побитового отрицания\nnegative_two = ~1\n\n; () используется для группировки\nseven = (8|7)&(6|5)\n\n; Интерполируйте переменную окружения PATH\npath = ${PATH}\n\n; Интерполируйте параметр конфигурации 'memory_limit'\nconfigured_memory_limit = ${memory_limit}\n```\n\n**Приклад #5 Екранування символів**\n\nДеякі символи мають особливе значення у рядках з подвійними лапками і мають бути екрановані префіксом зворотної косої межі. Насамперед, це подвійна лапка `\"` як маркер кордону і сама зворотна коса риса `\\` (якщо за нею слідує один із спеціальних символів):\n\n```\nquoted = \"Она сказала \\\"Именно моя точка зрения\\\".\" ; Результатом является строка с кавычками.\nhint = \"Используйте \\\\\\\", чтобы избежать двойных кавычек\" ; Результат: Используйте \\\", чтобы избежать двойных кавычек\n```\n\nДля шляхів, подібних до Windows, зроблено виняток: можна не екранувати зворотну косу межу в кінці, якщо за рядком у лапках слідує розрив рядка:\n\n```\nsave_path = \"C:\\Temp\\\"\n```\n\nЯкщо потрібно екранувати подвійні лапки, за якими слід перенесення рядка в багаторядковому значенні, можна використовувати конкатенацію значень наступним чином (за одним рядком у подвійних лапках безпосередньо слідує інша):\n\n```\nlong_text = \"Lorem \\\"ipsum\\\"\"\"\n dolor\" ; Результат: Lorem \"ipsum\"\\n dolor\n```\n\nІнший символ зі спеціальним значенням – це `$` (Знак долара). Він повинен бути екранований, якщо за ним слідує відкрита фігурна дужка:\n\n```\ncode = \"\\${test}\"\n```\n\nЕкрануючі символи не підтримуються в режимі **`INI_SCANNER_RAW`** (у цьому режимі всі символи обробляються \"як є\").\n\nЗверніть увагу, що синтаксичний аналізатор ini не підтримує стандартні послідовності екранування (`\\n` `\\t` і т.д.). За потреби виконайте постобробку результату **parse\\_ini\\_file()** за допомогою функції [stripcslashes()](function.stripcslashes.md)\n\n### Примітки\n\n> **Зауваження** :\n> \n> Ця функція не має жодного відношення до файлу php.ini. На момент виконання вашого скрипта, він вже оброблений. Ця функція може бути використана для завантаження налаштувань вашої власної програми.\n\n> **Зауваження** :\n> \n> Якщо значення ini-файлу містить інші символи, окрім літер і цифр, воно повинне полягати в подвійних лапках (\").\n\n> **Зауваження**: Існує зарезервовані слова, які не можна використовувати як ключі в ini-файлах. Такими словами є: `null` `yes` `no` `true` `false` `on` `off` `none`Значения`null` `off` `no`и`false`преобразуются в`\"\"`, а значения`on` `yes`и`true`в`\"1\"` , але тільки якщо не використовується режим **`INI_SCANNER_TYPED`**. Символи `?{}|&~!()^\"` не повинні використовуватися в ключах і мати будь-який особливий зміст у значеннях.\n\n> **Зауваження** :\n> \n> Записи без рівня знаку ігноруються. Наприклад, \"foo\" ігнорується, тоді як \"bar =\" обробляється та додається з порожнім значенням. Наприклад, у MySQL є опція \"no-auto-rehash\", що встановлюється в my.cnf, яка не має значення та ігнорується.\n\n> **Зауваження** :\n> \n> ini-файли зазвичай обробляються веб-серверами як простий текст і, таким чином, на запит передаються браузерам. Це означає, що з метою безпеки ви повинні або зберігати свої ini-файли поза кореневим каталогом документів, або переналаштувати веб-сервер, щоб вони не обслуговувалися. Невиконання будь-якої з цих вимог може спричинити загрозу безпеці.\n\n### Дивіться також\n\n-   [parse\\_ini\\_string()](function.parse-ini-string.md) \\- Розбирає рядок конфігурації\n","title":"parse\\_ini\\_file","contentType":2,"navigation":[{"function.move-uploaded-file.md":"« move\\_uploaded\\_file"},{"function.parse-ini-string.md":"parse\\_ini\\_string »"},{"index.md":"PHP Manual"},{"ref.filesystem.md":"Функції файлової системи"}]}},"__N_SSG":true}