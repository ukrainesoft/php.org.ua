{"pageProps":{"page":{"slug":"features.dtrace.systemtap.md","content":"## Використання SystemTap зі статичними зондами PHP DTrace\n\nУ деяких дистрибутивах Linux можна використовувати утиліту трасування SystemTap для відстеження статичних зондів DTrace. Даний варіант доступний у PHP 5.4.20 та PHP 5.5.\n\n### Установка PHP з SystemTap\n\nВстановіть пакет SystemTap SDT:\n\n#yum install systemtap-sdt-devel\n\nВстановіть PHP з DTrace:\n\n#./configure --enable-dtrace ...\n\n# make\n\n### Отримання списку статичних зондів за допомогою SystemTap\n\nСтатичні зонди PHP можна подивитися за допомогою stap:\n\n```\n# stap -l 'process.provider(\"php\").mark(\"*\")' -c 'sapi/cli/php -i'\n```\n\nЗразковий висновок:\n\n```\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"compile__file__entry\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"compile__file__return\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"error\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"exception__caught\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"exception__thrown\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"execute__entry\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"execute__return\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"function__entry\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"function__return\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"request__shutdown\")\nprocess(\"sapi/cli/php\").provider(\"php\").mark(\"request__startup\")\n```\n\n### Приклад використання SystemTap з PHP\n\n**Приклад #1 all\\_probes.stp - трасування всіх статичних зондів PHP**\n\nprobe process(\"sapi/cli/php\").provider(\"php\").mark(\"compile\\_\\_file\\_\\_entry\") { printf(\"Probe compile\\_\\_file\\_\\_entry\\\\n\"); printf(\" compile\\_file %s\\\\n\", user\\_string($arg1)); printf(\" compile\\_file\\_translated %s\\\\n\", user\\_string($arg2)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"compile\\_\\_file\\_\\_return\") { printf(\"Probe compile\\_\\_file\\_\\_return\\\\n\"); printf(\" compile\\_file %s\\\\n\", user\\_string($arg1)); printf(\" compile\\_file\\_translated %s\\\\n\", user\\_string($arg2)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"error\") { printf(\"Probe error\\\\n\"); printf(\" errormsg %s\\\\n\", user\\_string($arg1)); printf(\" request\\_file %s\\\\n\", user\\_string($arg2)); printf(\" lineno %d\\\\n\", $arg3); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"exception\\_\\_caught\") { printf(\"Probe exception\\_\\_caught\\\\n\"); printf(\" classname %s\\\\n\", user\\_string($arg1)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"exception\\_\\_thrown\") { printf(\"Probe exception\\_\\_thrown\\\\n\"); printf(\" classname %s\\\\n\", user\\_string($arg1)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"execute\\_\\_entry\") { printf(\"Probe execute\\_\\_entry\\\\n\"); printf(\" request\\_file %s\\\\n\", user\\_string($arg1)); printf(\" lineno %d\\\\n\", $arg2); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"execute\\_\\_return\") { printf(\"Probe execute\\_\\_return\\\\n\"); printf(\" request\\_file %s\\\\n\", user\\_string($arg1)); printf(\" lineno %d\\\\n\", $arg2); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"function\\_\\_entry\") { printf(\"Probe function\\_\\_entry\\\\n\"); printf(\" function\\_name %s\\\\n\", user\\_string($arg1)); printf(\" request\\_file %s\\\\n\", user\\_string($arg2)); printf(\" lineno %d\\\\n\", $arg3); printf(\" classname %s\\\\n\", user\\_string($arg4)); printf(\" scope %s\\\\n\", user\\_string($arg5)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"function\\_\\_return\") { printf(\"Probe function\\_\\_return: %s\\\\n\", user\\_string($arg1)); printf(\" function\\_name %s\\\\n\", user\\_string($arg1)); printf(\" request\\_file %s\\\\n\", user\\_string($arg2)); printf(\" lineno %d\\\\n\", $arg3); printf(\" classname %s\\\\n\", user\\_string($arg4)); printf(\" scope %s\\\\n\", user\\_string($arg5)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"request\\_\\_shutdown\") { printf(\"Probe request\\_\\_shutdown\\\\n\"); printf(\" file %s\\\\n\", user\\_string($arg1)); printf(\" request\\_uri %s\\\\n\", user\\_string($arg2)); printf(\" request\\_method %s\\\\n\", user\\_string($arg3)); } probe process(\"sapi/cli/php\").provider(\"php\").mark(\"request\\_\\_startup\") { printf(\"Probe request\\_\\_startup\\\\n\"); printf(\" file %s\\\\n\", user\\_string($arg1)); printf(\" request\\_uri %s\\\\n\", user\\_string($arg2)); printf(\" request\\_method %s\\\\n\", user\\_string($arg3)); }\n\nНаведений вище скрипт виводитиме дані статичних зондів PHP на всьому протязі роботи PHP-скрипту:\n\n```\n# stap -c 'sapi/cli/php test.php' all_probes.stp\n```\n","title":"Використання SystemTap зі статичними зондами PHP DTrace","contentType":2,"navigation":[{"features.dtrace.dtrace.md":"« Використання PHP та DTrace"},{"funcref.md":"Довідник функцій »"},{"index.md":"PHP Manual"},{"features.dtrace.md":"Динамічна трасування DTrace"}]}},"__N_SSG":true}