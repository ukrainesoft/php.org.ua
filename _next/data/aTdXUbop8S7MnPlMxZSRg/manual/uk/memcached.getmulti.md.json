{"pageProps":{"page":{"slug":"memcached.getmulti.md","content":"# Memcached::getMulti\n\n(PECL memcached >= 0.1.0)\n\nMemcached::getMulti — Отримує декілька записів\n\n### Опис\n\n```methodsynopsis\npublic Memcached::getMulti(array $keys, int $get_flags = 0): array|false\n```\n\n**Memcached::getMulti()** працює аналогічно методу [Memcached::get()](memcached.get.md), але замість одного запису отримує декілька, ключі яких були передані в масиві `keys`\n\n> **Зауваження** :\n> \n> До версії 3.0 використовувався другий аргумент `&cas_tokens`. Він заповнювався значеннями токена CAS для знайдених записів. Параметр `&cas_tokens` було видалено у версії 3.0. Він був замінений на новий прапор. **`Memcached::GET_EXTENDED`**, який вказується у параметрі `get_flags`\n\nПараметр`get_flags` може використовуватися для вказівки додаткових параметрів для методу **Memcached::getMulti()**. На даний момент підтримуються лише наступні налаштування: **`Memcached::GET_PRESERVE_ORDER`** гарантує, що записи будуть повернуті в тому ж порядку, що і були запрошені . **`Memcached::GET_EXTENDED`** веде до того, що також буде вилучено токени CAS.\n\n### Список параметрів\n\n`keys`\n\nМасив ключів для запиту.\n\n`get_flags`\n\nПрапори для отримання записів.\n\n### Значення, що повертаються\n\nПовертає масив знайдених записів або \\*\\*`false`\\*\\*в случае возникновения ошибки. Используйте при необходимости[Memcached::getResultCode()](memcached.getresultcode.md)\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL memcached 3.0.0 | Видалено параметр `&cas_tokens`. . Додано константу **`Memcached::GET_EXTENDED`** для повернення токенів CAS. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** Memcached::getMulti()\\*\\* версії 3\\*\\*\n\n```php\n<?php\n// Работает с версией модуля 3\n\n$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$items = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    'key3' => 'value3'\n);\n$m->setMulti($items);\n$result = $m->getMulti(array('key1', 'key3', 'badkey'));\nvar_dump($result);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(2) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key3\"]=>\n  string(6) \"value3\"\n}\n```\n\n**Приклад #2 Приклад використання** Memcached::getMulti()\\*\\* версій 1 та 2\\*\\*\n\n```php\n<?php\n// Работает с версиями модуля 1 и 2\n\n$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$items = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    'key3' => 'value3'\n);\n$m->setMulti($items);\n$result = $m->getMulti(array('key1', 'key3', 'badkey'), $cas);\nvar_dump($result, $cas);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(2) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key3\"]=>\n  string(6) \"value3\"\n}\narray(2) {\n  [\"key1\"]=>\n  float(2360)\n  [\"key3\"]=>\n  float(2362)\n}\n```\n\n**Приклад #3 Приклад використання** `Memcached::GET_PRESERVE_ORDER`\\*\\* з версією 3\\*\\*\n\n```php\n<?php\n// Работает с версией модуля 3\n\n$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$data = array(\n    'foo' => 'foo-data',\n    'bar' => 'bar-data',\n    'baz' => 'baz-data',\n    'lol' => 'lol-data',\n    'kek' => 'kek-data',\n);\n\n$m->setMulti($data, 3600);\n\n$keys = array_keys($data);\n$keys[] = 'zoo';\n$got = $m->getMulti($keys, Memcached::GET_PRESERVE_ORDER);\n\nforeach ($got as $k => $v) {\n    echo \"$k $v\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nfoo foo-data\nbar bar-data\nbaz baz-data\nlol lol-data\nkek kek-data\nzoo\n```\n\n**Приклад #4 Приклад використання** `Memcached::GET_PRESERVE_ORDER`\\*\\* з версією 1 та 2\\*\\*\n\n```php\n<?php\n// Работает с версиями модуля 1 и 2\n\n$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$data = array(\n    'foo' => 'foo-data',\n    'bar' => 'bar-data',\n    'baz' => 'baz-data',\n    'lol' => 'lol-data',\n    'kek' => 'kek-data',\n);\n\n$m->setMulti($data, 3600);\n\n$null = null;\n$keys = array_keys($data);\n$keys[] = 'zoo';\n$got = $m->getMulti($keys, $null, Memcached::GET_PRESERVE_ORDER);\n\nforeach ($got as $k => $v) {\n    echo \"$k $v\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nfoo foo-data\nbar bar-data\nbaz baz-data\nlol lol-data\nkek kek-data\nzoo\n```\n\n### Дивіться також\n\n-   [Memcached::getMultiByKey()](memcached.getmultibykey.md) \\- Отримує кілька записів із вказаного сервера\n-   [Memcached::get()](memcached.get.md) \\- Отримання запису\n-   [Memcached::getDelayed()](memcached.getdelayed.md) \\- Запитує кілька записів\n","title":"Memcached::getMulti","contentType":2,"navigation":[{"memcached.getdelayedbykey.md":"« Memcached::getDelayedByKey"},{"memcached.getmultibykey.md":"Memcached::getMultiByKey »"},{"index.md":"PHP Manual"},{"class.memcached.md":"Memcached"}]}},"__N_SSG":true}