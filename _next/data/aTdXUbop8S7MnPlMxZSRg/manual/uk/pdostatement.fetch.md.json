{"pageProps":{"page":{"slug":"pdostatement.fetch.md","content":"# PDOStatement::fetch\n\n(PHP 5 >= 5.1.0, PHP 7, PHP 8, PECL pdo >= 0.1.0)\n\nPDOStatement::fetch — Витяг наступного рядка з результуючого набору\n\n### Опис\n\n```methodsynopsis\npublic PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed\n```\n\nВитягує наступний рядок з результуючого набору об'єкта PDOStatement. Параметр `mode` визначає, як PDO поверне цей рядок.\n\n### Список параметрів\n\n`mode`\n\nВизначає, в якому вигляді наступний рядок буде повернено в метод, що викликає. Це може бути одна з констант `PDO::FETCH_*`По умолчанию`PDO::ATTR_DEFAULT_FETCH_MODE` (що рівносильно `PDO::FETCH_BOTH`\n\n-   `PDO::FETCH_ASSOC`: повертає масив, індексований іменами стовпців результуючого набору\n    \n-   `PDO::FETCH_BOTH`(за замовчуванням): повертає масив, індексований іменами шпальт результуючого набору, а також їх номерами (починаючи з 0)\n    \n-   `PDO::FETCH_BOUND`: повертає\\*\\*`true`\\*\\*і надає значення стовпців результуючого набору змінним PHP, які були прив'язані до цих стовпців методом[PDOStatement::bindColumn()](pdostatement.bindcolumn.md)\n    \n-   `PDO::FETCH_CLASS`: створює та повертає об'єкт запитаного класу, присвоюючи значення стовпців результуючого набору іменованим властивостям класу, і потім викликає конструктор, якщо не заданий`PDO::FETCH_PROPS_LATE`. Якщо `mode`включає атрибут PDO::FETCH\\_CLASSTYPE (наприклад,`PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE`), то ім'я класу, від якого потрібно створити об'єкт, буде взято з першого стовпця.\n    \n-   `PDO::FETCH_INTO`: оновлює існуючий об'єкт запитаного класу, присвоюючи значення стовпців результуючого набору іменованим властивостям об'єкта\n    \n-   `PDO::FETCH_LAZY`: комбінує`PDO::FETCH_BOTH`и`PDO::FETCH_OBJ` та повертає об'єкт [PDORow](class.pdorow.md)що створює імена властивостей об'єкта в міру доступу до них.\n    \n-   `PDO::FETCH_NAMED`: повертає масив такого ж виду, як і`PDO::FETCH_ASSOC`але якщо є кілька полів з однаковим ім'ям, то значенням з цим ключем буде масив з усіма значеннями з рядів, в яких це поле вказано.\n    \n-   `PDO::FETCH_NUM`: повертає масив, індексований номерами стовпців (починаючи з 0)\n    \n-   `PDO::FETCH_OBJ`: створює анонімний об'єкт із властивостями, що відповідають іменам стовпців результуючого набору\n    \n-   `PDO::FETCH_PROPS_LATE`: якщо використовується з`PDO::FETCH_CLASS`, конструктор класу буде викликано перед призначенням властивостей значень стовпців.\n    \n\n`cursorOrientation`\n\nДля об'єктів PDOStatement, що представляють курсор, що прокручується, цей параметр визначає, який рядок буде повертатися в викликаючий метод. Значенням параметра має бути одна з констант `PDO::FETCH_ORI_*`, по умолчанию`PDO::FETCH_ORI_NEXT`. Щоб запросити курсор, що прокручується, для запиту PDOStatement, необхідно задати атрибут `PDO::ATTR_CURSOR`со значением`PDO::CURSOR_SCROLL`во время подготовки запроса методом[PDO::prepare()](pdo.prepare.md)\n\n`cursorOffset`\n\nДля об'єктів PDOStatement, що представляють курсор, що прокручується, параметр `cursorOrientation` яких набуває значення `PDO::FETCH_ORI_ABS`, Ця величина означає абсолютний номер рядка, яку необхідно витягти з результуючого набору.\n\nДля об'єктів PDOStatement, що представляють курсор, що прокручується, параметр `cursorOrientation` яких набуває значення `PDO::FETCH_ORI_REL`, ця величина вказує, який рядок щодо поточного положення курсору буде вилучено функцією **PDOStatement::fetch()**\n\n### Значення, що повертаються\n\nУ разі успішного виконання функції значення, що повертається, залежить від режиму вибірки. У разі виникнення помилки або якщо немає рядків, функція повертає **`false`**\n\n### Помилки\n\nВидає помилку рівня **`E_WARNING`**, якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_WARNING`**\n\nВикидає виняток [PDOException](class.pdoexception.md), якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_EXCEPTION`**\n\n### Приклади\n\n**Приклад #1 Вилучення рядків у різних режимах вибірки**\n\n```php\n<?php\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n/* Приклады различных режимов работы PDOStatement::fetch */\nprint \"PDO::FETCH_ASSOC: \";\nprint \"Возвращаем следующую строку в виде массива, индексированного именами столбцов\\n\";\n$result = $sth->fetch(PDO::FETCH_ASSOC);\nprint_r($result);\nprint \"\\n\";\n\nprint \"PDO::FETCH_BOTH: \";\nprint \"Возвращаем следующую строку в виде массива, индексированного как именами столбцов, так и их номерами\\n\";\n$result = $sth->fetch(PDO::FETCH_BOTH);\nprint_r($result);\nprint \"\\n\";\n\nprint \"PDO::FETCH_LAZY: \";\nprint \"Возвращаем следующую строку в виде объекта класса PDORow с именами столбцов в качестве свойств\\n\";\n$result = $sth->fetch(PDO::FETCH_LAZY);\nprint_r($result);\nprint \"\\n\";\n\nprint \"PDO::FETCH_OBJ: \";\nprint \"Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам\\n\";\n$result = $sth->fetch(PDO::FETCH_OBJ);\nprint $result->name;\nprint \"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nPDO::FETCH_ASSOC: Возвращаем следующую строку в виде массива, индексированного именами столбцов\nArray\n(\n    [name] => apple\n    [colour] => red\n)\n\nPDO::FETCH_BOTH: Возвращаем следующую строку в виде массива, индексированного как именами столбцов, так и их номерами\nArray\n(\n    [name] => banana\n    [0] => banana\n    [colour] => yellow\n    [1] => yellow\n)\n\nPDO::FETCH_LAZY: Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам\nPDO::FETCH_LAZY: Возвращаем следующую строку в виде объекта класса PDORow с именами столбцов в качестве свойств\nPDORow Object\n(\n    [name] => orange\n    [colour] => orange\n)\n\nPDO::FETCH_OBJ: Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам\nkiwi\n```\n\n**Приклад #2 Вибірка рядків засобами курсору, що прокручується.**\n\n```php\n<?php\nfunction readDataForwards($dbh) {\n    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';\n    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));\n    $stmt->execute();\n    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {\n        $data = $row[0] . \"\\t\" . $row[1] . \"\\t\" . $row[2] . \"\\n\";\n        print $data;\n    }\n}\nfunction readDataBackwards($dbh) {\n    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';\n    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));\n    $stmt->execute();\n    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);\n    do {\n        $data = $row[0] . \"\\t\" . $row[1] . \"\\t\" . $row[2] . \"\\n\";\n        print $data;\n    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));\n}\n\nprint \"Читаем в прямой последовательности:\\n\";\nreadDataForwards($conn);\n\nprint \"Читаем в обратной последовательности:\\n\";\nreadDataBackwards($conn);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nЧитаем в прямой последовательности:\n21    10    5\n16    0     5\n19    20    10\n\nЧитаем в обратной последовательности:\n19    20    10\n16    0     5\n21    10    5\n```\n\n**Приклад #3 Порядок конструкторів**\n\nЯкщо об'єкти забираються за допомогою `PDO::FETCH_CLASS`, спочатку надаються властивості об'єкта, а потім викликається конструктор об'єкта. Якщо також задано `PDO::FETCH_PROPS_LATE`, цей порядок змінюється на зворотний.\n\n```php\n<?php\nclass Person\n{\n    private $name;\n\n    public function __construct()\n    {\n        $this->tell();\n    }\n\n    public function tell()\n    {\n        if (isset($this->name)) {\n            echo \"Я {$this->name}.\\n\";\n        } else {\n            echo \"У меня ещё нет имени.\\n\";\n        }\n    }\n}\n\n$sth = $dbh->query(\"SELECT * FROM people\");\n$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');\n$person = $sth->fetch();\n$person->tell();\n$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');\n$person = $sth->fetch();\n$person->tell();\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nЯ - Alice.\nЯ Alice.\nУ меня ещё нет имени.\nЯ Bob.\n```\n\n### Дивіться також\n\n-   [PDO::prepare()](pdo.prepare.md) \\- готує запит до виконання та повертає пов'язаний із цим запитом об'єкт\n-   [PDOStatement::execute()](pdostatement.execute.md) \\- Запускає підготовлений запит на виконання\n-   [PDOStatement::fetchAll()](pdostatement.fetchall.md) \\- Вибирає рядки, що залишилися, з набору результатів\n-   [PDOStatement::fetchColumn()](pdostatement.fetchcolumn.md) \\- Повертає дані одного стовпця наступного рядка результуючого набору\n-   [PDOStatement::fetchObject()](pdostatement.fetchobject.md) \\- Витягує наступний рядок і повертає його у вигляді об'єкта\n-   [PDOStatement::setFetchMode()](pdostatement.setfetchmode.md) \\- Встановлює режим вибірки за промовчанням для об'єкта запиту\n","title":"PDOStatement::fetch","contentType":2,"navigation":[{"pdostatement.execute.md":"« PDOStatement::execute"},{"pdostatement.fetchall.md":"PDOStatement::fetchAll »"},{"index.md":"PHP Manual"},{"class.pdostatement.md":"PDOStatement"}]}},"__N_SSG":true}