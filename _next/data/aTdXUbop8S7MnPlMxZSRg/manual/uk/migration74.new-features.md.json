{"pageProps":{"page":{"slug":"migration74.new-features.md","content":"## Нові можливості\n\n### Ядро PHP\n\n#### Типізовані властивості\n\nВластивості класу підтримують оголошення типів.\n\n```php\n<?php\nclass User {\n    public int $id;\n    public string $name;\n}\n?>\n```\n\nУ наведеному прикладі вище показано, що `$user->id` можна присвоїти лише значення типу int, коли як `$user->name` - Виключно значення типу string.\n\n#### Стрілочні функції\n\n[Стрілочні функції](functions.arrow.md) - це скорочений запис визначення функцій з неявною прив'язкою батьківської області видимості за значенням.\n\n```php\n<?php\n$factor = 10;\n$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);\n// $nums = array(10, 20, 30, 40);\n?>\n```\n\n#### Обмежена коваріація типу, що повертається, і контраваріантність типу аргументу\n\nНаступний код тепер працюватиме:\n\n```php\n<?php\nclass A {}\nclass B extends A {}\n\nclass Producer {\n    public function method(): A {}\n}\nclass ChildProducer extends Producer {\n    public function method(): B {}\n}\n?>\n```\n\nПовна підтримка варіантності доступна лише під час використання автозавантаження. Всередині одного файлу можуть бути лише нециклічні посилання, оскільки всі класи повинні бути визначені перед тим, як на них посилатися.\n\n#### Присвоює оператор об'єднання з null\n\n```php\n<?php\n$array['key'] ??= computeDefault();\n// Прикладно то же самое\nif (!isset($array['key'])) {\n    $array['key'] = computeDefault();\n}\n?>\n```\n\n#### Розпакування всередині масивів\n\n```php\n<?php\n$parts = ['apple', 'pear'];\n$fruits = ['banana', 'orange', ...$parts, 'watermelon'];\n// ['banana', 'orange', 'apple', 'pear', 'watermelon'];\n?>\n```\n\n#### Розділювач у числових літералах\n\nТепер у числових літералах між знаками можуть бути символи підкреслення.\n\n```php\n<?php\n6.674_083e-11; // число с плавающей точкой\n299_792_458;   // десятичное число\n0xCAFE_F00D;   // шестнадцатеричное число\n0b0101_1111;   // двоичное число\n?>\n```\n\n#### Слабкі посилання\n\n[Слабкі посилання](class.weakreference.md) дозволяють програмісту зберегти посилання на об'єкт, яка не завадить збирачеві сміття видалити цей об'єкт.\n\n#### Обработка исключений из метода\\_\\_toString()\n\nВикидання винятків із методу [\\_\\_toString()](language.oop5.magic.md#object.tostring) тепер дозволено. Раніше це призводило до фатальної помилки. Існуючі фатальні помилки, що відловлюються, при перетворенні об'єкта в рядок будуть доступні у вигляді винятків класу [Error](class.error.md)\n\n### CURL\n\nКрім звичайних імен файлів, клас [CURLFile](class.curlfile.md) тепер підтримує потокові обгортки, якщо модуль зібрано з версією libcurl >= 7.56.0.\n\n### Фільтрування\n\nФильтр\\*\\*`FILTER_VALIDATE_FLOAT`\\*\\* тепер підтримує параметри `min_range`и`max_range`, з тим же змістом, що і для **`FILTER_VALIDATE_INT`**\n\n### FFI\n\nFFI - новий модуль, який пропонує простий спосіб виклику вбудованих функцій, доступу до вбудованих змінних, а також створювати або звертатися до структур даних у бібліотеках мовою Сі.\n\n### GD\n\nДобавлена константа\\*\\*`IMG_FILTER_SCATTER`\\*\\*для применения рассеивающегося фильтра к изображениям.\n\n### Хешування\n\nДобавлен хеш`crc32c`використовує поліном Кастанолі. Ця реалізація алгоритму CRC32 використовується системами зберігання, такими як iSCSI, SCTP, Btrfs та ext4.\n\n### Багатобайтові рядки\n\nДобавлена функция[mb\\_str\\_split()](function.mb-str-split.md)яка виконує те ж саме, що і [str\\_split()](function.str-split.md)але працює з кодовими точками, а не з байтами.\n\n### OPcache\n\nДобавлена поддержка[попереднього завантаження коду](opcache.preloading.md)\n\n### Регулярні вирази (сумісні з Perl)\n\nФункції [preg\\_replace\\_callback()](function.preg-replace-callback.md) і [preg\\_replace\\_callback\\_array()](function.preg-replace-callback-array.md) тепер приймають додатковий аргумент `flags` з підтримкою прапорів **`PREG_OFFSET_CAPTURE`** і **`PREG_UNMATCHED_AS_NULL`**. Він вплине на формат масиву значень, що збіглися, що передається в callback-функцію.\n\n### PDO\n\nІм'я користувача та пароль тепер можна вказати як частину DSN для драйверів mysql, mssql, sybase, dblib, firebird та oci. Раніше підтримка цього була лише драйвера pgsql. Якщо ім'я користувача/пароль вказано і в конструкторі і DSN, то конструктор матиме пріоритет.\n\nТакож тепер можна екранувати знаки запитань у SQL-запитах, щоб вони не сприймалися як іменовані параметри. Використання `??` відправить один знак питання до бази даних, і, наприклад, у разі використання PostgreSQL, буде використано оператора перевірки існування ключа в JSON (`?`\n\n### PDO\\_OCI\n\nДля данного драйвера теперь доступен метод[PDOStatement::getColumnMeta()](pdostatement.getcolumnmeta.md)\n\n### PDO\\_SQLite\n\nВираз `PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)` дозволяє перевірити, чи доступний підготовлений запит лише читання, тобто. чи не змінює він базу даних.\n\n`PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)` дозволяє використовувати розширені коди результату SQLite3 [PDOStatement::errorInfo()](pdostatement.errorinfo.md)\n\n### SQLite3\n\nДобавлен метод\\*\\*SQLite3::lastExtendedErrorCode()\\*\\*для получения последнего расширенного кода результата.\n\nДобавлен метод`SQLite3::enableExtendedResultCodes($enable = true)`, який змусить метод [SQLite3::lastErrorCode()](sqlite3.lasterrorcode.md) повертати розширені коди результатів.\n\n### Стандартне\n\n#### strip\\_tags() з масивом імен тегів\n\nФункция[strip\\_tags()](function.strip-tags.md) тепер також приймає масив дозволених тегів: замість `strip_tags($str, '<a><p>')` тепер можна написати `strip_tags($str, ['a', 'p'])`\n\n#### Серіалізація об'єктів\n\nДодано новий механізм серіалізації об'єктів, що використовує два нових магічних методи: `__serialize`и`__unserialize`\n\n```php\n<?php\n// Возвращает массив, содержащий все необходимое состояние объекта.\npublic function __serialize(): array;\n\n// Восстанавливает состояние объекта из указанного массива данных.\npublic function __unserialize(array $data): void;\n?>\n```\n\nНовий механізм серіалізації замінює інтерфейс [Serializable](class.serializable.md), який у майбутньому буде оголошено застарілим.\n\n#### Функції злиття масивів без аргументів\n\nФункції [array\\_merge()](function.array-merge.md) і [array\\_merge\\_recursive()](function.array-merge-recursive.md) тепер можуть викликатись без будь-яких аргументів, і тоді вони повернуть порожній масив. Це корисно у поєднанні з оператором розширення, наприклад, `array_merge(...$arrays)`\n\n#### Функция[proc\\_open()](function.proc-open.md)\n\n[proc\\_open()](function.proc-open.md) тепер приймає масив замість рядка для виконання команди. У цьому випадку процес буде відкритий безпосередньо (без командної оболонки), а PHP екранує будь-який аргумент.\n\n```php\n<?php\nproc_open(['php', '-r', 'echo \"Привет, мир\\n\";'], $descriptors, $pipes);\n?>\n```\n\nФункция[proc\\_open()](function.proc-open.md) тепер підтримує дескриптори `redirect`и`null`\n\n```php\n<?php\n// То же самое, что и 2>&1 в командной оболочке\nproc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);\n// То же самое, что и 2>/dev/null или 2>nul в командной оболочке\nproc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);\n?>\n```\n\n#### argon2i(d) без libargon\n\nФункция[password\\_hash()](function.password-hash.md) тепер підтримує варіанти хешування argon2i та argon2id з модуля sodium, коли PHP зібраний без libargon.\n","title":"Нові можливості","contentType":2,"navigation":[{"migration74.md":"« Міграція з PHP 7.3.x на PHP 7.4.x"},{"migration74.new-classes.md":"Нові класи та інтерфейси »"},{"index.md":"PHP Manual"},{"migration74.md":"Міграція з PHP 7.3.x на PHP 7.4.x"}]}},"__N_SSG":true}