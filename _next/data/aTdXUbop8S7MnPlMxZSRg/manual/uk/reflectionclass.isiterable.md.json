{"pageProps":{"page":{"slug":"reflectionclass.isiterable.md","content":"# ReflectionClass::isIterable\n\n(PHP 7 >= 7.2.0, PHP 8)\n\nReflectionClass::isIterable — Перевірити, чи клас ітерується.\n\n### Опис\n\n```methodsynopsis\npublic ReflectionClass::isIterable(): bool\n```\n\nПеревіряє, чи реалізує клас інтерфейс Iterator (тобто можна використовувати його в [foreach](control-structures.foreach.md)\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Использование**ReflectionClass::isIterable()\\*\\*\\*\\*\n\n```php\n<?php\n\nclass IteratorClass implements Iterator {\n    public function __construct() { }\n    public function key() { }\n    public function current() { }\n    function next() { }\n    function valid() { }\n    function rewind() { }\n}\nclass DerivedClass extends IteratorClass { }\nclass NonIterator { }\n\nfunction dump_iterable($class) {\n    $reflection = new ReflectionClass($class);\n    var_dump($reflection->isIterable());\n}\n\n$classes = array(\"ArrayObject\", \"IteratorClass\", \"DerivedClass\", \"NonIterator\");\n\nforeach ($classes as $class) {\n    echo \"Класс $class итерируемый? \";\n    dump_iterable($class);\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nКласс ArrayObject итерируемый? bool(true)\nКласс IteratorClass итерируемый? bool(true)\nКласс DerivedClass итерируемый? bool(true)\nКласс NonIterator итерируемый? bool(false)\n```\n\n### Дивіться також\n\n-   [ReflectionClass::\\_\\_construct()](reflectionclass.construct.md) \\- Створює об'єкт класу ReflectionClass\n","title":"ReflectionClass::isIterable","contentType":2,"navigation":[{"reflectionclass.isinternal.md":"« ReflectionClass::isInternal"},{"reflectionclass.isiterateable.md":"ReflectionClass::isIterateable »"},{"index.md":"PHP Manual"},{"class.reflectionclass.md":"ReflectionClass"}]}},"__N_SSG":true}