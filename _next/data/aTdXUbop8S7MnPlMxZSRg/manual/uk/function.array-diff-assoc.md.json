{"pageProps":{"page":{"slug":"function.array-diff-assoc.md","content":"# array\\_diff\\_assoc\n\n(PHP 4 >= 4.3.0, PHP 5, PHP 7, PHP 8)\n\narray\\_diff\\_assoc — Обчислює розбіжність масивів із додатковою перевіркою індексу\n\n### Опис\n\n```methodsynopsis\narray_diff_assoc(array $array, array ...$arrays): array\n```\n\nПорівнює значення масиву `array` зі значеннями масивів `arrays` та повертає різницю. У цій функції, на відміну від функції [array\\_diff()](function.array-diff.md), ключі масиву також беруть участь у порівнянні.\n\n### Список параметрів\n\n`array`\n\nВихідний масив\n\n`arrays`\n\nМасиви для порівняння\n\n### Значення, що повертаються\n\nПовертає масив (array), що містить значення масиву `array`, яких немає в інших порівнюваних масивах.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер функцію можна викликати лише з одним параметром. Раніше потрібно не менше двох параметрів. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** array\\_diff\\_assoc()\\*\\*\\*\\*\n\nУ цьому прикладі пара `\"a\" => \"green\"` міститься в обох масивах, і тому її немає у виведенні функції. Але пара `0 => \"red\"` міститься у виведенні функції, тому що значенням `\"red\"` у першому масиві автоматично надається ключ , а в другому масиві тому ж значенню буде надано ключ оскільки ключ уже занят значением`yellow`\n\n```php\n<?php\n$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"green\", \"yellow\", \"red\");\n$result = array_diff_assoc($array1, $array2);\nprint_r($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [b] => brown\n    [c] => blue\n    [0] => red\n)\n```\n\n**Приклад #2 Приклад використання** array\\_diff\\_assoc()\\*\\*\\*\\*\n\nДва значения пар*key => value* будуть розцінені як рівні лише тоді, коли `(string) $elem1 === (string) $elem2`. Тобто коли строкові уявлення значень за суворого порівняння будуть тотожними.\n\n```php\n<?php\n$array1 = array(0, 1, 2);\n$array2 = array(\"00\", \"01\", \"2\");\n$result = array_diff_assoc($array1, $array2);\nprint_r($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n```\n\n### Примітки\n\n> **Зауваження**: Ця функція перевіряє лише один рівень n-мірного масиву. Порівняти вкладені масиви можна, вказавши глибший рівень, наприклад: `array_diff_assoc($array1[0], $array2[0]);`\n\n> **Зауваження**: Необхідно перевіряти правильний порядок переданих аргументів при порівнянні подібних масивів, у яких багато ключів У результуючий масив потрапляють значення масиву, що йде першим у списку аргументів.\n\n### Дивіться також\n\n-   [array\\_diff()](function.array-diff.md) \\- обчислює розбіжність масивів\n-   [array\\_diff\\_uassoc()](function.array-diff-uassoc.md) \\- Обчислює розбіжність масивів з додатковою перевіркою індексу через пользовательскую callback-функцію\n-   [array\\_udiff\\_assoc()](function.array-udiff-assoc.md) \\- обчислює розбіжність у масивах з додатковою перевіркою індексів, використовуючи порівняння значень callback-функцию\n-   [array\\_udiff\\_uassoc()](function.array-udiff-uassoc.md) \\- обчислює розбіжність у масивах з додатковою перевіркою індексів, використовуючи для порівняння значень та індексів callback-функцію\n-   [array\\_intersect()](function.array-intersect.md) \\- обчислює перетин масивів\n-   [array\\_intersect\\_assoc()](function.array-intersect-assoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу\n","title":"array\\_diff\\_assoc","contentType":2,"navigation":[{"function.array-count-values.md":"« array\\_count\\_values"},{"function.array-diff-key.md":"array\\_diff\\_key »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}