{"pageProps":{"page":{"slug":"function.pack.md","content":"# pack\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\npack — Упакувати дані в бінарний рядок\n\n### Опис\n\n```methodsynopsis\npack(string $format, mixed ...$values): string\n```\n\nУпаковує задані аргументи у бінарний рядок відповідно до формату у параметрі `format`\n\nІдея цієї функції була запозичена з Perl і всі коди форматування працюють так само. Однак є деякі відсутні коди форматування, такі як код формату Perl \"u\".\n\nНеобхідно мати на увазі, що відмінність між знаковими та беззнаковими значеннями впливає лише на функцію [unpack()](function.unpack.md), тогда как функция**pack()** дає однаковий результат для знакових та беззнакових кодів формату.\n\n### Список параметрів\n\n`format`\n\nПараметр`format` задається у вигляді рядка і складається з кодів формату та опціонального аргументу повторення. Аргумент може бути цілочисленним, або `*` для повторення остаточно введених даних. Для a, A, h, H число повторень визначає те, скільки символів взято від одного аргументу даних, для @ - це абсолютна позиція для розміщення наступних даних, для решти повторень визначає як багато аргументів даних було оброблено і упаковано в результуючий бінарний рядок .\n\nФормати, що працюють на даний момент:\n\n**Символи форматів функції **pack()****\n\n| Код | Опис |\n| --- | --- |\n| a | Рядок (string) з NUL-заповненням |\n| A | Рядок (string) зі SPACE-заповненням |\n| h | Hex-рядок (Hex string), з нижнього розряду |\n| H | Hex-рядок (Hex string), з верхнього розряду |\n| c | знаковий символ (char) |\n| C | беззнаковий символ (char) |\n| s | знаковий short (завжди 16 біт, машинний байтовий порядок) |\n| S | беззнаковий short (завжди 16 біт, машинний байтовий порядок) |\n| n | беззнаковий short (завжди 16 біт, порядок big endian) |\n| v | беззнаковий short (завжди 16 біт, порядок little endian) |\n| i | знаковий integer (машинно-залежний розмір та порядок) |\n| I | беззнаковий integer (машинно-залежний розмір та порядок) |\n| l | знаковий long (завжди 32 біт, машинний порядок) |\n| L | беззнаковий long (завжди 32 біт, машинний порядок) |\n| N | беззнаковий long (завжди 32 біт, порядок big endian) |\n| V | беззнаковий long (завжди 32 біт, порядок little endian) |\n| q | signed long long (завжди 64 bit, машинний порядок) |\n| Q | беззнаковий long long (завжди 64 bit, машинний порядок) |\n| J | беззнаковий long long (завжди 64 bit, порядок big endian) |\n| P | беззнаковий long long (завжди 64 bit, порядок little endian) |\n| f | float (машинно-залежні розмір та уявлення) |\n| g | float (машинно-залежний розмір, порядок байт little endian) |\n| G | float (машинно-залежний розмір, порядок байт big endian) |\n| d | double (машинно-залежні розмір та уявлення) |\n| e | double (машинно-залежний розмір, порядок байт little endian) |\n| E | double (машинно-залежний розмір, порядок байт big endian) |\n| x | байт NUL |\n| X | Резервування одного байта |\n| Z | Рядок (string) з NUL-заповненням |\n| @ | NUL-заповнення до абсолютної позиції |\n\n`values`\n\n### Значення, що повертаються\n\nПовертає бінарний рядок, який містить дані.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Функція більше не повертає \\*\\*`false`\\*\\*в случае возникновения ошибки. |\n| 7.2.0 | Типи float і double підтримують як зворотний, і прямий порядок передачі байтів. |\n| 7.0.15,7.1.1 | Додані коди \"e\", \"E\", \"g\" та \"G\" для підтримки примусової вказівки порядку байт для float та double. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** pack()\\*\\*\\*\\*\n\n```php\n<?php\n$binarydata = pack(\"nvc*\", 0x1234, 0x5678, 65, 66);\n?>\n```\n\nОтриманий бінарний рядок довжиною 6 байт міститиме послідовність байтів 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.\n\n### Примітки\n\n**Застереження**\n\nPHP зберігає значення типу int як знакові з машинно-залежним розміром (C тип `long`). Всі числа, передані як int, але виходять за межі цього будуть збережені з типом float. У упаковці цих float як int, вони будуть передані з типом int. Це може збігатися, так і немає із заданим шаблоном.\n\nНайчастішим є випадок, коли упаковуються беззнакові числа типу int. У системах, де int має розмір 32 біта, число зазвичай передається за тим самим шаблоном, якби int був беззнаковим (хоча, це залежить від певних перетворень із знакове на беззнакове, згідно зі стандартом С). У системах, де тип int має розмір 64 біта, тип float не має мантиси, достатньої за розміром для зберігання значення без втрати точності. Якщо ці системи також мають простий 64-бітний тип `int` (Більшість UNIX систем не мають), то єдиним шляхом для використання формату `I` у верхньому розряді є створення негативних int значень з тим самим уявленням як і певному беззнаковом значенні.\n\n### Дивіться також\n\n-   [unpack()](function.unpack.md) \\- Розпакувати дані з бінарного рядка\n","title":"pack","contentType":2,"navigation":[{"function.ignore-user-abort.md":"« ignore\\_user\\_abort"},{"function.php-strip-whitespace.md":"php\\_strip\\_whitespace »"},{"index.md":"PHP Manual"},{"ref.misc.md":"Різні функції"}]}},"__N_SSG":true}