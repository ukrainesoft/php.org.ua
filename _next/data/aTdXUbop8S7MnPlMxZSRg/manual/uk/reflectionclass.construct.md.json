{"pageProps":{"page":{"slug":"reflectionclass.construct.md","content":"# ReflectionClass::\\_\\_construct\n\n(PHP 5, PHP 7, PHP 8)\n\nReflectionClass::\\_\\_construct — Створює об'єкт класу ReflectionClass\n\n### Опис\n\npublic **ReflectionClass::\\_\\_construct**(object|string`$objectOrClass`) .\n\nСтворює новий об'єкт класу [ReflectionClass](class.reflectionclass.md)\n\n### Список параметрів\n\n`objectOrClass`\n\nЯк аргумент може приймати рядок (string), що містить ім'я класу, що досліджується, або об'єкт (object).\n\n### Помилки\n\nВикликає виняток [ReflectionException](class.reflectionexception.md)якщо заданий клас не існує.\n\n### Приклади\n\n**Приклад #1 Простий приклад використання ReflectionClass**\n\n```php\n<?php\n$reflection = new ReflectionClass('Exception');\necho $reflection;\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nClass [ <internal:Core> class Exception implements Stringable, Throwable ] {\n\n  - Constants [0] {\n  }\n\n  - Static properties [0] {\n  }\n\n  - Static methods [0] {\n  }\n\n  - Properties [7] {\n    Property [ protected $message = '' ]\n    Property [ private string $string = '' ]\n    Property [ protected $code = 0 ]\n    Property [ protected string $file = '' ]\n    Property [ protected int $line = 0 ]\n    Property [ private array $trace = [] ]\n    Property [ private ?Throwable $previous = NULL ]\n  }\n\n  - Methods [11] {\n    Method [ <internal:Core> private method __clone ] {\n\n      - Parameters [0] {\n      }\n      - Return [ void ]\n    }\n\n    Method [ <internal:Core, ctor> public method __construct ] {\n\n      - Parameters [3] {\n        Parameter #0 [ <optional> string $message = \"\" ]\n        Parameter #1 [ <optional> int $code = 0 ]\n        Parameter #2 [ <optional> ?Throwable $previous = null ]\n      }\n    }\n\n    Method [ <internal:Core> public method __wakeup ] {\n\n      - Parameters [0] {\n      }\n      - Tentative return [ void ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getMessage ] {\n\n      - Parameters [0] {\n      }\n      - Return [ string ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getCode ] {\n\n      - Parameters [0] {\n      }\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getFile ] {\n\n      - Parameters [0] {\n      }\n      - Return [ string ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getLine ] {\n\n      - Parameters [0] {\n      }\n      - Return [ int ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getTrace ] {\n\n      - Parameters [0] {\n      }\n      - Return [ array ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getPrevious ] {\n\n      - Parameters [0] {\n      }\n      - Return [ ?Throwable ]\n    }\n\n    Method [ <internal:Core, prototype Throwable> final public method getTraceAsString ] {\n\n      - Parameters [0] {\n      }\n      - Return [ string ]\n    }\n\n    Method [ <internal:Core, prototype Stringable> public method __toString ] {\n\n      - Parameters [0] {\n      }\n      - Return [ string ]\n    }\n  }\n}\n```\n\n### Дивіться також\n\n-   [ReflectionObject::\\_\\_construct()](reflectionobject.construct.md) \\- Конструктор класу ReflectionObject\n-   [Конструктори](language.oop5.decon.md#language.oop5.decon.constructor)\n","title":"ReflectionClass::\\_\\_construct","contentType":2,"navigation":[{"class.reflectionclass.md":"« ReflectionClass"},{"reflectionclass.export.md":"ReflectionClass::export »"},{"index.md":"PHP Manual"},{"class.reflectionclass.md":"ReflectionClass"}]}},"__N_SSG":true}