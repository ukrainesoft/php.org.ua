{"pageProps":{"page":{"slug":"class.variant.md","content":"# Клас variant\n\n(PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nVARIANT це еквівалент zval для COM; це структура, яка може містити значення різних допустимих типів. Клас variant входить у модуль COM і дозволяє більше контролювати значення, що передаються від PHP до COM і назад.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class variant\n     {\n\n    /* Методы */\n    \n   public __construct(mixed $value = null, int $type = VT_EMPTY, int $codepage = CP_ACP)\n\n   }\n```\n\n## Приклади variant\n\n**Приклад #1 Приклад використання variant**\n\n```php\n<?php\n$v = new variant(42);\nprint \"Тип — \" . variant_get_type($v) . \"<br/>\";\nprint \"Значение — \" . $v . \"<br/>\";\n?>\n```\n\n> **Зауваження** :\n> \n> Коли повертається значення або витягається властивість, variant перетворюється на значення PHP тільки якщо є прямий зв'язок між типами, що не призведе до втрати інформації. В інших випадках результат повернеться у вигляді екземпляра класу variant. Ви можете примусово вказати PHP конвертувати значення в типи PHP використовуючи оператор приведення типів або перетворювати їх у рядок, використовуючи функцію [print](function.print.md). Ви можете використовувати безліч функцій класу для арифметичних операцій без приведення значень типів PHP з ризиком втрати інформації.\n\nСмотрите также[variant\\_get\\_type()](function.variant-get-type.md)\n\n## Зміст\n\n-   [variant::\\_\\_construct](variant.construct.md) \\- Конструктор класу variant\n","title":"Клас variant","contentType":2,"navigation":[{"dotnet.construct.md":"« dotnet::\\_\\_construct"},{"variant.construct.md":"variant::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.com.md":"COM"}]}},"__N_SSG":true}