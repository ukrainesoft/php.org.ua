{"pageProps":{"page":{"slug":"memcache.setserverparams.md","content":"# Memcache::setServerParams\n\n(PECL memcache >= 2.1.0)\n\nMemcache::setServerParams — Змінює параметри сервера та статус під час виконання\n\n### Опис\n\n```methodsynopsis\nMemcache::setServerParams(    string $host,    int $port = 11211,    int $timeout = ?,    int $retry_interval = false,    bool $status = ?,    callable $failure_callback = ?): bool\n```\n\n**Memcache::setServerParams()** змінює параметри сервера під час виконання. Ви також можете використати функцію **memcache\\_set\\_server\\_params()**\n\n> **Зауваження** :\n> \n> Ця функція була додана до Memcache версії 2.1.0.\n\n### Список параметрів\n\n`host`\n\nВказує на хост, на якому memcached прослуховує з'єднання.\n\n`port`\n\nВказує на порт, на якому memcached прослуховує з'єднання.\n\n`timeout`\n\nЗначення в секундах, яке використовуватиметься для підключення до домену. Подумайте двічі, перш ніж змінювати значення за замовчуванням в 1 секунду - ви можете втратити всі переваги кешування, якщо з'єднання занадто повільне.\n\n`retry_interval`\n\nКерує частотою перевірки доступності сервера, що відмовив, за замовчуванням 15 секунд. Якщо встановити значення \"-1\", то спроб перевірити доступність сервера робитися не буде. Ні цей параметр, ні параметр `persistent` не впливають, якщо модуль завантажений динамічно через функцію [dl()](function.dl.md)\n\n`status`\n\nВизначає, чи сервер позначений прапором як \"онлайн\". Встановлення цього параметра \\*\\*`false`**и`retry_interval` -1 дозволить зберегти сервер в пулі, але не використовувати його в алгоритмі розподілу ключів. Запит до цього сервера або запустить механізм забезпечення стійкості до відмов, або відразу ж перерветься з помилкою, залежно від налаштування `memcache.allow_failover`По умолчанию равно**`true`\\*\\*що означає, що сервер активний і готовий приймати запити.\n\n`failure_callback`\n\nДозволяє користувачеві задати callback-функцію, яка запуститься у разі будь-якої помилки. Ця функція буде викликана раніше, ніж буде запущено механізм забезпечення стійкості до відмови. Функція приймає два параметри - ім'я хоста і порт сервера, що відмовив.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад використання** Memcache::setServerParams()\\*\\*\\*\\*\n\n```php\n<?php\n\nfunction _callback_memcache_failure($host, $port) {\n    print \"неудачное подключение memcache - '$host:$port'\";\n}\n\n/* объектно-ориентированное API */\n\n$memcache = new Memcache;\n\n// Добавить сервер в офлайн-режим\n$memcache->addServer('memcache_host', 11211, false, 1, 1, -1, false);\n\n// Перевести сервер обратно в онлайн\n$memcache->setServerParams('memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');\n\n/* процедурное API */\n\n$memcache_obj = memcache_connect('memcache_host', 11211);\nmemcache_set_server_params($memcache_obj, 'memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');\n\n?>\n```\n\n### Дивіться також\n\n-   [Memcache::addServer()](memcache.addserver.md) \\- Додає сервер memcached в пул з'єднань\n-   [Memcache::getServerStatus()](memcache.getserverstatus.md) \\- Повертає статус сервера\n","title":"Memcache::setServerParams","contentType":2,"navigation":[{"memcache.setcompressthreshold.md":"« Memcache::setCompressThreshold"},{"ref.memcache.md":"Функції Memcache »"},{"index.md":"PHP Manual"},{"class.memcache.md":"Memcache"}]}},"__N_SSG":true}