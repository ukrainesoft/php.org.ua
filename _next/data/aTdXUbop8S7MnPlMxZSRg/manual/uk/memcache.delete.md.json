{"pageProps":{"page":{"slug":"memcache.delete.md","content":"# Memcache::delete\n\n(PECL memcache >= 0.2.0)\n\nMemcache::delete — Видалити елемент із сервера\n\n### Опис\n\n```methodsynopsis\nMemcache::delete(string $key, int $timeout = 0): bool\n```\n\n**Memcache::delete()** видаляє елемент із зазначеним ключем `key`\n\n### Список параметрів\n\n`key`\n\nКлюч елемента, що видаляється.\n\n`timeout`\n\nЦе застарілий параметр і зараз не використовується. Значення за замовчуванням секунд. Не використовуйте цей параметр.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| Невідомо | Не рекомендується використовувати параметр `timeout`. . Поведінка буде різнитися в різних версіях memcache, однак його встановлення в безпечна. Інші значення цього параметра можуть призвести до помилок під час видалення елемента. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** Memcache::delete()\\*\\*\\*\\*\n\n```php\n<?php\n\n/* процедурное API */\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\n/* элемент будет удалён сервером */\nmemcache_delete($memcache_obj, 'key_to_delete');\n\n/* объектно-ориентированное API */\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\n$memcache_obj->delete('key_to_delete');\n\n?>\n```\n\n### Дивіться також\n\n-   [Memcache::set()](memcache.set.md) \\- Зберегти дані на сервері\n-   [Memcache::replace()](memcache.replace.md) \\- Замінити значення наявного елемента\n","title":"Memcache::delete","contentType":2,"navigation":[{"memcache.decrement.md":"« Memcache::decrement"},{"memcache.flush.md":"Memcache::flush »"},{"index.md":"PHP Manual"},{"class.memcache.md":"Memcache"}]}},"__N_SSG":true}