{"pageProps":{"page":{"slug":"language.exceptions.extending.md","content":"## Спадкування винятків\n\nВизначений користувачем клас виключення повинен бути визначений як клас розширювальний (успадкований) вбудований клас Exception. Нижче наведено методи та властивості класу Exception, доступні дочірнім класам.\n\n**Приклад #1 Вбудований клас Exception**\n\n```php\n<?php\nclass Exception implements Throwable\n{\n    protected $message = 'Unknown exception';   // сообщение об исключении\n    private   $string;                          // свойство для __toString\n    protected $code = 0;                        // пользовательский код исключения\n    protected $file;                            // файл, в котором было выброшено исключение\n    protected $line;                            // строка, в которой было выброшено исключение\n    private   $trace;                           // трассировка вызовов методов и функций\n    private   $previous;                        // предыдущее исключение, если исключение вложенное\n\n    public function __construct($message = '', $code = 0, Throwable $previous = null);\n\n    final private function __clone();           // запрещает клонирования исключения\n\n    final public  function getMessage();        // сообщение исключения\n    final public  function getCode();           // код исключения\n    final public  function getFile();           // файл, где выброшено исключение\n    final public  function getLine();           // строка, на которой выброшено исключение\n    final public  function getTrace();          // массив backtrace()\n    final public  function getPrevious();       // предыдущее исключение\n    final public  function getTraceAsString();  // отформатированная строка трассировки\n\n    // Переопределяемый\n    public function __toString();               // отформатированная строка для отображения\n}\n?>\n```\n\nЯкщо клас, успадкований від Exception перевизначає [конструктор](language.oop5.decon.md)необхідно викликати в конструкторі [parent::\\_\\_construct()](language.oop5.paamayim-nekudotayim.md)щоб бути впевненим, що всі доступні дані були правильно присвоєні. Метод [\\_\\_toString()](language.oop5.magic.md) може бути перевизначений, щоб забезпечити потрібний висновок, коли об'єкт перетворюється на рядок.\n\n> **Зауваження** :\n> \n> Винятки не можна клонувати. Спроба [клонувати](language.oop5.cloning.md) виняток призведе до непоправної помилки **`E_ERROR`**\n\n**Приклад #2 Спадкування класу Exception**\n\n```php\n<?php\n/**\n * Определим свой класс исключения\n */\nclass MyException extends Exception\n{\n    // Переопределим исключение так, что параметр message станет обязательным\n    public function __construct($message, $code = 0, Throwable $previous = null) {\n        // некоторый код\n\n        // убедитесь, что все передаваемые параметры верны\n        parent::__construct($message, $code, $previous);\n    }\n\n    // Переопределим строковое представление объекта.\n    public function __toString() {\n        return __CLASS__ . \": [{$this->code}]: {$this->message}\\n\";\n    }\n\n    public function customFunction() {\n        echo \"Мы можем определять новые методы в наследуемом классе\\n\";\n    }\n}\n\n\n/**\n * Создадим класс для тестирования исключения\n */\nclass TestException\n{\n    public $var;\n\n    const THROW_NONE    = 0;\n    const THROW_CUSTOM  = 1;\n    const THROW_DEFAULT = 2;\n\n    function __construct($avalue = self::THROW_NONE) {\n\n        switch ($avalue) {\n            case self::THROW_CUSTOM:\n                // Выбрасываем собственное исключение\n                throw new MyException('1 - неправильный параметр', 5);\n                break;\n\n            case self::THROW_DEFAULT:\n                // Выбрасываем встроеное исключение\n                throw new Exception('2 - недопустимый параметр', 6);\n                break;\n\n            default:\n                // Никаких исключений, объект будет создан.\n                $this->var = $avalue;\n                break;\n        }\n    }\n}\n\n// Приклад 1\ntry {\n    $o = new TestException(TestException::THROW_CUSTOM);\n} catch (MyException $e) {      // Будет перехвачено\n    echo \"Поймано собственное переопределённое исключение\\n\", $e;\n    $e->customFunction();\n} catch (Exception $e) {        // Будет пропущено\n    echo \"Поймано встроенное исключение\\n\", $e;\n}\n\n// Отсюда будет продолжено выполнение программы\nvar_dump($o); // Null\necho \"\\n\\n\";\n\n\n// Приклад 2\ntry {\n    $o = new TestException(TestException::THROW_DEFAULT);\n} catch (MyException $e) {      // Тип исключения не совпадёт\n    echo \"Поймано переопределённое исключение\\n\", $e;\n    $e->customFunction();\n} catch (Exception $e) {        // Будет перехвачено\n    echo \"Перехвачено встроенное исключение\\n\", $e;\n}\n\n// Отсюда будет продолжено выполнение программы\nvar_dump($o); // Null\necho \"\\n\\n\";\n\n\n// Приклад 3\ntry {\n    $o = new TestException(TestException::THROW_CUSTOM);\n} catch (Exception $e) {        // Будет перехвачено\n    echo \"Поймано встроенное исключение\\n\", $e;\n}\n\n// Продолжение исполнения программы\nvar_dump($o); // Null\necho \"\\n\\n\";\n\n\n// Приклад 4\ntry {\n    $o = new TestException();\n} catch (Exception $e) {        // Будет пропущено, т.к. исключение не выбрасывается\n    echo \"Поймано встроенное исключение\\n\", $e;\n}\n\n// Продолжение выполнения программы\nvar_dump($o); // TestException\necho \"\\n\\n\";\n?>\n```\n","title":"Спадкування винятків","contentType":2,"navigation":[{"language.exceptions.md":"« Винятки"},{"language.fibers.md":"Fibers »"},{"index.md":"PHP Manual"},{"language.exceptions.md":"Винятки"}]}},"__N_SSG":true}