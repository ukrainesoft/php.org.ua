{"pageProps":{"page":{"slug":"function.array-multisort.md","content":"# array\\_multisort\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\narray\\_multisort — Сортує кілька масивів або багатовимірні масиви\n\n### Опис\n\n```methodsynopsis\narray_multisort(    array &$array1,    mixed $array1_sort_order = SORT_ASC,    mixed $array1_sort_flags = SORT_REGULAR,    mixed ...$rest): bool\n```\n\nфункцією **array\\_multisort()** користуються для одночасного сортування кількох масивів або одного багатовимірного масиву за одним або декількома рівнями вкладеності.\n\nАсоціативні рядкові ключі будуть збережені, але числові ключі будуть переіндексовані.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n> **Зауваження** :\n> \n> Скидає внутрішній покажчик масиву перший елемент.\n\n### Список параметрів\n\n`array1`\n\nСортується масив (array).\n\n`array1_sort_order`\n\nПорядок, у якому буде відсортовано аргумент-масив (array), заданий перед цим параметром. Дозволено вказувати одну з констант: **`SORT_ASC`** для сортування за зростанням, або **`SORT_DESC`** для сортування за спаданням.\n\nЦей параметр можна змінювати місцями з параметром `array1_sort_flags` або не вказувати, тоді за основу буде взято значення **`SORT_ASC`**\n\n`array1_sort_flags`\n\nНалаштування сортування для аргументу-масиву (array), який був вказаний перед цим параметром:\n\nПрапор способу сортування:\n\n-   \\*\\*`SORT_REGULAR`\\*\\*- Звичайне порівняння елементів (без зміни типів)\n-   \\*\\*`SORT_NUMERIC`\\*\\*- Порівняння елементів як чисел\n-   \\*\\*`SORT_STRING`\\*\\*- Порівняння елементів як рядків\n-   \\*\\*`SORT_LOCALE_STRING`\\*\\*- Порівняння елементів як рядків з урахуванням встановленого мовного стандарту (локалі). Буде вибрано мовний стандарт, який дозволено змінювати функцією[setlocale()](function.setlocale.md)\n-   \\*\\*`SORT_NATURAL`\\*\\*— порівняння елементів як рядків через алгоритм природного сортування (natural order), як у функції[natsort()](function.natsort.md)\n-   \\*\\*`SORT_FLAG_CASE`**\\- Можна об'єднувати (бінарним АБО) з**`SORT_STRING`** або **`SORT_NATURAL`\\*\\*для сортування без урахування регістру\n\nЦей аргумент можна міняти місцями з параметром `array1_sort_order` або не вказувати, тоді за основу буде взято значення **`SORT_REGULAR`**\n\n`rest`\n\nДодаткові масиви, які необов'язково йдуть після порядку сортування та прапорів. Порівнюються лише елементи, які відповідають таким самим елементам у попередніх масивах. Тобто масиви сортуються у лексикографічному порядку.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Сортування кількох масивів**\n\n```php\n<?php\n\n$ar1 = array(10, 100, 100, 0);\n$ar2 = array(1, 3, 2, 4);\narray_multisort($ar1, $ar2);\n\nvar_dump($ar1);\nvar_dump($ar2);\n?>\n```\n\nУ наведеному прикладі після закінчення сортування перший масив міститиме значення: 0, 10, 100, 100. Другий — 4, 1, 2, 3. Елементи другого масиву, які відповідають тим самим елементам першого масиву (100 і 100), також будуть відсортовані .\n\n```\narray(4) {\n  [0]=> int(0)\n  [1]=> int(10)\n  [2]=> int(100)\n  [3]=> int(100)\n}\narray(4) {\n  [0]=> int(4)\n  [1]=> int(1)\n  [2]=> int(2)\n  [3]=> int(3)\n}\n```\n\n**Приклад #2 Сортування багатовимірного масиву**\n\n```php\n<?php\n\n$ar = array(\n    array(\"10\", 11, 100, 100, \"a\"),\n    array(1, 2, \"2\", 3, 1)\n);\narray_multisort(\n    $ar[0], SORT_ASC, SORT_STRING,\n    $ar[1], SORT_NUMERIC, SORT_DESC\n);\nvar_dump($ar);\n?>\n```\n\nУ наведеному прикладі після закінчення сортування перший масив міститиме значення: \"10\", 100, 100, 11, \"a\" (його елементи були відсортовані у порядку, що зростає), а другий масив - 1, 3, \"2\", 2, 1 (Елементи відсортовані як числа, у порядку спадання).\n\n```\narray(2) {\n  [0]=> array(5) {\n    [0]=> string(2) \"10\"\n    [1]=> int(100)\n    [2]=> int(100)\n    [3]=> int(11)\n    [4]=> string(1) \"a\"\n  }\n  [1]=> array(5) {\n    [0]=> int(1)\n    [1]=> int(3)\n    [2]=> string(1) \"2\"\n    [3]=> int(2)\n    [4]=> int(1)\n  }\n}\n```\n\n**Приклад #3 Сортування результатів бази даних**\n\nУ цьому вся прикладі кожен елемент масиву data — це рядок таблиці. Такий набір даних є типовим для записів бази даних.\n\nЗразкові дані:\n\n```\n# том  | издание\nvolume | edition\n-------+--------\n    67 |       2\n    86 |       1\n    85 |       6\n    98 |       2\n    86 |       6\n    67 |       7\n```\n\nДані як масиву з ім'ям data. Зазвичай їх можна отримати, наприклад, з циклу функції [mysqli\\_fetch\\_assoc()](mysqli-result.fetch-assoc.md)\n\n```php\n<?php\n\n$data[] = array('volume' => 67, 'edition' => 2);\n$data[] = array('volume' => 86, 'edition' => 1);\n$data[] = array('volume' => 85, 'edition' => 6);\n$data[] = array('volume' => 98, 'edition' => 2);\n$data[] = array('volume' => 86, 'edition' => 6);\n$data[] = array('volume' => 67, 'edition' => 7);\n?>\n```\n\nУ цьому прикладі дані будуть відсортовані по полю volume у спадному порядку, а по полю edition - у зростаючому.\n\nЄ масив рядків, але функція **array\\_multisort()** вимагає масив стовпців, тому спочатку буде викликаний наступний код, щоб отримати стовпці, а потім дані будуть відсортовані.\n\n```php\n<?php\n\n// Получение списка столбцов\nforeach ($data as $key => $row) {\n    $volume[$key]  = $row['volume'];\n    $edition[$key] = $row['edition'];\n}\n\n// Получение тех же данных функцией array_column() вместо перебора\n$volume  = array_column($data, 'volume');\n$edition = array_column($data, 'edition');\n\n// Сортируем данные по полю volume по убыванию и по полю edition по возрастанию\n// Добавляем переменную $data в качестве последнего параметра, для сортировки по общему ключу\narray_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);\n?>\n```\n\nТепер дані відсортовані і виглядатимуть так:\n\n```\nvolume | edition\n-------+--------\n    98 |       2\n    86 |       1\n    86 |       6\n    85 |       6\n    67 |       2\n    67 |       7\n```\n\n**Приклад #4 Сортування без урахування регістру**\n\nОбидві константи **`SORT_STRING`** і **`SORT_REGULAR`** враховують регістр при сортуванні, рядки, що починаються з великої літери, будуть виставлені раніше рядків, що починаються з малої літери.\n\nДля реєстронезалежного сортування, потрібно працювати з копією вихідного масиву, приведеного до нижнього регістру.\n\n```php\n<?php\n\n$array = array('Alpha', 'atomic', 'Beta', 'bank');\n$array_lowercase = array_map('strtolower', $array);\n\narray_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);\n\nprint_r($array);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => Alpha\n    [1] => atomic\n    [2] => bank\n    [3] => Beta\n)\n```\n\n### Дивіться також\n\n-   [usort()](function.usort.md) \\- Сортує масив за значеннями використовуючи функцію користувача для порівняння елементів\n-   [Порівняння функцій сортування масивів](array.sorting.md)\n","title":"array\\_multisort","contentType":2,"navigation":[{"function.array-merge.md":"« array\\_merge"},{"function.array-pad.md":"array\\_pad »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}