{"pageProps":{"page":{"slug":"function.array-unique.md","content":"# array\\_unique\n\n(PHP 4 >= 4.0.1, PHP 5, PHP 7, PHP 8)\n\narray\\_unique — Прибирає значення, що повторюються, з масиву\n\n### Опис\n\n```methodsynopsis\narray_unique(array $array, int $flags = SORT_STRING): array\n```\n\nПриймає вхідний масив `array` і повертає новий масив без значень, що повторюються.\n\nЗверніть увагу, що ключі зберігатимуться. Якщо відповідно до заданих `flags` кілька елементів визначаються як ідентичні, то буде збережено ключ і значення першого такого елемента.\n\n> **Зауваження**: Два елементи вважаються однаковими в тому і тільки в тому випадку, якщо `(string) $elem1 === (string) $elem2`. Інакше кажучи: якщо вони однакове рядкове уявлення, буде використано перший елемент.\n\n### Список параметрів\n\n`array`\n\nВхідний масив\n\n`flags`\n\nМожна використовувати необов'язковий другий параметр `flags`для изменения поведения сравнения с помощью следующих значений:\n\nПрапори видів порівняння:\n\n-   \\*\\*`SORT_REGULAR`\\*\\*- нормальне порівняння елементів (типи не змінюються)\n-   \\*\\*`SORT_NUMERIC`\\*\\*- елементи порівнюються як числа\n-   \\*\\*`SORT_STRING`\\*\\*- елементи порівнюються як рядки\n-   \\*\\*`SORT_LOCALE_STRING`\\*\\*- Порівнює елементи як рядки, з урахуванням поточної локалі.\n\n### Значення, що повертаються\n\nПовертає відфільтрований масив.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.2.0 | Якщо `flags`равен\\*\\*`SORT_STRING`\\*\\*, ранее массив`array` копіювався, а не унікальні елементи видалялися (зберігаючи значення цифрових індексів), але тепер створюється новий масив шляхом додавання унікальних елементів. Це може призвести до різних числових індексів. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** array\\_unique()\\*\\*\\*\\*\n\n```php\n<?php\n$input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\");\n$result = array_unique($input);\nprint_r($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [a] => green\n    [0] => red\n    [1] => blue\n)\n```\n\n**Приклад #2**array\\_unique()\\*\\* та типи:\\*\\*\n\n```php\n<?php\n$input = array(4, \"4\", \"3\", 4, 3, \"3\");\n$result = array_unique($input);\nvar_dump($result);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(2) {\n  [0] => int(4)\n  [2] => string(1) \"3\"\n}\n```\n\n### Примітки\n\n> **Зауваження**: Обратите внимание, что**array\\_unique()** не призначена для роботи з багатовимірними масивами.\n\n### Дивіться також\n\n-   [array\\_count\\_values()](function.array-count-values.md) \\- Підраховує кількість входжень кожного окремого значення у масиві\n","title":"array\\_unique","contentType":2,"navigation":[{"function.array-uintersect.md":"« array\\_uintersect"},{"function.array-unshift.md":"array\\_unshift »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}