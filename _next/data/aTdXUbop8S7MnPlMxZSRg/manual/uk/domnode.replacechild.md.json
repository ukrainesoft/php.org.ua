{"pageProps":{"page":{"slug":"domnode.replacechild.md","content":"# DOMNode::replaceChild\n\n(PHP 5, PHP 7, PHP 8)\n\nDOMNode::replaceChild — Замінює дочірній вузол\n\n### Опис\n\n```methodsynopsis\npublic DOMNode::replaceChild(DOMNode $node, DOMNode $child): DOMNode|false\n```\n\nФункция заменяет дочерний узел`child` новим вузлом. Якщо вузол `node` вже є дочірнім, то він не буде доданий вдруге. Якщо заміна пройшла успішно, то буде повернуто старий (замінний) вузол.\n\n### Список параметрів\n\n`node`\n\nНовий вузол. Повинен бути частиною цільового документа, тобто створений за допомогою одного з методів DOMDocument->createXXX() або імпортований у документ через [DOMDocument::importNode](domdocument.importnode.md)\n\n`child`\n\nСтарий вузол.\n\n### Значення, що повертаються\n\nСтарий вузол або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Помилки\n\n**`DOM_NO_MODIFICATION_ALLOWED_ERR`**\n\nВиникає, якщо вузол доступний тільки для читання або попередній батько вузла, що вставляється, доступний тільки для читання.\n\n**`DOM_HIERARCHY_REQUEST_ERR`**\n\nВиникає, якщо тип вузла не підтримує нащадків типу, що має вузол `node`або якщо доданий вузол є предком цільового вузла або ним самим.\n\n**`DOM_WRONG_DOCUMENT_ERR`**\n\nВиникає, якщо `node` створено іншому документі, відмінному від цього, у якому було створено цей вузол.\n\n**`DOM_NOT_FOUND`**\n\nВиникає, якщо `child`не является дочерним узлом данного узла.\n\n### Дивіться також\n\n-   [DOMChildNode::replaceWith()](domchildnode.replacewith.md) \\- Замінює вузол на нові вузли\n-   [DOMNode::appendChild()](domnode.appendchild.md) \\- Додає новий дочірній вузол до кінця списку нащадків\n-   [DOMNode::removeChild()](domnode.removechild.md) \\- видаляє дочірній вузол зі списку нащадків\n","title":"DOMNode::replaceChild","contentType":2,"navigation":[{"domnode.removechild.md":"« DOMNode::removeChild"},{"class.domnodelist.md":"DOMNodeList »"},{"index.md":"PHP Manual"},{"class.domnode.md":"DOMNode"}]}},"__N_SSG":true}