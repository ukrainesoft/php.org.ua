{"pageProps":{"page":{"slug":"random-randomizer.getfloat.md","content":"# Random\\\\Randomizer::getFloat\n\n(PHP 8 >= 8.3.0)\n\nRandom\\\\Randomizer::getFloat — Отримує рівномірно обране число з плаваючою точкою\n\n### Опис\n\n```methodsynopsis\npublic Random\\Randomizer::getFloat(float $min, float $max, Random\\IntervalBoundary $boundary = Random\\IntervalBoundary::ClosedOpen): float\n```\n\nПовертає рівномірно обране рівнорозподілене число з плаваючою точкою із запитаного інтервалу.\n\nЧерез обмежену точність в повному обсязі речові (дійсні) числа вдається точно уявити як числа з плаваючою точкою. Якщо число неможливо уявити точно, воно округляється до найближчого точного значення. Крім сказаного, числа з точкою, що плаває, не однаково щільні по всьому числовому рядку. Оскільки перетворення чисел з плаваючою точкою проводяться з двійковою експонентою, відстань між двома сусідніми числами з плаваючою точкою подвоюється при кожному ступені двійки. Інакше кажучи: між значеннями `1.0`и`2.0` існує така ж кількість представимих чисел з плаваючою точкою, як і між `2.0`и`4.0` `4.0`и`8.0` `8.0`и`16.0`и т. д.\n\nТому довільна вибірка випадкового числа в межах запитаного інтервалу, наприклад, шляхом поділу двох цілих чисел іноді призводить до зміщеного розподілу. Необхідне округлення призведе до того, що одні числа з плаваючою точкою повертатимуться частіше, ніж інші, особливо в районі ступенів двійки, коли щільність чисел із плаваючою точкою зміниться.\n\nМетод**Random\\\\Randomizer::getFloat()** реалізує алгоритм, який повертатиме рівномірно обране число з плаваючою точкою з максимально можливого набору точно представлених і рівнорозподілених чисел з плаваючою точкою в межах інтервалу. Відстань між вибираються числами з плаваючою точкою («розмір кроку») відповідає відстані між числами з плаваючою точкою з найменшою щільністю, тобто відстані між числами з плаваючою точкою на межі інтервалу з великим абсолютним значенням. Тобто не всім представленим числам з плаваючою точкою в межах цього інтервалу можна повертатися, якщо інтервал перетинає один або кілька ступенів двійки. Крок почнеться з межі інтервалу з великим абсолютним значенням, щоб гарантувати, що кроки збігаються з точно представленими числами з точкою, що плаває.\n\nМежі закритих інтервалів завжди будуть включені в набір плаваючих значень, що вибираються. Так, якщо розмір інтервалу не кратаний розміру кроку і межа з меншим абсолютним значенням - це замкнута межа, відстань між цією кордоном і найближчим до неї обраним числом з плаваючою точкою буде менше розміру кроку.\n\n**Застереження**\n\nПостобработка повернених чисел з плаваючою точкою, швидше за все, порушить рівномірний рівнорозподіл, оскільки проміжні плаваючі значення математичної операції неявно округляються. Запрошений інтервал повинен якомога точніше відповідати потрібному інтервалу, а округлення має виконуватися лише як явна операція безпосередньо перед відображенням вибраного числа користувача.\n\n#### Пояснення алгоритму з прикладами значень\n\nЩоб навести приклад роботи алгоритму, розглянемо уявлення з плаваючою точкою, в якому вибрано 3-бітну мантису. Це уявлення здатне представляти 8 різних значень з плаваючою точкою між послідовними ступенями двох. Тобто між `1.0`и`2.0` всі кроки розміром `0.125` точно уявні і між `2.0`и`4.0` всі кроки розміром `0.25` точно уявні. У PHP для роботи з числами з плаваючою точкою обрана 52-бітна мантиса і PHP може представляти 252 різних значення між кожним ступенем двійки. Це означає, що\n\n-   `1.0`\n-   `1.125`\n-   `1.25`\n-   `1.375`\n-   `1.5`\n-   `1.625`\n-   `1.75`\n-   `1.875`\n-   `2.0`\n-   `2.25`\n-   `2.5`\n-   `2.75`\n-   `3.0`\n-   `3.25`\n-   `3.5`\n-   `3.75`\n-   `4.0`\n\n\\- точно представлені числа з плаваючою точкою між `1.0`и`4.0`\n\nТепер уявіть, що здійснено виклик `$randomizer->getFloat(1.625, 2.5, IntervalBoundary::ClosedOpen)`, т. е. запитано випадкове число з плаваючою точкою, яке починається з `1.625` і закінчується `2.5` (Не включаючи останнє). Алгоритм спочатку визначає розмір кроку на кордоні з великим абсолютним значенням (`2.5`). Розмір кроку на цьому кордоні дорівнює `0.25`\n\nЗверніть увагу, що розмір запитаного інтервалу. `0.875`, що не можна назвати точним кратним `0.25`. Якби алгоритм почав переходити на нижню межу `1.625`, воно зіткнулося б зі значенням `2.125`, який не зовсім уявимо і піддаватиметься неявному округленню. Тому алгоритм починає роботу з верхнього кордону.`2.5`. Доступні значення:\n\n-   `2.25`\n-   `2.0`\n-   `1.75`\n-   `1.625`\n\nЗначение`2.5` не включається, оскільки верхня межа інтервалу, що запитує, — відкритий кордон. Значення `1.625` включено, навіть незважаючи на те, що його відстань до найближчого значення `1.75` - це `0.125`, який менший за певний розмір кроку, що дорівнює `0.25`. Причина в тому, що інтервал, що запитає, закривається на нижньому кордоні (`1.625`) та закриті кордони завжди включені.\n\nНарешті, алгоритм рівномірно вибирає одне з чотирьох значень, що вибираються випадковим чином і повертає його.\n\n##### Чому розподіл двох цілих чисел не працює\n\nУ попередньому прикладі між кожним подинтервалом є вісім представимих чисел з плаваючою точкою, розділених ступенем двійки. Щоб проілюструвати, чому поділ двох цілих чисел не працює для створення випадкового числа з плаваючою точкою, припустимо, що у відкритому правому інтервалі від `0.0`до`1.0` (не включаючи останнє) є 16 рівнорозподілених чисел із плаваючою комою. Половина з них - це вісім точно уявних значень між від `0.5`до`1.0`, інша половина - це значення між `0.0`и`1.0` з розміром кроку `0.0625`. Їх можна легко згенерувати, розділивши випадкове ціле число від до`15`на`16`, щоб отримати одне із значень:\n\n-   `0.0`\n-   `0.0625`\n-   `0.125`\n-   `0.1875`\n-   `0.25`\n-   `0.3125`\n-   `0.375`\n-   `0.4375`\n-   `0.5`\n-   `0.5625`\n-   `0.625`\n-   `0.6875`\n-   `0.75`\n-   `0.8125`\n-   `0.875`\n-   `0.9375`\n\nЦе випадкове число з плаваючою точкою можна масштабувати до інтервалу з відкритим інтервалом праворуч від `1.625`до`2.75` (не включаючи останнє), помноживши його на розмір інтервалу (`0.875`) і додавши мінімум `1.625`. Це так зване афінне перетворення призведе до значень:\n\n-   `1.625`округляється до`1.625`\n-   `1.679`округляється до`1.625`\n-   `1.734`округляється до`1.75`\n-   `1.789`округляється до`1.75`\n-   `1.843`округляється до`1.875`\n-   `1.898`округляється до`1.875`\n-   `1.953`округляється до`2.0`\n-   `2.007`округляється до`2.0`\n-   `2.062`округляється до`2.0`\n-   `2.117`округляється до`2.0`\n-   `2.171`округляється до`2.25`\n-   `2.226`округляється до`2.25`\n-   `2.281`округляється до`2.25`\n-   `2.335`округляється до`2.25`\n-   `2.390`округляється до`2.5`\n-   `2.445`округляється до`2.5`\n\nЗверніть увагу, як буде повернуто верхній кордон `2.5`незважаючи на те, що це відкритий кордон і, отже, виключено. Також зверніть увагу, що ймовірність повертання значень `2.0`и`2.25` удвічі вище, ніж в інших значень.\n\n### Список параметрів\n\n`min`\n\nНижня межа інтервалу.\n\n`max`\n\nВерхня межа інтервалу.\n\n`boundary`\n\nВказує, чи є межі інтервалу можливими значеннями, що повертаються.\n\n### Значення, що повертаються\n\nПовертає рівномірно обране рівнорозподілене число з плаваючою точкою з інтервалу, заданого параметрами `min` `max`и`boundary`. Можливі значення, що повертаються `min`и`max`зависят от значения параметра`boundary`\n\n### Помилки\n\n-   Если значение`min`\\- Не кінцеве число (як це визначає функція[is\\_finite()](function.is-finite.md)), буде викинуто виняток [ValueError](class.valueerror.md)\n-   Если значение параметра`max`\\- Не кінцеве число (як це визначає функція[is\\_finite()](function.is-finite.md)), буде викинуто виняток [ValueError](class.valueerror.md)\n-   Якщо вибраний інтервал не містить значень, буде викинуто виняток[ValueError](class.valueerror.md)\n-   Будь-які [Throwable](class.throwable.md), що викидаються методом[Random\\\\Engine::generate()](random-engine.generate.md)базового[`Random\\Randomizer::$engine`](class.random-randomizer.md#random-randomizer.props.engine)\n\n### Приклади\n\n**Приклад #1 Приклад использования метода**Random\\\\Randomizer::getFloat()\\*\\*\\*\\*\n\n```php\n<?php\n\n$randomizer = new \\Random\\Randomizer();\n\n// Обратите внимание, что степень детализации по широте в два раза выше,\n// чем степень детализации долготы.\n//\n// Для широты значение может быть как -90, так и 90.\n// Для долготы значение может быть 180, но не -180, потому что\n// -180 и 180 относятся к одной и той же долготе.\nprintf(\n    \"Широта: %+.6f Долгота: %+.6f\",\n    $randomizer->getFloat(-90, 90, \\Random\\IntervalBoundary::ClosedClosed),\n    $randomizer->getFloat(-180, 180, \\Random\\IntervalBoundary::OpenClosed),\n);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nШирота: +69.244304 Долгота: -53.548951\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Цей метод реалізує алгоритм γ-секції, опублікований у статті [»  Drawing Random Floating-Point Numbers from an Interval. Frédéric Goualard, ACM Trans. Model. Comput. Simul., 32:3, 2022](https://dl.acm.org/doi/10.1145/3503512) щоб отримати потрібні поведінкові властивості.\n\n### Дивіться також\n\n-   [Random\\\\Randomizer::nextFloat()](random-randomizer.nextfloat.md) \\- Отримує число з точкою, що плаває, з відкритого праворуч інтервалу\\[\n-   [Random\\\\Randomizer::getInt()](random-randomizer.getint.md) \\- Отримує рівномірно обране ціле число\n","title":"Random\\\\Randomizer::getFloat","contentType":2,"navigation":[{"random-randomizer.getbytesfromstring.md":"« Random\\\\Randomizer::getBytesFromString"},{"random-randomizer.getint.md":"Random\\\\Randomizer::getInt »"},{"index.md":"PHP Manual"},{"class.random-randomizer.md":"Random\\\\Randomizer"}]}},"__N_SSG":true}