{"pageProps":{"page":{"slug":"userlandnaming.rules.md","content":"## Правила\n\nНаступний список правил дає огляд прав іменування, які PHP залишає собі при виборі нових ідентифікаторів. Повним керівництвом є офіційний[» Стандарт написання коду](https://github.com/php/php-src/raw/master/CODING_STANDARDS.md)\":\n\n-   PHP має глобальний простір імен, але намагається знаходити хороші описові імена і уникати будь-яких очевидних колізій.\n    \n-   Імена функцій використовують підкреслення між словами, а імена класів використовують як`camelCase`, так и`PascalCase`\n    \n-   PHP додає префікс до глобальних імен, що належать до модуля з ім'ям цього модуля. У минулому було безліч винятків із цього правила, наприклад:\n    \n    -   [curl\\_close()](function.curl-close.md)\n        \n    -   [mysql\\_query()](function.mysql-query.md)\n        \n    -   PREG\\_SPLIT\\_DELIM\\_CAPTURE\n        \n    -   new DOMDocument()\n        \n    -   [strpos()](function.strpos.md)(Приклад виключення, допущеного в минулому)\n        \n    -   new SplFileObject()\n        \n-   Тим не менш, ітератори та винятки просто отримують постфікси.`Iterator`\"і\"`Exception`\". Приклади:\n    \n    -   [ArrayIterator](class.arrayiterator.md)\n        \n    -   [LogicException](class.logicexception.md)\n        \n-   PHP резервує всі ідентифікатори, що починаються з`__`як магічні. Рекомендується не створювати ідентифікатори, що починаються з`__`крім як з метою використовувати документовану магічну функціональність. Приклади:\n    \n    -   [\\_\\_get()](language.oop5.overloading.md#object.get)\n        \n    -   [\\_\\_autoload()](function.autoload.md)\n","title":"Правила","contentType":2,"navigation":[{"userlandnaming.globalnamespace.md":"« Глобальний простір імен"},{"userlandnaming.tips.md":"Поради »"},{"index.md":"PHP Manual"},{"userlandnaming.md":"Посібник з іменування"}]}},"__N_SSG":true}