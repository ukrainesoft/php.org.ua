{"pageProps":{"page":{"slug":"gearmanclient.do.md","content":"# GearmanClient::do\n\n(PECL gearman >= 0.5.0)\n\nGearmanClient::do — Виконує одне завдання та повертає результат \\[Застарілий метод\\]\n\n### Опис\n\n```methodsynopsis\npublic GearmanClient::do(string $function_name, string $workload, string $unique = ?): string\n```\n\nМетод\\*\\*GearmanClient::do()\\*\\*устарел, начиная с pecl/gearman 1.0.0. Используйте[GearmanClient::doNormal()](gearmanclient.donormal.md)\n\n### Список параметрів\n\n`function_name`\n\nЗареєстрована функція, що викликається робочим процесом\n\n`workload`\n\nСеріалізовані дані, що підлягають обробці\n\n`unique`\n\nУнікальний ID, який призначається певному завданню\n\n### Значення, що повертаються\n\nРезультат виконання завдання у вигляді рядка.\n\n### Приклади\n\n**Приклад #1 Просте подання завдання з безпосереднім поверненням**\n\n```php\n<?php\n\n# Код клиента\n\necho \"Начало\\n\";\n\n# Создание клиента\n$gmclient= new GearmanClient();\n\n# Указание сервера по умолчанию (localhost).\n$gmclient->addServer();\n\necho \"Отправка задания\\n\";\n\n$result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n\necho \"Успешно: $result\\n\";\n\n?>\n```\n\n```php\n<?php\n\necho \"Начало\\n\";\n\n# Создание экземпляра обработчика\n$gmworker= new GearmanWorker();\n\n# Указание сервера по умолчанию (localhost).\n$gmworker->addServer();\n\n# Регистрация функции \"reverse\" на сервере. Изменение функции обработчика на\n# \"reverse_fn_fast\" для более быстрой обработки без вывода.\n$gmworker->addFunction(\"reverse\", \"reverse_fn\");\n\nprint \"Ожидание задания...\\n\";\nwhile($gmworker->work())\n{\n  if ($gmworker->returnCode() != GEARMAN_SUCCESS)\n  {\n    echo \"return_code: \" . $gmworker->returnCode() . \"\\n\";\n    break;\n  }\n}\n\nfunction reverse_fn($job)\n{\n  return strrev($job->workload());\n}\n\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nНачало\nОтправка задания\nУспешно: !olleH\n```\n\n**Приклад #2 Передача завдання та отримання інкрементного стану**\n\nНадсилається завдання та встановлюється цикл для отримання інформації про зміну статусу. У обробника вказана штучна затримка для моделювання тривалого виконання завдання та задана відправка стану та даних під час обробки. Кожен наступний виклик **GearmanClient::do()** виводить інформацію про статус виконання поточного завдання.\n\n```php\n<?php\n\n# Код клиента\n\n# Создание экземпляра клиента Gearman\n$gmclient= new GearmanClient();\n\n# Указание сервера по умолчанию (localhost).\n$gmclient->addServer();\n\necho \"Отправка задания\\n\";\n\n# Отправка задания reverse\ndo\n{\n  $result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n  # Проверка на различные возвращаемые форматы и ошибки\n\n  switch($gmclient->returnCode())\n  {\n    case GEARMAN_WORK_DATA:\n      echo \"Данные: $result\\n\";\n      break;\n    case GEARMAN_WORK_STATUS:\n      list($numerator, $denominator)= $gmclient->doStatus();\n      echo \"Статус: $numerator/$denominator выполнено\\n\";\n      break;\n    case GEARMAN_WORK_FAIL:\n      echo \"Ошибка\\n\";\n      exit;\n    case GEARMAN_SUCCESS:\n      break;\n    default:\n      echo \"RET: \" . $gmclient->returnCode() . \"\\n\";\n      echo \"Error: \" . $gmclient->error() . \"\\n\";\n      echo \"Errno: \" . $gmclient->getErrno() . \"\\n\";\n      exit;\n  }\n}\nwhile($gmclient->returnCode() != GEARMAN_SUCCESS);\n\necho \"Успешно: $result\\n\";\n\n?>\n```\n\n```php\n<?php\n\n# Код обработчика\n\necho \"Начало\\n\";\n\n# Создание экземпляра обработчика.\n$gmworker= new GearmanWorker();\n\n# Указание сервера по умолчанию  (localhost).\n$gmworker->addServer();\n\n# Регистрация функции \"reverse\" на сервере.\n$gmworker->addFunction(\"reverse\", \"reverse_fn\");\n\nprint \"Ожидание задания...\\n\";\nwhile($gmworker->work())\n{\n  if ($gmworker->returnCode() != GEARMAN_SUCCESS)\n  {\n    echo \"return_code: \" . $gmworker->returnCode() . \"\\n\";\n    break;\n  }\n}\n\nfunction reverse_fn($job)\n{\n  echo \"Полученное задание: \" . $job->handle() . \"\\n\";\n\n  $workload = $job->workload();\n  $workload_size = $job->workloadSize();\n\n  echo \"Рабочая нагрузка: $workload ($workload_size)\\n\";\n\n  # Данный цикл не является необходимым, только иллюстрирует процесс\n  for ($x= 0; $x < $workload_size; $x++)\n  {\n    echo \"Отправка статуса: \" + $x + 1 . \"/$workload_size выполнено\\n\";\n    $job->sendStatus($x+1, $workload_size);\n    $job->sendData(substr($workload, $x, 1));\n    sleep(1);\n  }\n\n  $result= strrev($workload);\n  echo \"Результат: $result\\n\";\n\n  # Возврат результата, отправляемого клиенту\n  return $result;\n}\n\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\nВисновок оброблювача:\n\n```\nНачало\nОжидание задания...\nПолученное задание: H:foo.local:106\nРабочая нагрузка: Hello! (6)\n1/6 выполнено\n2/6 выполнено\n3/6 выполнено\n4/6 выполнено\n5/6 выполнено\n6/6 выполнено\nРезультат: !olleH\n```\n\nВисновок клієнта:\n\n```\nНачало\nОтправка задания\nСтатус: 1/6 выполнено\nДанные: H\nСтатус: 2/6 выполнено\nДанные: e\nСтатус: 3/6 выполнено\nДанные: l\nСтатус: 4/6 выполнено\nДанные: l\nСтатус: 5/6 выполнено\nДанные: o\nСтатус: 6/6 выполнено\nДанные: !\nУспешно: !olleH\n```\n\n### Дивіться також\n\n-   [GearmanClient::doHigh()](gearmanclient.dohigh.md) \\- Запускає на виконання завдання із високим пріоритетом\n-   [GearmanClient::doLow()](gearmanclient.dolow.md) \\- Запускає виконання завдання з низьким пріоритетом\n-   [GearmanClient::doBackground()](gearmanclient.dobackground.md) \\- Запускає виконання завдання у фоновому режимі\n-   [GearmanClient::doHighBackground()](gearmanclient.dohighbackground.md) \\- Запускає на виконання із високим пріоритетом завдання у фоновому режимі\n-   [GearmanClient::doLowBackground()](gearmanclient.dolowbackground.md) \\- Запускає на виконання з низьким пріоритетом завдання у фоновому режимі\n","title":"GearmanClient::do","contentType":2,"navigation":[{"gearmanclient.data.md":"« GearmanClient::data"},{"gearmanclient.dobackground.md":"GearmanClient::doBackground »"},{"index.md":"PHP Manual"},{"class.gearmanclient.md":"GearmanClient"}]}},"__N_SSG":true}