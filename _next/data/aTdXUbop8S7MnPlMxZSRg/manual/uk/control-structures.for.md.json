{"pageProps":{"page":{"slug":"control-structures.for.md","content":"## for\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nЦикл`for` найскладніший цикл у PHP. Він поводиться так само, як і в мові C. Синтаксис циклу `for`следующий:\n\n```\nfor (expr1; expr2; expr3)\n    statement\n```\n\nПерше вираз (expr1) завжди обчислюється (виконується) лише один раз на початку циклу.\n\nНа початку кожної ітерації оцінюється вираз expr2. Якщо воно набуває значення **`true`**, цикл продовжується і виконуються вкладені оператори. Якщо воно набуває значення \\*\\*`false`\\*\\*виконання циклу закінчується.\n\nНаприкінці кожної ітерації вираз expr3 обчислюється (виконується).\n\nКожен із виразів може бути порожнім або містити кілька виразів, розділених комами. У expr2 всі вирази, розділені комами, обчислюються, але результат береться з останнього. Якщо вираз expr2 відсутній, це означає, що цикл виконуватиметься нескінченно. (PHP неявно сприймає це значення як **`true`**, так само, як у мові C). Це може бути не так марно, як ви могли подумати, оскільки часто необхідно перервати цикл, використовуючи умовний оператор [`break`](control-structures.break.md) замість використання виразу в циклі `for`, що набуває справжнього значення.\n\nРозглянемо такі приклади. Усі вони відображають числа від 1 до 10:\n\n```php\n<?php\n/* Приклад 1 */\n\nfor ($i = 1; $i <= 10; $i++) {\n    echo $i;\n}\n\n/* Приклад 2 */\n\nfor ($i = 1; ; $i++) {\n    if ($i > 10) {\n        break;\n    }\n    echo $i;\n}\n\n/* Приклад 3 */\n\n$i = 1;\nfor (; ; ) {\n    if ($i > 10) {\n        break;\n    }\n    echo $i;\n    $i++;\n}\n\n/* Приклад 4 */\n\nfor ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);\n?>\n```\n\nЗвичайно, перший приклад здається найкращим (або, можливо, четвертим), але ви можете виявити, що можливість використовувати порожні вирази в циклах `for` може стати зручною у багатьох випадках.\n\nPHP також підтримує альтернативний синтаксис з двокрапкою для циклів `for`\n\n```\nfor (expr1; expr2; expr3):\n    statement\n    ...\nendfor;\n```\n\nПеребір масивів, як показано нижче, - це звичайна справа для багатьох користувачів.\n\n```php\n<?php\n/*\n * Это массив с некоторыми данными, которые мы хотим изменить\n * при работе цикла.\n */\n$people = array(\n    array('name' => 'Kalle', 'salt' => 856412),\n    array('name' => 'Pierre', 'salt' => 215863)\n);\n\nfor($i = 0; $i < count($people); ++$i) {\n    $people[$i]['salt'] = mt_rand(000000, 999999);\n}\n?>\n```\n\nВищенаведений код може працювати повільно, оскільки розмір масиву обчислюється у кожній ітерації. Оскільки розмір не змінюється, цикл може бути легко оптимізований за допомогою проміжної змінної, в яку буде записано розмір масиву, замість повторюваних викликів функції [count()](function.count.md) :\n\n```php\n<?php\n$people = array(\n    array('name' => 'Kalle', 'salt' => 856412),\n    array('name' => 'Pierre', 'salt' => 215863)\n);\n\nfor($i = 0, $size = count($people); $i < $size; ++$i) {\n    $people[$i]['salt'] = mt_rand(000000, 999999);\n}\n?>\n```\n","title":"for","contentType":2,"navigation":[{"control-structures.do.while.md":"« do-while"},{"control-structures.foreach.md":"foreach »"},{"index.md":"PHP Manual"},{"language.control-structures.md":"Керуючі конструкції"}]}},"__N_SSG":true}