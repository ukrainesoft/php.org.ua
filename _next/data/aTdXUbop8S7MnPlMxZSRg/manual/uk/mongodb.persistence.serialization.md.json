{"pageProps":{"page":{"slug":"mongodb.persistence.serialization.md","content":"## Серіалізація у BSON\n\n## Масиви\n\nЯкщо масив є *упакованим масивом* - тобто порожній масив або якщо ключі починаються з 0 і є послідовними без пробілів: *масив BSON*\n\nЯкщо масив не упакований - тобто має асоціативні (рядкові) ключі, ключі не починаються з 0 або за наявності прогалин: *об'єкт BSON*\n\nДокумент верхнього рівня (кореневий), *завжди*сериализуется, как документ BSON.\n\n## Приклади\n\nСеріалізація як масив BSON:\n\n\\[ \\] => \\[ \\]\\[ 0 => 4, 1 => 9 \\] => \\[ \\]\n\nСеріалізація як документ BSON:\n\n\\[ 0 => 1, 2 => 8, 3 => 12 \\] => { \"0\" : 1, \"2\" : 8, \"3\" : 12 } \\[ \"foo\" => 42 \\] => { \"foo\" : 42 } \\[ 1 => 9, 0 => 10 \\] => { \"1\" : 9, \"0\" : 10 }\n\nЗверніть увагу, що п'ять прикладів є *витримками* з повного документа і подають тільки *одне*значение внутри документа.\n\n## . Объекты\n\nЯкщо об'єкт належить до класу [stdClass](class.stdclass.md), сериализуйте, как*документ BSON*\n\nЯкщо об'єкт є підтримуваним класом, який реалізує [MongoDB\\\\BSON\\\\Type](class.mongodb-bson-type.md)Використовуйте логіку серіалізації BSON для цього конкретного типу. Примірники [MongoDB\\\\BSON\\\\Type](class.mongodb-bson-type.md) (виключаючи [MongoDB\\\\BSON\\\\Serializable](class.mongodb-bson-serializable.md) можна серіалізувати лише як значення поля документа. Спроба серіалізації такого об'єкта як кореневий документ призведе до викиду [MongoDB\\\\Driver\\\\Exception\\\\UnexpectedValueException](class.mongodb-driver-exception-unexpectedvalueexception.md)\n\nЯкщо об'єкт невідомого класу реалізує інтерфейс [MongoDB\\\\BSON\\\\Type](class.mongodb-bson-type.md), Видається виняток [MongoDB\\\\Driver\\\\Exception\\\\UnexpectedValueException](class.mongodb-driver-exception-unexpectedvalueexception.md)\n\nЯкщо об'єкт відноситься до будь-якого іншого класу, без реалізації будь-якого спеціального інтерфейсу, серіалізуйте, як *документ BSON*Оставляйте только*public* властивості та ігноруйте *protected*и*private*свойства.\n\nЯкщо об'єкт належить до класу, який реалізує інтерфейс [MongoDB\\\\BSON\\\\Serializable](class.mongodb-bson-serializable.md), викличте [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md) і використовуйте повернутий масив або [stdClass](class.stdclass.md) для серіалізації як документ BSON або масиву. Тип BSON визначатиметься таким:\n\n1.  Кореневі документи мають бути серіалізовані як документ BSON.\n    \n2.  [MongoDB\\\\BSON\\\\Persistable](class.mongodb-bson-persistable.md)об'єкти повинні бути серіалізовані як документ BSON.\n    \n3.  Якщо [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md)повертає упакований масив, серіалізуйте його як масив BSON.\n    \n4.  Якщо [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md)повертає невпакований масив або[stdClass](class.stdclass.md), серіалізуйте як документ BSON.\n    \n5.  Якщо [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md)не повернув масив або[stdClass](class.stdclass.md), видасть виняток[MongoDB\\\\Driver\\\\Exception\\\\UnexpectedValueException](class.mongodb-driver-exception-unexpectedvalueexception.md)\n    \n\nЯкщо об'єкт належить до класу, який реалізує інтерфейс [MongoDB\\\\BSON\\\\Persistable](class.mongodb-bson-persistable.md) (що має на увазі [MongoDB\\\\BSON\\\\Serializable](class.mongodb-bson-serializable.md)), отримайте властивості аналогічно попереднім абзацям, але *також*добавьте дополнительное свойство\\_\\_pclass як Binary значення з підтипом `0x80` та даними, що містять повне ім'я класу об'єкта, що серіалізується.\n\nСвойство\\_\\_pclass додається в масив або об'єкт, що повертається [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md), що означає, що воно буде перезаписувати будь-який ключ/властивість \\_\\_pclass у значенні, що повертається [MongoDB\\\\BSON\\\\Serializable::bsonSerialize()](mongodb-bson-serializable.bsonserialize.md). Якщо ви хочете уникнути такої поведінки та встановити власне значення \\_\\_pclass, ви *не* повинні реалізовувати [MongoDB\\\\BSON\\\\Persistable](class.mongodb-bson-persistable.md) і натомість повинні реалізовувати [MongoDB\\\\BSON\\\\Serializable](class.mongodb-bson-serializable.md)напрямую.\n\n## Приклади\n\n```php\n<?php\n\nclass stdClass {\n  public $foo = 42;\n} // => { \"foo\" : 42 }\n\nclass MyClass {\n  public $foo = 42;\n  protected $prot = \"wine\";\n  private $fpr = \"cheese\";\n} // => { \"foo\" : 42 }\n\nclass AnotherClass1 implements MongoDB\\BSON\\Serializable {\n  public $foo = 42;\n  protected $prot = \"wine\";\n  private $fpr = \"cheese\";\n  function bsonSerialize(): array {\n      return [ 'foo' => $this->foo, 'prot' => $this->prot ];\n  }\n} // => { \"foo\" : 42, \"prot\" : \"wine\" }\n\nclass AnotherClass2 implements MongoDB\\BSON\\Serializable {\n  public $foo = 42;\n  function bsonSerialize(): array {\n      return $this;\n  }\n} // => MongoDB\\Driver\\Exception\\UnexpectedValueException(\"bsonSerialize() did not return an array or stdClass\")\n\nclass AnotherClass3 implements MongoDB\\BSON\\Serializable {\n  private $elements = [ 'foo', 'bar' ];\n  function bsonSerialize(): array {\n      return $this->elements;\n  }\n} // => { \"0\" : \"foo\", \"1\" : \"bar\" }\n\nclass ContainerClass implements MongoDB\\BSON\\Serializable {\n  public $things = AnotherClass4 implements MongoDB\\BSON\\Serializable {\n    private $elements = [ 0 => 'foo', 2 => 'bar' ];\n    function bsonSerialize(): array {\n      return $this->elements;\n    }\n  }\n  function bsonSerialize(): array {\n      return [ 'things' => $this->things ];\n  }\n} // => { \"things\" : { \"0\" : \"foo\", \"2\" : \"bar\" } }\n\nclass ContainerClass implements MongoDB\\BSON\\Serializable {\n  public $things = AnotherClass5 implements MongoDB\\BSON\\Serializable {\n    private $elements = [ 0 => 'foo', 2 => 'bar' ];\n    function bsonSerialize(): array {\n      return array_values($this->elements);\n    }\n  }\n  function bsonSerialize(): array {\n      return [ 'things' => $this->things ];\n  }\n} // => { \"things\" : [ \"foo\", \"bar\" ] }\n\nclass ContainerClass implements MongoDB\\BSON\\Serializable {\n  public $things = AnotherClass6 implements MongoDB\\BSON\\Serializable {\n    private $elements = [ 'foo', 'bar' ];\n    function bsonSerialize(): array {\n      return (object) $this->elements;\n    }\n  }\n  function bsonSerialize(): array {\n      return [ 'things' => $this->things ];\n  }\n} // => { \"things\" : { \"0\" : \"foo\", \"1\" : \"bar\" } }\n\nclass UpperClass implements MongoDB\\BSON\\Persistable {\n  public $foo = 42;\n  protected $prot = \"wine\";\n  private $fpr = \"cheese\";\n  function bsonSerialize(): array {\n      return [ 'foo' => $this->foo, 'prot' => $this->prot ];\n  }\n} // => { \"foo\" : 42, \"prot\" : \"wine\", \"__pclass\" : { \"$type\" : \"80\", \"$binary\" : \"VXBwZXJDbGFzcw==\" } }\n```\n","title":"Серіалізація у BSON","contentType":2,"navigation":[{"mongodb.persistence.md":"« Постійні дані"},{"mongodb.persistence.deserialization.md":"Десеріалізація з BSON »"},{"index.md":"PHP Manual"},{"mongodb.persistence.md":"Постійні дані"}]}},"__N_SSG":true}