{"pageProps":{"page":{"slug":"8.2.md","content":"# PHP 8.2 – велике оновлення PHP.  \nВоно містить безліч нових можливостей, включаючи readonly-класи, самостійні типи null, false і true, застарілі динамічні властивості, покращення продуктивності та багато іншого.\n\n[Переходьте на PHP 8.2!](https://www.php.net/downloads)\n\n## Readonly-класи [RFC](https://wiki.php.net/rfc/readonly_classes) [Документація](/manual/uk/language.oop5.basic.php#language.oop5.basic.class.readonly)\n\nPHP < 8.2\n\n```php_no_run\n<?php\n\nclass BlogData\n{\n    public readonly string $title;\n\n    public readonly Status $status;\n\n    public function __construct(string $title, Status $status)\n    {\n        $this->title = $title;\n        $this->status = $status;\n    }\n}\n```\n\nPHP 8.2\n\n```php\n<?php\n\nreadonly class BlogData\n{\n    public string $title;\n\n    public Status $status;\n\n    public function __construct(string $title, Status $status)\n    {\n        $this->title = $title;\n        $this->status = $status;\n    }\n}\n```\n\n## Типи у вигляді диз'юнктивної нормальної форми (ДНФ) [RFC](https://wiki.php.net/rfc/dnf_types) [Документація](/manual/uk/migration82.new-features.php#migration82.new-features.core.type-system)\n\nPHP < 8.2\n\n```php_no_run\n<?php\n\nclass Foo {\n    public function bar(mixed $entity) {\n        if ((($entity instanceof A) && ($entity instanceof B)) || ($entity === null)) {\n            return $entity;\n        }\n\n        throw new Exception('Invalid entity');\n    }\n}\n```\n\nPHP 8.2\n\n```php\n\n<?php\nclass Foo {\n    public function bar((A&B)|null $entity) {\n        return $entity;\n    }\n}\n```\n\nДНФ дозволяє поєднати [об'єднання](/manual/uk/language.types.type-system.php#language.types.type-system.composite.union) і [перетини](/manual/uk/language.types.type-system.php#language.types.type-system.composite.intersection) типів, при цьому обов'язково типи перетину слід згрупувати дужками.\n\n## Самостійні типи `null` `false` і `true` [RFC](https://wiki.php.net/rfc/null-false-standalone-types) [RFC](https://wiki.php.net/rfc/true-type)\n\nPHP < 8.2\n\n```php_no_run\n<?php\n\nclass Falsy\n{\n    public function almostFalse(): bool { /* ... */ *}\n\n    public function almostTrue(): bool { /* ... */ *}\n\n    public function almostNull(): string|null { /* ... */ *}\n}\n```\n\nPHP 8.2\n\n```php\n<?php\n\nclass Falsy\n{\n    public function alwaysFalse(): false { /* ... */ *}\n\n    public function alwaysTrue(): true { /* ... */ *}\n\n    public function alwaysNull(): null { /* ... */ *}\n}\n```\n\n## Новий модуль \"Random\" [RFC](https://wiki.php.net/rfc/rng_extension) [RFC](https://wiki.php.net/rfc/random_extension_improvement) [Документація](/manual/uk/book.random.php)\n\nPHP 8.2\n\n```php\n<?php\nuse Random\\Engine\\Xoshiro256StarStar;\nuse Random\\Randomizer;\n\n$blueprintRng = new Xoshiro256StarStar(\n    hash('sha256', \"Example seed that is converted to a 256 Bit string via SHA-256\", true)\n);\n\n$fibers = [];\nfor ($i = 0; $i < 8; $i++) {\n    $fiberRng = clone $blueprintRng;\n    // Xoshiro256**'s 'jump()' method moves the blueprint ahead 2**128 steps, as if calling\n    // 'generate()' 2**128 times, giving the Fiber 2**128 unique values without needing to reseed.\n    $blueprintRng->jump();\n\n    $fibers[] = new Fiber(function () use ($fiberRng, $i): void {\n        $randomizer = new Randomizer($fiberRng);\n\n        echo \"{$i}: \" . $randomizer->getInt(0, 100), PHP_EOL;\n    });\n}\n\n// The randomizer will use a CSPRNG by default.\n$randomizer = new Randomizer();\n\n// Even though the fibers execute in a random order, they will print the same value\n// each time, because each has its own unique instance of the RNG.\n$fibers = $randomizer->shuffleArray($fibers);\nforeach ($fibers as $fiber) {\n    $fiber->start();\n}\n```\n\nМодуль \"random\" пропонує новий об'єктно-орієнтований API для створення випадкових чисел. Замість використання глобального генератора випадкових чисел (ГВЧ) на базі алгоритму вихору Мерсенна, в об'єктно-орієнтованому API є кілька ГВЧ, представлених окремими класами (як реалізації інтерфейсу Engine), які зберігають внутрішній стан, дозволяючи створювати кілька незалежних послідовностей випадкових чисел.\n\nКласс`\\Random\\Randomizer` представляє високорівневий інтерфейс використання движків для генерації випадкового цілого числа, перемішування масиву або рядку, вибору випадкових ключів масиву і багато іншого.\n\n## Константи у трейтах [RFC](https://wiki.php.net/rfc/constants_in_traits) [Документація](/manual/uk/migration82.new-features.php#migration82.new-features.core.constant-in-traits)\n\nPHP 8.2\n\n```php\n<?php\n\ntrait Foo\n{\n    public const CONSTANT = 1;\n}\n\nclass Bar\n{\n    use Foo;\n}\n\nvar_dump(Bar::CONSTANT); // 1\nvar_dump(Foo::CONSTANT); // Error\n```\n\nНе можна отримати доступ до константи через ім'я трейту, але можна через клас, який використовує цей трейт.\n\n## Динамічні властивості оголошені застарілими [RFC](https://wiki.php.net/rfc/deprecate_dynamic_properties) [Документація](/manual/uk/migration82.deprecated.php#migration82.deprecated.core.dynamic-properties)\n\nPHP < 8.2\n\n```php_no_run\n<?php\n\nclass User\n{\n    public $name;\n}\n\n$user = new User();\n$user->last_name = 'Doe';\n\n$user = new stdClass();\n$user->last_name = 'Doe';\n```\n\nPHP 8.2\n\n```php\n<?php\n\nclass User\n{\n    public $name;\n}\n\n$user = new User();\n$user->last_name = 'Doe'; // Deprecated notice\n\n$user = new stdClass();\n$user->last_name = 'Doe'; // Still allowed\n```\n\nЩоб допомогти уникнути помилок й міспрінтів, більше не рекомендується визначати динамічні властивості, тільки якщо сам клас явно не дозволить це за допомогою атрибуту `#[\\AllowDynamicProperties]`. В примірниках `stdClass` як і раніше, можна використовувати динамічні властивості.\n\nЦя зміна не впливає на використання магічних методів `__get`/ `__set`\n\n## Нові класи, інтерфейси та функції\n\n-   Нова функція [`mysqli_execute_query`](/manual/uk/mysqli.execute-query.php) і метод[`mysqli::execute_query`](/manual/uk/mysqli.execute-query.php)\n-   Нові атрибути [`#[\\AllowDynamicProperties]`](/manual/uk/class.allow-dynamic-properties.php) і [`#[\\SensitiveParameter]`](/manual/uk/class.sensitive-parameter.php)\n-   Нові методи [`ZipArchive::getStreamIndex`](/manual/uk/ziparchive.getstreamindex.php) [`ZipArchive::getStreamName`](/manual/uk/ziparchive.getstreamname.php) і [`ZipArchive::clearError`](/manual/uk/ziparchive.clearerror.php)\n-   Нові методи [`ReflectionFunction::isAnonymous`](/manual/uk/reflectionfunction.isanonymous.php) і [`ReflectionMethod::hasPrototype`](/manual/uk/reflectionmethod.hasprototype.php)\n-   Нові функції [`curl_upkeep`](/manual/uk/function.curl_upkeep.php) [`memory_reset_peak_usage`](/manual/uk/function.memory-reset-peak-usage.php) [`ini_parse_quantity`](/manual/uk/function.ini-parse-quantity.php) [`libxml_get_external_entity_loader`](/manual/uk/function.libxml-get-external-entity-loader.php) [`sodium_crypto_stream_xchacha20_xor_ic`](/manual/uk/function.sodium-crypto-stream-xchacha20-xor-ic.php) [`openssl_cipher_key_length`](/manual/uk/function.openssl-cipher-key-length.php)\n\n## Застаріла функціональність та зміни у зворотній сумісності\n\n-   Інтерполяції рядків виду `${}` слід уникати.\n-   Не рекомендується використовувати функції [`utf8_encode`](/manual/uk/function.utf8-encode.php) і [`utf8_decode`](/manual/uk/function.utf8-decode.php)\n-   У методів [`DateTime::createFromImmutable`](/manual/uk/datetime.createfromimmutable.php) і [`DateTimeImmutable::createFromMutable`](/manual/uk/datetimeimmutable.createfrommutable.php) заданий попередній тип значення, що повертає `static`\n-   Модулі `ODBC` і `PDO_ODBC` екранують ім'я користувача та пароль.\n-   При роботі функції [`strtolower`](/manual/uk/function.strtolower.php) і [`strtoupper`](/manual/uk/function.strtoupper.php) тепер не зважають на локаль.\n-   Методи [`SplFileObject::getCsvControl`](/manual/uk/splfileobject.getcsvcontrol.php) [`SplFileObject::fflush`](/manual/uk/splfileobject.fflush.php) [`SplFileObject::ftell`](/manual/uk/splfileobject.ftell.php) [`SplFileObject::fgetc`](/manual/uk/splfileobject.fgetc.php) і [`SplFileObject::fpassthru`](/manual/uk/splfileobject.fpassthru.php) посилюють свою сигнатуру.\n-   У метода [`SplFileObject::hasChildren`](/manual/uk/splfileobject.haschildren.php) попередній тип значення, що повертається заданий як `false`\n-   У метода[`SplFileObject::getChildren`](/manual/uk/splfileobject.getchildren.php) попередній тип значення, що повертається заданий як `null`\n-   Внутренний метод `SplFileInfo::_bad_state_ex` оголошено застарілим.\n\n## Вище продуктивність, краще синтаксис, надійніша система типів.\n\n[Переходьте на PHP 8.2!](https://www.php.net/downloads)\n\nЩоб завантажити вихідний код PHP 8.2, відвідайте сторінку [Downloads](https://www.php.net/downloads). Бінарні файли Windows знаходяться на сайті [PHP for Windows](https://windows.php.net/download). Список змін можна знайти на сторінці [ChangeLog](https://www.php.net/ChangeLog-8.php#PHP_8_2)\n\n[Руководство по міграции](/manual/uk/migration82.php) у розділі документації. Ознайомтеся з ним, щоб дізнатися про всі нові можливості та зміни, що стосуються зворотної сумісності.\n","title":"8.2","contentType":2}},"__N_SSG":true}