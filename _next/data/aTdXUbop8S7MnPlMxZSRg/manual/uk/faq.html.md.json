{"pageProps":{"page":{"slug":"faq.html.md","content":"# PHP та HTML\n\nPHP та HTML тісно взаємодіють: PHP може генерувати HTML, а HTML може передавати інформацію PHP. Перед читанням питань у цьому розділі важливо, щоб ви розуміли як [отримувати змінні ззовні PHP](language.variables.external.md). Сторінки посібника з цієї теми містять багато прикладів.\n\n1.  [Яке кодування/декодування я повинен виконувати під час передачі значення через форму/URL?](#faq.md.encoding)\n    \n2.  [Я намагаюся використати , але змінні $foo.x та $foo.y недоступні. $\\_GET\\['foo.x'\\] теж немає. Де вони?](#faq.md.form-image)\n    \n3.  [Як створити масиви в HTML](#faq.md.arrays)\n    \n    [?](#faq.md.arrays)\n    \n4.  [Як отримати всі результати з HTML-тегу select із атрибутом multiple?](#faq.md.select-multiple)\n    \n5.  [Як я можу передати змінну з JavaScript до PHP?](#faq.md.javascript-variable)\n    \n\n**Яке кодування/декодування я повинен виконувати під час передачі значення через форму/URL?**\n\nТут кілька етапів, на яких кодування є важливим. Припустимо, що у вас є $data типу string, що містить рядок, який ви хочете передати без кодування. Ось ці етапи:\n\n-   Інтерпретація HTML. Для того, щоб задати довільний рядок, ви*повинні*укласти її в подвійні лапки і використовувати[htmlspecialchars()](function.mdspecialchars.md)для кодування.\n    \n-   URL: URL складається з кількох частин. Якщо ви хочете, щоб ваші дані були сприйняті як один елемент, ви*повинні*закодувати їх за допомогою[urlencode()](function.urlencode.md)\n    \n\n**Приклад #1 Прихований елемент HTML-форми**\n\n```php\n<?php\n    echo '<input type=\"hidden\" value=\"' . htmlspecialchars($data) . '\" />'.\"\\n\";\n?>\n```\n\n> **Зауваження**: Використовувати [urlencode()](function.urlencode.md) для $data неправильно, тому що кодувати дані в [urlencode()](function.urlencode.md) це обов'язок браузера. Усі популярні браузери роблять це правильно. Зауважте, що це відбувається незалежно від методу (наприклад, GET або POST). Ви помітите це лише у випадку GET-запиту, оскільки POST-запити зазвичай приховані.\n\n**Приклад #2 Дані, що редагуються користувачем**\n\n```php\n<?php\n    echo \"<textarea name='mydata'>\\n\";\n    echo htmlspecialchars($data).\"\\n\";\n    echo \"</textarea>\";\n?>\n```\n\n> **Зауваження**: Дані показуються браузером як передбачається, тому що браузер інтерпретуватиме екрановані HTML-символи. При надсиланні через GET або POST дані будуть закодовані (urlencoded) браузером для передачі та декодовані (urldecoded) PHP. Тому вам не потрібно виконувати будь-яке кодування/декодування url самостійно, все обробляються автоматично.\n\n**Приклад #3 В URL**\n\n```php\n<?php\n    echo '<a href=\"' . htmlspecialchars(\"/nextpage.php?stage=23&data=\" .\n        urlencode($data)) . '\">'.\"\\n\";\n?>\n```\n\n> **Зауваження**: Насправді ви підробляєте HTML GET-запитом, тому необхідно вручну закодувати ([urlencode()](function.urlencode.md)) Дані.\n\n> **Зауваження**: Вам надо применить[htmlspecialchars()](function.mdspecialchars.md) до всього URL, тому що URL з'являється як значення HTML-атрибута. У цьому випадку браузер спочатку розкодує все значення (зворотна операція [htmlspecialchars()](function.mdspecialchars.md)) і потім передає URL-адресу. PHP зрозуміє URL правильно, так як ви закодували дані з [urlencode()](function.urlencode.md). Ви помітите, що `&` в URL замінюється на `&amp;`. Хоча більшість браузерів це виправляють, якщо ви забудете про це, але все ж таки це не завжди можливо. Тому, навіть якщо ваш URL не динамічний, вам *треба* закодувати його за допомогою [htmlspecialchars()](function.mdspecialchars.md)\n\n**Я намагаюся використати , але змінні $foo.x і $foo.y недоступні . [$\\_GET\\['foo.x'\\]](reserved.variables.get.md) теж немає. Де вони?**\n\nПри надсиланні форми, замість стандартної кнопки відправки можна використовувати зображення з тегом як:\n\nКоли користувач клікає десь на картинці, серверу буде надіслано супутню форму з двома додатковими змінними: foo.x і foo.y.\n\nТак як імена foo.x і foo.y не дозволені в PHP, вони автоматично перетворюються на foo\\_x та foo\\_y. Тобто точки замінюються на підкреслення. Таким чином, ви звертаєтесь до цих змінних так само, як і до будь-яких інших, описаних у розділі про отримання [змінних ззовні PHP](language.variables.external.md)НаПриклад,[$\\_GET\\['foo\\_x'\\]](reserved.variables.get.md)\n\n> **Зауваження** :\n> \n> Пробіли в іменах змінних запиту перетворюються на підкреслення.\n\n**Як створити масиви в HTML ?**\n\nДля того, щоб результати були передані вашому PHP скрипту як [масив](language.types.array.md), іменуйте елементи илиследующим образом:\n\n   \n\nЗауважте квадратні дужки після імені змінної, це робить її масивом. Ви можете згрупувати елементи в масив, присвоюючи одне й те саме ім'я різним елементам:\n\n   \n\nЦе створить два масиви, MyArray та MyOtherArray, які будуть передані PHP-скрипту. Також можна задати певні ключі для ваших масивів:\n\n   \n\nМасив AnotherArray тепер міститиме ключі 0, 1, email та phone.\n\n> **Зауваження** :\n> \n> Визначати ключі масивів HTML необов'язково. Якщо ви не встановите ключі, масив заповнюється у порядку появи елементів у формі. Наш перший приклад буде містити ключі 0, 1, 2 та 3.\n\nТакже смотрите [Функції для роботи з масивами](ref.array.md) и [Змінні ззовні PHP](language.variables.external.md)\n\n**Як отримати всі результати з HTML-тегу select із атрибутом multiple?**\n\nHTML-тег select із зазначеним multiple дозволяє користувачеві вибрати кілька елементів зі списку. Ці елементи потім передаються обробнику форми. Проблема в тому, що всі вони передані з одним і тим же ім'ям. Наприклад:\n\nКожна обрана опція надійде обробнику форми як: var=option1 var=option2 var=option3 Кожна опція перезаписуватиме вміст попередньої змінної $var. Рішення - скористатися можливістю PHP - \"масив із елемента форми\". Слід використовувати таке:\n\nЦе вкаже PHP обробляти $var як масив і кожне присвоювання значення var\\[\\] додасть елемент масив. Першим елементом буде $var\\[ \\], наступним - $var\\[ \\]и т.д. Функция[count()](function.count.md) може бути використана для визначення, скільки елементів було вибрано, а функція [sort()](function.sort.md) - для сортування масиву опцій, якщо це потрібно.\n\nЗауважте, що якщо ви використовуєте JavaScript, то `[]` у імені елемента можуть викликати проблеми, якщо ви намагаєтеся звертатися до елемента на ім'я. Замість цього використовуйте числовий ідентифікатор елемента форми або введіть ім'я змінної в одинарні лапки і використовуйте його як індекс масиву елементів, наприклад:\n\n```\nvariable = document.forms[0].elements['var[]']; \n```\n\n**Як я можу передати змінну з JavaScript до PHP?**\n\nОскільки JavaScript є (зазвичай) клієнтською технологією, а PHP, як правило, серверною, і оскільки HTML - протокол \"без стану\", ці дві мови не можуть обмінюватися змінними безпосередньо.\n\nОднак, можна передавати змінні між ними. Один із способів досягти цього - згенерувати JavaScript-код із PHP і примусово оновлювати браузер, посилаючи певні змінні назад PHP-скрипту. Нижченаведений приклад показує як це зробити - він дозволяє PHP-коду отримати висоту та ширину екрана, що, зазвичай, можливе лише на стороні клієнта.\n\n**Приклад #4 Генерування JavaScript з PHP**\n\n```php\n\\\\n\"; echo \"Высота экрана: \". $\\_GET\\['height'\\] .\"\\\\n\"; } else { // передаём переменные с размерами // (сохраняем оригинальную строку запроса // -- post переменные нужно будет передавать другим способом) echo \"\\\\n\"; echo \" location.href=\\\\\"${\\_SERVER\\['SCRIPT\\_NAME'\\]}?${\\_SERVER\\['QUERY\\_STRING'\\]}\" . \"&width=\\\\\" + screen.width + \\\\\"&height=\\\\\" + screen.height;\\\\n\"; echo \"\\\\n\"; exit(); } ?> \n```\n","title":"PHP та HTML","contentType":2,"navigation":[{"faq.passwords.md":"« Хешування паролів"},{"faq.com.md":"PHP та COM »"},{"index.md":"PHP Manual"},{"faq.md":"ЧАВО"}]}},"__N_SSG":true}