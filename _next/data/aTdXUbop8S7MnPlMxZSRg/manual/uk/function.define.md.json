{"pageProps":{"page":{"slug":"function.define.md","content":"# define\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\ndefine — Визначає іменовану константу\n\n### Опис\n\n```methodsynopsis\ndefine(string $constant_name, mixed $value, bool $case_insensitive = false): bool\n```\n\nВизначає іменовану константу під час виконання.\n\n### Список параметрів\n\n`constant_name`\n\nІм'я константи.\n\n> **Зауваження** :\n> \n> Можна визначити константи за допомогою функції **define()** зарезервованими або навіть некоректними іменами, значення яких можуть (тільки) отримані через функцію [constant()](function.constant.md). Однак робити це не рекомендується.\n\n`value`\n\nЗначення константи. У PHP 5 `value` має бути скалярним значенням (int, float, string, bool або **`null`**). У PHP 7 також можна використовувати тип array.\n\n**Увага**\n\nХоча можливо визначити константи з типом resource, це не рекомендується робити, оскільки може призвести до непередбачуваної поведінки.\n\n`case_insensitive`\n\nЕсли параметр установлен как\\*\\*`true`\\*\\*, то константа буде визначено без урахування регістру. За умовчанням константа чутлива до регістру, тобто `CONSTANT`и`Constant` представляють різні значення.\n\n**Увага**\n\nПочинаючи з PHP 7.3.0, визначення нечутливих до регістру констант оголошено застарілим. Починаючи з PHP 8.0.0, допустимим значенням є лише **`false`**, передача\\*\\*`true`\\*\\* Викликає попередження.\n\n> **Зауваження** :\n> \n> Нечутливі до регістру константи зберігаються у нижньому регістрі.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Передача\\*\\*`true`\\*\\*в`case_insensitive` тепер видає помилку рівня **`E_WARNING`**Передача**`false`** все ще дозволено. |\n| 7.3.0 | Параметр`case_insensitive` оголошено застарілим та буде видалено у версії 8.0.0. |\n| 7.0.0 | Допустимі значення типу array. |\n\n### Приклади\n\n**Приклад #1 Визначення констант**\n\n```php\n<?php\ndefine(\"CONSTANT\", \"Hello world.\");\necho CONSTANT; // выводит \"Hello world.\"\necho Constant; // выводит \"Constant\" и выдаёт уведомление.\n\ndefine(\"GREETING\", \"Hello you.\", true);\necho GREETING; // выводит \"Hello you.\"\necho Greeting; // выводит \"Hello you.\"\n\n// Начиная с PHP 7\ndefine('ANIMALS', array(\n    'собака',\n    'кошка',\n    'птица'\n));\necho ANIMALS[1]; // выводит \"кошка\"\n\n?>\n```\n\n**Приклад #2 Визначення констант зарезервованими іменами**\n\nЦей приклад демонструє *можливість* визначення константи з тим самим ім'ям, що й [магічна константа](language.constants.predefined.md). Оскільки це, очевидно, поведінка, що збиває з пантелику, не рекомендується робити це на практиці.\n\n```php\n<?php\nvar_dump(defined('__LINE__'));\nvar_dump(define('__LINE__', 'test'));\nvar_dump(constant('__LINE__'));\nvar_dump(__LINE__);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(false)\nbool(true)\nstring(4) \"test\"\nint(5)\n```\n\n### Дивіться також\n\n-   [defined()](function.defined.md) \\- Перевіряє існування вказаної іменованої константи\n-   [constant()](function.constant.md) \\- Повертає значення константи\n-   Смотрите раздел [Константи](language.constants.md)\n","title":"define","contentType":2,"navigation":[{"function.constant.md":"« constant"},{"function.defined.md":"defined »"},{"index.md":"PHP Manual"},{"ref.misc.md":"Різні функції"}]}},"__N_SSG":true}