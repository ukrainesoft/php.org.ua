{"pageProps":{"page":{"slug":"ffi.new.md","content":"# FFI::new\n\n(PHP 7 >= 7.4.0, PHP 8)\n\nFFI::new — Створює структуру даних C\n\n### Опис\n\n```methodsynopsis\npublic static FFI::new(FFI\\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\\CData\n```\n\n```methodsynopsis\npublic FFI::new(FFI\\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\\CData\n```\n\nСтворює нативну структуру даних заданого типу. При статичному виклику даного методу необхідно використовувати лише визначені імена типів С (такі як `int` `char`, і т.д.); при виклик як метод об'єкта, припустимо будь-який тип оголошений йому.\n\n### Список параметрів\n\n`type`\n\n`type` - коректна декларація типу С, наприклад, string або заздалегідь створений об'єкт класу [FFI\\\\CType](class.ffi-ctype.md)\n\n`owned`\n\nЧи створювати керовані чи некеровані дані. Керовані дані живуть у зв'язці з повернутим об'єктом [FFI\\\\CData](class.ffi-cdata.md) і вивільняється, коли стандартний підрахунок посилань PHP або GC (збирач сміття) звільнять останнє посилання на цей об'єкт. Некеровані дані необхідно вивільняти вручну за допомогою [FFI::free()](ffi.free.md)\n\n`persistent`\n\nЧи мати дані на постійній основі до системної купи (heap) (використовуючи **malloc()**), або в купі запиту PHP (використовуючи **emalloc()**\n\n### Значення, що повертаються\n\nПовертає новий об'єкт [FFI\\\\CData](class.ffi-cdata.md)или\\*\\*`null`\\*\\*в случае возникновения ошибки.\n","title":"FFI::new","contentType":2,"navigation":[{"ffi.memset.md":"« FFI::memset"},{"ffi.scope.md":"FFI::scope »"},{"index.md":"PHP Manual"},{"class.ffi.md":"FFI"}]}},"__N_SSG":true}