{"pageProps":{"page":{"slug":"numberformatter.create.md","content":"# NumberFormatter::create\n\n# numfmt\\_create\n\n# NumberFormatter::\\_\\_construct\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL intl >= 1.0.0)\n\nNumberFormatter::create -- numfmt\\_create -- NumberFormatter::\\_\\_construct — Створює засіб форматування чисел\n\n### Опис\n\nОб'єктно-орієнтований стиль (метод)\n\n```methodsynopsis\npublic static NumberFormatter::create(string $locale, int $style, ?string $pattern = null): ?NumberFormatter\n```\n\nПроцедурний стиль\n\n```methodsynopsis\nnumfmt_create(string $locale, int $style, ?string $pattern = null): ?NumberFormatter\n```\n\nОб'єктно-орієнтований стиль (конструктор):\n\npublic **NumberFormatter::\\_\\_construct**(string`$locale`, int`$style`, ?string`$pattern` **`null`**) .\n\nСтворює засіб форматування чисел.\n\n### Список параметрів\n\n`locale`\n\nЛокаль, у якій буде відформатовано число (назва локалі, наприклад, en\\_CA).\n\n`style`\n\nСтиль форматування, одна з констант [стилю форматування](class.numberformatter.md#intl.numberformatter-constants.unumberformatstyle). Якщо передано **`NumberFormatter::PATTERN_DECIMAL`** або **`NumberFormatter::PATTERN_RULEBASED`**, то формат числа відкривається з використанням даного шаблону, який повинен відповідати синтаксису, описаному в [» документації ICU DecimalFormat](https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classDecimalFormat.md) або [» документації ICU RuleBasedNumberFormat](https://unicode-org.github.io/icu/userguide/format_parse/numbers/rbnf.md)відповідно.\n\n`pattern`\n\nРядок шаблону, якщо для вибраного стилю потрібний шаблон.\n\n### Значення, що повертаються\n\nПовертає об'єкт [NumberFormatter](class.numberformatter.md)или\\*\\*`null`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `pattern` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** numfmt\\_create()\\*\\*\\*\\*\n\n```php\n<?php\n$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\n$fmt = numfmt_create( 'it', NumberFormatter::SPELLOUT );\necho numfmt_format($fmt, 1142).\"\\n\";\n?>\n```\n\n**Приклад #2 Приклад використання** NumberFormatter::create()\\*\\*\\*\\*\n\n```php\n<?php\n$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt = new NumberFormatter( 'it', NumberFormatter::SPELLOUT );\necho $fmt->format(1142).\"\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n1.234.567,891\nmillicentoquarantadue\n```\n\n### Дивіться також\n\n-   [numfmt\\_format()](numberformatter.format.md) \\- Форматує число\n-   [numfmt\\_parse()](numberformatter.parse.md) \\- Розбирає число\n","title":"NumberFormatter::create","contentType":2,"navigation":[{"class.numberformatter.md":"« NumberFormatter"},{"numberformatter.formatcurrency.md":"NumberFormatter::formatCurrency »"},{"index.md":"PHP Manual"},{"class.numberformatter.md":"NumberFormatter"}]}},"__N_SSG":true}