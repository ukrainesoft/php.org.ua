{"pageProps":{"page":{"slug":"class.intlbreakiterator.md","content":"# Клас IntlBreakIterator\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\n## Вступ\n\nІтератор переривання (Break iterator) - це об'єкт ICU, що надає методи для визначення меж у тексті (наприклад межі слова або речення). У PHP клас **IntlBreakIterator** служить базовим класом всім типів ітераторів переривання ICU. Є й додаткова функціональність, модуль intl може розширювати цей клас відповідними підкласами, такими як [IntlRuleBasedBreakIterator](class.intlrulebasedbreakiterator.md) або [IntlCodePointBreakIterator](class.intlcodepointbreakiterator.md)\n\nЦей клас реалізує інтерфейс [IteratorAggregate](class.iteratoraggregate.md)Traversing an Итерация**IntlBreakIterator** породжує невід'ємні цілі значення, що являють собою успішне знаходження кордонів у тексті, і рівні позиції знайденого символу UTF-8 відрахованої від початку тексту (позиція першого символу дорівнює ). Ключі повернутих значень являють собою послідовність натуральних чисел `{0, 1, 2, …}`\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class IntlBreakIterator\n    \n\n    \n     implements\n      IteratorAggregate {\n\n    /* Константы */\n    \n     public\n     const\n     int\n      DONE;\n\n    public\n     const\n     int\n      WORD_NONE;\n\n    public\n     const\n     int\n      WORD_NONE_LIMIT;\n\n    public\n     const\n     int\n      WORD_NUMBER;\n\n    public\n     const\n     int\n      WORD_NUMBER_LIMIT;\n\n    public\n     const\n     int\n      WORD_LETTER;\n\n    public\n     const\n     int\n      WORD_LETTER_LIMIT;\n\n    public\n     const\n     int\n      WORD_KANA;\n\n    public\n     const\n     int\n      WORD_KANA_LIMIT;\n\n    public\n     const\n     int\n      WORD_IDEO;\n\n    public\n     const\n     int\n      WORD_IDEO_LIMIT;\n\n    public\n     const\n     int\n      LINE_SOFT;\n\n    public\n     const\n     int\n      LINE_SOFT_LIMIT;\n\n    public\n     const\n     int\n      LINE_HARD;\n\n    public\n     const\n     int\n      LINE_HARD_LIMIT;\n\n    public\n     const\n     int\n      SENTENCE_TERM;\n\n    public\n     const\n     int\n      SENTENCE_TERM_LIMIT;\n\n    public\n     const\n     int\n      SENTENCE_SEP;\n\n    public\n     const\n     int\n      SENTENCE_SEP_LIMIT;\n\n\n    /* Методы */\n    \n   private __construct()\n\n    public static createCharacterInstance(?string $locale = null): ?IntlBreakIterator\npublic static createCodePointInstance(): IntlCodePointBreakIterator\npublic static createLineInstance(?string $locale = null): ?IntlBreakIterator\npublic static createSentenceInstance(?string $locale = null): ?IntlBreakIterator\npublic static createTitleInstance(?string $locale = null): ?IntlBreakIterator\npublic static createWordInstance(?string $locale = null): ?IntlBreakIterator\npublic current(): int\npublic first(): int\npublic following(int $offset): int\npublic getErrorCode(): int\npublic getErrorMessage(): string\npublic getLocale(int $type): string|false\npublic getPartsIterator(string $type = IntlPartsIterator::KEY_SEQUENTIAL): IntlPartsIterator\npublic getText(): ?string\npublic isBoundary(int $offset): bool\npublic last(): int\npublic next(?int $offset = null): int\npublic preceding(int $offset): int\npublic previous(): int\npublic setText(string $text): bool\n\n   }\n```\n\n## Обумовлені константи\n\n**`IntlBreakIterator::DONE`**\n\n**`IntlBreakIterator::WORD_NONE`**\n\n**`IntlBreakIterator::WORD_NONE_LIMIT`**\n\n**`IntlBreakIterator::WORD_NUMBER`**\n\n**`IntlBreakIterator::WORD_NUMBER_LIMIT`**\n\n**`IntlBreakIterator::WORD_LETTER`**\n\n**`IntlBreakIterator::WORD_LETTER_LIMIT`**\n\n**`IntlBreakIterator::WORD_KANA`**\n\n**`IntlBreakIterator::WORD_KANA_LIMIT`**\n\n**`IntlBreakIterator::WORD_IDEO`**\n\n**`IntlBreakIterator::WORD_IDEO_LIMIT`**\n\n**`IntlBreakIterator::LINE_SOFT`**\n\n**`IntlBreakIterator::LINE_SOFT_LIMIT`**\n\n**`IntlBreakIterator::LINE_HARD`**\n\n**`IntlBreakIterator::LINE_HARD_LIMIT`**\n\n**`IntlBreakIterator::SENTENCE_TERM`**\n\n**`IntlBreakIterator::SENTENCE_TERM_LIMIT`**\n\n**`IntlBreakIterator::SENTENCE_SEP`**\n\n**`IntlBreakIterator::SENTENCE_SEP_LIMIT`**\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Класс**IntlBreakIterator** тепер реалізує інтерфейс [IteratorAggregate](class.iteratoraggregate.md). . Раніше натомість було реалізовано інтерфейс [Traversable](class.traversable.md) |\n\n## Зміст\n\n-   [IntlBreakIterator::\\_\\_construct](intlbreakiterator.construct.md)— Закритий конструктор, який забороняє створення екземплярів об'єкту\n-   [IntlBreakIterator::createCharacterInstance](intlbreakiterator.createcharacterinstance.md)— Створює ітератор переривання меж комбінування послідовностей символів.\n-   [IntlBreakIterator::createCodePointInstance](intlbreakiterator.createcodepointinstance.md)— Створює ітератор переривання меж кодових точок.\n-   [IntlBreakIterator::createLineInstance](intlbreakiterator.createlineinstance.md)— Створює ітератор переривання для логічно можливих розривів рядків\n-   [IntlBreakIterator::createSentenceInstance](intlbreakiterator.createsentenceinstance.md) \\- Створює ітератор переривання для розривів речень\n-   [IntlBreakIterator::createTitleInstance](intlbreakiterator.createtitleinstance.md) \\- Створює ітератор переривання для розривів заголовків\n-   [IntlBreakIterator::createWordInstance](intlbreakiterator.createwordinstance.md) \\- Створює ітератор переривання для розривів слів\n-   [IntlBreakIterator::current](intlbreakiterator.current.md)— Повертає індекс поточної позиції\n-   [IntlBreakIterator::first](intlbreakiterator.first.md)— Встановлює позицію першого символу в тексті\n-   [IntlBreakIterator::following](intlbreakiterator.following.md)— Переміщає ітератор до першого кордону після вказаного усунення\n-   [IntlBreakIterator::getErrorCode](intlbreakiterator.geterrorcode.md)— Повертає останній код помилки об'єкту\n-   [IntlBreakIterator::getErrorMessage](intlbreakiterator.geterrormessage.md)— Повертає останнє повідомлення про помилку об'єкта\n-   [IntlBreakIterator::getLocale](intlbreakiterator.getlocale.md)— Повертає локаль, пов'язану з об'єктом\n-   [IntlBreakIterator::getPartsIterator](intlbreakiterator.getpartsiterator.md)— створює ітератор для переміщення фрагментів між кордонами.\n-   [IntlBreakIterator::getText](intlbreakiterator.gettext.md)— Повертає текст, що сканується.\n-   [IntlBreakIterator::isBoundary](intlbreakiterator.isboundary.md)— Повідомляє, чи є усунення зміщенням кордону\n-   [IntlBreakIterator::last](intlbreakiterator.last.md)— Встановлює позицію ітератора до індексу за останнім символом\n-   [IntlBreakIterator::next](intlbreakiterator.next.md)— Переміщує ітератор до наступного кордону\n-   [IntlBreakIterator::preceding](intlbreakiterator.preceding.md)— Встановлює позицію ітератора до першого кордону перед усуненням\n-   [IntlBreakIterator::previous](intlbreakiterator.previous.md)— Встановлює позицію ітератора на кордоні безпосередньо перед поточною\n-   [IntlBreakIterator::setText](intlbreakiterator.settext.md)— Встановлює сканований текст\n","title":"Клас IntlBreakIterator","contentType":2,"navigation":[{"transliterator.transliterate.md":"« Transliterator::transliterate"},{"intlbreakiterator.construct.md":"IntlBreakIterator::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.intl.md":"intl"}]}},"__N_SSG":true}