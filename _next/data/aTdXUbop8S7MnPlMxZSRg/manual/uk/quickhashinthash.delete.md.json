{"pageProps":{"page":{"slug":"quickhashinthash.delete.md","content":"# QuickHashIntHash::delete\n\n(PECL quickhash >= Unknown)\n\nQuickHashIntHash::delete — Метод видаляє запис із хешу\n\n### Опис\n\n```methodsynopsis\npublic QuickHashIntHash::delete(int $key): bool\n```\n\nМетод видаляє запис з хешу і повертає, чи цей запис видалено чи ні. Відповідні структури пам'яті буде звільнено не відразу, а при звільненні самого хеша.\n\nЕлементи не можна видалити, якщо хеш використовується в ітераторі. Метод не викине виняток, а просто поверне **`false`** як це сталося б за будь-якої іншої помилки видалення.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, який потрібно видалити.\n\n### Значення, що повертаються\n\nМетод возвращает\\*\\*`true`\\*\\*, якщо запис було видалено та **`false`**, якщо запис не видалено.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashIntHash::delete()\\*\\*\\*\\*\n\n```php\n<?php\n\n$hash = new QuickHashIntHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 5 ) );\nvar_dump( $hash->delete( 4 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->delete( 4 ) );\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\n```\n","title":"QuickHashIntHash::delete","contentType":2,"navigation":[{"quickhashinthash.construct.md":"« QuickHashIntHash::\\_\\_construct"},{"quickhashinthash.exists.md":"QuickHashIntHash::exists »"},{"index.md":"PHP Manual"},{"class.quickhashinthash.md":"QuickHashIntHash"}]}},"__N_SSG":true}