{"pageProps":{"page":{"slug":"recursiveiteratoriterator.construct.md","content":"# RecursiveIteratorIterator::\\_\\_construct\n\n(PHP 5 >= 5.1.3, PHP 7, PHP 8)\n\nRecursiveIteratorIterator::\\_\\_construct — Конструктор класу RecursiveIteratorIterator\n\n### Опис\n\npublic **RecursiveIteratorIterator::\\_\\_construct** [Traversable](class.traversable.md) `$iterator`, int`$mode`\\= RecursiveIteratorIterator::LEAVES\\_ONLY, int`$flags`\n\nСтворює новий об'єкт класу [RecursiveIteratorIterator](class.recursiveiteratoriterator.md) на основі об'єкта [RecursiveIterator](class.recursiveiterator.md)\n\n### Список параметрів\n\n`iterator`\n\nОб'єкт-ітератор, на основі якого потрібно побудувати цей екземпляр. Це може бути об'єкт класу [RecursiveIterator](class.recursiveiterator.md)или класса[IteratorAggregate](class.iteratoraggregate.md)\n\n`mode`\n\nНеобов'язковий параметр. Завдання режиму роботи архітектора. Можливі значення:\n\n-   \\*\\*`RecursiveIteratorIterator::LEAVES_ONLY`\\*\\*- За замовчуванням. Ітерація здійснюватиметься лише з листів дерева елементів.\n-   \\*\\*`RecursiveIteratorIterator::SELF_FIRST`\\*\\*- Ітерація здійснюватиметься по всьому дереву елементів, причому першими будуть батьківські елементи.\n-   \\*\\*`RecursiveIteratorIterator::CHILD_FIRST`\\*\\*- Ітерація буде здійснюватись по всьому дереву елементів, причому першими будуть йти дочірні елементи.\n\n`flags`\n\nНеобов'язковий прапор. Можливе значення **`RecursiveIteratorIterator::CATCH_GET_CHILD`** дає розпорядження об'єкту не брати до уваги винятки, які викликає метод **RecursiveIteratorIterator::getChildren()**\n\n### Приклади\n\n**Приклад #1 Ітерація з дерева елементів за допомогою RecursiveIteratorIterator**\n\n```php\n<?php\n$array = array(\n    array(\n        array(\n            array(\n                'leaf-0-0-0-0',\n                'leaf-0-0-0-1'\n            ),\n            'leaf-0-0-0'\n        ),\n        array(\n            array(\n                'leaf-0-1-0-0',\n                'leaf-0-1-0-1'\n            ),\n            'leaf-0-1-0'\n        ),\n        'leaf-0-0'\n    )\n);\n\n$iterator = new RecursiveIteratorIterator(\n    new RecursiveArrayIterator($array),\n    $mode\n);\nforeach ($iterator as $key => $leaf) {\n    echo \"$key => $leaf\", PHP_EOL;\n}\n?>\n```\n\nВиведення прикладу в режимі `$mode = RecursiveIteratorIterator::LEAVES_ONLY`\n\n```\n0 => leaf-0-0-0-0\n1 => leaf-0-0-0-1\n0 => leaf-0-0-0\n0 => leaf-0-1-0-0\n1 => leaf-0-1-0-1\n0 => leaf-0-1-0\n0 => leaf-0-0\n```\n\nВиведення прикладу в режимі `$mode = RecursiveIteratorIterator::SELF_FIRST`\n\n```\n0 => Array\n0 => Array\n0 => Array\n0 => leaf-0-0-0-0\n1 => leaf-0-0-0-1\n1 => leaf-0-0-0\n1 => Array\n0 => Array\n0 => leaf-0-1-0-0\n1 => leaf-0-1-0-1\n1 => leaf-0-1-0\n2 => leaf-0-0\n```\n\nВиведення прикладу в режимі `$mode = RecursiveIteratorIterator::CHILD_FIRST`\n\n```\n0 => leaf-0-0-0-0\n1 => leaf-0-0-0-1\n0 => Array\n1 => leaf-0-0-0\n0 => Array\n0 => leaf-0-1-0-0\n1 => leaf-0-1-0-1\n0 => Array\n1 => leaf-0-1-0\n1 => Array\n2 => leaf-0-0\n0 => Array\n```\n","title":"RecursiveIteratorIterator::\\_\\_construct","contentType":2,"navigation":[{"recursiveiteratoriterator.callhaschildren.md":"« RecursiveIteratorIterator::callHasChildren"},{"recursiveiteratoriterator.current.md":"RecursiveIteratorIterator::current »"},{"index.md":"PHP Manual"},{"class.recursiveiteratoriterator.md":"RecursiveIteratorIterator"}]}},"__N_SSG":true}