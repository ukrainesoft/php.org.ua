{"pageProps":{"page":{"slug":"sqlite3.open.md","content":"# SQLite3::open\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nSQLite3::open — Відкрити базу даних SQLite\n\n### Опис\n\n```methodsynopsis\npublic SQLite3::open(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, string $encryptionKey = \"\"): void\n```\n\nВідкриває базу даних SQLite 3. Якщо збірка включає шифрування, вона намагатиметься використовувати ключ.\n\n### Список параметрів\n\n`filename`\n\nШлях до БД SQLite або `:memory:`для использования БД в памяти.\n\n`flags`\n\nОпціональні прапори використовуються визначення, як відкривати БД. За замовчуванням `SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE`\n\n-   `SQLITE3_OPEN_READONLY`: Відкрити БД тільки для читання\n    \n-   `SQLITE3_OPEN_READWRITE`: Відкрити БД для читання та запису.\n    \n-   `SQLITE3_OPEN_CREATE`: Створити БД, якщо її немає\n    \n\n`encryptionKey`\n\nОпціональний ключ для використання шифрування при роботі з БД. Якщо модуль шифрування не встановлений, ця опція не буде використана.\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання** SQLite3::open()\\*\\*\\*\\*\n\n```php\n<?php\n/**\n * Простой Приклад расширения класса SQLite3 и изменения параметров конструктора.\n * После чего использование метода open для инициализации БД.\n */\nclass MyDB extends SQLite3\n{\n    function __construct()\n    {\n        $this->open('mysqlitedb.db');\n    }\n}\n\n$db = new MyDB();\n\n$db->exec('CREATE TABLE foo (bar STRING)');\n$db->exec(\"INSERT INTO foo (bar) VALUES ('This is a test')\");\n\n$result = $db->query('SELECT bar FROM foo');\nvar_dump($result->fetchArray());\n?>\n```\n","title":"SQLite3::open","contentType":2,"navigation":[{"sqlite3.loadextension.md":"« SQLite3::loadExtension"},{"sqlite3.openblob.md":"SQLite3::openBlob »"},{"index.md":"PHP Manual"},{"class.sqlite3.md":"SQLite3"}]}},"__N_SSG":true}