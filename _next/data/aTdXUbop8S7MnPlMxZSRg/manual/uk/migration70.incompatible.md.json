{"pageProps":{"page":{"slug":"migration70.incompatible.md","content":"## Зміни, що ламають зворотну сумісність\n\n### Зміни в обробці помилок та винятків\n\nБагато фатальних і виправних фатальних помилок було перероблено у винятки в PHP 7. Ці винятки успадковують клас [Error](class.error.md), який, у свою чергу, реалізує інтерфейс [Throwable](class.throwable.md) (Новий базовий інтерфейс, який успадковують усі винятки).\n\nЦе означає, що користувальницькі обробники помилок можуть не бути викликані, тому що замість виклику помилки, буде викинуто виняток (породжуючи нові фатальні помилки через неперехоплені винятки класу [Error](class.error.md)\n\nБільш детальний опис того, як помилки працюють у PHP 7, можна знайти на сторінці [помилки PHP 7](language.errors.php7.md). Це керівництво лише перераховує зміни, які можуть призвести до зворотної несумісності.\n\n#### [set\\_exception\\_handler()](function.set-exception-handler.md) більше не гарантує отримання об'єкта класу [Exception](class.exception.md)\n\nКод, реализующий регистрацию обработчика исключений с помощью[set\\_exception\\_handler()](function.set-exception-handler.md), используя декларацию типа[Exception](class.exception.md), викличе фатальну помилку, якщо буде викинуто виняток [Error](class.error.md)\n\nЯкщо потрібна робота оброблювача в PHP 5 і 7, ви повинні прибрати оголошення класу з оброблювача. Якщо код передбачається використовувати тільки в PHP 7, то можна просто змінити тип з [Exception](class.exception.md)на[Throwable](class.throwable.md)\n\n```php\n<?php\n// Только PHP 5. В PHP 7 может вызвать фатальную ошибку.\nfunction handler(Exception $e) { ... }\nset_exception_handler('handler');\n\n// Будет работать PHP 5 и 7.\nfunction handler($e) { ... }\n\n// Только PHP 7.\nfunction handler(Throwable $e) { ... }\n?>\n```\n\n#### Вбудовані конструктори завжди викликають винятки у разі невдачі\n\nРаніше деякі внутрішні класи повертали **`null`** або марний об'єкт, коли конструктор зазнав невдачі. Усі вбудовані класи тепер у такому разі викидатимуть виняток [Exception](class.exception.md), Як це вже роблять користувальницькі класи.\n\n#### Ошибки разбора бросают исключение класса[ParseError](class.parseerror.md)\n\nОшибки разбора бросают исключение класса[ParseError](class.parseerror.md)Обработка ошибок[eval()](function.eval.md) повинна включати блок `catch`, який ловитиме цю помилку.\n\n#### Зміна суворості повідомлень E\\_STRICT\n\nВсі повідомлення **`E_STRICT`** перекваліфіковані за іншими рівнями. Константа **`E_STRICT`** збережено, так що `error_reporting(E_ALL|E_STRICT)` не викликає помилки.\n\n**Зміна суворості повідомлень **`E_STRICT`****\n\n| Ситуация | Новый уровень/поведение |\n| --- | --- |\n| Індексування ресурсом | **`E_NOTICE`** |\n| Абстрактні статичні методи | Повідомлення прибрано, не викликає помилки |\n| \"Перевизначення\" конструктора | Повідомлення прибрано, не викликає помилки |\n| Недотримання сигнатури при наслідуванні | **`E_WARNING`** |\n| Однакові (сумісні) властивості у двох різних трейтах | Повідомлення прибрано, не викликає помилки |\n| Нестатичний доступ до статичної властивості | **`E_NOTICE`** |\n| Тільки змінні можуть бути присвоєні за посиланням | **`E_NOTICE`** |\n| Тільки змінні можуть бути передані за посиланням | **`E_NOTICE`** |\n| Виклик нестатичного методу статично | **`E_DEPRECATED`** |\n\n### Зміни в обробці змінних\n\nPHP 7 використовує абстрактне синтаксичне дерево для аналізу файлів з вихідним кодом. Це дозволило внести безліч покращень у мову, які раніше були неможливі через обмеження парсера, що використовувався в попередніх версіях PHP, але призвело до видалення деяких особливих можливостей з міркувань узгодженості та порушило зворотну сумісність. Опис цих особливих випадків наведено у цій секції.\n\n#### Зміни в обробці непрямих змінних, властивостей та методів\n\nНепрямий доступ до змінних, властивостей та методів тепер розкривається строго зліва-направо, на противагу попередньому поєднанню зі спеціальних правил. У таблиці подано зміни у порядку розкриття.\n\n**Стара та нова оцінка непрямих виразів**\n\n| Выражение | Интерпретация PHP 5 | Интерпретация PHP 7 |\n| --- | --- | --- |\n| `$$foo['bar']['baz']` | `${$foo['bar']['baz']}` | `($$foo)['bar']['baz']` |\n| `$foo->$bar['baz']` | `$foo->{$bar['baz']}` | `($foo->$bar)['baz']` |\n| `$foo->$bar['baz']()` | `$foo->{$bar['baz']}()` | `($foo->$bar)['baz']()` |\n| `Foo::$bar['baz']()` | `Foo::{$bar['baz']}()` | `(Foo::$bar)['baz']()` |\n\nКод, який використовує старий порядок розкриття справа-ліворуч, повинен бути переписаний з використанням фігурних дужок (дивіться середній стовпець у таблиці вище). Це зробить код робочим як у PHP 5.x, так і в PHP 7.x.\n\nТакож це стосується і ключового слова [`global`](language.variables.scope.md#language.variables.scope.global). Для емуляції старої поведінки необхідно використовувати фігурні дужки:\n\n```php\n<?php\nfunction f() {\n    // Корректно только в PHP 5.\n    global $$foo->bar;\n\n    // Корректно в PHP 5 и 7.\n    global ${$foo->bar};\n}\n?>\n```\n\n#### Изменение в обработке[list()](function.list.md)\n\n##### [list()](function.list.md) більше не надає змінних у зворотному порядку\n\nТепер [list()](function.list.md) привласнює змінні тому порядку, як вони перераховані, а чи не у протилежному. Загалом це впливає тільки на випадки, коли [list()](function.list.md) використовується спільно з оператором масиву `[]`, як показано нижче:\n\n```php\n<?php\nlist($a[], $a[], $a[]) = [1, 2, 3];\nvar_dump($a);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\narray(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n```\n\nТакож хочеться відзначити, що покладатися на порядок присвоєння оператором [list()](function.list.md) \\- не самое разумное решение, поскольку он снова может поменяться в будущем.\n\n##### Пустое присвоение[list()](function.list.md)больше не разрешено\n\nКонструкция[list()](function.list.md) більше не може бути порожнім. Наступні приклади неприпустимі:\n\n```php\n<?php\nlist() = $a;\nlist(,,) = $a;\nlist($x, list(), $y) = $a;\n?>\n```\n\n##### [list()](function.list.md) не може розкривати рядки\n\n[list()](function.list.md) більше не може розкривати рядки. Використовуйте [str\\_split()](function.str-split.md)\n\n#### Змінено порядок масиву при автоматичному створенні через присвоєння за посиланням\n\nПорядок створення елементів у масиві було змінено, коли елемент створюється шляхом присвоєння значення змінної, яку посилається цей елемент. Приклад:\n\n```php\n<?php\n$array = [];\n$array[\"a\"] =& $array[\"b\"];\n$array[\"b\"] = 1;\nvar_dump($array);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\narray(2) {\n  [\"b\"]=>\n  &int(1)\n  [\"a\"]=>\n  &int(1)\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\narray(2) {\n  [\"a\"]=>\n  &int(1)\n  [\"b\"]=>\n  &int(1)\n}\n```\n\n#### Дужки навколо аргументів функції більше ні на що не впливають\n\nУ PHP 5 під час використання надлишкових дужок навколо аргументів функції не виводилося попередження, коли аргумент передавався за посиланням. Тепер попередження завжди виводиться.\n\n```php\n<?php\nfunction getArray() {\n    return [1, 2, 3];\n}\n\nfunction squareArray(array &$a) {\n    foreach ($a as &$v) {\n        $v **= 2;\n    }\n}\n\n// Выведет предупреждение в PHP 7.\nsquareArray((getArray()));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nNotice: Only variables should be passed by reference in /tmp/test.php on line 13\n```\n\n### Изменения[foreach](control-structures.foreach.md)\n\nНевеликі зміни були внесені до поведінки керуючої структури [foreach](control-structures.foreach.md). Основна зміна стосується модифікації масиву, що ітерується, і обробки його внутрішнього покажчика.\n\n#### [foreach](control-structures.foreach.md) більше не змінює внутрішній покажчик масиву\n\nДо PHP 7 в процессе итерации массива в[foreach](control-structures.foreach.md), його внутрішній покажчик змінювався. У прикладі нижче показано, що ця поведінка змінена:\n\n```php\n<?php\n$array = [0, 1, 2];\nforeach ($array as &$val) {\n    var_dump(current($array));\n}\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nint(1)\nint(2)\nbool(false)\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nint(0)\nint(0)\nint(0)\n```\n\n#### [foreach](control-structures.foreach.md) за значеннями оперує копією масиву\n\nЯкщо [foreach](control-structures.foreach.md) використовується для стандартного перебору за значенням, він оперує копією масиву, а чи не самим масивом. Це означає, що зміни внесені в масив усередині циклу не торкнуться значення, що перебираються.\n\n#### Для[foreach](control-structures.foreach.md) за посиланням покращили поведінку при ітерації\n\nКогда[foreach](control-structures.foreach.md) використовується для перебору за посиланням, він краще відстежуватиме зміни, що вносяться в масив у процесі ітерації. Наприклад, додавання елементів до масиву, що ітерується, призведе до того, що ці нові елементи потраплять у перебір:\n\n```php\n<?php\n$array = [0];\nforeach ($array as &$val) {\n    var_dump($val);\n    $array[1] = 1;\n}\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nint(0)\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nint(0)\nint(1)\n```\n\n#### Ітерація об'єктів, що не реалізують [Traversable](class.traversable.md)\n\nІтерація об'єктів, що не реалізують [Traversable](class.traversable.md) тепер відбувається так само, як і ітерація масиву за посиланням. Так виходить через те, що [покращення поведінки при зміні масиву під час ітерації](migration70.incompatible.md#migration70.incompatible.foreach.by-ref) також впливає при додаванні або видаленні властивостей об'єкта.\n\n### Зміна в обробці значень типу int\n\n#### Некоректна вісімкова нотація\n\nРаніше восьмеричні літерали, що містять некоректні числа, мовчки обрізалися (`0128` вважалися за `012`). Зараз у таких випадках буде видано помилку розбору.\n\n#### Негативні побітові усунення\n\nТепер побітові зміщення на негативну величину кидатимуть виняток [ArithmeticError](class.arithmeticerror.md) :\n\n```php\n<?php\nvar_dump(1 >> -1);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nint(0)\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nFatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2\nStack trace:\n#0 {main}\n  thrown in /tmp/test.php on line 2\n```\n\n#### Побітові усунення з виходом з допустимого діапазону\n\nПобітові зміщення (в обох напрямках) за межі ширини типу int завжди повертатимуть 0. Раніше поведінка залежала від архітектури.\n\n#### Зміна у розподілі на нуль\n\nРаніше використання нуля як дільника в операціях поділу (/) або поділу за модулем (%) призводило до помилки рівня E\\_WARNING та поверненню значення **`false`**. Тепер оператор поділу повертає число з плаваючою точкою, що дорівнює +INF, -INF або NAN, як визначено в IEEE 754. Поділ по модулю замість помилки рівня E\\_WARNING викидатиме виняток [DivisionByZeroError](class.divisionbyzeroerror.md)\n\n```php\n<?php\nvar_dump(3/0);\nvar_dump(0/0);\nvar_dump(0%0);\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nWarning: Division by zero in %s on line %d\nbool(false)\n\nWarning: Division by zero in %s on line %d\nbool(false)\n\nWarning: Division by zero in %s on line %d\nbool(false)\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nWarning: Division by zero in %s on line %d\nfloat(INF)\n\nWarning: Division by zero in %s on line %d\nfloat(NAN)\n\nPHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d\n```\n\n### Зміни у обробці рядків\n\n#### Шістнадцяткові рядки більше не рахуються за числові\n\nРядки, що містять шістнадцяткові символи більше не рахуються за числові. Приклад:\n\n```php\n<?php\nvar_dump(\"0x123\" == \"291\");\nvar_dump(is_numeric(\"0x123\"));\nvar_dump(\"0xe\" + \"0x1\");\nvar_dump(substr(\"foo\", \"0x1\"));\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nbool(true)\nbool(true)\nint(15)\nstring(2) \"oo\"\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nbool(false)\nbool(false)\nint(0)\n\nNotice: A non well formed numeric value encountered in /tmp/test.php on line 5\nstring(3) \"foo\"\n```\n\nИспользуйте функцию[filter\\_var()](function.filter-var.md) для перевірки рядка на утримання шістнадцяткового числа та перетворення цього рядка до значення типу int:\n\n```php\n<?php\n$str = \"0xffff\";\n$int = filter_var($str, FILTER_VALIDATE_INT, FILTER_FLAG_ALLOW_HEX);\nif (false === $int) {\n    throw new Exception(\"Некорректное целое число!\");\n}\nvar_dump($int); // int(65535)\n?>\n```\n\n#### `\\u{` може викликати помилки\n\nУ зв'язку з додаванням нового [синтаксису екранування кодів Unicode](migration70.new-features.md#migration70.new-features.unicode-codepoint-escape-syntax), рядки, що містять рядок `\\u{`, що передує некоректній послідовності, може призвести до фатальної помилки. Для того, щоб цього уникнути, необхідно екранувати перший зворотний сліш.\n\n### Віддалені функції\n\n#### **call\\_user\\_method()** і **call\\_user\\_method\\_array()**\n\nФункції, оголошені застарілими у PHP 4.1.0 на користь [call\\_user\\_func()](function.call-user-func.md) і [call\\_user\\_func\\_array()](function.call-user-func-array.md). Можливо, вам також буде цікаво розглянути можливість [звернення до функцій через змінні](functions.variable-functions.md)и/или оператор[`...`](functions.arguments.md#functions.variable-arg-list)\n\n#### Усі функції ereg\\*\n\nУсі функції `ereg` видалено. Рекомендована альтернатива - [PCRE](book.pcre.md)\n\n#### Псевдоніми [mcrypt](book.mcrypt.md)\n\nУстаревшая функция**mcrypt\\_generic\\_end()** була видалена на користь функції [mcrypt\\_generic\\_deinit()](function.mcrypt-generic-deinit.md)\n\nКрім цього, застарілі функції **mcrypt\\_ecb()** **mcrypt\\_cbc()** **mcrypt\\_cfb()** і **mcrypt\\_ofb()** були видалені на користь використання [mcrypt\\_decrypt()](function.mcrypt-decrypt.md) з відповідною константою **`MCRYPT_MODE_*`**\n\n#### Усі функції модуля mysql\n\nУсі функції [ext/mysql](book.mysql.md) були вилучені. Для вибору іншого MySQL API дивіться розділ [Вибір MySQL API](mysqlinfo.api.choosing.md)\n\n#### Усі функції модуля mssql\n\nУсі функції `ext/mssql` були вилучені.\n\n-   [PDO\\_SQLSRV](ref.pdo-sqlsrv.md)\n-   [PDO\\_ODBC](ref.pdo-odbc.md)\n-   [SQLSRV](book.sqlsrv.md)\n-   [Unified ODBC API](book.uodbc.md)\n\n#### Псевдоніми [intl](book.intl.md)\n\nЗастарілі псевдоніми **datefmt\\_set\\_timezone\\_id()** і **IntlDateFormatter::setTimeZoneID()** були видалені на користь [datefmt\\_set\\_timezone()](intldateformatter.settimezone.md) і [IntlDateFormatter::setTimeZone()](intldateformatter.settimezone.md)соответственно.\n\n#### **set\\_magic\\_quotes\\_runtime()**\n\n**set\\_magic\\_quotes\\_runtime()** та її псевдонім **magic\\_quotes\\_runtime()** були вилучені. Вони були оголошені застарілими в PHP 5.3.0 і втратили свій сенс з відмовою від магічних лапок в PHP 5.4.0.\n\n#### **set\\_socket\\_blocking()**\n\nУстаревший псевдоним**set\\_socket\\_blocking()** був видалений на користь [stream\\_set\\_blocking()](function.stream-set-blocking.md)\n\n#### [dl()](function.dl.md) у PHP-FPM\n\nФункция[dl()](function.dl.md) більше не можна використовувати в PHP-FPM. Однак вона збереглася в CLI і вбудованих SAPI.\n\n#### Функції [GD](book.image.md)Type1\n\nПідтримка шрифтів PostScript Type1 видалена із модуля GD. Відповідно були видалені такі функції:\n\n-   **imagepsbbox()**\n-   **imagepsencodefont()**\n-   **imagepsextendfont()**\n-   **imagepsfreefont()**\n-   **imagepsloadfont()**\n-   **imagepsslantfont()**\n-   **imagepstext()**\n\nЗамість них рекомендується використовувати шрифти TrueType та пов'язані з ними функції.\n\n### Видалені директиви INI-файлу\n\n#### Віддалені можливості\n\nНаступні INI-директиви були видалені, оскільки пов'язані з ними функції також були видалені:\n\n-   `always_populate_raw_post_data`\n-   `asp_tags`\n\n#### `xsl.security_prefs`\n\nДиректива`xsl.security_prefs` було видалено. Замість неї контролю налаштувань безпеки повинен викликатися метод [XsltProcessor::setSecurityPrefs()](xsltprocessor.setsecurityprefs.md) лише на рівні кожного процесора.\n\n### Інші зміни, що стосуються зворотної сумісності\n\n#### Нові об'єкти не можуть надаватися за посиланням\n\nРезультат оператора[`new`](language.oop5.basic.md#language.oop5.basic.new) більше не може бути присвоєний змінною за посиланням:\n\n```php\n<?php\nclass C {}\n$c =& new C;\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\nDeprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nParse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3\n```\n\n#### Некоректні імена класів, інтерфейсів та трейтів\n\nНаступні імена не можна використовувати для класів, інтерфейсів та трейтів:\n\n-   bool\n-   int\n-   float\n-   string\n-   **`null`**\n-   **`true`**\n-   **`false`**\n\nБільше того, такі імена не повинні використовуватися. Вони не приведуть до помилки в PHP 7.0, але вони зарезервовані на майбутнє і мають вважатися застарілими.\n\n-   resource\n-   object\n-   [mixed](language.types.declarations.md#language.types.declarations.mixed)\n-   numeric\n\n#### Видалені PHP-теги ASP та script\n\nВидалено підтримку використання тегів ASP та script для визначення коду PHP.\n\n**Віддалені теги ASP та script**\n\n| Открывающий тег | Закрывающий тег |\n| --- | --- |\n| `<%` | `%>` |\n| `<%=` | `%>` |\n| `<script language=\"php\">` | `</script>` |\n\n#### Видалено дзвінки з невідповідного контексту\n\n[Раніше визнані застарілими у PHP 5.6](migration56.deprecated.md#migration56.deprecated.incompatible-context) статичні виклики нестатичних методів з невідповідного контексту тепер призведуть до того, що для методу, що викликається, змінна `$this` буде не визначено та буде виведено попередження.\n\n```php\n<?php\nclass A {\n    public function test() { var_dump($this); }\n}\n\n// Обратите вимание: НЕ расширяет класс A\nclass B {\n    public function callNonStaticMethodOfA() { A::test(); }\n}\n\n(new B)->callNonStaticMethodOfA();\n?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5.6:\n\n```\nDeprecated: Non-static method A::test() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8\nobject(B)#1 (0) {\n}\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\nDeprecated: Non-static method A::test() should not be called statically in /tmp/test.php on line 8\n\nNotice: Undefined variable: this in /tmp/test.php on line 3\nNULL\n```\n\n#### [yield](language.generators.syntax.md#control-structures.yield) тепер право-асоціативний оператор\n\nКонструкция[yield](language.generators.syntax.md#control-structures.yield) більше не вимагає обертання в дужки і є право-асоціативним оператором з пріоритетом між `print`и`=>`. Це може призвести до зміни поведінки:\n\n```php\n<?php\necho yield -1;\n// Ранее интерпретировалось так\necho (yield) - 1;\n// А теперь так\necho yield (-1);\n\nyield $foo or die;\n// Ранее интерпретировалось так\nyield ($foo or die);\n// А теперь так\n(yield $foo) or die;\n?>\n```\n\nДужки можуть бути використані для усунення неоднозначності у таких випадках.\n\n#### Функції не можуть мати декілька параметрів з однаковими іменами\n\nБільше не можна визначити кілька параметрів з однаковими іменами. Наприклад, така функція видасть помилку рівня **`E_COMPILE_ERROR`** :\n\n```php\n<?php\nfunction foo($a, $b, $unused, $unused) {\n    //\n}\n?>\n```\n\n#### Функції, що працюють із аргументами, тепер повертають їх *поточні*значения\n\n**func\\_get\\_arg()** [func\\_get\\_args()](function.func-get-args.md) [debug\\_backtrace()](function.debug-backtrace.md) і трасування винятків повертають не вихідні передані значення, а поточні значення, які можуть бути змінені.\n\n```php\n<?php\nfunction foo($x) {\n    $x++;\n    var_dump(func_get_arg(0));\n}\nfoo(1);?>\n```\n\nРезультат виконання наведеного прикладу в PHP 5:\n\n```\n1\n```\n\nРезультат виконання наведеного прикладу в PHP 7:\n\n```\n2\n```\n\n#### Оператор switch більше не може мати декілька блоків default\n\nБільше неможливо встановити більше одного блоку default в операторі switch. Наприклад, така конструкція видасть помилку **`E_COMPILE_ERROR`** :\n\n```php\n<?php\nswitch (1) {\n    default:\n    break;\n    default:\n    break;\n}\n?>\n```\n\n#### Видалено $HTTP\\_RAW\\_POST\\_DATA\n\n$HTTP\\_RAW\\_POST\\_DATA больше не доступен. Вместо него используйте поток[`php://input`](wrappers.php.md#wrappers.php.input)\n\n#### Заборонені коментарі `#`в INI-файлах\n\nПоддержка префикса комментария`#`в INI-файлах удалена. Используйте префикс замість нього. Ця зміна стосується як php.ini, так і файлів, що обробляються функціями [parse\\_ini\\_file()](function.parse-ini-file.md) і [parse\\_ini\\_string()](function.parse-ini-string.md)\n\n#### Модуль JSON замінено на JSOND\n\nМодуль JSON замінений на JSOND, що породжує три невеликі зворотні несумісності. Перше - числа не повинні закінчуватися на крапку (тобто `34.` має бути замінено на `34.0`или`34`). Друге – при використанні наукової нотації, експонента `e` не повинна слідувати відразу за десятковою точкою (тобто `3.e3` потрібно поміняти на `3.0e3`или`3e3`). Третє - порожній рядок більше не вважається коректним JSON.\n\n#### Помилки внутрішніх функцій при переповненні\n\nРаніше вбудовані функції могли тихо обрізати числа, отримані при наведенні типу float до integer, якщо float був більшим, ніж здатний вмістити integer. Тепер же видаватиметься помилка E\\_WARNING та повертатися **`null`**\n\n#### Виправлення для значень користувальницького оброблювача сесії, що повертаються.\n\nБудь-які предикатні функції, реалізовані за допомогою користувальницьких обробників сесії та повертають \\*\\*`false`\\*\\*или`-1`, викликають фатальну помилку Якщо ці функції повернуть будь-яке значення, крім логічного, `-1`или , вони будуть вважатися завершеними з помилкою та викличуть попередження E\\_WARNING.\n\n#### Порядок сортування однакових елементів\n\nВнутрішній алгоритм сортування був змінений, що може позначитися на відмінному від попереднього сортованого порядку елементів, визначених як однакові.\n\n> **Зауваження** :\n> \n> Не покладайтеся на порядок однакових елементів, оскільки він може змінитися в будь-який час.\n\n#### Зміна порядку обробки операторів break та continue\n\nОператори `break`и`continue` поза циклом або керуючою структурою `switch` тепер обробляються під час компіляції, а не під час виконання, як це було раніше, тому видають помилки рівня **`E_COMPILE_ERROR`**\n\n#### Mhash більше не є модулем\n\nМодуль Mhash повністю інтегрований у модуль [Hash](book.hash.md)Таким образом, теперь нельзя определить доступность поддержки Mhash с помощью функции[extension\\_loaded()](function.extension-loaded.md); замість неї використовуйте [function\\_exists()](function.function-exists.md). Крім того, Mhash більше не виводитиме за допомогою [get\\_loaded\\_extensions()](function.get-loaded-extensions.md) та подібних функцій.\n\n#### declare(ticks)\n\nДиректива[declare(ticks)](control-structures.declare.md#control-structures.declare.ticks) більше не проникає у різні модулі компіляції.\n","title":"Зміни, що ламають зворотну сумісність","contentType":2,"navigation":[{"migration70.md":"« Міграція з PHP 5.6.x на PHP 7.0.x"},{"migration70.new-features.md":"Нова функціональність »"},{"index.md":"PHP Manual"},{"migration70.md":"Міграція з PHP 5.6.x на PHP 7.0.x"}]}},"__N_SSG":true}