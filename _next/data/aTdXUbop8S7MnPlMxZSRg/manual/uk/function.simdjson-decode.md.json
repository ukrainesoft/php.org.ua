{"pageProps":{"page":{"slug":"function.simdjson-decode.md","content":"# simdjson\\_decode\n\n(PECL simdjson >= 2.0.0)\n\nsimdjson\\_decode — Декодує рядок JSON\n\n### Опис\n\n```methodsynopsis\nsimdjson_decode(string $json, bool $associative = false, int $depth = 512): mixed\n```\n\nПриймає рядок у кодуванні JSON і перетворює його на значення PHP. При цьому буде використано швидшу реалізацію Simultaneous Instruction, Multiple Data, ніж у функції [json\\_decode()](function.json-decode.md)якщо це підтримується архітектурою комп'ютера.\n\n### Список параметрів\n\n`json`\n\nДекодований рядок (string) в `json`формате.\n\nФункція працює тільки з рядками кодування UTF-8.\n\nФункція аналізує допустимі вхідні дані, які функція [json\\_decode()](function.json-decode.md) може декодувати, за умови, що їхня довжина не перевищує 4 Гб.\n\n`associative`\n\nПри значении\\*\\*`true`\\*\\*, об'єкти JSON будуть повернуті як асоціативні масиви (array); при значенні **`false`**, об'єкти JSON будуть повернуті як об'єкти (object).\n\n`depth`\n\nМаксимальна глибина вкладеності структури, що декодується. Значення має бути більшим і менше чи одно `2147483647`. Команда, що викликає, повинна використовувати досить маленькі значення, оскільки велика глибина вимагають більше місця в буфері і збільшують глибину рекурсії, на відміну від поточної реалізації функції [json\\_decode()](function.json-decode.md)\n\n### Значення, що повертаються\n\nПовертає значення, закодоване у параметрі `json` у відповідному типі PHP. Значення `true` `false`и`null` повертаються як **`true`** \\*\\*`false`** і **`null`\\*\\*соответственно.\n\n### Помилки\n\nЯкщо параметр `json` недійсний, то починаючи з версії PECL simdjson 2.1.0 викидається виняток [SimdJsonException](class.simdjsonexception.md), тоді як раніше викидався виняток [RuntimeException](class.runtimeexception.md)\n\nЯкщо параметр `depth` знаходиться поза допустимим діапазоном, то починаючи з версії PECL simdjson 3.0.0 викидається виняток [SimdJsonValueError](class.simdjsonvalueerror.md), тоді як раніше видавалася помилка рівня **`E_WARNING`**\n\n### Приклади\n\n**Приклад #1 Приклади використання **simdjson\\_decode()****\n\n```php\n<?php\n$json = '{\"a\":1,\"b\":2,\"c\":3}';\n\nvar_dump(simdjson_decode($json));\nvar_dump(simdjson_decode($json, true));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(stdClass)#1 (3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(2)\n  [\"c\"]=>\n  int(3)\n}\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(2)\n  [\"c\"]=>\n  int(3)\n}\n```\n\n**Приклад #2 Доступ до неприпустимих властивостей об'єкта**\n\nДоступ до елементів об'єкта, що містять символи, не дозволені угодою PHP про іменування (наприклад, дефіс), може бути здійснений шляхом укладання імені елемента у фігурні дужки та апостроф.\n\n```php\n<?php\n\n$json = '{\"foo-bar\": 12345}';\n\n$obj = simdjson_decode($json);\nprint $obj->{'foo-bar'}; // 12345\n\n?>\n```\n\n**Приклад #3 Поширені помилки під час використання **simdjson\\_decode()****\n\n```php\n<?php\n\n// следующие строки являются допустимыми JavaScript, но не являются допустимыми JSON\n\n// имя и значение должны быть заключены в двойные кавычки\n// одинарные кавычки недопустимы\n$bad_json = \"{ 'bar': 'baz' }\";\nsimdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException\n\n// имя должно быть заключено в двойные кавычки\n$bad_json = '{ bar: \"baz\" }';\nsimdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException\n\n// запятые в конце не допускаются\n$bad_json = '{ bar: \"baz\", }';\nsimdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException\n\n?>\n```\n\n**Приклад #4 Ошибки`depth`**\n\n```php\n<?php\n// Кодирование некоторых данных с максимальной глубиной 4\n// (array -> array -> array -> string)\n$json = json_encode(\n    [\n        1 => [\n            'English' => [\n                'One',\n                'January'\n            ],\n            'French' => [\n                'Une',\n                'Janvier'\n            ]\n        ]\n    ]\n);\n\n// Отображение ошибок для разных глубин.\nvar_dump(simdjson_decode($json, true, 4));\ntry {\n    var_dump(simdjson_decode($json, true, 3));\n} catch (SimdJsonException $e) {\n     echo \"Попался: \", $e->getMessage(), \"\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(1) {\n  [1]=>\n  array(2) {\n    [\"English\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"One\"\n      [1]=>\n      string(7) \"January\"\n    }\n    [\"French\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"Une\"\n      [1]=>\n      string(7) \"Janvier\"\n    }\n  }\n}\nПопался: The JSON document was too deep (too many nested objects and arrays)\n```\n\n**Приклад #5**simdjson\\_decode()\\*\\* великих цілих чисел\\*\\*\n\n```php\n<?php\n$json = '{\"number\": 12345678901234567890}';\n\nvar_dump(simdjson_decode($json));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(stdClass)#1 (1) {\n  [\"number\"]=>\n  float(1.2345678901235E+19)\n}\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Специфікація JSON - це не JavaScript, а підмножина JavaScript.\n\n> **Зауваження** :\n> \n> У разі виникнення помилки декодування викидається виняток [SimdJsonException](class.simdjsonexception.md), а**SimdJsonException::getCode()** і **SimdJsonException::getMessage()** можуть бути використані визначення точної природи помилки.\n\n### Дивіться також\n\n-   [json\\_encode()](function.json-encode.md) \\- Повертає JSON-подання даних\n-   [json\\_decode()](function.json-decode.md) \\- Декодує рядок JSON\n","title":"simdjson\\_decode","contentType":2,"navigation":[{"ref.simdjson.md":"« Функції Simdjson"},{"function.simdjson-is-valid.md":"simdjson\\_is\\_valid »"},{"index.md":"PHP Manual"},{"ref.simdjson.md":"Функції Simdjson"}]}},"__N_SSG":true}