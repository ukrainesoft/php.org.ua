{"pageProps":{"page":{"slug":"migration71.new-features.md","content":"## Нові можливості\n\n### Типи, що обнулюються\n\nТипи для параметрів і значень, що повертаються можуть бути позначені як обнулювані шляхом додавання префікса у вигляді знака питання. Це означає, що зазначені параметри і значення, що повертаються, можуть бути як зазначеного типу, так і **`null`**\n\n```php\n<?php\n\nfunction testReturn(): ?string\n{\n    return 'elePHPant';\n}\n\nvar_dump(testReturn());\n\nfunction testReturn(): ?string\n{\n    return null;\n}\n\nvar_dump(testReturn());\n\nfunction test(?string $name)\n{\n    var_dump($name);\n}\n\ntest('elePHPant');\ntest(null);\ntest();\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(10) \"elePHPant\"\nNULL\nstring(10) \"elePHPant\"\nNULL\nUncaught Error: Too few arguments to function test(), 0 passed in...\n```\n\n### Функції, що нічого не повертають\n\nБув доданий тип значення, що повертається void. Функції з таким заданим типом значення, що повертається, не повинні нічого повертати. Тобто або взагалі не містити жодного оператора return, або використовувати його без параметра . **`null`** не є коректним значенням для повернення таких функцій.\n\n```php\n<?php\nfunction swap(&$left, &$right): void\n{\n    if ($left === $right) {\n        return;\n    }\n\n    $tmp = $left;\n    $left = $right;\n    $right = $tmp;\n}\n\n$a = 1;\n$b = 2;\nvar_dump(swap($a, $b), $a, $b);\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nnull\nint(2)\nint(1)\n```\n\nСпроба використовувати значення таких функцій, що повертається, призведе до того, що це значення буде вважатися за \\*\\*`null`\\*\\*без виведення попередження. Причина цього в тому, що попередження викликатимуть спільні функції вищого порядку.\n\n### Симетрична деструктуризація масиву\n\nМожна використовувати короткий синтаксис (`[]`) для деструктуризації масивів з метою присвоєння (у тому числі в `foreach`), як альтернатива функції [list()](function.list.md)яка, втім, все ще підтримується.\n\n```php\n<?php\n$data = [\n    [1, 'Tom'],\n    [2, 'Fred'],\n];\n\n// используя list()\nlist($id1, $name1) = $data[0];\n\n// используя []\n[$id1, $name1] = $data[0];\n\n// используя list()\nforeach ($data as list($id, $name)) {\n    // код, содержащий $id и $name\n}\n\n// используя []\nforeach ($data as [$id, $name]) {\n    // код, содержащий $id и $name\n}\n```\n\n### Видимість констант класу\n\nДодано підтримку визначення області видимості для констант класу.\n\n```php\n<?php\nclass ConstDemo\n{\n    const PUBLIC_CONST_A = 1;\n    public const PUBLIC_CONST_B = 2;\n    protected const PROTECTED_CONST = 3;\n    private const PRIVATE_CONST = 4;\n}\n```\n\n### Псевдотип[iterable](language.types.iterable.md)\n\nБуло додано новий псевдотип (схожий на [callable](language.types.callable.md)), названий [iterable](language.types.iterable.md). Він може використовуватися як параметр, так і як значення, що повертається там, де використовується масив або об'єкт, що реалізує інтерфейс [Traversable](class.traversable.md). Що стосується підтипів, типи параметрів із дочірніх класів можуть розширити декларацію батьків типу array або [Traversable](class.traversable.md)до[iterable](language.types.iterable.md). Для типів повернення, дочірні класи можуть звужувати тип значення, що повертається з [iterable](language.types.iterable.md) до array або об'єкта реалізуючого [Traversable](class.traversable.md)\n\n```php\n<?php\nfunction iterator(iterable $iter)\n{\n    foreach ($iter as $val) {\n        //\n    }\n}\n```\n\n### Обробка кількох винятків в одному блоці catch\n\nУ блоці catch тепер можна обробляти кілька винятків, перераховуючи їх через символ вертикальної межі ( ). Це може бути корисним, якщо різні винятки обробляються однаково.\n\n```php\n<?php\ntry {\n    // Какой то код\n} catch (FirstException | SecondException $e) {\n    // Обрабатываем оба исключения\n}\n```\n\n### Підтримка ключів у [list()](function.list.md)\n\nТепер можна вказувати ключі в операторі [list()](function.list.md) або в його новому короткому синтаксисі `[]`. Це дозволяє деструктурувати масиви з нечисловими чи непослідовними ключами.\n\n```php\n<?php\n$data = [\n    [\"id\" => 1, \"name\" => 'Tom'],\n    [\"id\" => 2, \"name\" => 'Fred'],\n];\n\n// стиль list()\nlist(\"id\" => $id1, \"name\" => $name1) = $data[0];\n\n// стиль []\n[\"id\" => $id1, \"name\" => $name1] = $data[0];\n\n// стиль list()\nforeach ($data as list(\"id\" => $id, \"name\" => $name)) {\n    // logic here with $id and $name\n}\n\n// стиль []\nforeach ($data as [\"id\" => $id, \"name\" => $name]) {\n    // logic here with $id and $name\n}\n```\n\n### Підтримка негативних зсувів для рядків\n\nПідтримка негативних зсувів для рядків додана в [функції для роботи з рядками](book.strings.md), а також у [індексацію рядків](language.types.string.md#language.types.string.substr) за допомогою `[]`или`{}`. У цих випадках негативні усунення інтерпретуються як усунення щодо кінця рядка.\n\n```php\n<?php\nvar_dump(\"abcdef\"[-2]);\nvar_dump(strpos(\"aabbcc\", \"b\", -3));\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring (1) \"e\"\nint(3)\n```\n\nТепер підтримуються негативні зміщення у простому синтаксисі вказівки індексу у рядках та масивах.\n\n```php\n<?php\n$string = 'bar';\necho \"Последний символ '$string' - '$string[-1]'.\\n\";\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nПоследний символ 'bar' - 'r'.\n```\n\n### Підтримка AEAD в ext/openssl\n\nПідтримка AEAD (режими GCM та CCM) була додана шляхом розширення функцій [openssl\\_encrypt()](function.openssl-encrypt.md) і [openssl\\_decrypt()](function.openssl-decrypt.md) додатковими параметрами.\n\n### Преобразование callable в[Closure](class.closure.md) за допомогою [Closure::fromCallable()](closure.fromcallable.md)\n\nВ класс[Closure](class.closure.md) додано новий статичний метод для можливості легко перетворити [callable](language.types.callable.md) в об'єкти типу [Closure](class.closure.md)\n\n```php\n<?php\nclass Test\n{\n    public function exposeFunction()\n    {\n        return Closure::fromCallable([$this, 'privateFunction']);\n    }\n\n    private function privateFunction($param)\n    {\n        var_dump($param);\n    }\n}\n\n$privFunc = (new Test)->exposeFunction();\n$privFunc('значение');\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nstring(16) \"значение\"\n```\n\n### Асинхронне оброблення сигналів\n\nНова функція [pcntl\\_async\\_signals()](function.pcntl-async-signals.md) була додана для дозволу асинхронної обробки сигналів без використання тиків (які виробляють багато накладних витрат).\n\n```php\n<?php\npcntl_async_signals(true); // включает асинхронные сигналы\n\npcntl_signal(SIGHUP,  function($sig) {\n    echo \"SIGHUP\\n\";\n});\n\nposix_kill(posix_getpid(), SIGHUP);\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nSIGHUP\n```\n\n### Підтримка HTTP/2 server push в ext/curl\n\nПідтримка \"server push\" додана в модуль CURL (потрібна версія 7.46 та вище). Використовувати можна у функції [curl\\_multi\\_setopt()](function.curl-multi-setopt.md) з новою константою **`CURLMOPT_PUSHFUNCTION`**. Також додані константи **`CURL_PUSH_OK`** і **`CURL_PUSH_DENY`** для визначення, було прийнято чи відхилено \"server push\".\n\n### Контекстні опції потоку\n\nДодано опцію контексту потоку [tcp\\_nodelay](context.socket.md#context.socket.tcp_nodelay)\n","title":"Нові можливості","contentType":2,"navigation":[{"migration71.md":"« Міграція з PHP 7.0.x на PHP 7.1.x"},{"migration71.new-functions.md":"Нові функції »"},{"index.md":"PHP Manual"},{"migration71.md":"Міграція з PHP 7.0.x на PHP 7.1.x"}]}},"__N_SSG":true}