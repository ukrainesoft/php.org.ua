{"pageProps":{"page":{"slug":"function.socket-create.md","content":"# socket\\_create\n\n(PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8)\n\nsocket\\_create — Створює сокет (кінцеву точку обміну інформацією)\n\n### Опис\n\n```methodsynopsis\nsocket_create(int $domain, int $type, int $protocol): Socket|false\n```\n\nСтворює та повертає екземпляр [Socket](class.socket.md), також називається як кінцева точка обміну інформацією. Типове мережне з'єднання і двох сокетів, один із яких виконує роль клієнта, а інший виконує роль сервера.\n\n### Список параметрів\n\n`domain`\n\nПараметр`domain` визначає сімейство протоколів, які використовуються сокетами.\n\n**Доступні сімейства адрес/протоколів**\n\n| Семейство | Опис |\n| --- | --- |\n| **`AF_INET`** | Internet-протоколи IPv4. TCP та UDP – це стандартні протоколи цього сімейства протоколів. |\n| **`AF_INET6`** | Internet-протоколи IPv6. TCP та UDP – це стандартні протоколи цього сімейства протоколів. |\n| **`AF_UNIX`** | Сімейство протоколів для локального обміну даними. Висока ефективність та низькі накладні витрати роблять його чудовим видом IPC (міжпроцессної взаємодії). |\n\n`type`\n\nПараметр`type` визначає тип обміну даними, який використовуватиметься сокетом.\n\n**Доступні типи сокетів**\n\n| Тип | Опис |\n| --- | --- |\n| **`SOCK_STREAM`** | Забезпечує послідовні, надійні, повнодуплексні, байтові потоки із встановленням з'єднання. Може підтримуватись механізм передачі позасмугових (out-of-band) даних. Протокол TCP заснований цьому типі сокетів. |\n| **`SOCK_DGRAM`** | Підтримує датаграми (ненадійні повідомлення без встановлення з'єднання фіксованої максимальної довжини). Протокол UDP ґрунтується на цьому типі сокетів. |\n| **`SOCK_SEQPACKET`** | Надає послідовну, надійну, двонаправлену передачу датаграм, що базується на з'єднаннях, з фіксованою максимальною довжиною. Споживач повинен читати весь пакет повністю за кожної ітерації читання. |\n| **`SOCK_RAW`** | Надає доступ за непідготовленим (raw) мережевим протоколом. Цей спеціальний тип сокету може бути використаний для ручного створення будь-якого типу протоколу. Стандартне використання цього сокетів - виконання запитів ICMP (таких як ping). |\n| **`SOCK_RDM`** | Надає надійний рівень датаграм, що не гарантує збереження порядку. Швидше за все, це сімейство протоколів не реалізовано у вашій операційній системі. |\n\n`protocol`\n\nПараметр`protocol` вказує конкретний протокол у заданому сімействі протоколів `domain`, який буде використовуватися в обміні даними зі створеним сокетом. Відповідне значення може бути отримано на ім'я за допомогою функції [getprotobyname()](function.getprotobyname.md). Якщо бажаний протокол TCP чи UDP, то відповідні константи **`SOL_TCP`** і **`SOL_UDP`** також можуть бути використані.\n\n**Стандартні протоколи**\n\n| Название | Опис |\n| --- | --- |\n| icmp | ICMP (Internet Control Message Protocol, протокол міжмережевих керуючих повідомлень) використовується переважно шлюзами та хостами для повідомлення про помилки передачі датаграм. Команда \"ping\" (присутня у більшості сучасних операційних систем) - це приклад використання протоколу ICMP. |\n| udp | UDP (User Datagram Protocol, протокол користувальницьких датаграм) - це протокол без встановлення з'єднання, ненадійний, протокол із фіксованою довжиною записів. Через ці аспекти, UDP вимагає мінімальної кількості службової інформації. |\n| tcp | TCP (The Transmission Control Protocol, протокол управління передачею) - це надійний, що базується на з'єднаннях, потокоорієнтований, повнодуплексний протокол. TCP гарантує, що всі пакети даних будуть отримані в порядку, в якому вони були відправлені. Якщо будь-який пакет було втрачено під час передачі даних, TCP буде автоматично передавати пакет повторно до тих пір, поки хост призначення не підтвердить цей пакет. З метою надійності та продуктивності, реалізація протоколу TCP сама вибирає відповідні межі октету нижче рівня обміну датаграмами. Таким чином, програми, що використовують TCP, повинні надавати можливість часткової передачі записів. |\n\n### Значення, що повертаються\n\nФункция**socket\\_create()** повертає екземпляр [Socket](class.socket.md) у разі успішного виконання, або **`false`** у разі виникнення помилки. Код помилки можна отримати за допомогою виклику функції [socket\\_last\\_error()](function.socket-last-error.md). Ця помилка може бути передана функції [socket\\_strerror()](function.socket-strerror.md) для отримання текстового опису помилки.\n\n### Помилки\n\nЯкщо вказано неправильний параметр `domain`или`type`, функция**socket\\_create()** буде використовувати за замовчуванням значення **`AF_INET`** і **`SOCK_STREAM`** відповідно, і додатково до цього видасть повідомлення **`E_WARNING`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | У разі успішного виконання функція повертає екземпляр [Socket](class.socket.md); раніше повертався ресурс (resource). |\n\n### Дивіться також\n\n-   [socket\\_accept()](function.socket-accept.md) \\- приймає з'єднання на сокеті\n-   [socket\\_bind()](function.socket-bind.md) \\- Прив'язує ім'я до сокету\n-   [socket\\_connect()](function.socket-connect.md) \\- Починає з'єднання із сокетом\n-   [socket\\_listen()](function.socket-listen.md) \\- Прослуховує вхідні з'єднання на сокеті\n-   [socket\\_last\\_error()](function.socket-last-error.md) \\- Повертає останню помилку на сокеті\n-   [socket\\_strerror()](function.socket-strerror.md) \\- Повертає рядок, що описує помилку сокету\n","title":"socket\\_create","contentType":2,"navigation":[{"function.socket-create-pair.md":"« socket\\_create\\_pair"},{"function.socket-export-stream.md":"socket\\_export\\_stream »"},{"index.md":"PHP Manual"},{"ref.sockets.md":"Опції сокету"}]}},"__N_SSG":true}