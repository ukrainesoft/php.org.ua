{"pageProps":{"page":{"slug":"class.swoole-server.md","content":"# Клас Swoole\\\\Server\n\n(PECL swoole >= 1.9.0)\n\n## Вступ\n\n## Огляд класів\n\n```classsynopsis\n\n\n\n    \n     \n      class Swoole\\Server\n     \n     {\n\n\n    /* Методы */\n    \n   public addlistener(string $host, int $port, string $socket_type): void\npublic addProcess(swoole_process $process): bool\npublic after(int $after_time_ms, callable $callback, string $param = ?): ReturnType\npublic bind(int $fd, int $uid): bool\npublic clearTimer(int $timer_id): void\nswoole_timer_clear(int $timer_id): void\npublic close(int $fd, bool $reset = ?): bool\npublic confirm(int $fd): bool\npublic connection_info(int $fd, int $reactor_id = ?): array\npublic connection_list(int $start_fd, int $pagesize = ?): array\npublic defer(callable $callback): void\npublic Swoole\\Server\\Port::__destruct(): void\npublic Swoole\\Server\\Port::on(string $event_name, callable $callback): ReturnType\npublic Swoole\\Server\\Port::set(array $settings): void\npublic exist(int $fd): bool\npublic finish(string $data): void\npublic getClientInfo(int $fd, int $reactor_id = ?, bool $ignore_error = ?): array\npublic getClientList(int $start_fd, int $pagesize = ?): array\npublic getLastError(): int\npublic heartbeat(bool $if_close_connection): mixed\npublic listen(string $host, int $port, string $socket_type): bool\npublic on(string $event_name, callable $callback): void\npublic pause(int $fd): void\npublic protect(int $fd, bool $is_protected = ?): void\npublic reload(): bool\npublic resume(int $fd): void\npublic send(int $fd, string $data, int $reactor_id = ?): bool\npublic sendfile(int $fd, string $filename, int $offset = ?): bool\npublic sendMessage(int $worker_id, string $data): bool\npublic sendto(    string $ip,    int $port,    string $data,    string $server_socket = ?): bool\npublic sendwait(int $fd, string $data): bool\npublic set(array $settings): ReturnType\npublic shutdown(): void\npublic start(): void\npublic stats(): array\npublic stop(int $worker_id = ?): bool\npublic task(string $data, int $dst_worker_id = ?, callable $callback = ?): mixed\npublic taskwait(string $data, float $timeout = ?, int $worker_id = ?): void\npublic taskWaitMulti(array $tasks, float $timeout_ms = ?): void\npublic tick(int $interval_ms, callable $callback): void\n\n   }\n```\n\n## Зміст\n\n-   [Swoole\\\\Server::addlistener](swoole-server.addlistener.md)— Додає нового слухача на сервер\n-   [Swoole\\\\Server::addProcess](swoole-server.addprocess.md)— Додає певний користувачем swoole\\_process на сервер\n-   [Swoole\\\\Server::after](swoole-server.after.md) \\- Запускає callback-функцію після закінчення певного періоду часу\n-   [Swoole\\\\Server::bind](swoole-server.bind.md)— Прив'язує з'єднання до вказаного ідентифікатора користувача\n-   [Swoole\\\\Server::clearTimer](swoole-server.cleartimer.md) \\- Зупиняє та знищує таймер\n-   [Swoole\\\\Server::close](swoole-server.close.md) \\- Закриває з'єднання з клієнтом\n-   [Swoole\\\\Server::confirm](swoole-server.confirm.md) \\- Перевіряє стан з'єднання\n-   [Swoole\\\\Server::connection\\_info](swoole-server.connection-info.md)— Отримує інформацію про з'єднання з описом файлу\n-   [Swoole\\\\Server::connection\\_list](swoole-server.connection-list.md)— Отримує всі встановлені з'єднання\n-   [Swoole\\\\Server::\\_\\_construct](swoole-server.construct.md) \\- Створює сервер Swoole\n-   [Swoole\\\\Server::defer](swoole-server.defer.md) \\- Відкладає виконання callback-функції в кінці поточного EventLoop\n-   [Swoole\\\\Server\\\\Port::\\_\\_construct](swoole-server-port.construct.md) \\- Створює порт сервера\n-   [Swoole\\\\Server\\\\Port::\\_\\_destruct](swoole-server-port.destruct.md)— Знищує порт сервера\n-   [Swoole\\\\Server\\\\Port::on](swoole-server-port.on.md) \\- Реєструє callback-функції події\n-   [Swoole\\\\Server\\\\Port::set](swoole-server-port.set.md)— Встановлює протокол порту сервера\n-   [Swoole\\\\Server::exist](swoole-server.exist.md)— Перевіряє, чи є з'єднання\n-   [Swoole\\\\Server::finish](swoole-server.finish.md)— Використовується в процесі завдання для надсилання результату до робочого процесу після завершення завдання\n-   [Swoole\\\\Server::getClientInfo](swoole-server.getclientinfo.md)— Отримує інформацію про з'єднання з описом файлу\n-   [Swoole\\\\Server::getClientList](swoole-server.getclientlist.md)— Отримує всі встановлені з'єднання\n-   [Swoole\\\\Server::getLastError](swoole-server.getlasterror.md)— Отримує код останньої помилки\n-   [Swoole\\\\Server::heartbeat](swoole-server.heartbeat.md)— Перевіряє всі з'єднання на сервері\n-   [Swoole\\\\Server::listen](swoole-server.listen.md)— Слухає по заданому IP та порту, тип сокету\n-   [Swoole\\\\Server::on](swoole-server.on.md) \\- Реєструє callback-функцію на ім'я події\n-   [Swoole\\\\Server::pause](swoole-server.pause.md)— Припиняє отримання даних від з'єднання\n-   [Swoole\\\\Server::protect](swoole-server.protect.md)— Встановлює з'єднання у захищений режим\n-   [Swoole\\\\Server::reload](swoole-server.reload.md) \\- Перезапускає всі робочі процеси\n-   [Swoole\\\\Server::resume](swoole-server.resume.md)— Починає отримувати дані із з'єднання\n-   [Swoole\\\\Server::send](swoole-server.send.md)— Надсилає дані клієнту\n-   [Swoole\\\\Server::sendfile](swoole-server.sendfile.md)— Надсилає файл на з'єднання\n-   [Swoole\\\\Server::sendMessage](swoole-server.sendmessage.md)— Надсилає повідомлення робочим процесам за ідентифікатором\n-   [Swoole\\\\Server::sendto](swoole-server.sendto.md)— Надсилає дані на віддалену UDP-адресу\n-   [Swoole\\\\Server::sendwait](swoole-server.sendwait.md)— Надсилає дані у віддалений сокет блокуючим способом\n-   [Swoole\\\\Server::set](swoole-server.set.md)— Встановлює налаштування часу виконання сервера swoole\n-   [Swoole\\\\Server::shutdown](swoole-server.shutdown.md)— Завершує процес головного сервера, функцію можна викликати у робочих процесах\n-   [Swoole\\\\Server::start](swoole-server.start.md) \\- Запускає сервер Swoole\n-   [Swoole\\\\Server::stats](swoole-server.stats.md)— Отримує статистику сервера Swoole\n-   [Swoole\\\\Server::stop](swoole-server.stop.md) \\- Зупиняє сервер Swoole\n-   [Swoole\\\\Server::task](swoole-server.task.md)— Надсилає дані до робочих процесів завдання\n-   [Swoole\\\\Server::taskwait](swoole-server.taskwait.md)— Надсилає дані робочим процесам завдання блокуючим способом\n-   [Swoole\\\\Server::taskWaitMulti](swoole-server.taskwaitmulti.md)— Виконує кілька завдань одночасно\n-   [Swoole\\\\Server::tick](swoole-server.tick.md)— Повторює цю функцію у кожний заданий інтервал часу\n","title":"Клас Swoole\\\\Server","contentType":2,"navigation":[{"swoole-serialize.unpack.md":"« Swoole\\\\Serialize::unpack"},{"swoole-server.addlistener.md":"Swoole\\\\Server::addlistener »"},{"index.md":"PHP Manual"},{"book.swoole.md":"Swoole"}]}},"__N_SSG":true}