{"pageProps":{"page":{"slug":"function.rsort.md","content":"# rsort\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nrsort — Сортує масив у порядку зменшення\n\n### Опис\n\n```methodsynopsis\nrsort(array &$array, int $flags = SORT_REGULAR): true\n```\n\nСортує масив (`array`) за значеннями в порядку зменшення.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n> **Зауваження**: Ця функція надає нові ключі елементам `array`. Вона видалить усі існуючі ключі, а не просто переупорядкує їх.\n\n> **Зауваження** :\n> \n> Скидає внутрішній покажчик масиву перший елемент.\n\n### Список параметрів\n\n`array`\n\nВхідний масив\n\n`flags`\n\nНеобов'язковий другий параметр `flags` змінює поведінку сортування і може набувати таких значень:\n\nПрапори типів сортування:\n\n-   \\*\\*`SORT_REGULAR`\\*\\*- Звичайне порівняння елементів; подробиці описані в розділі[оператори порівняння](language.operators.comparison.md)\n-   \\*\\*`SORT_NUMERIC`\\*\\*- Чисельне порівняння елементів\n-   \\*\\*`SORT_STRING`\\*\\*- рядкове порівняння елементів\n-   \\*\\*`SORT_LOCALE_STRING`\\*\\*— Порівняти елементи як рядки на основі поточного мовного стандарту. Прапор використовує мовний стандарт, який можна змінити функцією[setlocale()](function.setlocale.md)\n-   **`SORT_NATURAL`** - Порівняння елементів як рядки, використовуючи \"природний порядок\", наприклад [natsort()](function.natsort.md)\n-   \\*\\*`SORT_FLAG_CASE`**\\- можна об'єднувати (побітове АБО) з**`SORT_STRING`** або **`SORT_NATURAL`\\*\\*для сортування рядків без урахування регістру\n\n### Значення, що повертаються\n\nФункція завжди повертає **`true`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер **`true`**; раніше було bool. |\n\n### Приклади\n\n**Приклад #1 Приклад використання функції** rsort()\\*\\*\\*\\*\n\n```php\n<?php\n\n$fruits = array(\"лимон\", \"апельсин\", \"банан\", \"яблоко\");\nrsort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n0 = апельсин\n1 = лимон\n2 = банан\n3 = яблоко\n```\n\nНазви фруктів були відсортовані за алфавітом у зворотному порядку.\n\n### Дивіться також\n\n-   [sort()](function.sort.md) \\- Сортує масив за зростанням\n-   [arsort()](function.arsort.md) \\- Сортує масив у порядку зменшення, зберігаючи асоціацію індексів\n-   [krsort()](function.krsort.md) \\- Сортує масив за ключом у порядку зменшення\n-   [Порівняння функцій сортування масивів](array.sorting.md)\n","title":"rsort","contentType":2,"navigation":[{"function.reset.md":"« reset"},{"function.shuffle.md":"shuffle »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}