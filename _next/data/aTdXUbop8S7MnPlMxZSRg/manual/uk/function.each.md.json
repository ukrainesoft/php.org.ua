{"pageProps":{"page":{"slug":"function.each.md","content":"# each\n\n(PHP 4, PHP 5, PHP 7)\n\neach — Повертає поточну пару ключ/значення з масиву та зміщує його покажчик\n\n**Увага**\n\nЦя функція оголошена *застарілої* починаючи з PHP 7.2.0 і була *ВИДАЛЕНО* у версії PHP 8.0.0. Використовувати цю функцію не рекомендується.\n\n### Опис\n\n```methodsynopsis\neach(array|object &$array): array\n```\n\nПовертає поточну пару ключ/значення з масиву і просуває його покажчик.\n\nПісля виконання **each()**, покажчик масиву переміщається до наступного його елемента, доки досягне кінець масиву. Для повторного обходу масиву за допомогою кожного необхідно використовувати функцію [reset()](function.reset.md)\n\n### Список параметрів\n\n`array`\n\nВхідний масив\n\n### Значення, що повертаються\n\nПовертає поточну пару ключ/значення з масиву `array`. Ця пара повертається до масиву з чотирьох елементів, з ключами `key`и`value`. Елементи и`key` містять ім'я ключа елемента масиву, а и`value` містять його дані.\n\nЯкщо внутрішній покажчик масиву вказує за його межі, **each()**возвратит**`false`**\n\n### Приклади\n\n**Приклад #1 Приклади використання **each()****\n\n```php\n<?php\n$foo = array(\"bob\", \"fred\", \"jussi\", \"jouni\", \"egon\", \"marliese\");\n$bar = each($foo);\nprint_r($bar);\n?>\n```\n\n$bar тепер містить такі пари ключ/значення:\n\n```\nArray\n(\n    [1] => bob\n    [value] => bob\n    [0] => 0\n    [key] => 0\n)\n```\n\n```php\n<?php\n$foo = array(\"Robert\" => \"Bob\", \"Seppo\" => \"Sepi\");\n$bar = each($foo);\nprint_r($bar);\n?>\n```\n\n$bar тепер містить такі пари ключ/значення:\n\n```\nArray\n(\n    [1] => Bob\n    [value] => Bob\n    [0] => Robert\n    [key] => Robert\n)\n```\n\n**each()** зазвичай використовується спільно з [list()](function.list.md) для обходу масиву, як у цьому прикладі:\n\n**Приклад #2 Обхід масиву функцією **each()****\n\n```php\n<?php\n$fruit = array('a' => 'apple', 'b' => 'banana', 'c' => 'cranberry');\n\nreset($fruit);\nwhile (list($key, $val) = each($fruit)) {\n    echo \"$key => $val\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\na => apple\nb => banana\nc => cranberry\n```\n\n**Застереження**\n\nОскільки додавання елемента в масив скидає покажчик, наведений вище приклад може навести нескінченному циклу, якщо ми присвоюватимемо $fruit інші значення всередині циклу.\n\n**Увага**\n\nФункция**each()** також приймає об'єкти, але може повернути несподівані результати, тому ітерувати властивості об'єкта за допомогою \\*\\*each()\\*\\*не рекомендуется.\n\n### Дивіться також\n\n-   [key()](function.key.md) \\- Вибирає ключ із масиву\n-   [list()](function.list.md) \\- надає змінним значення схожим на масиви синтаксисом\n-   [current()](function.current.md) \\- Повертає поточний елемент масиву\n-   [reset()](function.reset.md) - Встановлює внутрішній покажчик масиву на перший елемент\n-   [next()](function.next.md) \\- Переміщує покажчик масиву вперед на один елемент\n-   [prev()](function.prev.md) \\- Пересуває внутрішній покажчик масиву на одну позицію назад\n-   [foreach](control-structures.foreach.md)\n-   [Ітерація об'єктів](language.oop5.iterations.md)\n","title":"each","contentType":2,"navigation":[{"function.current.md":"« current"},{"function.end.md":"end »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}