{"pageProps":{"page":{"slug":"class.evloop.md","content":"# Клас EvLoop\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nПредставляє подійний цикл, який завжди відрізняється від *циклу за замовчуванням*В отличие от*циклу за замовчуванням*, він не може працювати зі спостерігачами [EvChild](class.evchild.md)\n\nЯкщо доступна робота з потоками виконання, необхідно створити цикл для кожного потоку використовуючи в якості батька *цикл за замовчуванням*\n\n*Типовий цикл за замовчуванням* ініціалізується автоматично за допомогою *Ev*Он доступен с помощью методов класса[Ev](class.ev.md)или с помощью метода[EvLoop::defaultLoop()](evloop.defaultloop.md)\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      final\n      class EvLoop\n     \n     {\n    \n    /* Свойства */\n    \n     public\n      $data;\n\n    public\n      $backend;\n\n    public\n      $is_default_loop;\n\n    public\n      $iteration;\n\n    public\n      $pending;\n\n    public\n      $io_interval;\n\n    public\n      $timeout_interval;\n\n    public\n      $depth;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    int\n     $flags\n    = ?,    \n    mixed\n     $data\n     = NULL\n   ,    \n    float\n     $io_interval\n     = 0.0\n   ,    \n    float\n     $timeout_interval\n     = 0.0\n   )\n\n    public\n   backend(): int\nfinal\n   public\n   check(\n    string\n     $callback\n   , \n    string\n     $data\n    = ?, \n    string\n     $priority\n    = ?): EvCheck\nfinal\n   public\n   child(    \n    string\n     $pid\n   ,    \n    string\n     $trace\n   ,    \n    string\n     $callback\n   ,    \n    string\n     $data\n    = ?,    \n    string\n     $priority\n    = ?): EvChild\npublic\n   static\n   defaultLoop(    \n    int\n     $flags\n     = Ev::FLAG_AUTO\n   ,    \n    mixed\n     $data\n     = NULL\n   ,    \n    float\n     $io_interval\n     = 0.\n   ,    \n    float\n     $timeout_interval\n     = 0.\n   ): EvLoop\nfinal\n   public\n   embed(    \n    string\n     $other\n   ,    \n    string\n     $callback\n    = ?,    \n    string\n     $data\n    = ?,    \n    string\n     $priority\n    = ?): EvEmbed\nfinal\n   public\n   fork(\n    callable\n     $callback\n   , \n    mixed\n     $data\n     = null\n   , \n    int\n     $priority\n     = 0\n   ): EvFork\nfinal\n   public\n   idle(\n    callable\n     $callback\n   , \n    mixed\n     $data\n     = null\n   , \n    int\n     $priority\n     = 0\n   ): EvIdle\npublic\n   invokePending(): void\nfinal\n   public\n   io(    \n    mixed\n     $fd\n   ,    \n    int\n     $events\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvIo\npublic\n   loopFork(): void\npublic\n   now(): float\npublic\n   nowUpdate(): void\nfinal\n   public\n   periodic(    \n    float\n     $offset\n   ,    \n    float\n     $interval\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvPeriodic\nfinal\n   public\n   prepare(\n    callable\n     $callback\n   , \n    mixed\n     $data\n     = null\n   , \n    int\n     $priority\n     = 0\n   ): EvPrepare\npublic\n   resume(): void\npublic\n   run(\n    int\n     $flags\n     = 0\n   ): void\nfinal\n   public\n   signal(    \n    int\n     $signum\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvSignal\nfinal\n   public\n   stat(    \n    string\n     $path\n   ,    \n    float\n     $interval\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvStat\npublic\n   stop(\n    int\n     $how\n    = ?): void\npublic\n   suspend(): void\nfinal\n   public\n   timer(    \n    float\n     $after\n   ,    \n    float\n     $repeat\n   ,    \n    callable\n     $callback\n   ,    \n    mixed\n     $data\n     = null\n   ,    \n    int\n     $priority\n     = 0\n   ): EvTimer\npublic\n   verify(): void\n\n   }\n```\n\n## Властивості\n\ndata\n\nДовільні дані, додані циклу\n\nbackend\n\n*Тільки читання*. . [Прапори бекенда](class.ev.md#ev.constants.watcher-backends) що вказують який подійний бекенд використовується.\n\nis\\_default\\_loop\n\n*Тільки читання*. Якщо **`true`**, Це цикл за замовчуванням.\n\niteration\n\nПоточний лічильник ітерацій. Дивись [Ev::iteration()](ev.iteration.md)\n\npending\n\nКількість спостерігачів, що очікують . означає, що спостерігачі, що очікують, відсутні.\n\nio\\_interval\n\nВищі значення io\\_interval позволяют*libev* витрачати більше часу для збору подій [EvIo](class.evio.md), що дозволить обробити більше подій за одну ітерацію, заплативши за це збільшеними затримками. Час очікування (і [EvPeriodic](class.evperiodic.md) і [EvTimer](class.evtimer.md)) не буде порушено. Налаштування в ненульове значення додати додатковий виклик `sleep()` більшість ітерацій циклу. Час сну гарантує, що *libev* не передаватиме події [EvIo](class.evio.md) частіше, ніж один раз за цей період, у середньому. Для більшості програм хорошим значенням io\\_interval буде значення близько **`0.1`**, цього достатньо більшості інтерактивних серверів (не для ігор). Зазвичай ви не помітите жодної різниці, якщо встановите його менше **`0.01`**, так як це значення буде близько до мінімального інтервалу обчислюваного часу для більшості систем.\n\nТакже читайте[» ФУНКЦІЇ УПРАВЛІННЯ ПОДІЙНИМИ ЦИКЛАМИ](http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS)\n\ntimeout\\_interval\n\nВищі значення timeout\\_interval позволят*libev* витрачати більше часу для збору перевищеного часу очікування рахунок збільшення затримок/джиттеров/неточностей (функція зворотного виклику спостерігача буде викликана пізніше). Спостерігачі [EvIo](class.evio.md) не торкнуться. Збільшення цього значення не викличе перевитрати ресурсів у *libev*Также читайте[» ФУНКЦІЇ УПРАВЛІННЯ ПОДІЙНИМИ ЦИКЛАМИ](http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS)\n\ndepth\n\nГлубина рекурсии. Смотрите[Ev::depth()](ev.depth.md)\n\n## Зміст\n\n-   [EvLoop::backend](evloop.backend.md)— Повертає ціле число, що описує бекенд, який використовується libev\n-   [EvLoop::check](evloop.check.md)— Створює об'єкт EvCheck, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::child](evloop.child.md)— Створює об'єкт EvChild, пов'язаний із поточним циклом подій\n-   [EvLoop::\\_\\_construct](evloop.construct.md) \\- Конструктор об'єкта циклу подій\n-   [EvLoop::defaultLoop](evloop.defaultloop.md)— Повертає або створює цикл стандартних подій\n-   [EvLoop::embed](evloop.embed.md)— Створює екземпляр спостерігача EvEmbed, пов'язаний із поточним об'єктом EvLoop\n-   [EvLoop::fork](evloop.fork.md)— Створює об'єкт спостерігача EvFork, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::idle](evloop.idle.md)— Створює об'єкт спостерігача EvIdle, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::invokePending](evloop.invokepending.md)— Викликає всіх спостерігачів, що очікують, при скиданні їх відкладеного стану\n-   [EvLoop::io](evloop.io.md)— Створює об'єкт спостерігача EvIo, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::loopFork](evloop.loopfork.md)— Викликається після розгалуження\n-   [EvLoop::now](evloop.now.md) - Повертає поточне \"event loop time\"\n-   [EvLoop::nowUpdate](evloop.nowupdate.md)— Встановлює поточний час, запитуючи ядро, оновлюючи час, який повертається EvLoop::now у процесі\n-   [EvLoop::periodic](evloop.periodic.md)— Створює об'єкт спостерігача EvPeriodic, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::prepare](evloop.prepare.md)— Створює об'єкт спостерігача EvPrepare, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::resume](evloop.resume.md)— Відновлює раніше зупинений цикл подій\n-   [EvLoop::run](evloop.run.md)— Перевіряє події та викликає callback-функції у циклі\n-   [EvLoop::signal](evloop.signal.md)— Створює об'єкт спостерігача EvSignal, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::stat](evloop.stat.md)— Створює об'єкт спостерігача EvStat, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::stop](evloop.stop.md) \\- Зупиняє цикл подій\n-   [EvLoop::suspend](evloop.suspend.md) \\- Припиняє цикл\n-   [EvLoop::timer](evloop.timer.md)— Створює об'єкт спостерігача EvTimer, пов'язаний із поточним екземпляром циклу подій\n-   [EvLoop::verify](evloop.verify.md) \\- Виконує внутрішні перевірки узгодженості (для налагодження)\n","title":"Клас EvLoop","contentType":2,"navigation":[{"evio.set.md":"« EvIo::set"},{"evloop.backend.md":"EvLoop::backend »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}