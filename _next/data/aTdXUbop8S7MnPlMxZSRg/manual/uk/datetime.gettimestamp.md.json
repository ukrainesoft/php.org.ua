{"pageProps":{"page":{"slug":"datetime.gettimestamp.md","content":"# DateTimeInterface::getTimestamp\n\n# DateTimeImmutable::getTimestamp\n\n# DateTime::getTimestamp\n\n# date\\_timestamp\\_get\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8)\n\nDateTimeInterface::getTimestamp -- DateTimeImmutable::getTimestamp -- DateTime::getTimestamp -- date\\_timestamp\\_get — Повертає тимчасову мітку Unix\n\n### Опис\n\nОб'єктно-орієнтований стиль\n\n```methodsynopsis\npublic DateTimeInterface::getTimestamp(): int\n```\n\n```methodsynopsis\npublic DateTimeImmutable::getTimestamp(): int\n```\n\n```methodsynopsis\npublic DateTime::getTimestamp(): int\n```\n\nПроцедурний стиль\n\n```methodsynopsis\ndate_timestamp_get(DateTimeInterface $object): int\n```\n\nПовертає тимчасову мітку Unix.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає тимчасову мітку Unix для цієї дати.\n\n### Помилки\n\nЯкщо не вийде представити тимчасову мітку цілим числом (int), буде викинуто виняток [DateRangeError](class.daterangeerror.md). До PHP 8.3.0 викидався виняток [ValueError](class.valueerror.md). А до PHP 8.0.0 поверталося логічне значення **`false`**. При цьому мітку часу можна отримати у вигляді рядка (string), викликавши метод [DateTimeInterface::format()](datetime.format.md) з параметром форматування `U`\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.3.0 | Тепер при виході за межі діапазону буде викинуто виняток [DateRangeError](class.daterangeerror.md) |\n| 8.0.0 | Функції більше не повертають значення \\*\\*`false`\\*\\*в случае возникновения ошибки. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** DateTime::getTimestamp()\\*\\*\\*\\*\n\nОб'єктно-орієнтований стиль\n\n```php\n<?php\n$date = new DateTimeImmutable();\necho $date->getTimestamp();\n?>\n```\n\nПроцедурний стиль\n\n```php\n<?php\n$date = date_create();\necho date_timestamp_get($date);\n?>\n```\n\nВисновок наведених прикладів буде схожим на:\n\n```\n1272509157\n```\n\nЯкщо потрібно отримати мітку часу з мілісекундами або мікросекундами, можна використовувати функцію [DateTimeInterface::format()](datetime.format.md)\n\n**Приклад #2 Отримання мітки часу з мілі- та мікросекундами**\n\nОб'єктно-орієнтований стиль\n\n```php\n<?php\n$date = new DateTimeImmutable();\n$milli = (int)$date->format('Uv'); // Метка времени с миллисекундами\n$micro = (int)$date->format('Uu'); // Метка времени с микросекундами\n\necho $milli, \"\\n\", $micro, \"\\n\";\n?>\n```\n\nВисновок наведених прикладів буде схожим на:\n\n```\n1674057635586\n1674057635586918\n```\n\n### Дивіться також\n\n-   [DateTime::setTimestamp()](datetime.settimestamp.md) \\- Встановлює дату та час на основі мітки часу Unix\n-   [DateTimeImmutable::setTimestamp()](datetimeimmutable.settimestamp.md) \\- Встановлює дату та час на основі мітки часу Unix\n-   [DateTimeInterface::format()](datetime.format.md) \\- Повертає дату, відформатовану згідно з переданим форматом\n","title":"DateTimeInterface::getTimestamp","contentType":2,"navigation":[{"datetime.getoffset.md":"« DateTimeInterface::getOffset"},{"datetime.gettimezone.md":"DateTimeInterface::getTimezone »"},{"index.md":"PHP Manual"},{"class.datetimeinterface.md":"DateTimeInterface"}]}},"__N_SSG":true}