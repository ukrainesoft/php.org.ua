{"pageProps":{"page":{"slug":"mysql-xdevapi.examples.md","content":"# Приклади\n\nЦентральна точка входу в X DevAPI – функція **mysql\\_xdevapi\\\\getSession()**, яка приймає URI сервер MySQL 8.0 і повертає об'єкт **mysql\\_xdevap\\\\Session**\n\n**Приклад #1 Підключення до сервера MySQL**\n\n```php\n<?php\ntry {\n    $session = mysql_xdevapi\\getSession(\"mysqlx://user:password@host\");\n} catch(Exception $e) {\n    die(\"Не удалось установить соединение: \" . $e->getMessage());\n}\n\n// ... используйте $session\n?>\n```\n\nСесія надає повний доступ до API. Перший крок для нової установки MySQL-сервера - це створення схеми бази даних із колекцією для зберігання даних:\n\n**Приклад #2 Створення схеми та колекції на сервері MySQL**\n\n```php\n<?php\n$schema = $session->createSchema(\"test\");\n$collection = $schema->createCollection(\"example\");\n?>\n```\n\nПри збереженні даних їх зазвичай кодують JSON-формат функцією [json\\_encode()](function.json-encode.md), який може бути збережений всередині колекції.\n\nУ наступному прикладі дані зберігаються в колекції, яку ми створили раніше, а потім знову витягуємо їх частини.\n\n**Приклад #3 Зберігання та отримання даних**\n\n```php\n<?php\n$marco = [\n  \"name\" => \"Marco\",\n  \"age\"  => 19,\n  \"job\"  => \"Programmer\"\n];\n$mike = [\n  \"name\" => \"Mike\",\n  \"age\"  => 39,\n  \"job\"  => \"Manager\"\n];\n\n$schema = $session->getSchema(\"test\");\n$collection = $schema->getCollection(\"example\");\n\n$collection->add($marco, $mike)->execute();\n\nvar_dump($collection->find(\"name = 'Mike'\")->execute()->fetchOne());\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(4) {\n  [\"_id\"]=>\n  string(28) \"00005ad66aaf0000000000000003\"\n  [\"age\"]=>\n  int(39)\n  [\"job\"]=>\n  string(7) \"Manager\"\n  [\"name\"]=>\n  string(4) \"Mike\"\n}\n```\n\nУ прикладі показано, що MySQL сервер додає поле з ім'ям `_id`що виступає в ролі первинного ключа до документа.\n\nУ прикладі також показано, що вилучені дані відсортовані за абеткою. Цей конкретний порядок обґрунтований ефективним двійковим сховищем усередині сервера MySQL, але на нього не потрібно покладатися. Докладніше про це розказано в документації типу даних MySQL JSON.\n\nЗа бажанням можна використовувати ітератори PHP для вилучення кількох документів:\n\n**Приклад #4 Вилучення та ітерація кількох документів**\n\n```php\n<?php\n$result = $collection->find()->execute();\nforeach ($result as $doc) {\n  echo \"${doc[\"name\"]} is a ${doc[\"job\"]}.\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nMarco is a Programmer.\nMike is a Manager.\n```\n","title":"Приклади","contentType":2,"navigation":[{"changelog.mysql_xdevapi.md":"\" Список змін"},{"ref.mysql-xdevapi.md":"Функції Mysql\\_xdevapi »"},{"index.md":"PHP Manual"},{"book.mysql-xdevapi.md":"Mysql\\_xdevapi"}]}},"__N_SSG":true}