{"pageProps":{"page":{"slug":"function.stream-filter-register.md","content":"# stream\\_filter\\_register\n\n(PHP 5, PHP 7, PHP 8)\n\nstream\\_filter\\_register — реєструє потоковий фільтр, визначений користувачем\n\n### Опис\n\n```methodsynopsis\nstream_filter_register(string $filter_name, string $class): bool\n```\n\n**stream\\_filter\\_register()** дозволяє реалізувати власний фільтр для будь-якого зареєстрованого потоку, що використовується з усіма іншими функціями файлової системи (такими як [fopen()](function.fopen.md) [fread()](function.fread.md)и т. д.).\n\n### Список параметрів\n\n`filter_name`\n\nНазва фільтру, що реєструється.\n\n`class`\n\nЩоб реалізувати фільтр, вам потрібно визначити клас як розширення [php\\_user\\_filter](class.php-user-filter.md) c цілим рядом функцій-членів. При виконанні операцій читання/запису на потоці, до якого прикріплений ваш фільтр, PHP передаватиме дані через ваш фільтр (і через будь-які інші фільтри, прикріплені до потоку), так що дані можуть бути змінені як потрібно. Вам необхідно реалізувати методи точно як описано в [php\\_user\\_filter](class.php-user-filter.md). Інша реалізація призведе до непередбачуваної поведінки.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n**stream\\_filter\\_register()** повертатиме \\*\\*`false`\\*\\*якщо фільтр з ім'ям `filter_name` вже визначено.\n\n### Приклади\n\n**Приклад #1 Фільтр для перекладу букв у верхній регістр у потоці foo-bar.txt**\n\nПриклад нижче реалізує фільтр під назвою `strtoupper` на файловому потоці foo-bar.txt, який буде переводити в великі всі літери, які пишуться/читаються з цього потоку.\n\n```php\n<?php\n\n/* Определяем наш класс фильтра */\nclass strtoupper_filter extends php_user_filter {\n  function filter($in, $out, &$consumed, $closing)\n  {\n    while ($bucket = stream_bucket_make_writeable($in)) {\n      $bucket->data = strtoupper($bucket->data);\n      $consumed += $bucket->datalen;\n      stream_bucket_append($out, $bucket);\n    }\n    return PSFS_PASS_ON;\n  }\n}\n\n/* Регистрируем наш фильтр в  PHP */\nstream_filter_register(\"strtoupper\", \"strtoupper_filter\")\n    or die(\"Не удалось зарегистрировать фильтр\");\n\n$fp = fopen(\"foo-bar.txt\", \"w\");\n\n/* Присоединяем зарегистрированный фильтр к только что открытому потоку */\nstream_filter_append($fp, \"strtoupper\");\n\nfwrite($fp, \"Line1\\n\");\nfwrite($fp, \"Word - 2\\n\");\nfwrite($fp, \"Easy As 123\\n\");\n\nfclose($fp);\n\n/* Читаем содержимое снова\n */\nreadfile(\"foo-bar.txt\");\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nLINE1\nWORD - 2\nEASY AS 123\n```\n\n**Приклад #2 Реєстрація стандартного фільтра, що відповідає множинним іменам фільтрів.**\n\n```php\n<?php\n\n/* Определяем наш класс фильтра */\nclass string_filter extends php_user_filter {\n  var $mode;\n\n  function filter($in, $out, &$consumed, $closing)\n  {\n    while ($bucket = stream_bucket_make_writeable($in)) {\n      if ($this->mode == 1) {\n        $bucket->data = strtoupper($bucket->data);\n      } elseif ($this->mode == 0) {\n        $bucket->data = strtolower($bucket->data);\n      }\n\n      $consumed += $bucket->datalen;\n      stream_bucket_append($out, $bucket);\n    }\n    return PSFS_PASS_ON;\n  }\n\n  function onCreate()\n  {\n    if ($this->filtername == 'str.toupper') {\n      $this->mode = 1;\n    } elseif ($this->filtername == 'str.tolower') {\n      $this->mode = 0;\n    } else {\n      /* Был вызван какой-то другой фильтр str.*,\n         возвращаем ошибку, чтобы  PHP мог продолжить его поиск */\n      return false;\n    }\n\n    return true;\n  }\n}\n\n/* Регистрируем наш фильтр в  PHP */\nstream_filter_register(\"str.*\", \"string_filter\")\n    or die(\"Не удалось зарегистрировать фильтр\");\n\n$fp = fopen(\"foo-bar.txt\", \"w\");\n\n/* Присоединяем зарегистрированный фильтр к только что открытому потоку\n   Мы могли бы использовать здесь  str.tolower */\nstream_filter_append($fp, \"str.toupper\");\n\nfwrite($fp, \"Line1\\n\");\nfwrite($fp, \"Word - 2\\n\");\nfwrite($fp, \"Easy As 123\\n\");\n\nfclose($fp);\n\n/* Читаем содержимое снова\n */\nreadfile(\"foo-bar.txt\");\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nLINE1\nWORD - 2\nEASY AS 123\n```\n\n### Дивіться також\n\n-   [stream\\_wrapper\\_register()](function.stream-wrapper-register.md) \\- реєструє обгортку URL, реалізовану у вигляді PHP-класу\n-   [stream\\_filter\\_append()](function.stream-filter-append.md) \\- Прикріпити фільтр до потоку\n-   [stream\\_filter\\_prepend()](function.stream-filter-prepend.md) \\- Прикріплює фільтр до потоку\n","title":"stream\\_filter\\_register","contentType":2,"navigation":[{"function.stream-filter-prepend.md":"« stream\\_filter\\_prepend"},{"function.stream-filter-remove.md":"stream\\_filter\\_remove »"},{"index.md":"PHP Manual"},{"ref.stream.md":"Функції для роботи з потоками"}]}},"__N_SSG":true}