{"pageProps":{"page":{"slug":"reflectionproperty.getattributes.md","content":"# ReflectionProperty::getAttributes\n\n(PHP 8)\n\nReflectionProperty::getAttributes — Отримує атрибути\n\n### Опис\n\n```methodsynopsis\npublic ReflectionProperty::getAttributes(?string $name = null, int $flags = 0): array\n```\n\nПовертає всі атрибути, оголошені в цій властивості класу, у вигляді масиву [ReflectionAttribute](class.reflectionattribute.md)\n\n### Список параметрів\n\n`name`\n\nФільтрування результатів, щоб залишити лише екземпляри [ReflectionAttribute](class.reflectionattribute.md) для атрибутів, які відповідають цьому імені класу.\n\n`flags`\n\nФлаги для определения способа фильтрации результатов, если указан параметр`name`\n\nПо умолчанию значение , що повертає результати лише для атрибутів, що належать до класу `name`\n\nЄдиним доступним варіантом є використання константи \\*\\*`ReflectionAttribute::IS_INSTANCEOF`\\*\\*яка замість цього буде використовувати для фільтрації `instanceof`\n\n### Значення, що повертаються\n\nМасив атрибутів як об'єкта [ReflectionAttribute](class.reflectionattribute.md)\n\n### Приклади\n\n**Приклад #1 Простий приклад**\n\n```php\n<?php\n#[Attribute]\nclass Fruit {\n}\n\n#[Attribute]\nclass Red {\n}\n\nclass Basket {\n    #[Fruit]\n    #[Red]\n    public string $apple = 'apple';\n}\n\n$property = new ReflectionProperty('Basket', 'apple');\n$attributes = $property->getAttributes();\nprint_r(array_map(fn($attribute) => $attribute->getName(), $attributes));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => Fruit\n    [1] => Red\n)\n```\n\n**Приклад #2 Фільтрування результатів на ім'я класу**\n\n```php\n<?php\n#[Attribute]\nclass Fruit {\n}\n\n#[Attribute]\nclass Red {\n}\n\nclass Basket {\n    #[Fruit]\n    #[Red]\n    public string $apple = 'apple';\n}\n\n$property = new ReflectionProperty('Basket', 'apple');\n$attributes = $property->getAttributes('Fruit');\nprint_r(array_map(fn($attribute) => $attribute->getName(), $attributes));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => Fruit\n)\n```\n\n**Приклад #3 Фільтрування результатів на ім'я класу, з успадкуванням**\n\n```php\n<?php\ninterface Color {\n}\n\n#[Attribute]\nclass Fruit {\n}\n\n#[Attribute]\nclass Red implements Color {\n}\n\nclass Basket {\n    #[Fruit]\n    #[Red]\n    public string $apple = 'apple';\n}\n\n$property = new ReflectionProperty('Basket', 'apple');\n$attributes = $property->getAttributes('Color', ReflectionAttribute::IS_INSTANCEOF);\nprint_r(array_map(fn($attribute) => $attribute->getName(), $attributes));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [0] => Red\n)\n```\n\n### Дивіться також\n\n-   [ReflectionClass::getAttributes()](reflectionclass.getattributes.md) \\- Отримує атрибути\n-   [ReflectionClassConstant::getAttributes()](reflectionclassconstant.getattributes.md) \\- Отримує атрибути\n-   [ReflectionFunctionAbstract::getAttributes()](reflectionfunctionabstract.getattributes.md) \\- Отримує атрибути\n-   [ReflectionParameter::getAttributes()](reflectionparameter.getattributes.md) \\- Отримує атрибути\n","title":"ReflectionProperty::getAttributes","contentType":2,"navigation":[{"reflectionproperty.export.md":"« ReflectionProperty::export"},{"reflectionproperty.getdeclaringclass.md":"ReflectionProperty::getDeclaringClass »"},{"index.md":"PHP Manual"},{"class.reflectionproperty.md":"ReflectionProperty"}]}},"__N_SSG":true}