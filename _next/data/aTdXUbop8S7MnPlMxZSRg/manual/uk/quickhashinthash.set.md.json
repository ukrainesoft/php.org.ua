{"pageProps":{"page":{"slug":"quickhashinthash.set.md","content":"# QuickHashIntHash::set\n\n(PECL quickhash >= Unknown)\n\nQuickHashIntHash::set — Метод оновлює запис у хеші новим значенням або додає новий, якщо запис не існує\n\n### Опис\n\n```methodsynopsis\npublic QuickHashIntHash::set(int $key, int $value): bool\n```\n\nМетод намагається оновити запис новим значенням. Якщо запис ще не існує, замість цього додається новий запис. Повертається інформація про те, чи запис було додано або оновлено. Якщо є дублікати ключів, лише перший знайдений елемент набуде оновленого значення. Використовуйте константу **`QuickHashIntHash::CHECK_FOR_DUPES`** під час створення хешу, щоб запобігти попаданню дублюючих ключів у хеш.\n\n### Список параметрів\n\n`key`\n\nКлюч запису, який потрібно додати або оновити.\n\n`value`\n\nНове значення запису.\n\n### Значення, що повертаються\n\nМетод повертає 2, якщо запис було знайдено та оновлено, 1, якщо запис було додано або 0 у разі виникнення помилки.\n\n### Приклади\n\n**Приклад #1 Приклад використання** QuickHashIntHash::set()\\*\\*\\*\\*\n\n```php\n<?php\n$hash = new QuickHashIntHash( 1024 );\n\necho \"Set->Add\\n\";\nvar_dump( $hash->get( 46692 ) );\nvar_dump( $hash->set( 46692, 16091 ) );\nvar_dump( $hash->get( 46692 ) );\n\necho \"Set->Update\\n\";\nvar_dump( $hash->set( 46692, 29906 ) );\nvar_dump( $hash->get( 46692 ) );\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nbool(false)\nint(2)\nint(16091)\nSet->Update\nint(1)\nint(29906)\n```\n","title":"QuickHashIntHash::set","contentType":2,"navigation":[{"quickhashinthash.savetostring.md":"« QuickHashIntHash::saveToString"},{"quickhashinthash.update.md":"QuickHashIntHash::update »"},{"index.md":"PHP Manual"},{"class.quickhashinthash.md":"QuickHashIntHash"}]}},"__N_SSG":true}