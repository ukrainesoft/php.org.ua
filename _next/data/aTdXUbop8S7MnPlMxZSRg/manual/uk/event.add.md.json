{"pageProps":{"page":{"slug":"event.add.md","content":"# Event::add\n\n(PECL event >= 1.2.6-beta)\n\nEvent::add — Перевести подію у стан очікування\n\n### Опис\n\n```methodsynopsis\npublic\n   Event::add(\n    float\n     $timeout\n    = ?): bool\n```\n\nПереводить подію у стан очікування. Події, що не очікують, ніколи не спрацюють і не викличуть callback-функцію. В поєднанні з [Event::del()](event.del.md), подія може бути перезаплановано користувачем у будь-який час.\n\nЯкщо метод **Event::add()** викликаний для вже очікуваної події, libevent залишить його в стані очікування і перезапланує його відповідно до заданого часу очікування (якщо воно задано). Якщо час очікування не заданий, то **Event::add()** не матиме будь-якого ефекту.\n\n### Список параметрів\n\n`timeout`\n\nЧас очікування за секунди.\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Додавання сигналу користувача**\n\n```php\n<?php\n/*\nЗапустите в окне терминала:\n\n$ php examples/signal.php\n\nВ другом окне терминала узнайте pid и отправьте SIGTERM, наПриклад:\n\n$ ps aux | grep examp\n\nruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php\nruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp\n$ kill -TERM 3976\n\nВ первом окне терминала вы должны увидеть следующее:\nПойманный сигнал 15\n*/\nclass MyEventSignal {\n    private $base, $ev;\n    public function __construct($base) {\n        $this->base = $base;\n        $this->ev = Event::signal($base, SIGTERM, array($this, 'eventSighandler'));\n        $this->ev->add();\n    }\n    public function eventSighandler($no, $c) {\n        echo \"Пойманный сигнал $no\\n\";\n        $this->base->exit();\n    }\n}\n$base = new EventBase();\n$c    = new MyEventSignal($base);\n$base->loop();\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nПойманный сигнал 15\n```\n\n**Приклад #2 Додавання таймера**\n\n```php\n<?php\n$base = new EventBase();\n$n = 2;\n$e = Event::timer($base, function($n) use (&$e) {\n    echo \"Прошло секунд: $n\\n\";\n    $e->delTimer();\n}, $n);\n$e->add($n);\n$base->loop();\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nПрошло секунд: 2\n```\n\n### Дивіться також\n\n-   **Event::add()**\n-   [Event::del()](event.del.md) \\- Перевести подію в пасивний стан\n-   [Event::signal()](event.signal.md) \\- Створити об'єкт події сигналу\n-   [Event::timer()](event.timer.md) \\- Створити об'єкт події таймера\n","title":"Event::add","contentType":2,"navigation":[{"class.event.md":"« Event"},{"event.addsignal.md":"Event::addSignal »"},{"index.md":"PHP Manual"},{"class.event.md":"Event"}]}},"__N_SSG":true}