{"pageProps":{"page":{"slug":"function.in-array.md","content":"# in\\_array\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nin\\_array — Перевіряє, чи є у масиві значення\n\n### Опис\n\n```methodsynopsis\nin_array(mixed $needle, array $haystack, bool $strict = false): bool\n```\n\nШукає в `haystack`значение`needle`. Якщо `strict`не установлен, то при поиске будет использовано нестрогое сравнение.\n\n### Список параметрів\n\n`needle`\n\nШукане значення.\n\n> **Зауваження** :\n> \n> Якщо `needle` - Рядок, порівняння буде зроблено з урахуванням регістру.\n\n`haystack`\n\nМасив.\n\n`strict`\n\nЕсли третий параметр`strict`установлен в\\*\\*`true`**, тогда функция**in\\_array()\\*\\* також перевірить відповідність [типів](language.types.md)параметра`needle` та відповідного значення масиву `haystack`\n\n> **Зауваження** :\n> \n> До PHP 8.0.0`рядкове`значение параметра`needle` буде відповідати значенню масиву у нестрогому режимі, і навпаки. Це може спричинити небажані результати. Подібні випадки існують і для інших типів. Якщо немає повної впевненості у типах значень, завжди використовуйте прапор `strict`щоб уникнути несподіваної поведінки.\n\n### Значення, що повертаються\n\nПовертає **`true`**, якщо `needle` був знайдений у масиві, та **`false`** в іншому випадку.\n\n### Приклади\n\n**Приклад #1 Приклад використання** in\\_array()\\*\\*\\*\\*\n\n```php\n<?php\n$os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\");\nif (in_array(\"Irix\", $os)) {\n    echo \"Нашёл Irix\";\n}\nif (in_array(\"mac\", $os)) {\n    echo \"Нашёл mac\";\n}\n?>\n```\n\nДругого збігу не буде, бо **in\\_array()** реєстрозалежна, таким чином, програма виведе:\n\n```\nНашёл Irix\n```\n\n**Приклад #2 Приклад використання** in\\_array()**с параметром strict**\n\n```php\n<?php\n$a = array('1.10', 12.4, 1.13);\n\nif (in_array('12.4', $a, true)) {\n    echo \"'12.4' найдено со строгой проверкой\\n\";\n}\n\nif (in_array(1.13, $a, true)) {\n    echo \"1.13 найдено со строгой проверкой\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n1.13 найдено со строгой проверкой\n```\n\n**Приклад #3 Приклад використання** in\\_array()\\*\\* з масивом як параметр needle\\*\\*\n\n```php\n<?php\n$a = array(array('p', 'h'), array('p', 'r'), 'o');\n\nif (in_array(array('p', 'h'), $a)) {\n    echo \"'ph' найдено\\n\";\n}\n\nif (in_array(array('f', 'i'), $a)) {\n    echo \"'fi' найдено\\n\";\n}\n\nif (in_array('o', $a)) {\n    echo \"'o' найдено\\n\";\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n'ph' найдено\n  'o' найдено\n```\n\n### Дивіться також\n\n-   [array\\_search()](function.array-search.md) \\- Здійснює пошук даного значення в масиві та повертає ключ першого знайденого елемента у разі успішного виконання\n-   [isset()](function.isset.md) \\- Визначає, чи була встановлена ​​змінна значенням, відмінним від null\n-   [array\\_key\\_exists()](function.array-key-exists.md) \\- Перевіряє, чи існує в масиві заданий ключ чи індекс\n","title":"in\\_array","contentType":2,"navigation":[{"function.extract.md":"« extract"},{"function.key-exists.md":"key\\_exists »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}