{"pageProps":{"page":{"slug":"function.hash-pbkdf2.md","content":"# hash\\_pbkdf2\n\n(PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\nhash\\_pbkdf2 - Формування ключа PBKDF2 для заданих вхідних даних\n\n### Опис\n\n```methodsynopsis\nhash_pbkdf2(    string $algo,    string $password,    string $salt,    int $iterations,    int $length = 0,    bool $binary = false): string\n```\n\n### Список параметрів\n\n`algo`\n\nІм'я обраного алгоритму хешування (наприклад, `md5` `sha256` `haval160,4` і т.д.) Список підтримуваних алгоритмів можна переглянути в описі функції [hash\\_algos()](function.hash-algos.md)\n\n`password`\n\nПароль, що використовується для формування.\n\n`salt`\n\nСіль, що використовується для формування ключа. Значення необхідно генерувати випадковим чином.\n\n`iterations`\n\nКількість ітерацій на формування ключа.\n\n`length`\n\nДовжина рядка, що генерується. Якщо параметр `binary`задан как\\*\\*`true`**, то цей параметр дорівнює кількості байт у ключі, що генерується. Якщо `binary`установлен как**`false`\\*\\*, то довжина ключа в байтах буде вдвічі менша, тому що кожен байт ключа буде повернутий у вигляді двох символів шістнадцяткової системи (0-F).\n\nЯкщо поставлено як , то використовується весь висновок заданого алгоритму.\n\n`binary`\n\nЕсли установлено\\*\\*`true`\\*\\*, то висновок буде необроблені бінарні дані, а якщо **`false`**, то висновок буде представлений у вигляді рядка шістнадцяткових цифр у нижньому регістрі.\n\n### Значення, що повертаються\n\nПовертається рядок містить сформований ключ у вигляді рядка шістнадцяткових чисел у нижньому регістрі. Але якщо параметр `binary`установлен как\\*\\*`true`\\*\\*, то буде повернуто сирі бінарні дані.\n\n### Помилки\n\nВикидається виняток [ValueError](class.valueerror.md)якщо заданий алгоритм некоректний, параметр `iterations` менше або дорівнює , параметр`length`меньше чем або якщо `salt` дуже довгий (більше ніж **`INT_MAX`** `- 4`\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Тепер викидається виняток[ValueError](class.valueerror.md) у разі виникнення помилки; раніше поверталося значення **`false`** і видавалася помилка рівня **`E_WARNING`** |\n| 7.2.0 | Заборонено використання некриптографічних функцій (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat). |\n\n### Приклади\n\n**Приклад #1 Приклад простого використання **hash\\_pbkdf2()****\n\n```php\n<?php\n$password = \"password\";\n$iterations = 600000;\n\n// Создание криптографически безопасной случайной соли с помощью random_bytes()\n$salt = random_bytes(16);\n\n$hash = hash_pbkdf2(\"sha256\", $password, $salt, $iterations, 20);\nvar_dump($hash);\n\n// для необработанного двоичного файла параметр $length должен быть уменьшен вдвое для получения аналогичных результатов\n$hash = hash_pbkdf2(\"sha256\", $password, $salt, $iterations, 10, true);\nvar_dump(bin2hex($hash));?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nstring(20) \"120fb6cffcf8b32c43e7\"\nstring(20) \"120fb6cffcf8b32c43e7\"\n```\n\n### Примітки\n\n**Застереження**\n\nМетод PBKDF2 може бути використаний для хешування паролів з метою їх зберігання. Однак варто пам'ятати, що для цих цілей краще використовувати [password\\_hash()](function.password-hash.md) або [crypt()](function.crypt.md)с\\*\\*`CRYPT_BLOWFISH`\\*\\*\n\n### Дивіться також\n\n-   [password\\_hash()](function.password-hash.md) \\- Створює хеш пароля\n-   [hash\\_hkdf()](function.hash-hkdf.md) \\- Формування ключа HKDF для заданих вхідних даних\n-   [sodium\\_crypto\\_pwhash()](function.sodium-crypto-pwhash.md) \\- Отримує ключ із пароля, використовуючи Argon2\n","title":"hash\\_pbkdf2","contentType":2,"navigation":[{"function.hash-init.md":"« hash\\_init"},{"function.hash-update-file.md":"hash\\_update\\_file »"},{"index.md":"PHP Manual"},{"ref.hash.md":"Функції Hash"}]}},"__N_SSG":true}