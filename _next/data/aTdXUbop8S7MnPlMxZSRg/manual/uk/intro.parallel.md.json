{"pageProps":{"page":{"slug":"intro.parallel.md","content":"# Вступ\n\nparallel – це модуль паралельного виконання для PHP ≥ 7.2.0. З parallel 1.2.0 потрібно PHP ≥ 8.0.0.\n\nКороткий опис основних понять паралельних процесів описано нижче, докладнішу інформацію можна знайти в цьому розділі посібника.\n\n### Runtime\n\n[parallel\\\\Runtime](class.parallel-runtime.md)представляет поток интерпретатора PHP[parallel\\\\Runtime](class.parallel-runtime.md) налаштований з додатковим файлом початкового завантаження, переданим у [parallel\\\\Runtime::\\_\\_construct()](parallel-runtime.construct.md)зазвичай це автозавантажувач або будь-яка інша процедура попереднього завантаження: файл початкового завантаження буде підключатися перед виконанням будь-якого завдання.\n\nПосле создания[parallel\\\\Runtime](class.parallel-runtime.md) залишається доступним доти, доки він не буде закритий, знищений або знищений звичайними правилами області видимості об'єктів PHP . [parallel\\\\Runtime::run()](parallel-runtime.run.md) дозволяє програмісту планувати завдання для паралельного виконання. У [parallel\\\\Runtime](class.parallel-runtime.md) розклад FIFO, завдання виконуватимуться у порядку, у якому вони заплановані.\n\n### Функціональний API\n\nparallel реалізує функціональний API вищого рівня поверх [parallel\\\\Runtime](class.parallel-runtime.md), що забезпечує єдину точку входу функції для виконання паралельного коду з автоматичним плануванням: [parallel\\\\run()](parallel.run.md)\n\n### Завдання\n\nЗавдання - це просто замикання ([Closure](class.closure.md)), призначене для паралельного виконання . [Closure](class.closure.md) може містити практично будь-яку інструкцію, включаючи вкладені замикання. Однак є деякі інструкції, які заборонені у завданнях:\n\n-   yield\n    \n-   use by-reference\n    \n-   declare class\n    \n-   declare named function\n    \n\n> **Зауваження** :\n> \n> Вкладені замикання можуть містити \"yield\" або \"use by-reference\", але не повинні містити оголошення класів або іменованих функцій.\n\n> **Зауваження** :\n> \n> Жодні інструкції не заборонені у файлах, які можуть включати завдання.\n\n### Ф'ючерс\n\n[parallel\\\\Future](class.parallel-future.md) використовується для доступу до значення, що повертається із завдання і надає API для скасування завдання.\n\n### Канал\n\nЗавдання можна запланувати з аргументами, використовувати змінні лексичної області видимості (за значенням) та повернути значення (за допомогою [parallel\\\\Future](class.parallel-future.md)), але це дозволяє лише односпрямований зв'язок: Це дозволяє програмісту відправляти дані та витягувати дані із завдання, але не допускають двонаправлений зв'язок між завданнями. API [parallel\\\\Channel](class.parallel-channel.md) забезпечує двоспрямований зв'язок між завданнями, [parallel\\\\Channel](class.parallel-channel.md) - це з'єднання типу сокету між завданнями, яке програміст може використовувати для надсилання та отримання даних.\n\n### Події\n\nAPI[parallel\\\\Events](class.parallel-events.md) реалізує власний цикл подій ([Traversable](class.traversable.md)) та метод [parallel\\\\Events::poll()](parallel-events.poll.md). Це дозволяє програмісту працювати з наборами каналів та/або ф'ючерсами. Програміст просто додає канали та ф'ючерси до циклу подій, необов'язково встановлюючи вхід для запису за допомогою [parallel\\\\Events::setInput()](parallel-events.setinput.md), і входить у foreach: parallel буде читати і записувати об'єкти в міру їх перетворення. Доступно з отриманням об'єктів [parallel\\\\Events\\\\Event](class.parallel-events-event.md), що описують операції, що відбулися.\n\n### Дивіться також\n\n-   [Філософія](philosophy.parallel.md)\n","title":"Вступ","contentType":2,"navigation":[{"book.parallel.md":"« parallel"},{"parallel.setup.md":"Встановлення »"},{"index.md":"PHP Manual"},{"book.parallel.md":"parallel"}]}},"__N_SSG":true}