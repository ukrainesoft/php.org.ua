{"pageProps":{"page":{"slug":"function.echo.md","content":"# echo\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\necho — Виводить рядки\n\n### Опис\n\n```methodsynopsis\necho(string ...$expressions): void\n```\n\nВиводить один або кілька виразів без додаткових символів нового рядка або пробілів.\n\nДотримуючись суворої термінології, `echo` - Це не функція, а мовна конструкція. Її аргументи - це список виразів, що йдуть за ключовим словом `echo`, розділених комами та не обмежених круглими дужками. Мовна конструкція `echo`, на відміну від інших мовних конструкцій, не повертає жодних значень, тому її не можна використовувати в контексті вираження.\n\nУ конструкції `echo` є також короткий синтаксис, де можна відразу після тега поставити знак рівності. Скорочений синтаксис працює навіть із вимкненим параметром конфігурації [short\\_open\\_tag](ini.core.md#ini.short-open-tag)\n\n```php\nУ меня есть <?=$foo?> foo.\n```\n\nОсновні відмінності від конструкції [print](function.print.md) полягають у тому, що конструкція `echo` вміє приймати багато аргументів та не повертає значення.\n\n### Список параметрів\n\n`expressions`\n\nОдин або кілька рядкових виразів для виведення, розділених комами. Нестрокові значення будуть перетворені на рядки, навіть якщо [включена директива`strict_types`](language.types.declarations.md#language.types.declarations.strict)\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання мовної конструкції `echo`**\n\n```php\n<?php\n\necho \"echo не требует скобок.\";\n\n// Строки можно передавать по отдельности как несколько аргументов или\n// объединять вместе и передавать как один аргумент.\necho 'Эта ', 'строка ', 'сформирована ', 'из ', 'нескольких параметров.', \"\\n\";\necho 'Эта ' . 'строка ' . 'сформирована ' . 'с ' . 'помощью конкатенации.' . \"\\n\";\n\n// Новая строка или пробел не добавляются; Приклад ниже выведет «приветмир» в одну строку\necho \"привет\";\necho \"мир\";\n\n// То же, что и выше\necho \"привет\", \"мир\";\n\necho \"Эта строка занимает\nнесколько строк. Новые строки также\nбудут выведены\";\n\necho \"Эта строка занимает\\nнесколько строк. Новые строки также\\nбудут выведены.\";\n\n// Аргументом может быть любое выражение, производящее строку\n$foo = \"Приклад\";\necho \"Приклад - это $foo\"; // Приклад - это Приклад\n\n$fruits = [\"лимон\", \"апельсин\", \"банан\"];\necho implode(\" и \", $fruits); // лимон и апельсин и банан\n\n// Нестроковые выражения приводятся к строковым, даже если задана строгая проверка типов declare(strict_types=1)\necho 6 * 7; // 42\n\n// Поскольку echo не работает как выражение, следующий код некорректен.\n($some_var) ? echo 'true' : echo 'false';\n\n// Однако следующие Приклады будут работать:\n($some_var) ? print 'true' : print 'false'; // print — тоже конструкция,\n                                            // но это допустимое выражение, возвращающее 1,\n                                            // поэтому его можно использовать в этом контексте.\n\necho $some_var ? 'true': 'false'; // сначала выполняется выражение, результат которого передаётся в echo\n?>\n```\n\n### Примітки\n\n> **Зауваження**: Оскільки це мовна конструкція, а не функція, її не можна викликати як [змінну функцію](functions.variable-functions.md) або передавати як [іменований аргумент](functions.arguments.md#functions.named-arguments)\n\n> **Зауваження** **Використання з круглими дужками**\n> \n> Висновок одного аргументу для конструкції `echo` у круглі дужки не викликає синтаксичної помилки та створить синтаксис, який виглядає як звичайний виклик функції. Однак це може ввести в оману, тому що круглі дужки інтерпретуються як частина виразу, а не частина самого синтаксису. `echo`\n> \n> ```php\n> <?php\n> \n> echo \"привіт\";\n> // виведе «привіт»\n> \n> echo(\"привіт\");\n> // також виведе \"привіт\", тому що (\"привіт\") - коректне вираження\n> \n> echo(1 + 2) * 3;\n> // Виведе «9»; круглі дужки призводять до того, що спочатку обчислюється 1+2, а потім 3*3\n> // оператор echo бачить весь вираз як один аргумент\n> \n> echo \"привіт\", \"світ\";\n> // виведе «привіт світ»\n> \n> echo(\"привіт\"), (\"світ\");\n> // Виведе «привіт світ»; круглі дужки є частиною кожного виразу\n> \n> echo(\"привіт\", \"світ\");\n> // Викине помилку синтаксичного аналізу, тому що (\"привіт\", \"світ\") - некоректний вираз.\n> ?>\n> ```\n\n**Підказка**\n\nПередача кількох аргументів у `echo` допомагає уникати ускладнень, пов'язаних із пріоритетом оператора конкатенації у PHP. Наприклад, у оператора конкатенації вищий пріоритет, ніж у тернарного оператора, а до PHP 8.0.0 у нього був той самий пріоритет, що й у додавання з відніманням:\n\n```php\n<?php\n\n// Ниже выражение 'Привет, ' . isset($name) вычисляется первым\n// и всегда имеет значение true, поэтому аргумент для echo всегда равен значению переменной $name\necho 'Привет, ' . isset($name) ? $name : 'Джон Доу' . '!';\n\n// Предполагаемое поведение требует дополнительных скобок\necho 'Привет, ' . (isset($name) ? $name : 'Джон Доу') . '!';\n\n// До PHP 8.0.0 Приклад ниже выведет «2», а не «Сумма: 3».\necho 'Сумма: ' . 1 + 2;\n\n// И снова, добавление круглых скобок указывает точный порядок оценки выражения.\necho 'Сумма: ' . (1 + 2);\n```\n\nЯкщо передано кілька аргументів, то дужки не потрібні для примусового встановлення пріоритету, тому що кожен вираз окремо:\n\n```php\n<?php\n\necho \"Привет, \", isset($name) ? $name : \"Джон Доу\", \"!\";\n\necho \"Сумма: \", 1 + 2;\n```\n\n### Дивіться також\n\n-   [print](function.print.md) \\- Виводить рядок\n-   [printf()](function.printf.md) \\- Виводить відформатований рядок\n-   [flush()](function.flush.md) \\- скидає системний буфер виводу\n-   [Способи роботи з рядками](language.types.string.md)\n","title":"echo","contentType":2,"navigation":[{"function.crypt.md":"« crypt"},{"function.explode.md":"explode »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}