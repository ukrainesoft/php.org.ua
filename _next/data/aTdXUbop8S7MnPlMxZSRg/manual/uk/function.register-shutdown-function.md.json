{"pageProps":{"page":{"slug":"function.register-shutdown-function.md","content":"# register\\_shutdown\\_function\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nregister\\_shutdown\\_function — Реєструє функцію, яка виконується після завершення роботи скрипту\n\n### Опис\n\n```methodsynopsis\nregister_shutdown_function(callable $callback, mixed ...$args): void\n```\n\nРеєструє функцію `callback`, яка виконається після завершення роботи скрипта або під час виклику функції [exit()](function.exit.md)\n\nМожлива реєстрація кількох подібних функцій за допомогою \\*\\*register\\_shutdown\\_function()\\*\\*При цьому функції будуть виконуватися в тому порядку, в якому вони були зареєстровані. Якщо ви викликаєте [exit()](function.exit.md) в одній із зареєстрованих завершальних функцій процес буде повністю зупинено і наступні завершальні функції не будуть викликані.\n\nЗавершальні функції також можуть викликати самі **register\\_shutdown\\_function()**, щоб додати функцію вимкнення на кінець черги.\n\n### Список параметрів\n\n`callback`\n\nРеєстрована завершальна функція.\n\nЗавершальні функції виконуються як частина запиту, тому можна надсилати дані на виведення з них та отримувати доступ до буферизації виводу.\n\n`args`\n\nМожна передавати параметри на завершальну функцію, передавши додаткові параметри.\n\n### Значення, що повертаються\n\nФункція не повертає значення після виконання.\n\n### Приклади\n\n**Приклад #1 Приклад використання** register\\_shutdown\\_function()\\*\\*\\*\\*\n\n```php\n<?php\nfunction shutdown()\n{\n    // Это наша завершающая функция,\n    // здесь мы можем выполнить все последние операции\n    // перед тем как скрипт полностью завершится.\n\n    echo 'Скрипт успешно завершился', PHP_EOL;\n}\n\nregister_shutdown_function('shutdown');\n?>\n```\n\n### Примітки\n\n> **Зауваження** :\n> \n> Робоча директорія скрипта може змінитися всередині завершальної функції деяких веб-серверах, наприклад, Apache.\n\n> **Зауваження** :\n> \n> Функції, які виконуються при завершенні скрипту, не будуть виконані, якщо процес був убитий із сигналами SIGTERM або SIGKILL. Хоча ви не можете перехопити SIGKILL, але ви можете використовувати функцію [pcntl\\_signal()](function.pcntl-signal.md), щоб задати обробник сигналу SIGTERM, який використовує функцію [exit()](function.exit.md), щоб завершити скрипт правильно.\n\n> **Зауваження** :\n> \n> Завершальні функції виконуються окремо від часу, що відстежується [max\\_execution\\_time](info.configuration.md#ini.max-execution-time). Це означає, що навіть якщо процес буде завершено через занадто довге виконання, завершальні функції все одно будуть викликані. Крім того, якщо `max_execution_time` закінчується під час роботи завершальної функції, процес не буде завершено.\n\n### Дивіться також\n\n-   [auto\\_append\\_file](ini.core.md#ini.auto-append-file)\n-   [exit()](function.exit.md) \\- Виводить повідомлення та припиняє виконання поточного скрипту\n-   [fastcgi\\_finish\\_request()](function.fastcgi-finish-request.md) \\- скидає всі запитані дані клієнту\n-   Розділ[Обробка з'єднань](features.connection-handling.md)\n","title":"register\\_shutdown\\_function","contentType":2,"navigation":[{"function.get-defined-functions.md":"« get\\_defined\\_functions"},{"function.register-tick-function.md":"register\\_tick\\_function »"},{"index.md":"PHP Manual"},{"ref.funchand.md":"Функції керування функціями"}]}},"__N_SSG":true}