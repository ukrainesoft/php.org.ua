{"pageProps":{"page":{"slug":"reflectionclass.getmethods.md","content":"# ReflectionClass::getMethods\n\n(PHP 5, PHP 7, PHP 8)\n\nReflectionClass::getMethods — Повертає список методів у вигляді масиву\n\n### Опис\n\n```methodsynopsis\npublic ReflectionClass::getMethods(?int $filter = null): array\n```\n\nПовертає перелік методів у вигляді масиву.\n\n### Список параметрів\n\n`filter`\n\nФільтрування результату для включення до списку лише методів із певними атрибутами. За промовчанням фільтрації немає.\n\nКомбінація з наступних констант через логічне АБО: **`ReflectionMethod::IS_STATIC`** **`ReflectionMethod::IS_PUBLIC`** **`ReflectionMethod::IS_PROTECTED`** **`ReflectionMethod::IS_PRIVATE`** **`ReflectionMethod::IS_ABSTRACT`** **`ReflectionMethod::IS_FINAL`**, так що всі методи з *будь-яким* з перерахованих атрибутів буде повернено.\n\n> **Зауваження**: Зверніть увагу, що інші побітові операції, наприклад `~` не працюватимуть так, як очікується. Іншими словами, наприклад, неможливо отримати усі нестатичні методи.\n\n### Значення, що повертаються\n\nМасив (array) об'єктів класу [ReflectionMethod](class.reflectionmethod.md)що відображають кожен метод.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.2.0 | `filter` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** ReflectionClass::getMethods()\\*\\*\\*\\*\n\n```php\n<?php\nclass Apple {\n    public function firstMethod() { }\n    final protected function secondMethod() { }\n    private static function thirdMethod() { }\n}\n\n$class = new ReflectionClass('Apple');\n$methods = $class->getMethods();\nvar_dump($methods);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(3) {\n  [0]=>\n  object(ReflectionMethod)#2 (2) {\n    [\"name\"]=>\n    string(11) \"firstMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [1]=>\n  object(ReflectionMethod)#3 (2) {\n    [\"name\"]=>\n    string(12) \"secondMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [2]=>\n  object(ReflectionMethod)#4 (2) {\n    [\"name\"]=>\n    string(11) \"thirdMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n}\n```\n\n**Приклад #2 Приклад фільтрації результату виклику **ReflectionClass::getMethods()****\n\n```php\n<?php\nclass Apple {\n    public function firstMethod() { }\n    final protected function secondMethod() { }\n    private static function thirdMethod() { }\n}\n\n$class = new ReflectionClass('Apple');\n$methods = $class->getMethods(ReflectionMethod::IS_STATIC | ReflectionMethod::IS_FINAL);\nvar_dump($methods);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(2) {\n  [0]=>\n  object(ReflectionMethod)#2 (2) {\n    [\"name\"]=>\n    string(12) \"secondMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [1]=>\n  object(ReflectionMethod)#3 (2) {\n    [\"name\"]=>\n    string(11) \"thirdMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n}\n```\n\n### Дивіться також\n\n-   [ReflectionClass::getMethod()](reflectionclass.getmethod.md) \\- Повертає екземпляр ReflectionMethod для методу класу\n-   [get\\_class\\_methods()](function.get-class-methods.md) \\- Повертає масив імен методів класу\n","title":"ReflectionClass::getMethods","contentType":2,"navigation":[{"reflectionclass.getmethod.md":"« ReflectionClass::getMethod"},{"reflectionclass.getmodifiers.md":"ReflectionClass::getModifiers »"},{"index.md":"PHP Manual"},{"class.reflectionclass.md":"ReflectionClass"}]}},"__N_SSG":true}