{"pageProps":{"page":{"slug":"class.eventlistener.md","content":"# Клас EventListener\n\n(PECL event >= 1.5.0)\n\n## Вступ\n\nПредставляє слухач з'єднання.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      final\n      class EventListener\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      OPT_LEAVE_SOCKETS_BLOCKING = 1;\n\n    const\n     int\n      OPT_CLOSE_ON_FREE = 2;\n\n    const\n     int\n      OPT_CLOSE_ON_EXEC = 4;\n\n    const\n     int\n      OPT_REUSEABLE = 8;\n\n    const\n     int\n      OPT_THREADSAFE = 16;\n\n    /* Свойства */\n    public\n     readonly\n     int\n      $fd;\n\n    /* Методы */\n    \n   public\n   __construct(    \n    EventBase\n     $base\n   ,    \n    callable\n     $cb\n   ,    \n    mixed\n     $data\n   ,    \n    int\n     $flags\n   ,    \n    int\n     $backlog\n   ,    \n    mixed\n     $target\n   )\npublic\n   disable(): bool\npublic\n   enable(): bool\npublic\n   getBase(): void\npublic\n   static\n   getSocketName(\n    string\n     &$address\n   , \n    mixed\n     &$port\n    = ?): bool\npublic\n   setCallback(\n    callable\n     $cb\n   , \n    mixed\n     $arg\n     = null\n   ): void\npublic\n   setErrorCallback(\n    string\n     $cb\n   ): void\n\n   }\n```\n\n## Властивості\n\nfd\n\nЧисловий файловий дескриптор для сокету. (Додано в `event-1.6.0`\n\n## Обумовлені константи\n\n**`EventListener::OPT_LEAVE_SOCKETS_BLOCKING`**\n\nза замовчуванням, Libevent перемикає файловий дескриптор або сокет у неблокуючий режим. Цей прапор повідомляє Libevent, що слід залишити їх у режимі блокування.\n\n**`EventListener::OPT_CLOSE_ON_FREE`**\n\nЯкщо цей прапор встановлено, слухач з'єднання закриє сокет, коли об'єкт **EventListener** буде знищено.\n\n**`EventListener::OPT_CLOSE_ON_EXEC`**\n\nЯкщо цей прапорець встановлений, слухач з'єднання встановить прапор close-on-exec на сокет. Дивіться документацію з `fcntl`и\\*\\*`FD_CLOEXEC`\\*\\* для платформи.\n\n**`EventListener::OPT_REUSEABLE`**\n\nНа деяких платформах, за замовчуванням, після закриття сокета інші сокети не зможуть прив'язатися до того ж порту, поки не пройде деякий час. Даний прапор говорить Libevent позначати сокет як перевикористовуваний, що дозволить відкривати інші сокети на тому порту після його закриття.\n\n**`EventListener::OPT_THREADSAFE`**\n\nВиділяє блокування для слухача, що дозволяє безпечно використовувати його у багатопотоковому варіанті.\n\n## Зміст\n\n-   [EventListener::\\_\\_construct](eventlistener.construct.md)— Створює нового слухача з'єднання, пов'язаного із базою події\n-   [EventListener::disable](eventlistener.disable.md)— Вимикає подію підключення до об'єкта слухача\n-   [EventListener::enable](eventlistener.enable.md)— Включає подію підключення до об'єкта слухача\n-   [EventListener::getBase](eventlistener.getbase.md)— Повертає базу подій, пов'язану із слухачем подій\n-   [EventListener::getSocketName](eventlistener.getsocketname.md)— Отримує поточну адресу, до якої прив'язаний сокет слухача\n-   [EventListener::setCallback](eventlistener.setcallback.md) \\- Мета setCallback\n-   [EventListener::setErrorCallback](eventlistener.seterrorcallback.md) \\- Встановлює callback-функцію помилки слухача подій\n","title":"Клас EventListener","contentType":2,"navigation":[{"eventhttprequest.sendreplystart.md":"« EventHttpRequest::sendReplyStart"},{"eventlistener.construct.md":"EventListener::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.event.md":"Event"}]}},"__N_SSG":true}