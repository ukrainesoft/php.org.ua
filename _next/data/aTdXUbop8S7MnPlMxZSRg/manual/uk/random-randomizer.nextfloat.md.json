{"pageProps":{"page":{"slug":"random-randomizer.nextfloat.md","content":"# Random\\\\Randomizer::nextFloat\n\n(PHP 8 >= 8.3.0)\n\nRandom\\\\Randomizer::nextFloat — Отримує число з точкою, що плаває, з відкритого праворуч інтервалу \\[\n\n### Опис\n\n```methodsynopsis\npublic Random\\Randomizer::nextFloat(): float\n```\n\nПовертає рівномірно обране рівнорозподілене число з плаваючою точкою з відкритого праворуч інтервалу від `0.0`до`1.0`але не включаючи саму одиницю.\n\nІмовірність того, що повернене число з плаваючою точкою виявиться в межах заданого відкритого праворуч підінтервалу пропорційна розміру підінтервалу. Тобто ймовірність того, що число з плаваючою точкою буде *менше* `0.5`, дорівнює 50%, що дорівнює ймовірності того, що число з плаваючою точкою буде *не менше* `0.5`. Аналогічно, ймовірність того, що число з точкою, що плаває, опиниться в межах відкритого праворуч інтервалу від `0.2`до`0.25`, Не включаючи останнє значення, - дорівнює 5%.\n\nЦя властивість робить метод **Random\\\\Randomizer::nextFloat()** простим засобом для генерації випадкового логічного значення із заданою ймовірністю, перевіряючи, *чи менше* число, що повертається з плаваючою точкою заданої ймовірності.\n\n> **Зауваження** :\n> \n> Область визначення методів, що повертаються. **Random\\\\Randomizer::nextFloat()** чисел з плаваючою точкою ідентична області визначення методу, викликаного з аргументами `Randomizer::getFloat(0.0, 1.0, IntervalBoundary::ClosedOpen)`\n> \n> Внутренняя реализация метода**Random\\\\Randomizer::nextFloat()** ефективніша.\n\n**Застереження**\n\nМасштабування значення, що повертається до іншого інтервалу через множення або додавання (т. н. афінне перетворення) іноді призводить до зміщення результуючого значення оскільки числа з плаваючою точкою не однаково щільні по числовій прямій. Оскільки не всі значення можуть бути точно представлені числом з плаваючою точкою, результат афінного перетворення іноді повертає значення за межами запитаного інтервалу через неявне округлення . [Детальне пояснення](random-randomizer.getfloat.md#random-randomizer.getfloat.affine-transformation) проблем, пов'язаних з афінним перетворенням, дано в документації до методу [Random\\\\Randomizer::getFloat()](random-randomizer.getfloat.md)\n\nДля генерації випадкового числа з плаваючою точкою в довільному інтервалі краще віддати перевагу методу [Random\\\\Randomizer::getFloat()](random-randomizer.getfloat.md). Для генерації випадкового цілого числа у довільному інтервалі користуються методом [Random\\\\Randomizer::getInt()](random-randomizer.getint.md)\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає рівномірно обране, рівнорозподілене число з плаваючою точкою з відкритого праворуч (`IntervalBoundary::ClosedOpen`) інтервалу \\[0.0, 1.0). Значение`0.0` — можливе значення, що повертається, значення `1.0` - Ні.\n\n### Помилки\n\n-   Будь-які [Throwable](class.throwable.md), що викидаються методом[Random\\\\Engine::generate()](random-engine.generate.md)базового[`Random\\Randomizer::$engine`](class.random-randomizer.md#random-randomizer.props.engine)\n\n### Приклади\n\n**Приклад #1 Приклад использования метода**Random\\\\Randomizer::nextFloat()\\*\\*\\*\\*\n\n```php\n<?php\n\n$r = new \\Random\\Randomizer();\n\n// Результирующее логическое значение будет истинным с равной вероятностью.\n$chance = 0.5;\n\n$bool = $r->nextFloat() < $chance;\n\necho ($bool ? \"Вы выиграли\" : \"Вы проиграли\"), \"\\n\";\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nYou won\n```\n\n**Приклад #2 Неправильне масштабування через афінне перетворення**\n\n```php\n<?php\n\nfinal class MaxEngine implements Random\\Engine {\n    public function generate(): string {\n        return \"\\xff\";\n    }\n}\n\n$randomizer = new \\Random\\Randomizer(new MaxEngine);\n\n$min = 3.5;\n$max = 4.5;\n\n// НЕ ДЕЛАЙТЕ ЭТОГО:\n//\n// Это выведет значение 4.5, несмотря на выборку метода nextFloat()\n// из открытого справа интервала, который никогда не вернёт значение 1.\nprintf(\"Неправильное масштабирование: %.17g\", $randomizer->nextFloat() * ($max - $min) + $min);\n\n// Правильно:\n// $randomizer->getFloat($min, $max, \\Random\\IntervalBoundary::ClosedOpen);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nНеправильное масштабирование: 4.5\n```\n\n### Дивіться також\n\n-   [Random\\\\Randomizer::getFloat()](random-randomizer.getfloat.md) \\- Отримує рівномірно обране число з плаваючою точкою\n","title":"Random\\\\Randomizer::nextFloat","contentType":2,"navigation":[{"random-randomizer.getint.md":"« Random\\\\Randomizer::getInt"},{"random-randomizer.nextint.md":"Random\\\\Randomizer::nextInt »"},{"index.md":"PHP Manual"},{"class.random-randomizer.md":"Random\\\\Randomizer"}]}},"__N_SSG":true}