{"pageProps":{"page":{"slug":"class.reflectionparameter.md","content":"# Клас ReflectionParameter\n\n(PHP 5, PHP 7, PHP 8)\n\n## Вступ\n\nКласс**ReflectionParameter** повідомляє інформацію про параметри методів та функцій.\n\nЩоб мати можливість дослідити аргументи функції, спочатку створіть екземпляр класу [ReflectionFunction](class.reflectionfunction.md)либо[ReflectionMethod](class.reflectionmethod.md), а затем используйте его метод[ReflectionFunctionAbstract::getParameters()](reflectionfunctionabstract.getparameters.md)для получения массива аргументов.\n\n## Огляд класів\n\n```classsynopsis\n\n    \n     class ReflectionParameter\n    \n\n    \n     implements\n      Reflector {\n\n    /* Свойства */\n    \n     public\n     string\n      $name;\n\n\n    /* Методы */\n    \n   public __construct(string|array|object $function, int|string $param)\n\n    public allowsNull(): bool\npublic canBePassedByValue(): bool\nprivate __clone(): void\npublic static export(string $function, string $parameter, bool $return = ?): string\npublic getAttributes(?string $name = null, int $flags = 0): array\npublic getClass(): ?ReflectionClass\npublic getDeclaringClass(): ?ReflectionClass\npublic getDeclaringFunction(): ReflectionFunctionAbstract\npublic getDefaultValue(): mixed\npublic getDefaultValueConstantName(): ?string\npublic getName(): string\npublic getPosition(): int\npublic getType(): ?ReflectionType\npublic hasType(): bool\npublic isArray(): bool\npublic isCallable(): bool\npublic isDefaultValueAvailable(): bool\npublic isDefaultValueConstant(): bool\npublic isOptional(): bool\npublic isPassedByReference(): bool\npublic isVariadic(): bool\npublic __toString(): string\n\n   }\n```\n\n## Властивості\n\nname\n\nІм'я аргументу. Доступно тільки для читання та викидає виняток [ReflectionException](class.reflectionexception.md) під час спроби запису.\n\n## список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Метод[ReflectionParameter::export()](reflectionparameter.export.md)був видалений. |\n\n## Зміст\n\n-   [ReflectionParameter::allowsNull](reflectionparameter.allowsnull.md)— Перевіряє, чи допустиме значення null для параметра\n-   [ReflectionParameter::canBePassedByValue](reflectionparameter.canbepassedbyvalue.md)— Перевіряє, чи можна передати цей аргумент за значенням\n-   [ReflectionParameter::\\_\\_clone](reflectionparameter.clone.md) \\- Клонувати\n-   [ReflectionParameter::\\_\\_construct](reflectionparameter.construct.md) \\- Конструктор\n-   [ReflectionParameter::export](reflectionparameter.export.md) \\- Експорт\n-   [ReflectionParameter::getAttributes](reflectionparameter.getattributes.md)— Отримує атрибути\n-   [ReflectionParameter::getClass](reflectionparameter.getclass.md)— Отримує об'єкт ReflectionClass для параметра, що відображається, або null\n-   [ReflectionParameter::getDeclaringClass](reflectionparameter.getdeclaringclass.md)— Отримання класу, що оголошує\n-   [ReflectionParameter::getDeclaringFunction](reflectionparameter.getdeclaringfunction.md)— Отримання функції, що оголошує\n-   [ReflectionParameter::getDefaultValue](reflectionparameter.getdefaultvalue.md)— Отримання стандартного значення для параметра\n-   [ReflectionParameter::getDefaultValueConstantName](reflectionparameter.getdefaultvalueconstantname.md)— Повертає ім'я константи за промовчанням, якщо значення за промовчанням константа або null\n-   [ReflectionParameter::getName](reflectionparameter.getname.md)— Отримання імені параметра\n-   [ReflectionParameter::getPosition](reflectionparameter.getposition.md)— Отримання позиції параметра\n-   [ReflectionParameter::getType](reflectionparameter.gettype.md)— Отримати тип параметра\n-   [ReflectionParameter::hasType](reflectionparameter.hastype.md)— Перевірити, чи вказано тип параметра\n-   [ReflectionParameter::isArray](reflectionparameter.isarray.md)— Перевіряє, чи очікує аргумент масив як значення\n-   [ReflectionParameter::isCallable](reflectionparameter.iscallable.md)— Визначити, чи має бути параметр типу callable\n-   [ReflectionParameter::isDefaultValueAvailable](reflectionparameter.isdefaultvalueavailable.md)— Перевіряє, чи є значення за замовчуванням\n-   [ReflectionParameter::isDefaultValueConstant](reflectionparameter.isdefaultvalueconstant.md)— Визначити, чи значення параметра за промовчанням є константою\n-   [ReflectionParameter::isOptional](reflectionparameter.isoptional.md)— Перевіряє, чи аргумент є необов'язковим\n-   [ReflectionParameter::isPassedByReference](reflectionparameter.ispassedbyreference.md)— Перевіряє, чи передано параметр за посиланням\n-   [ReflectionParameter::isVariadic](reflectionparameter.isvariadic.md)— Перевірити, чи параметр є параметром зі змінною кількістю аргументів\n-   [ReflectionParameter::\\_\\_function toString() { \\[native code\\] }](reflectionparameter.tostring.md)— Перетворення на рядок\n","title":"Клас ReflectionParameter","contentType":2,"navigation":[{"reflectionobject.export.md":"« ReflectionObject::export"},{"reflectionparameter.allowsnull.md":"ReflectionParameter::allowsNull »"},{"index.md":"PHP Manual"},{"book.reflection.md":"Reflection"}]}},"__N_SSG":true}