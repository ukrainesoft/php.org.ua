{"pageProps":{"page":{"slug":"class.evidle.md","content":"# Клас EvIdle\n\n(PECL ev >= 0.2.0)\n\n## Вступ\n\nСпостерігачі **EvIdle** викликають події тоді, коли жодні інші події такого ж чи вищого пріоритету не перебувають в очікуванні ([EvPrepare](class.evprepare.md) [EvCheck](class.evcheck.md) та інші спостерігачі **EvIdle**не считаются за получающие*події*\n\nТаким чином, цей процес зайнятий обробкою сокетів або очікувань (або навіть сигналів) такого ж чи вищого пріоритету доти, доки він не буде активований. Але коли процес перебуває в режимі очікування (або в черзі лише спостерігачі з нижчим пріоритетом), спостерігачі **EvIdle** будуть викликатися один раз за ітерацію циклу подій - доки не будуть зупинені або доки процесом не будуть отримані нові повідомлення і він не буде зайнятий більш пріоритетними завданнями.\n\nКрім підтримки неблокуючого процесу (корисний у деяких випадках), спостерігачі **EvIdle** є гарним місцем для виконання *\"псевдо-фонової обробки\"* або затримки обробки даних до того часу, поки цикл подій не опрацює всі виняткові події.\n\nНайбільш помітний ефект проявляється в тому, що поки що *сплячі* спостерігачі активні, процес *не* блокуватиметься у процесі очікування нових подій.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EvIdle\n     \n     \n      extends\n       EvWatcher\n     \n     {\n    \n    \n    /* Наследуемые свойства */\n    \n     public\n      $is_active;\npublic\n      $data;\npublic\n      $is_pending;\npublic\n      $priority;\n\n    /* Методы */\n    \n   public\n   __construct(\n    callable\n     $callback\n   , \n    mixed\n     $data\n    = ?, \n    int\n     $priority\n    = ?)\n\n    final\n   public\n   static\n   createStopped(\n    string\n     $callback\n   , \n    mixed\n     $data\n    = ?, \n    int\n     $priority\n    = ?): object\n\n    /* Наследуемые методы */\n    public\n   EvWatcher::clear(): int\npublic\n   EvWatcher::feed(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::getLoop(): EvLoop\npublic\n   EvWatcher::invoke(\n    int\n     $revents\n   ): void\npublic\n   EvWatcher::keepalive(\n    bool\n     $value\n    = ?): bool\npublic\n   EvWatcher::setCallback(\n    callable\n     $callback\n   ): void\npublic\n   EvWatcher::start(): void\npublic\n   EvWatcher::stop(): void\n\n   }\n```\n\n## Зміст\n\n-   [EvIdle::\\_\\_construct](evidle.construct.md) \\- Конструктор спостерігача EvIdle\n-   [EvIdle::createStopped](evidle.createstopped.md)— Створити об'єкт класу EvIdle, але не стартувати його\n","title":"Клас EvIdle","contentType":2,"navigation":[{"evfork.createstopped.md":"« EvFork::createStopped"},{"evidle.construct.md":"EvIdle::\\_\\_construct »"},{"index.md":"PHP Manual"},{"book.ev.md":"Ev"}]}},"__N_SSG":true}