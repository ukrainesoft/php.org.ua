{"pageProps":{"page":{"slug":"migration80.deprecated.md","content":"## Функціональність, оголошена застарілою в PHP 8.0.x\n\n### Ядро PHP\n\n-   Якщо за параметром за замовчуванням слід обов'язковий параметр, то значення за умовчанням не має сенсу. З PHP 8.0.0 такий порядок параметрів оголошений застарілим і може бути виправлений шляхом видалення значення за замовчуванням:\n    \n    ```php\n    <?php\n    function test($a ​​= [], $b) {} // До\n    function test($a, $b) {} // Після\n    ?>\n    ```\n    \n    Одним із винятків із цього правила є параметри виду`Type $param = null`, де значення за умовчанням null робить тип явно обнулюваним. Це поки що дозволено, але натомість краще рекомендується використовувати явний тип nullable:\n    \n    ```php\n    <?php\n    function test(A $a = null, $b) {} // Як і раніше дозволено\n    function test(?A $a, $b) {} // Рекомендується\n    ?>\n    ```\n    \n-   Виклик [get\\_defined\\_functions()](function.get-defined-functions.md)з явно заданим значенням\\*\\*`false`\\*\\*в`exclude_disabled` устарел и больше не имеет смысла . [get\\_defined\\_functions()](function.get-defined-functions.md)ніколи не повертатиме відключені функції.\n    \n\n### Enchant\n\n-   [enchant\\_broker\\_set\\_dict\\_path()](function.enchant-broker-set-dict-path.md) і [enchant\\_broker\\_get\\_dict\\_path()](function.enchant-broker-get-dict-path.md) оголошені застарілими, оскільки вони недоступні ні libenchant < 1.5 ні libenchant-2.\n    \n-   [enchant\\_dict\\_add\\_to\\_personal()](function.enchant-dict-add-to-personal.md)оголошено застарілою; використовуйте замість неї[enchant\\_dict\\_add()](function.enchant-dict-add.md)\n    \n-   [enchant\\_dict\\_is\\_in\\_session()](function.enchant-dict-is-in-session.md)оголошено застарілою; використовуйте замість неї[enchant\\_dict\\_is\\_added()](function.enchant-dict-is-added.md)\n    \n-   [enchant\\_broker\\_free()](function.enchant-broker-free.md) і [enchant\\_broker\\_free\\_dict()](function.enchant-broker-free-dict.md)оголошені застарілими; замість неї застосовуйте до об'єкта функцію unset.\n    \n-   Константа\\*\\*`ENCHANT_MYSPELL`** і **`ENCHANT_ISPELL`\\*\\* оголошено застарілими.\n    \n\n### LibXML\n\n[libxml\\_disable\\_entity\\_loader()](function.libxml-disable-entity-loader.md) оголошено застарілою. Оскільки тепер використовується libxml 2.9.0, в якому завантаження зовнішніх об'єктів за замовчуванням вимкнуто, тому використання цієї функції більше не потрібне для захисту від XXE-атак, якщо не використовується (досі вразлива) **`LIBXML_NOENT`**. У цьому випадку рекомендується провести рефакторинг коду за допомогою [libxml\\_set\\_external\\_entity\\_loader()](function.libxml-set-external-entity-loader.md), щоб придушити завантаження зовнішніх сутностей.\n\n### PGSQL / PDO PGSQL\n\n-   Константа\\*\\*`PGSQL_LIBPQ_VERSION_STR`**тепер має те саме значення, що і**`PGSQL_LIBPQ_VERSION`\\*\\*і тому оголошено застарілою.\n    \n-   Псевдоніми функцій у модулі pgsql оголошені застарілими. Дивіться у списку, які функції слід використовувати замість них:\n    \n    -   **pg\\_errormessage()** → [pg\\_last\\_error()](function.pg-last-error.md)\n    -   **pg\\_numrows()** → [pg\\_num\\_rows()](function.pg-num-rows.md)\n    -   **pg\\_numfields()** → [pg\\_num\\_fields()](function.pg-num-fields.md)\n    -   **pg\\_cmdtuples()** → [pg\\_affected\\_rows()](function.pg-affected-rows.md)\n    -   **pg\\_fieldname()** → [pg\\_field\\_name()](function.pg-field-name.md)\n    -   **pg\\_fieldsize()** → [pg\\_field\\_size()](function.pg-field-size.md)\n    -   **pg\\_fieldtype()** → [pg\\_field\\_type()](function.pg-field-type.md)\n    -   **pg\\_fieldnum()** → [pg\\_field\\_num()](function.pg-field-num.md)\n    -   **pg\\_result()** → [pg\\_fetch\\_result()](function.pg-fetch-result.md)\n    -   **pg\\_fieldprtlen()** → [pg\\_field\\_prtlen()](function.pg-field-prtlen.md)\n    -   **pg\\_fieldisnull()** → [pg\\_field\\_is\\_null()](function.pg-field-is-null.md)\n    -   **pg\\_freeresult()** → [pg\\_free\\_result()](function.pg-free-result.md)\n    -   **pg\\_getlastoid()** → [pg\\_last\\_oid()](function.pg-last-oid.md)\n    -   **pg\\_locreate()** → [pg\\_lo\\_create()](function.pg-lo-create.md)\n    -   **pg\\_lounlink()** → [pg\\_lo\\_unlink()](function.pg-lo-unlink.md)\n    -   **pg\\_loopen()** → [pg\\_lo\\_open()](function.pg-lo-open.md)\n    -   **pg\\_loclose()** → [pg\\_lo\\_close()](function.pg-lo-close.md)\n    -   **pg\\_loread()** → [pg\\_lo\\_read()](function.pg-lo-read.md)\n    -   **pg\\_lowrite()** → [pg\\_lo\\_write()](function.pg-lo-write.md)\n    -   **pg\\_loreadall()** → [pg\\_lo\\_read\\_all()](function.pg-lo-read-all.md)\n    -   **pg\\_loimport()** → [pg\\_lo\\_import()](function.pg-lo-import.md)\n    -   **pg\\_loexport()** → [pg\\_lo\\_export()](function.pg-lo-export.md)\n    -   **pg\\_setclientencoding()** → [pg\\_set\\_client\\_encoding()](function.pg-set-client-encoding.md)\n    -   **pg\\_clientencoding()** -> [pg\\_client\\_encoding()](function.pg-client-encoding.md)\n\n### Бібліотека стандартних функцій\n\n-   Функції порівняння сортування, що повертають\\*\\*`true`** або **`false`\\*\\*тепер згенерує попередження про застарілі можливості, тому їх слід переписати, щоб вони повертали ціле число менше, рівне або більше нуля.\n    \n    ```php\n    <?php\n    // Замінити подібний код:\n    usort($array, fn($a, $b) => $a > $b);\n    // На цей:\n    usort($array, fn($a, $b) => $a <=> $b);\n    ?>\n    ```\n    \n\n### Zip\n\n-   Використання порожнього файлу в ZipArchive оголошено застарілим. Libzip 1.6.0 більше не працює з пустими zip-архівами. Існуюче обхідне рішення буде видалено у наступній версії.\n    \n-   Процедурний API Zip оголошено застарілим. Замість нього використовуйте[ZipArchive](class.ziparchive.md). Ітерацію по всіх записах можна виконати за допомогою[ZipArchive::statIndex()](ziparchive.statindex.md)та циклу[for](control-structures.for.md) :\n    \n    ```php\n    <?php\n    // Ітерація з використанням процедурного API\n    assert(is_resource($zip));\n    while ($entry = zip_read($zip)) {\n        echo zip_entry_name($entry);\n    }\n    \n    // ітерація з використанням об'єктно-орієнтованого API\n    assert($zip instanceof ZipArchive);\n    for ($i = 0; $entry = $zip->statIndex($i); $i++) {\n        echo $entry['name'];\n    }\n    ?>\n    ```\n    \n\n### Reflection\n\n-   [ReflectionFunction::isDisabled()](reflectionfunction.isdisabled.md)оголошено застарілим, тому що більше неможливо створити[ReflectionFunction](class.reflectionfunction.md)для вимкненої функції. Цей метод тепер завжди повертає\\*\\*`false`\\*\\*\n    \n-   [ReflectionParameter::getClass()](reflectionparameter.getclass.md) [ReflectionParameter::isArray()](reflectionparameter.isarray.md) і [ReflectionParameter::isCallable()](reflectionparameter.iscallable.md)оголошено застарілими. Замість них слід використовувати[ReflectionParameter::getType()](reflectionparameter.gettype.md)та API[ReflectionType](class.reflectiontype.md)\n","title":"Функціональність, оголошена застарілою в PHP 8.0.x","contentType":2,"navigation":[{"migration80.incompatible.md":"« Зміни, що ламають зворотну сумісність"},{"migration80.other-changes.md":"Інші зміни »"},{"index.md":"PHP Manual"},{"migration80.md":"Міграція з PHP 7.4.x на PHP 8.0.x"}]}},"__N_SSG":true}