{"pageProps":{"page":{"slug":"regexiterator.construct.md","content":"# RegexIterator::\\_\\_construct\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nRegexIterator::\\_\\_construct - Конструктор класу RegexIterator\n\n### Опис\n\npublic **RegexIterator::\\_\\_construct**  \n[Iterator](class.iterator.md) `$iterator`,  \nstring`$pattern`,  \nint`$mode`\\= RegexIterator::MATCH,  \nint`$flags`  \nint`$pregFlags`  \n) .\n\nСтворює новий об'єкт класу [RegexIterator](class.regexiterator.md), який фільтрує елементи ітератора [Iterator](class.iterator.md) ґрунтуючись на регулярному вираженні.\n\n### Список параметрів\n\n`iterator`\n\nІтератор, до якого потрібно застосувати фільтр.\n\n`pattern`\n\nРегулярний вираз, з урахуванням якого проводиться відбір елементів.\n\n`mode`\n\nРежим роботи. Список можливих режимів можна переглянути в описі методу [RegexIterator::setMode()](regexiterator.setmode.md)\n\n`flags`\n\nСпеціальні прапори. Список можливих прапорів наведено в описі методу [RegexIterator::setFlags()](regexiterator.setflags.md)\n\n`pregFlags`\n\nПрапори регулярного виразу. Список можливих прапорів залежить від режиму роботи:\n\n**[RegexIterator](class.regexiterator.md)preg\\_flags**\n\n| режим работы | доступные флаги |\n| --- | --- |\n| RegexIterator::ALL\\_MATCHES | Смотрите[preg\\_match\\_all()](function.preg-match-all.md) |\n| RegexIterator::GET\\_MATCH | Смотрите[preg\\_match()](function.preg-match.md) |\n| RegexIterator::MATCH | Смотрите[preg\\_match()](function.preg-match.md) |\n| RegexIterator::REPLACE | ні |\n| RegexIterator::SPLIT | Смотрите[preg\\_split()](function.preg-split.md) |\n\n### Помилки\n\nВикидає виняток [InvalidArgumentException](class.invalidargumentexception.md), якщо `pattern`задан некорректно.\n\n### Приклади\n\n**Приклад #1 Приклад використання** RegexIterator::\\_\\_construct()\\*\\*\\*\\*\n\nСтворює новий об'єкт RegexIterator, який відбирає рядки, що починаються зі слова 'test'.\n\n```php\n<?php\n$arrayIterator = new ArrayIterator(array('test 1', 'another test', 'test 123'));\n$regexIterator = new RegexIterator($arrayIterator, '/^test/');\n\nforeach ($regexIterator as $value) {\n    echo $value . \"\\n\";\n}\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\ntest 1\ntest 123\n```\n\n### Дивіться також\n\n-   [preg\\_match()](function.preg-match.md) \\- Виконує перевірку на відповідність регулярному виразу\n-   [preg\\_match\\_all()](function.preg-match-all.md) \\- Виконує глобальний пошук шаблону у рядку\n-   [preg\\_replace()](function.preg-replace.md) \\- Виконує пошук та заміну за регулярним виразом\n-   [preg\\_split()](function.preg-split.md) \\- Розбиває рядок за регулярним виразом\n","title":"RegexIterator::\\_\\_construct","contentType":2,"navigation":[{"regexiterator.accept.md":"« RegexIterator::accept"},{"regexiterator.getflags.md":"RegexIterator::getFlags »"},{"index.md":"PHP Manual"},{"class.regexiterator.md":"RegexIterator"}]}},"__N_SSG":true}