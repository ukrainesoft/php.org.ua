{"pageProps":{"page":{"slug":"migration56.new-features.md","content":"## Нові можливості\n\n### Константні вирази\n\nТепер можна надати скалярний вираз, що включає числові та рядкові літерали та/або константи, коли раніше очікувалося статичне значення, наприклад, в оголошеннях констант або значення аргументів функцій за умовчанням.\n\n```php\n<?php\nconst ONE = 1;\nconst TWO = ONE * 2;\n\nclass C {\n    const THREE = TWO + 1;\n    const ONE_THIRD = ONE / self::THREE;\n    const SENTENCE = 'Значение константы THREE - '.self::THREE;\n\n    public function f($a = ONE + self::THREE) {\n        return $a;\n    }\n}\n\necho (new C)->f().\"\\n\";\necho C::SENTENCE;\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n4\nЗначение константы THREE -  3\n```\n\nТакож можна визначити масив (array) із використанням ключового слова `const` :\n\n```php\n<?php\nconst ARR = ['a', 'b'];\n\necho ARR[0];\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\na\n```\n\n### Функції зі змінною кількістю аргументів, використовуючи синтаксис `...`\n\n[Функції зі змінною кількістю аргументів](functions.arguments.md#functions.variable-arg-list) тепер можна реалізовувати з використанням оператора `...` замість того, щоб покладатися на [func\\_get\\_args()](function.func-get-args.md)\n\n```php\n<?php\nfunction f($req, $opt = null, ...$params) {\n    // $params - массив, содержащий все остальные аргументы.\n    printf('$req: %d; $opt: %d; количество параметров: %d'.\"\\n\",\n           $req, $opt, count($params));\n}\n\nf(1);\nf(1, 2);\nf(1, 2, 3);\nf(1, 2, 3, 4);\nf(1, 2, 3, 4, 5);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n$req: 1; $opt: 0; количество параметров: 0\n$req: 1; $opt: 2; количество параметров: 0\n$req: 1; $opt: 2; количество параметров: 1\n$req: 1; $opt: 2; количество параметров: 2\n$req: 1; $opt: 2; количество параметров: 3\n```\n\n### Розпакування аргументів за допомогою `...`\n\n[Масиви](language.types.array.md) та об'єкти, що реалізують інтерфейс [Traversable](class.traversable.md), можуть бути розпаковані в список аргументів під час передачі у функцію за допомогою оператора `...`\n\n```php\n<?php\nfunction add($a, $b, $c) {\n    return $a + $b + $c;\n}\n\n$operators = [2, 3];\necho add(1, ...$operators);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n6\n```\n\n### Возведение в степень с помощью`**`\n\nДоданий право-асоціативний оператор `**`, обозначающий возведение в степень. Также доступен короткий синтаксис`**=`\n\n```php\n<?php\nprintf(\"2 ** 3 ==      %d\\n\", 2 ** 3);\nprintf(\"2 ** 3 ** 2 == %d\\n\", 2 ** 3 ** 2);\n\n$a = 2;\n$a **= 3;\nprintf(\"a ==           %d\\n\", $a);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n2 ** 3 ==      8\n2 ** 3 ** 2 == 512\na ==           8\n```\n\n### `use function`и`use const`\n\nОператор[`use`](language.namespaces.importing.md) був розширений для підтримки імпорту функцій та констант на додаток до класів. Це досягається за допомогою конструкцій `use function`и`use const`відповідно.\n\n```php\n<?php\nnamespace Name\\Space {\n    const FOO = 42;\n    function f() { echo __FUNCTION__.\"\\n\"; }\n}\n\nnamespace {\n    use const Name\\Space\\FOO;\n    use function Name\\Space\\f;\n\n    echo FOO.\"\\n\";\n    f();\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n42\nName\\Space\\f\n```\n\n### phpdbg\n\nТепер PHP містить інтерактивний дебаггер, що називається \"phpdbg\" і реалізований як модуль SAPI. Подробиці дивіться у [документації phpdbg](book.phpdbg.md)\n\n### Кодування за замовчуванням\n\nДобавлен ini-параметр[default\\_charset](ini.core.md#ini.default-charset), в якому можна вказати кодування за промовчанням для використання у функціях [htmlentities()](function.mdentities.md) [html\\_entity\\_decode()](function.md-entity-decode.md) і [htmlspecialchars()](function.mdspecialchars.md). Зверніть увагу, що якщо (зараз вважається застарілим) задані параметри кодування iconv та mbstring, вони матимуть перевагу перед default\\_charset для iconv та mbstring.\n\nЗначення цієї настройки за промовчанням дорівнює `UTF-8`\n\n### Переиспользование[`php://input`](wrappers.php.md#wrappers.php.input)\n\n[`php://input`](wrappers.php.md#wrappers.php.input) тепер можна перевідкривати та зчитувати стільки разів, скільки потрібно. Це також призвело до значного зменшення обсягу пам'яті, необхідної для роботи з POST.\n\n### Завантаження великих файлів\n\nТепер можна завантажувати файли розміром понад 2ГБ.\n\n### [GMP](book.gmp.md) підтримує навантаження операторів\n\nОб'єкти [GMP](book.gmp.md) тепер підтримують навантаження операторів та приведення до скалярних типів. Це дозволяє використовувати GMP у вашому коді більш виразно:\n\n```php\n<?php\n$a = gmp_init(42);\n$b = gmp_init(17);\n\nif (version_compare(PHP_VERSION, '5.6', '<')) {\n    echo gmp_intval(gmp_add($a, $b)), PHP_EOL;\n    echo gmp_intval(gmp_add($a, 17)), PHP_EOL;\n    echo gmp_intval(gmp_add(42, $b)), PHP_EOL;\n} else {\n    echo $a + $b, PHP_EOL;\n    echo $a + 17, PHP_EOL;\n    echo 42 + $b, PHP_EOL;\n}\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n59\n59\n59\n```\n\n### [hash\\_equals()](function.hash-equals.md)для предотвращения атак по времени при сравнении строк\n\nБула додана функція [hash\\_equals()](function.hash-equals.md) для порівняння двох рядків за постійний час. Це має допомогти уникнути атак у часі; наприклад, під час тестування хешування паролів функцією [crypt()](function.crypt.md) (за умови, що ви не можете використовувати [password\\_hash()](function.password-hash.md) і [password\\_verify()](function.password-verify.md), які не піддаються атакам за часом).\n\n```php\n<?php\n$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');\n$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');\n$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');\n\nvar_dump(hash_equals($expected, $correct));\nvar_dump(hash_equals($expected, $incorrect));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nbool(true)\nbool(false)\n```\n\n### `__debugInfo()`\n\nБуло додано магічний метод [\\_\\_debugInfo()](language.oop5.magic.md#language.oop5.magic.debuginfo) для того, щоб дозволити об'єкту змінювати значення властивостей, що виводяться при використанні [var\\_dump()](function.var-dump.md)\n\n```php\n<?php\nclass C {\n    private $prop;\n\n    public function __construct($val) {\n        $this->prop = $val;\n    }\n\n    public function __debugInfo() {\n        return [\n            'propSquared' => $this->prop ** 2,\n        ];\n    }\n}\n\nvar_dump(new C(42));\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(C)#1 (1) {\n  [\"propSquared\"]=>\n  int(1764)\n}\n```\n\n### Алгоритм хешування gost-crypto\n\nДобавлен алгоритм хеширования`gost-crypto`. Він реалізує функцію хешування GOST, що використовується в таблицях CryptoPro S-box, визначених у [» RFC 4357, секція 11.2](http://www.faqs.org/rfcs/rfc4357)\n\n### Поліпшення SSL/TLS\n\nДуже багато було зроблено для покращення підтримки SSL/TLS у PHP 5.6. Включно [дозвіл перевірки бенкетів за умовчанням](migration56.incompatible.md#migration56.incompatible.peer-verification), підтримка звірки відбитків сертифікатів, зниження впливу атаки переєднання TLS і безлічі нових [опцій контексту SSL](context.ssl.md) для більш точного контролю за параметрами протоколу та перевірок під час використання зашифрованих потоків.\n\nДокладніше всі ці зміни описані в розділі цього посібника [Зміни OpenSSL у PHP 5.6.x](migration56.openssl.md)\n\n### Поддержка асинхронности[pgsql](book.pgsql.md)\n\nМодуль[pgsql](book.pgsql.md) тепер підтримує асинхронні з'єднання та запити, тим самим дозволяючи неблокуючу взаємодію з базами даних PostgreSQL. Асинхронні з'єднання можуть бути встановлені за допомогою константи **`PGSQL_CONNECT_ASYNC`**, та нові функції [pg\\_connect\\_poll()](function.pg-connect-poll.md) [pg\\_socket()](function.pg-socket.md) [pg\\_consume\\_input()](function.pg-consume-input.md) і [pg\\_flush()](function.pg-flush.md) можуть бути використані для обробки асинхронних з'єднань та запитів.\n","title":"Нові можливості","contentType":2,"navigation":[{"migration56.incompatible.md":"« Зміни, що ламають зворотну сумісність"},{"migration56.deprecated.md":"Функціонал, оголошений застарілим у PHP 5.6.x"},{"index.md":"PHP Manual"},{"migration56.md":"Міграція з PHP 5.5.x на PHP 5.6.x"}]}},"__N_SSG":true}