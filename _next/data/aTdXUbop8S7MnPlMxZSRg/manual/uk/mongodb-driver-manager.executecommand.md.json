{"pageProps":{"page":{"slug":"mongodb-driver-manager.executecommand.md","content":"# MongoDB\\\\Driver\\\\Manager::executeCommand\n\n(mongodb >=1.0.0)\n\nMongoDB\\\\Driver\\\\Manager::executeCommand — Виконує команду бази даних\n\n### Опис\n\n```methodsynopsis\nfinal public MongoDB\\Driver\\Manager::executeCommand(string $db, MongoDB\\Driver\\Command $command, array|MongoDB\\Driver\\ReadPreference|null $options = null): MongoDB\\Driver\\Cursor\n```\n\nВибирає сервер відповідно до опції `\"readPreference\"` та виконує команду на цьому сервері. За промовчанням буде вибрано основний сервер.\n\nЦей метод не застосовує особливої ​​логіки до команди. Хоча цей метод приймає `\"readConcern\"`и`\"writeConcern\"`, які будуть включені в документи коанди, ці опції не будуть відповідати значенням за замовчуванням [MongoDB URI з'єднання](mongodb-driver-manager.construct.md#mongodb-driver-manager.construct-uri) , і не враховуватиметься версія сервера MongoDB. Тому користувачам рекомендується використовувати конкретні методи команди читання та/або запису, якщо це можливо.\n\n### Список параметрів\n\n`db`(string)\n\nІм'я бази даних, у якій запускається команда.\n\n`command` [MongoDB\\\\Driver\\\\Command](class.mongodb-driver-command.md)) .\n\nКоманда для виконання.\n\n`options`\n\n**options**\n\n| Опция | Тип | Опис |\n| --- | --- | --- |\n| readConcern | [MongoDB\\\\Driver\\\\ReadConcern](class.mongodb-driver-readconcern.md) |  |\n| Гарантія для застосування до операції. |  |  |\n\nЦя опція доступна в MongoDB 3.2+ і призведе до виключення під час виконання, якщо вказана для старої версії сервера.\n\n| | readPreference |[MongoDB\\\\Driver\\\\ReadPreference](class.mongodb-driver-readpreference.md)\n\nПеревага читання, що використовується для вибору сервера для виконання операції.\n\n| | session |[MongoDB\\\\Driver\\\\Session](class.mongodb-driver-session.md)\n\nСесія зв'язування з операцією.\n\n| | writeConcern |[MongoDB\\\\Driver\\\\WriteConcern](class.mongodb-driver-writeconcern.md)\n\nГарантія запису для застосування до операції.\n\n**Увага**\n\nПри использовании`\"session\"` та наявності незавершених транзакцій, ви не можете вказати `\"readConcern\"`or`\"writeConcern\"` option. Це призведе до викидання винятків [MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md). Натомість ви повинні встановити ці дві опції при створенні транзакції за допомогою [MongoDB\\\\Driver\\\\Session::startTransaction()](mongodb-driver-session.starttransaction.md)\n\n### Значення, що повертаються\n\nУ разі успішного виконання повертає [MongoDB\\\\Driver\\\\Cursor](class.mongodb-driver-cursor.md)\n\n### Помилки\n\n-   Викидається виняток [MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md)якщо опція `\"session\"`вказано з відповідною транзакцією у поєднанні з опцією`\"readConcern\"`или`\"writeConcern\"`\n-   Викидається [MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md)якщо опція `\"session\"`вказано у поєднанні з непідтвердженою гарантією запису.\n-   При помилці парсингу аргумент кидає виняток[MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md)\n-   При невдалому з'єднанні з сервером (крім помилок аутентифікації) кидає виняток[MongoDB\\\\Driver\\\\Exception\\\\ConnectionException](class.mongodb-driver-exception-connectionexception.md)\n-   У разі невдалої аутентифікації кидає виняток[MongoDB\\\\Driver\\\\Exception\\\\AuthenticationException](class.mongodb-driver-exception-authenticationexception.md)\n-   У разі інших помилок (наприклад, неправильна команда), викидає виняток[MongoDB\\\\Driver\\\\Exception\\\\RuntimeException](class.mongodb-driver-exception-runtimeexception.md)\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| PECL mongodb 1.4.4 | Якщо опція `\"session\"` використовується у поєднанні з непідтвердженою гарантією запису, викидається виняток [MongoDB\\\\Driver\\\\Exception\\\\InvalidArgumentException](class.mongodb-driver-exception-invalidargumentexception.md) |\n| PECL mongodb 1.4.0 | Третій параметр тепер є масивом `options`. . Для зворотної сумісності цей параметр все одно прийме об'єкт [MongoDB\\\\Driver\\\\ReadPreference](class.mongodb-driver-readpreference.md) |\n\n### Приклади\n\n**Приклад #1 Приклад використання** MongoDB\\\\Driver\\\\Manager::executeCommand()\\*\\* з командою, що повертає одиночний документ\\*\\*\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager('mongodb://localhost:27017');\n$command = new MongoDB\\Driver\\Command(['ping' => 1]);\n\ntry {\n    $cursor = $manager->executeCommand('admin', $command);\n} catch(MongoDB\\Driver\\Exception $e) {\n    echo $e->getMessage(), \"\\n\";\n    exit;\n}\n\n/* Команда ping возвращает одиночный результат, поэтому мы должны получить доступ к\n * первому результату в курсор. */\n$response = $cursor->toArray()[0];\n\nvar_dump($response);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\narray(1) {\n  [\"ok\"]=>\n  float(1)\n}\n```\n\n**Приклад #2 Приклад використання** MongoDB\\\\Driver\\\\Manager::executeCommand()\\*\\* з командою, що повертає курсор\\*\\*\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager(\"mongodb://localhost:27017\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1, 'y' => 'foo']);\n$bulk->insert(['x' => 2, 'y' => 'bar']);\n$bulk->insert(['x' => 3, 'y' => 'bar']);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$command = new MongoDB\\Driver\\Command([\n    'aggregate' => 'collection',\n    'pipeline' => [\n        ['$group' => ['_id' => '$y', 'sum' => ['$sum' => '$x']]],\n    ],\n    'cursor' => new stdClass,\n]);\n$cursor = $manager->executeCommand('db', $command);\n\n/* Команда aggragete опционально может вернуть результаты в курсоре вместо\n * одиночного документа. В таком случае мы можем перебирать на курсоре для\n * непосредственного доступа к результатам. */\nforeach ($cursor as $document) {\n    var_dump($document);\n}\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nobject(stdClass)#6 (2) {\n  [\"_id\"]=>\n  string(3) \"bar\"\n  [\"sum\"]=>\n  int(10)\n}\nobject(stdClass)#7 (2) {\n  [\"_id\"]=>\n  string(3) \"foo\"\n  [\"sum\"]=>\n  int(2)\n}\n```\n\n**Приклад #3 Обмеження часу виконання запиту**\n\nОпция`\"maxTimeMS\"`класса[MongoDB\\\\Driver\\\\Query](class.mongodb-driver-query.md) може використовуватись для обмеження часу виконання запиту. Зауважте, що цей термін застосовується на стороні сервера і не враховує затримки мережі. Дивіться [» Завершення виконання операцій](https://www.mongodb.com/docs/manual/tutorial/terminate-running-operations/#maxtimems) у посібнику MongoDB для отримання додаткової інформації.\n\n```php\n<?php\n\n$manager = new MongoDB\\Driver\\Manager('mongodb://localhost:27017');\n\n$command = new MongoDB\\Driver\\Command([\n    'count' => 'collection',\n    'query' => ['x' => ['$gt' => 1]],\n    'maxTimeMS' => 1000,\n]);\n\n$cursor = $manager->executeCommand('db', $command);\n\nvar_dump($cursor->toArray()[0]);\n\n?>\n```\n\nЯкщо запит не завершиться через секунду після початку виконання на сервері, буде викинуто виняток [MongoDB\\\\Driver\\\\Exception\\\\ExecutionTimeoutException](class.mongodb-driver-exception-executiontimeoutexception.md)\n\n### Примітки\n\n> **Зауваження**: Якщо буде використаний вторинний сервер із опції `readPreference`, то код, що викликає, бере на себе відповідальність за гарантію виконання команди `command` на вторинному вузлі. Драйвер не перевірить.\n\n> **Зауваження**: Цей метод - не метод за замовчуванням, щоб отримати переваги читання з [URI-адреси підключення MongoDB](mongodb-driver-manager.construct.md#mongodb-driver-manager.construct-uri). Програми, яким потрібна ця поведінка, можуть викликати метод [MongoDB\\\\Driver\\\\Manager::executeReadCommand()](mongodb-driver-manager.executereadcommand.md)\n\n### Дивіться також\n\n-   [MongoDB\\\\Driver\\\\Command](class.mongodb-driver-command.md)\n-   [MongoDB\\\\Driver\\\\Cursor](class.mongodb-driver-cursor.md)\n-   [MongoDB\\\\Driver\\\\Manager::executeReadCommand()](mongodb-driver-manager.executereadcommand.md) \\- Виконує команду бази даних, яка читає\n-   [MongoDB\\\\Driver\\\\Manager::executeReadWriteCommand()](mongodb-driver-manager.executereadwritecommand.md) \\- Виконує команду бази даних, яка читає та пише\n-   [MongoDB\\\\Driver\\\\Manager::executeWriteCommand()](mongodb-driver-manager.executewritecommand.md) \\- Виконує команду бази даних, що пише\n-   [MongoDB\\\\Driver\\\\Server::executeCommand()](mongodb-driver-server.executecommand.md) \\- Виконати команду бази даних на сервері\n","title":"MongoDB\\\\Driver\\\\Manager::executeCommand","contentType":2,"navigation":[{"mongodb-driver-manager.executebulkwrite.md":"« MongoDB\\\\Driver\\\\Manager::executeBulkWrite"},{"mongodb-driver-manager.executequery.md":"MongoDB\\\\Driver\\\\Manager::executeQuery »"},{"index.md":"PHP Manual"},{"class.mongodb-driver-manager.md":"MongoDB\\\\Driver\\\\Manager"}]}},"__N_SSG":true}