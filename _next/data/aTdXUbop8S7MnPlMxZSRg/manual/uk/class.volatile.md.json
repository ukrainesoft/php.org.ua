{"pageProps":{"page":{"slug":"class.volatile.md","content":"# Клас Volatile\n\n(PECL pthreads >= 3.0.0)\n\n## Вступ\n\nКласс**Volatile** з'явився в pthreads v3. Його запровадження є наслідком нової семантики незмінності [Threaded](class.threaded.md)\\-властивостей класів [Threaded](class.threaded.md)Класс**Volatile** включає іммутабельність їх [Threaded](class.threaded.md)\\-властивостей і також використовується для зберігання масивів PHP в контексті [Threaded](class.threaded.md)\n\n## Огляд класів\n\n```classsynopsis\n\n\n    \n    \n     \n      class Volatile\n     \n\n     \n      extends\n       Threaded\n     \n\n     implements \n       Collectable,  Traversable {\n\n    /* Наследуемые методы */\n    \n   public Threaded::chunk(int $size, bool $preserve): array\npublic Threaded::count(): int\npublic Threaded::extend(string $class): bool\npublic Threaded::isRunning(): bool\npublic Threaded::isTerminated(): bool\npublic Threaded::merge(mixed $from, bool $overwrite = ?): bool\npublic Threaded::notify(): bool\npublic Threaded::notifyOne(): bool\npublic Threaded::pop(): bool\npublic Threaded::run(): void\npublic Threaded::shift(): mixed\npublic Threaded::synchronized(Closure $block, mixed ...$args): mixed\npublic Threaded::wait(int $timeout = ?): bool\n\n   }\n```\n\n## Приклади\n\n**Приклад #1 Нова семантика іммутабельності Threaded**\n\n```php\n<?php\n\nclass Task extends Threaded\n{\n    public function __construct()\n    {\n        $this->data = new Threaded();\n\n        // попытка переопределить Threaded-свойство Threaded-класса (ошибка)\n        $this->data = new stdClass();\n    }\n}\n\nvar_dump((new Task())->data);\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nRuntimeException: Threaded members previously set to Threaded objects are immutable, cannot overwrite data in %s:%d\n```\n\n**Приклад #2 Приклад використання Volatile**\n\n```php\n<?php\n\nclass Task extends Volatile\n{\n    public function __construct()\n    {\n        $this->data = new Threaded();\n\n        // попытка переопределить Threaded-свойство Volatile-класса (корректно)\n        $this->data = new stdClass();\n    }\n}\n\nvar_dump((new Task())->data);\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(stdClass)#3 (0) {\n}\n```\n","title":"Клас Volatile","contentType":2,"navigation":[{"pool.submitTo.md":"« Pool::submitTo"},{"book.sem.md":"Семафори »"},{"index.md":"PHP Manual"},{"book.pthreads.md":"pthreads"}]}},"__N_SSG":true}