{"pageProps":{"page":{"slug":"language.oop5.cloning.md","content":"## Клонування об'єктів\n\nСтворення копії об'єкта з абсолютно ідентичними властивостями завжди є прийнятним варіантом. Хорошим прикладом необхідності копіювання конструкторів може стати ситуація, коли у вас є об'єкт, що представляє собою вікно GTK і містить ресурс-ідентифікатор цього вікна; Якщо ви створюєте копію цього об'єкта, вам може знадобитися, щоб копія об'єкта містила ресурс-ідентифікатор нового вікна. Іншим прикладом може стати ситуація, коли ваш об'єкт містить посилання на будь-який інший використовуваний об'єкт і, коли ви створюєте копію батьківського об'єкта, вам потрібно також створити новий екземпляр цього іншого об'єкта, так, щоб копія об'єкта-контейнера містила власний окремий екземпляр об'єкта, що міститься. .\n\nКопія об'єкта створюється за допомогою ключового слова `clone` (який викликає метод [\\_\\_clone()](language.oop5.cloning.md#object.clone) об'єкта, якщо це можливо.\n\n```\n$copy_of_object = clone $object;\n```\n\nПри клонуванні об'єкта PHP виконує поверхневу копію всіх властивостей об'єкта. Будь-які властивості, які є посиланнями на інші змінні, залишаться посиланнями.\n\n```methodsynopsis\n__clone(): void\n```\n\nПосле завершения клонирования, если метод[\\_\\_clone()](language.oop5.cloning.md#object.clone) визначено, то буде викликаний метод [\\_\\_clone()](language.oop5.cloning.md#object.clone) новоствореного об'єкта для можливої ​​зміни всіх необхідних властивостей.\n\n**Приклад #1 Клонування об'єкта**\n\n```php\n<?php\nclass SubObject\n{\n    static $instances = 0;\n    public $instance;\n\n    public function __construct() {\n        $this->instance = ++self::$instances;\n    }\n\n    public function __clone() {\n        $this->instance = ++self::$instances;\n    }\n}\n\nclass MyCloneable\n{\n    public $object1;\n    public $object2;\n\n    function __clone()\n    {\n        // Принудительно клонируем this->object1, иначе\n        // он будет указывать на один и тот же объект.\n        $this->object1 = clone $this->object1;\n    }\n}\n\n$obj = new MyCloneable();\n\n$obj->object1 = new SubObject();\n$obj->object2 = new SubObject();\n\n$obj2 = clone $obj;\n\n\nprint \"Оригинальный объект:\\n\";\nprint_r($obj);\n\nprint \"Клонированный объект:\\n\";\nprint_r($obj2);\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nОригинальный объект:\nMyCloneable Object\n(\n    [object1] => SubObject Object\n        (\n            [instance] => 1\n        )\n\n    [object2] => SubObject Object\n        (\n            [instance] => 2\n        )\n\n)\nКлонированный объект:\nMyCloneable Object\n(\n    [object1] => SubObject Object\n        (\n            [instance] => 3\n        )\n\n    [object2] => SubObject Object\n        (\n            [instance] => 2\n        )\n\n)\n```\n\nМожливо звертатися до властивостей/методів щойно схиленого об'єкта:\n\n**Приклад #2 Доступ до об'єкта, що щойно схиляється.**\n\n```php\n<?php\n$dateTime = new DateTime();\necho (clone $dateTime)->format('Y');\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\n2016\n```\n","title":"Клонування об'єктів","contentType":2,"navigation":[{"language.oop5.final.md":"« Ключове слово final"},{"language.oop5.object-comparison.md":"Порівняння об'єктів »"},{"index.md":"PHP Manual"},{"language.oop5.md":"Класи та об'єкти"}]}},"__N_SSG":true}