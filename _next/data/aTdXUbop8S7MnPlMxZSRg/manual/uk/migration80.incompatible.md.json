{"pageProps":{"page":{"slug":"migration80.incompatible.md","content":"## Зміни, що ламають зворотну сумісність\n\n### Ядро PHP\n\n#### Порівняння рядків з числами\n\nНестрогі порівняння чисел і нечислових рядків тепер працюють, як перетворення числа на рядок з наступним порівнянням рядків. Порівняння чисел та числових рядків працює, як і раніше. Зокрема, це означає, що `0 == \"not-a-number\"` Тепер видасть false.\n\n| Сравнение | До | После |\n| --- | --- | --- |\n| `0 == \"0\"` | **`true`** | **`true`** |\n| `0 == \"0.0\"` | **`true`** | **`true`** |\n| `0 == \"foo\"` | **`true`** | **`false`** |\n| `0 == \"\"` | **`true`** | **`false`** |\n| `42 == \" 42\"` | **`true`** | **`true`** |\n| `42 == \"42foo\"` | **`true`** | **`false`** |\n\n#### Інші зміни, що ламають зворотну сумісність\n\n-   `match`тепер зарезервоване ключове слово.\n    \n-   `mixed`тепер зарезервоване слово, тому його не можна використовувати для назви класу, інтерфейсу чи риси, а також заборонено використовувати у просторах імен.\n    \n-   Помилки тверджень (assertions) тепер викидаються за умовчанням. Якщо краща стара поведінка,`assert.exception=0`можна встановити в INI-налаштуваннях.\n    \n-   Методи з тим самим ім'ям, як і клас, більше не інтерпретуються як конструктори. Натомість слід використовувати метод[\\_\\_construct()](language.oop5.decon.md#object.construct)\n    \n-   Можливість статичного виклику нестатичних методів видалено. Таким чином,[is\\_callable()](function.is-callable.md)завершиться помилкою під час перевірки нестатичного методу з ім'ям класу (необхідно перевіряти з екземпляром об'єкта).\n    \n-   Приведення типів`(real)`и`(unset)`видалено.\n    \n-   INI-директива[track\\_errors](errorfunc.configuration.md#ini.track-errors)видалено. Це означає, що php\\_errormsg більше не є актуальним. Замість нього можна використовувати функцію[error\\_get\\_last()](function.error-get-last.md)\n    \n-   Можливість визначати константи без урахування регістру було видалено. Третій аргумент[define()](function.define.md)більше не може бути\\*\\*`true`\\*\\*\n    \n-   Можливість вказувати автозавантажувач за допомогою функції[\\_\\_autoload()](function.autoload.md)було видалено. Натомість слід використовувати[spl\\_autoload\\_register()](function.spl-autoload-register.md)\n    \n-   Аргумент`errcontext`більше не передається в користувальницькі обробники помилок, заданих за допомогою[set\\_error\\_handler()](function.set-error-handler.md)\n    \n-   [create\\_function()](function.create-function.md)було видалено. Замість неї можна використовувати анонімні функції.\n    \n-   [each()](function.each.md)було видалено. Замість неї можна використовувати[foreach](control-structures.foreach.md) або [ArrayIterator](class.arrayiterator.md)\n    \n-   Можливість відв'язати це від замикань, які були створені з методу з використанням[Closure::fromCallable()](closure.fromcallable.md) або [ReflectionMethod::getClosure()](reflectionmethod.getclosure.md), було видалено.\n    \n-   Можливість відв'язати це від належних замикань, що містять використання цього, також була видалена.\n    \n-   Можливість використання[array\\_key\\_exists()](function.array-key-exists.md)з об'єктами було видалено. Натомість можна використовувати[isset()](function.isset.md) або [property\\_exists()](function.property-exists.md)\n    \n-   Робота параметра`key` у функції [array\\_key\\_exists()](function.array-key-exists.md)тепер наведена відповідно до[isset()](function.isset.md)та звичайним доступом до масиву. Всі типи ключів тепер використовують звичайне приведення типів, масив/об'єкт до ключа призведе до викидання[TypeError](class.typeerror.md)\n    \n-   Будь-який масив, у якого в якості першого числового ключа вказано число n, використовуватиме n+1 для наступного наступного неявного ключа, навіть якщо n негативно.\n    \n-   Рівень error\\_reporting за замовчуванням тепер\\*\\*`E_ALL`**. Раніше він виключав**`E_NOTICE`** і **`E_DEPRECATED`\\*\\*\n    \n-   [display\\_startup\\_errors](errorfunc.configuration.md#ini.display-startup-errors)тепер включено за замовчуванням.\n    \n-   Використання parent всередині класу, який не має батька, тепер призведе до фатальної помилки під час компіляції.\n    \n-   Оператор`@`більше не пригнічує фатальних помилок (**`E_ERROR`** **`E_CORE_ERROR`** **`E_COMPILE_ERROR`** **`E_USER_ERROR`** **`E_RECOVERABLE_ERROR`** **`E_PARSE`**). Обробники помилок, які очікують, що error\\_reporting матиме значення при використанні оператора`@`, повинні робити такі перевірки через бітову маску:\n    \n    ```php\n    <?php\n    // Замініть це\n    function my_error_handler($err_no, $err_msg, $filename, $linenum) {\n        if (error_reporting() == 0) {\n            return false;\n        }\n        // ...\n    }\n    \n    // На це\n    function my_error_handler($err_no, $err_msg, $filename, $linenum) {\n        if (!(error_reporting() & $err_no)) {\n            return false;\n        }\n        // ...\n    }\n    ?>\n    ```\n    \n    Крім цього, обов'язково слід приховати відображення повідомлень про помилки у виробничому середовищі, які можуть призвести до витоку інформації. Перевірте, що`display_errors=Off`використовується разом із записом журналу помилок.\n    \n-   `#[`більше не інтерпретується як початок коментаря, оскільки цей синтаксис тепер використовується для атрибутів.\n    \n-   Помилки успадкування через несумісні сигнатури методів (порушення LSP) тепер завжди викликають фатальну помилку. Раніше у деяких випадках видавалося попередження.\n    \n-   Пріоритет оператора конкатенації змінився щодо зрушень бітів і додавання, а також віднімання.\n    \n    ```php\n    <?php\n    echo \"Сума: \". $a + $b;\n    // Раніше інтерпретувалося як:\n    echo (\"Сума: \". $a) + $b;\n    // Тепер інтерпретується як:\n    echo \"Сума:\" . ($a + $b);\n    ?>\n    ```\n    \n-   Аргументи зі значенням за замовчуванням, яке дозволяється в\\*\\*`null`**під час виконання, більше не будуть явно позначати тип аргументу як nullable. Натомість потрібно вказувати або явний тип, що дозволяє значення null, або явне значення**`null`\\*\\*по умолчанию.\n    \n    ```php\n    <?php\n    // Замініть цей код:\n    function test(int $arg = CONST_RESOLVING_TO_NULL) {}\n    // На цей:\n    function test(?int $arg = CONST_RESOLVING_TO_NULL) {}\n    // На цей (альтернативний варіант):\n    function test(int $arg = null) {}\n    ?>\n    ```\n    \n-   Ряд попереджень перетворено на винятки[Error](class.error.md) :\n    \n    -   Спроба запису як неіснуючого об'єкта. Раніше це неявно створювало об'єкт stdClass у разі null, false та порожніх рядків.\n    -   Спроба додати елемент до масиву, для якого вже використовується ключ PHP\\_INT\\_MAX.\n    -   Спроба використовувати неприпустимий тип (масив або об'єкт) як ключ масиву або зміщення рядка.\n    -   Спроба записати в індекс масиву скалярне значення.\n    -   Спроба розпакувати значення, яке не є масивом/Traversable.\n    -   Спроба отримати доступ до некваліфікованих константів, які не визначені. Раніше некваліфікований доступ до константів призводив до попередження та інтерпретувався як рядок.\n    -   Передача невірної кількості аргументів у неваріативну вбудовану функцію призведе до помилки[ArgumentCountError](class.argumentcounterror.md)\n    \n    Ряд повідомлень перетворено на попередження:\n    \n    -   Спроба прочитати невизначену змінну.\n    -   Спроба прочитати невизначену властивість.\n    -   Спроба прочитати невизначений ключ масиву.\n    -   Спроба прочитати властивість необ'єкта.\n    -   Спроба отримати доступ до індексу масиву немасиву.\n    -   Спроба перетворити масив на рядок.\n    -   Спроба використовувати ресурс як ключ масиву.\n    -   Спроба використовувати null, логічне значення або число з плаваючою точкою як рядковий зсув.\n    -   Спроба прочитати усунення рядка за межами допустимого кордону.\n    -   Спроба присвоїти зміщення рядка порожній рядок.\n-   При спробі призначити кілька байтів усунення рядка тепер буде видано попередження.\n    \n-   Несподівані символи у вихідних файлах (наприклад, байти NUL за межами рядків) тепер призводять до виключення[ParseError](class.parseerror.md)замість попередження під час компіляції.\n    \n-   Неперехоплені винятки тепер проходять процедуру \"чистого завершення\", це означає, що після неперехопленого виключення викликатимуться деструктори.\n    \n-   Фатальна помилка часу компіляції \"Only variables can be passed by reference\" була відкладена до часу виконання та перетворена на виключення [Error](class.error.md) \"Argument cannot be passed by reference\".\n    \n-   Деякі повідомлення \"Only variables can be passed by reference\" були перетворені на виключення \"Argument cannot be passed by reference\".\n    \n-   Згенероване ім'я для анонімних класів змінилося. Тепер він буде включати ім'я першого з батьків або інтерфейсу:\n    \n    ```php\n    <?php\n    new class extends ParentClass {};\n    // -> ParentClass@anonymous\n    new class implements FirstInterface, SecondInterface {};\n    // -> FirstInterface@anonymous\n    new class {};\n    // -> class@anonymous\n    ?>\n    ```\n    \n    За новими іменами, як і раніше, слідуватиме NUL-байт і унікальний суфікс.\n    \n-   Посилання на неабсолютні трейти методів в адаптаціях псевдонімів трейтів мають бути однозначними:\n    \n    ```php\n    <?php\n    class X {\n        use T1, T2 {\n            func as otherFunc;\n        }\n        function func() {}\n    }\n    ?>\n    ```\n    \n    Якщо існують і`T1::func()`, и`T2::func()`, цей код раніше приймався без повідомлення, і передбачалося, що func посилається на`T1::func`. Тепер натомість буде викинуто фатальну помилку: необхідно явно вказати`T1::func`или`T2::func`\n    \n-   Сигнатура абстрактних методів, визначених у трейтах, тепер перевіряється за методом класу, що реалізує:\n    \n    ```php\n    <?php\n    trait MyTrait {\n        abstract private function neededByTrait(): string;\n    }\n    \n    class MyClass {\n        use MyTrait;\n    \n        // Помилка через невідповідність типу значення, що повертається.\n        private function neededByTrait(): int { return 42; }\n    }\n    ?>\n    ```\n    \n-   Відключені функції тепер обробляються так само, як неіснуючі функції. Виклик вимкненої функції повідомить, що немає такої функції, це дає можливість перевизначити вимкнену функцію.\n    \n-   Оболонки потоку`data://`більше не доступні для запису, що відповідає документованій поведінці.\n    \n-   Арифметичні та побітові оператори`+` `-` `*` `**` `%` `<<` `>>` `&` `^` `~` `++` `--`тепер будуть послідовно видавати[TypeError](class.typeerror.md), коли одним з операндів є масив (array), ресурс ([resource](language.types.resource.md)) чи не перевантажений об'єкт (object). Єдиним винятком із цього правила є операція злиття масивів`+` яка, як і раніше, підтримується.\n    \n-   Приведення з плаваючою точкою в рядок тепер завжди поводитиметься незалежно від локалі.\n    \n    ```php\n    <?php\n    setlocale(LC_ALL, \"de_DE\");\n    // Раніше: 3,14\n    // Тепер: 3.14\n    ?>\n    ```\n    \n    Смотрите[printf()](function.printf.md) [number\\_format()](function.number-format.md)и\\*\\*NumberFormatter()\\*\\*для отримання інформації про способи настроювання форматування чисел.\n    \n-   Видалено підтримку застарілих фігурних дужок для доступу до зміщення.\n    \n    ```php\n    <?php\n    // Замість:\n    $array{0};\n    $array{\"key\"};\n    // Використовуйте:\n    $array[0];\n    $array[\"key\"];\n    ?>\n    ```\n    \n-   Застосування модифікатора final до закритого методу тепер спричинить попередження, якщо цей метод не є конструктором.\n    \n-   Якщо у конструкторі об'єкта використовується[exit()](function.exit.md), Деструктор об'єкта більше не буде викликатися. Це відповідає поведінці, коли конструктор викидає виняток.\n    \n-   Імена у просторі імен більше не можуть містити прогалини:`Foo\\Bar`буде розпізнаватись як ім'я в просторі імен,`Foo \\ Bar`\\- Ні. І навпаки, зарезервовані ключові слова тепер дозволені як сегменти простору імен, що також може змінити інтерпретацію коду:`new\\x`тепер збігається з`constant('new\\x')`, але не з `new \\x()`\n    \n-   Для вкладених тернарних операторів тепер потрібна явна вказівка ​​дужок.\n    \n-   [debug\\_backtrace()](function.debug-backtrace.md) і [Exception::getTrace()](exception.gettrace.md)більше не надаватимуть посилання на аргументи. Неможливо змінити аргументи функції через трасування.\n    \n-   Обробка числових рядків була змінена, щоб зробити її більш зрозумілою і менш схильною до помилок. Завершальні прогалини тепер дозволено у числових рядках для узгодженості з тим, як обробляються початкові прогалини. В основному це впливає на:\n    \n    -   Функцию[is\\_numeric()](function.is-numeric.md)\n    -   Порівняння рядків з рядками\n    -   Оголошення типів\n    -   Операції збільшення та зменшення\n    \n    Поняття \"провідний числовий рядок\" в основному було відкинуто; випадки, коли це залишилося, є для полегшення міграції. Рядки, які видавали **`E_NOTICE`** \"A non well-formed numeric value encountered\", тепер видаватимуть **`E_WARNING`** \"A non-numeric value encountered\", а всі рядки, які видавали **`E_WARNING`** \"A non-numeric value encountered\" тепер видаватиме [TypeError](class.typeerror.md). В основному це впливає на:\n    \n    -   Арифметичні операції\n    -   Побітові операції\n    \n    Ця зміна\\*\\*`E_WARNING`**на[TypeError](class.typeerror.md)також впливає на**`E_WARNING`\\*\\* \"Illegal string offset 'string'\" для неприпустимих зсувів рядка. Поведінка явних наведень до int/float з рядків не змінилася.\n    \n-   Тепер у магічних методів перевірятимуться аргументи і типи, що повертаються, якщо вони оголошені. Сигнатура має відповідати наступному списку:\n    \n    -   `__call(string $name, array $arguments): mixed`\n    -   `__callStatic(string $name, array $arguments): mixed`\n    -   `__clone(): void`\n    -   `__debugInfo(): ?array`\n    -   `__get(string $name): mixed`\n    -   `__invoke(mixed $arguments): mixed`\n    -   `__isset(string $name): bool`\n    -   `__serialize(): array`\n    -   `__set(string $name, mixed $value): void`\n    -   `__set_state(array $properties): object`\n    -   `__sleep(): array`\n    -   `__unserialize(array $data): void`\n    -   `__unset(string $name): void`\n    -   `__wakeup(): void`\n-   Ключі масиву[call\\_user\\_func\\_array()](function.call-user-func-array.md)тепер інтерпретуватимуться як імена параметрів, а не ігноруватимуться.\n    \n-   Оголошення функції з ім'ям `assert()`всередині простору імен більше не допускається та викликає\\*\\*`E_COMPILE_ERROR`\\*\\*Функция[assert()](function.assert.md)піддається спеціальної обробки з боку движка, що може призвести до неузгодженої поведінки щодо однойменної функції у просторі імен.\n    \n\n### Перетворення ресурсів на об'єкти\n\nДекілька ресурсів ([resource](language.types.resource.md)) були перетворені на об'єкти (object). Перевірки значення, що повертається з використанням [is\\_resource()](function.is-resource.md) слід замінити перевірками на **`false`**\n\n-   [curl\\_init()](function.curl-init.md)тепер повертає об'єкт[CurlHandle](class.curlhandle.md)замість ресурсу ([resource](language.types.resource.md)). Функція[curl\\_close()](function.curl-close.md)більше не має сенсу, натомість екземпляр[CurlHandle](class.curlhandle.md)автоматично знищується, якщо на нього немає посилання.\n    \n-   [curl\\_multi\\_init()](function.curl-multi-init.md)тепер повертає об'єкт[CurlMultiHandle](class.curlmultihandle.md)замість ресурсу ([resource](language.types.resource.md)). Функція[curl\\_multi\\_close()](function.curl-multi-close.md)більше не має сенсу, натомість екземпляр[CurlMultiHandle](class.curlmultihandle.md)автоматично знищується, якщо на нього немає посилання.\n    \n-   [curl\\_share\\_init()](function.curl-share-init.md)тепер повертає об'єкт[CurlShareHandle](class.curlsharehandle.md)замість ресурсу ([resource](language.types.resource.md)). Функція[curl\\_share\\_close()](function.curl-share-close.md)більше не має сенсу, натомість екземпляр[CurlShareHandle](class.curlsharehandle.md)автоматично знищується, якщо на нього немає посилання.\n    \n-   [enchant\\_broker\\_init()](function.enchant-broker-init.md)тепер повертає об'єкт[EnchantBroker](class.enchantbroker.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [enchant\\_broker\\_request\\_dict()](function.enchant-broker-request-dict.md) і [enchant\\_broker\\_request\\_pwl\\_dict()](function.enchant-broker-request-pwl-dict.md)тепер повертають[EnchantDictionary](class.enchantdictionary.md)об'єкт замість ресурсу ([resource](language.types.resource.md)\n    \n-   Модуль GD тепер використовує об'єкти[GdImage](class.gdimage.md)як базова структура даних для зображень, а не ресурси ([resource](language.types.resource.md)). Функція[imagedestroy()](function.imagedestroy.md)більше немає сенсу; натомість екземпляр[GdImage](class.gdimage.md)автоматично знищується, якщо на нього немає посилання.\n    \n-   [openssl\\_x509\\_read()](function.openssl-x509-read.md) і [openssl\\_csr\\_sign()](function.openssl-csr-sign.md)тепер повертають об'єкт[OpenSSLCertificate](class.opensslcertificate.md)замість ресурсу ([resource](language.types.resource.md)). Функція[openssl\\_x509\\_free()](function.openssl-x509-free.md)оголошена застарілою і більше не має сенсу, натомість екземпляр[OpenSSLCertificate](class.opensslcertificate.md)автоматично знищується, якщо на нього більше не посилаються.\n    \n-   [openssl\\_csr\\_new()](function.openssl-csr-new.md)тепер повертає об'єкт[OpenSSLCertificateSigningRequest](class.opensslcertificatesigningrequest.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [openssl\\_pkey\\_new()](function.openssl-pkey-new.md)тепер повертає об'єкт[OpenSSLAsymmetricKey](class.opensslasymmetrickey.md)замість ресурсу ([resource](language.types.resource.md)). Функція[openssl\\_pkey\\_free()](function.openssl-pkey-free.md)оголошена застарілою і більше не має сенсу, натомість екземпляр[OpenSSLAsymmetricKey](class.opensslasymmetrickey.md)автоматично знищується, якщо на нього більше не посилаються.\n    \n-   [shmop\\_open()](function.shmop-open.md)тепер повертає об'єкт[Shmop](class.shmop.md)замість ресурсу ([resource](language.types.resource.md)). Функція[shmop\\_close()](function.shmop-close.md)більше немає сенсу і оголошена застарілою; натомість екземпляр[Shmop](class.shmop.md)автоматично знищується, якщо на нього більше не посилаються.\n    \n-   [socket\\_create()](function.socket-create.md) [socket\\_create\\_listen()](function.socket-create-listen.md) [socket\\_accept()](function.socket-accept.md) [socket\\_import\\_stream()](function.socket-import-stream.md) [socket\\_addrinfo\\_connect()](function.socket-addrinfo-connect.md) [socket\\_addrinfo\\_bind()](function.socket-addrinfo-bind.md) і [socket\\_wsaprotocol\\_info\\_import()](function.socket-wsaprotocol-info-import.md)тепер повертають об'єкт[Socket](class.socket.md)замість ресурсу ([resource](language.types.resource.md)) . [socket\\_addrinfo\\_lookup()](function.socket-addrinfo-lookup.md)тепер повертає масив об'єктів[AddressInfo](class.addressinfo.md)замість масиву ресурсів ([resource](language.types.resource.md)\n    \n-   [msg\\_get\\_queue()](function.msg-get-queue.md)тепер повертають об'єкт[SysvMessageQueue](class.sysvmessagequeue.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [sem\\_get()](function.sem-get.md)тепер повертають об'єкт[SysvSemaphore](class.sysvsemaphore.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [shm\\_attach()](function.shm-attach.md)тепер повертають об'єкт[SysvSharedMemory](class.sysvsharedmemory.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [xml\\_parser\\_create()](function.xml-parser-create.md) і [xml\\_parser\\_create\\_ns()](function.xml-parser-create-ns.md)тепер повертають об'єкт[XMLParser](class.xmlparser.md)замість ресурсу ([resource](language.types.resource.md)). Функція[xml\\_parser\\_free()](function.xml-parser-free.md)більше не має сенсу, натомість екземпляр XMLParser автоматично знищується, якщо на нього більше не посилаються.\n    \n-   Функції [XMLWriter](book.xmlwriter.md)тепер приймають та повертають, відповідно, об'єкти[XMLWriter](class.xmlwriter.md)замість ресурсів ([resource](language.types.resource.md)\n    \n-   [inflate\\_init()](function.inflate-init.md)тепер повертає об'єкт[InflateContext](class.inflatecontext.md)замість ресурсу ([resource](language.types.resource.md)\n    \n-   [deflate\\_init()](function.deflate-init.md)тепер повертає об'єкт[DeflateContext](class.deflatecontext.md)замість ресурсу ([resource](language.types.resource.md)\n    \n\n### COM та .Net (Windows)\n\nМожливість імпорту констант без урахування регістру з бібліотек типів було видалено. Другий аргумент [com\\_load\\_typelib()](function.com-load-typelib.md) більше не може бути false; [com.autoregister\\_casesensitive](com.configuration.md#ini.com.autoregister-casesensitive) більше не можна вимкнути; Маркери без урахування регістру в [com.typelib\\_file](com.configuration.md#ini.com.typelib-file) ігноруються.\n\n### CURL\n\n**`CURLOPT_POSTFIELDS`** більше не сприймає об'єкти як масиви. Щоб інтерпретувати об'єкт як масив, виконайте явне приведення `(array)`. Те саме стосується і інших параметрів, що приймають масиви.\n\n### дата та час\n\nДля роботи функцій [mktime()](function.mktime.md) і [gmmktime()](function.gmmktime.md) тепер потрібно хоча б один аргумент . [time()](function.time.md) може використовуватись для отримання поточної позначки часу.\n\n### DOM\n\nБули видалені нереалізовані класи з модуля DOM, які мали обробника і містили тестові дані. Ці класи також були видалені в останній версії стандарту DOM:\n\n-   **DOMNameList**\n-   **DomImplementationList**\n-   **DOMConfiguration**\n-   **DomError**\n-   **DomErrorHandler**\n-   **DOMImplementationSource**\n-   **DOMLocator**\n-   **DOMUserDataHandler**\n-   **DOMTypeInfo**\n-   **DOMStringExtend**\n\nВидалено нереалізовані методи модуля DOM, які не мали реалізації:\n\n-   **DOMNamedNodeMap::setNamedItem()**\n-   **DOMNamedNodeMap::removeNamedItem()**\n-   **DOMNamedNodeMap::setNamedItemNS()**\n-   **DOMNamedNodeMap::removeNamedItemNS()**\n-   **DOMText::replaceWholeText()**\n-   **DOMNode::compareDocumentPosition()**\n-   [DOMNode::isEqualNode()](domnode.isequalnode.md)\n-   **DOMNode::getFeature()**\n-   **DOMNode::setUserData()**\n-   **DOMNode::getUserData()**\n-   **DOMDocument::renameNode()**\n\n### Enchant\n\n-   [enchant\\_broker\\_list\\_dicts()](function.enchant-broker-list-dicts.md) [enchant\\_broker\\_describe()](function.enchant-broker-describe.md) і [enchant\\_dict\\_suggest()](function.enchant-dict-suggest.md)тепер повертають порожній масив замість\\*\\*`null`\\*\\*\n\n### Exif\n\n[read\\_exif\\_data()](function.read-exif-data.md) була вилучена; Замість неї слід використовувати [exif\\_read\\_data()](function.exif-read-data.md)\n\n### Фільтрування даних\n\n-   Флаги\\*\\*`FILTER_FLAG_SCHEME_REQUIRED`** і **`FILTER_FLAG_HOST_REQUIRED`**для фільтра**`FILTER_VALIDATE_URL`\\*\\* были удалены . `scheme`и`host`необхідні (і завжди були).\n    \n-   Типи\\*\\*`INPUT_REQUEST`** і **`INPUT_SESSION`\\*\\*для[filter\\_input()](function.filter-input.md)і їй похідних було видалено. Вони ніколи не були реалізовані, а спроба їх використання завжди викликала попередження.\n    \n\n### GD\n\n-   Застарілі функції [image2wbmp()](function.image2wbmp.md) були вилучені.\n    \n-   Застарілі функції [png2wbmp()](function.png2wbmp.md) і [jpeg2wbmp()](function.jpeg2wbmp.md) були вилучені.\n    \n-   Параметр`mode`за замовчуванням для функції[imagecropauto()](function.imagecropauto.md)більше не набуває значення`-1`. Натомість слід використовувати **`IMG_CROP_DEFAULT`**\n    \n-   У Windows, php\\_gd2.dll перейменований на php\\_gd.dll.\n    \n\n### GMP\n\n[gmp\\_random()](function.gmp-random.md) було видалено. Замість неї слід використовувати [gmp\\_random\\_range()](function.gmp-random-range.md) або [gmp\\_random\\_bits()](function.gmp-random-bits.md)\n\n### Iconv\n\nРеалізації iconv, які неправильно встановлюють errno у разі виникнення помилок, більше не підтримуються.\n\n### IMAP\n\n-   Невикористовуваний аргумент`default_host` функції [imap\\_headerinfo()](function.imap-headerinfo.md)був видалений.\n    \n-   Функция[imap\\_header()](function.imap-header.md)яка є псевдонімом[imap\\_headerinfo()](function.imap-headerinfo.md), було видалено.\n    \n\n### Функції інтернаціоналізації\n\n-   Застаріла константа\\*\\*`INTL_IDNA_VARIANT_2003`\\*\\*видалено.\n    \n-   Застаріла константа\\*\\*`Normalizer::NONE`\\*\\*видалено.\n    \n\n### LDAP\n\n-   Застарілі функції [ldap\\_sort()](function.ldap-sort.md) [ldap\\_control\\_paged\\_result()](function.ldap-control-paged-result.md) і [ldap\\_control\\_paged\\_result\\_response()](function.ldap-control-paged-result-response.md)видалено.\n    \n-   Змінився інтерфейс[ldap\\_set\\_rebind\\_proc()](function.ldap-set-rebind-proc.md); параметр`callback`більше не приймає порожні рядки; натомість слід вказувати\\*\\*`null`\\*\\*\n    \n\n### MBString\n\n-   Директива[mbstring.func\\_overload](mbstring.configuration.md#ini.mbstring.func-overload)було видалено. Пов'язані константи\\*\\*`MB_OVERLOAD_MAIL`\\*\\* \\*\\*`MB_OVERLOAD_STRING`** і **`MB_OVERLOAD_REGEX`\\*\\*також було видалено. Зрештою, записи`\"func_overload\"`и`\"func_overload_list\"`в[mb\\_get\\_info()](function.mb-get-info.md) були вилучені.\n    \n-   [mb\\_parse\\_str()](function.mb-parse-str.md)більше не можна використовувати без передачі масиву результатів.\n    \n-   Видалено низку застарілих псевдонімів mbregex. У наступному списку вказано, які функції слід використовувати замість них:\n    \n    -   **mbregex\\_encoding()** → [mb\\_regex\\_encoding()](function.mb-regex-encoding.md)\n    -   **mbereg()** → [mb\\_ereg()](function.mb-ereg.md)\n    -   **mberegi()** → [mb\\_eregi()](function.mb-eregi.md)\n    -   **mbereg\\_replace()** → [mb\\_ereg\\_replace()](function.mb-ereg-replace.md)\n    -   **mberegi\\_replace()** → [mb\\_eregi\\_replace()](function.mb-eregi-replace.md)\n    -   **mbsplit()** → [mb\\_split()](function.mb-split.md)\n    -   **mbereg\\_match()** → [mb\\_ereg\\_match()](function.mb-ereg-match.md)\n    -   **mbereg\\_search()** → [mb\\_ereg\\_search()](function.mb-ereg-search.md)\n    -   **mbereg\\_search\\_pos()** → [mb\\_ereg\\_search\\_pos()](function.mb-ereg-search-pos.md)\n    -   **mbereg\\_search\\_regs()** → [mb\\_ereg\\_search\\_regs()](function.mb-ereg-search-regs.md)\n    -   **mbereg\\_search\\_init()** → [mb\\_ereg\\_search\\_init()](function.mb-ereg-search-init.md)\n    -   **mbereg\\_search\\_getregs()** → [mb\\_ereg\\_search\\_getregs()](function.mb-ereg-search-getregs.md)\n    -   **mbereg\\_search\\_getpos()** → [mb\\_ereg\\_search\\_getpos()](function.mb-ereg-search-getpos.md)\n    -   **mbereg\\_search\\_setpos()** → [mb\\_ereg\\_search\\_setpos()](function.mb-ereg-search-setpos.md)\n-   Модифікатор `e`для[mb\\_ereg\\_replace()](function.mb-ereg-replace.md)був видалений. Замість нього слід використовувати[mb\\_ereg\\_replace\\_callback()](function.mb-ereg-replace-callback.md)\n    \n-   Аргумент нерядкового шаблону для[mb\\_ereg\\_replace()](function.mb-ereg-replace.md)тепер інтерпретуватиметься як рядок замість кодової точки ASCII. Попередню поведінку можна відновити явним викликом[chr()](function.chr.md)\n    \n-   Аргумент`needle`для функцій[mb\\_strpos()](function.mb-strpos.md) [mb\\_strrpos()](function.mb-strrpos.md) [mb\\_stripos()](function.mb-stripos.md) [mb\\_strripos()](function.mb-strripos.md) [mb\\_strstr()](function.mb-strstr.md) [mb\\_stristr()](function.mb-stristr.md) [mb\\_strrchr()](function.mb-strrchr.md) і [mb\\_strrichr()](function.mb-strrichr.md)тепер може бути порожнім.\n    \n-   Параметр`is_hex`, який не використовувався для внутрішніх цілей, був видалений з[mb\\_decode\\_numericentity()](function.mb-decode-numericentity.md)\n    \n-   Застаріла поведінка передачі кодування як третій аргумент замість зміщення для функції[mb\\_strrpos()](function.mb-strrpos.md)було видалено; замість цього як четвертий аргумент слід вказати явне зміщення з кодуванням.\n    \n-   Псевдоніми кодування символів`ISO_8859-*`були замінені на псевдоніми`ISO8859-*`для кращої сумісності із модулем iconv. Псевдоніми mbregex ISO 8859 з підкресленням (`ISO_8859_*`и`ISO8859_*`) також були видалені.\n    \n-   [mb\\_ereg()](function.mb-ereg.md) і [mb\\_eregi()](function.mb-eregi.md)тепер повертатимуть логічне значення\\*\\*`true`\\*\\*, у разі знайденого збігу. Раніше вони повертали ціле число , якщо аргумент `matches`не було передано, або`max(1, strlen($matches[0]))`, якщо `matches`був не пустий.\n    \n\n### OCI8\n\n-   Класс**OCI-Lob**перейменований на[OCILob](class.ocilob.md), а клас**OCI-Collection** - у [OCICollection](class.ocicollection.md)для імені сумісність забезпечується засобами інструкції типу arginfo PHP 8.\n    \n-   Деякі функції псевдонімів оголошено застарілим.\n    \n-   [oci\\_internal\\_debug()](function.oci-internal-debug.md) та її псевдонім [ociinternaldebug()](function.ociinternaldebug.md) були вилучені.\n    \n\n### ODBC\n\n-   [odbc\\_connect()](function.odbc-connect.md)більше не використовує з'єднання повторно.\n    \n-   Параметр, що не використовується`flags` функції [odbc\\_exec()](function.odbc-exec.md)був видалений.\n    \n\n### OpenSSL\n\n-   [openssl\\_seal()](function.openssl-seal.md) і [openssl\\_open()](function.openssl-open.md)тепер вимагають передачі`method`, оскільки попереднє значення є типовим`\"RC4\"`вважається небезпечним.\n\n### Регулярні вирази (сумісні з Perl)\n\nПри передачі неприпустимих послідовностей, що управляють, вони більше не інтерпретуються як літерали. Така поведінка раніше вимагала модифікатора `X`, що тепер ігнорується.\n\n### Об'єкти даних PHP\n\n-   Режим обробки помилок за умовчанням було змінено з \"тихого\" (silent) на \"виключення\" (exceptions). Детальніше дивіться [Помилки та обробка помилок](pdo.error-handling.md)\n    \n-   Змінилися сигнатури деяких методів PDO:\n    \n    -   `PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs)`\n    -   `PDOStatement::setFetchMode(int $mode, mixed ...$args)`\n\n### PDO ODBC\n\nДиректива php.ini[pdo\\_odbc.db2\\_instance\\_name](ref.pdo-odbc.md#ini.pdo-odbc.db2-instance-name) було видалено.\n\n### PDO MySQL\n\n[PDO::inTransaction()](pdo.intransaction.md) тепер повідомляє фактичний стан транзакції підключення, а не про приблизний від PDO. Якщо запит, за умови \"неявної фіксації\", виконується, то [PDO::inTransaction()](pdo.intransaction.md) згодом поверне **`false`**, оскільки транзакція буде неактивною.\n\n### PostgreSQL\n\n-   Застарілий синтаксис[pg\\_connect()](function.pg-connect.md)з використанням кількох параметрів замість рядка підключення більше не підтримується.\n    \n-   Застарілі сигнатури[pg\\_lo\\_import()](function.pg-lo-import.md) і [pg\\_lo\\_export()](function.pg-lo-export.md), що передають з'єднання як останній аргумент, більше не підтримуються. Натомість з'єднання має бути передано першим аргументом.\n    \n-   [pg\\_fetch\\_all()](function.pg-fetch-all.md)тепер повертатиме порожній масив замість\\*\\*`false`\\*\\*для наборів результатів із відсутніми рядками.\n    \n\n### Phar\n\nМетадані, пов'язані з phar, більше не будуть десеріалізуватися автоматично, щоб виправити потенційні вразливості безпеки через створення екземплярів об'єкта, автозавантаження і т.д.\n\n### Reflection\n\n-   Сигнатури методів\n    \n    -   `ReflectionClass::newInstance($args)`\n    -   `ReflectionFunction::invoke($args)`\n    -   `ReflectionMethod::invoke($object, $args)`\n    \n    були змінені на:\n    \n    -   `ReflectionClass::newInstance(...$args)`\n    -   `ReflectionFunction::invoke(...$args)`\n    -   `ReflectionMethod::invoke($object, ...$args)`\n    \n    Код, який повинен бути сумісний як з PHP 7, так і з PHP 8, може використовувати такі сигнатури:\n    \n    -   `ReflectionClass::newInstance($arg = null, ...$args)`\n    -   `ReflectionFunction::invoke($arg = null, ...$args)`\n    -   `ReflectionMethod::invoke($object, $arg = null, ...$args)`\n-   Метод[ReflectionType::\\_\\_toString()](reflectiontype.tostring.md)тепер повертатиме повне налагоджувальне уявлення типу і більше не є застарілим. Зокрема, результат включатиме індикатор допустимості значень NULL для типів, що допускають значення NULL. Формат значення, що повертається, нестабільний і може змінюватися в залежності від версії PHP.\n    \n-   Методи Reflection export() були видалені. Натомість об'єкти reflection можуть бути перетворені на рядок.\n    \n-   [ReflectionMethod::isConstructor()](reflectionmethod.isconstructor.md) і [ReflectionMethod::isDestructor()](reflectionmethod.isdestructor.md)тепер також повертають\\*\\*`true`\\*\\*для методів інтерфейсів[\\_\\_construct()](language.oop5.decon.md#object.construct) і [\\_\\_destruct()](language.oop5.decon.md#object.destruct). Раніше це було правильно тільки для методів класів і трейтів.\n    \n-   Метод\\*\\*ReflectionType::isBuiltin()\\*\\*переїхав в[ReflectionNamedType](class.reflectionnamedtype.md). У[ReflectionUnionType](class.reflectionuniontype.md)цього методу немає.\n    \n\n### Сокети\n\n-   Застарілі`flags` \\*\\*`AI_IDN_ALLOW_UNASSIGNED`** і **`AI_IDN_USE_STD3_ASCII_RULES`\\*\\*для[socket\\_addrinfo\\_lookup()](function.socket-addrinfo-lookup.md) були вилучені.\n\n### Стандартна бібліотека PHP (SPL)\n\n-   [SplFileObject::fgetss()](splfileobject.fgetss.md)був видалений.\n    \n-   [SplFileObject::seek()](splfileobject.seek.md)тепер завжди переміщається початку рядка. Раніше, позиція`>=1`переміщала на початок наступні рядки.\n    \n-   [SplHeap::compare()](splheap.compare.md)тепер вказує сигнатуру методу. Наслідуючі класи, які реалізують цей метод, тепер повинні використовувати сумісну сигнатуру методу.\n    \n-   [SplDoublyLinkedList::push()](spldoublylinkedlist.push.md) [SplDoublyLinkedList::unshift()](spldoublylinkedlist.unshift.md) і [SplQueue::enqueue()](splqueue.enqueue.md)тепер повертають void замість\\*\\*`true`\\*\\*\n    \n-   [spl\\_autoload\\_register()](function.spl-autoload-register.md)тепер завжди викидатиме[TypeError](class.typeerror.md)для неприпустимих аргументів, тому другий аргумент`do_throw`ігнорується, якщо для нього встановлено значення\\*\\*`false`\\*\\*\n    \n-   [SplFixedArray](class.splfixedarray.md)тепер є[IteratorAggregate](class.iteratoraggregate.md), а не[Iterator](class.iterator.md). . [SplFixedArray::rewind()](splfixedarray.rewind.md) [SplFixedArray::current()](splfixedarray.current.md) [SplFixedArray::key()](splfixedarray.key.md) [SplFixedArray::next()](splfixedarray.next.md) і [SplFixedArray::valid()](splfixedarray.valid.md)були вилучені. Замість них було додано[SplFixedArray::getIterator()](splfixedarray.getiterator.md). Будь-який код, який використовує явну ітерацію над SplFixedArray, тепер має отримати[Iterator](class.iterator.md) за допомогою [SplFixedArray::getIterator()](splfixedarray.getiterator.md). Це означає, що [SplFixedArray](class.splfixedarray.md)тепер безпечно використовувати у вкладених циклах.\n    \n\n### Бібліотека стандартних функцій\n\n-   [assert()](function.assert.md)більше не виконуватиме рядкові аргументи, натомість вони будуть оброблятися як будь-які звичайні аргументи. Таким чином, замість`assert('$a == $b')`слід використовувати`assert($a == $b)`. INI-директива[assert.quiet\\_eval](info.configuration.md#ini.assert.quiet-eval)та константа\\*\\*`ASSERT_QUIET_EVAL`\\*\\*були видалені, оскільки вони не мають сенсу.\n    \n-   [parse\\_str()](function.parse-str.md)більше не можна використовувати без зазначення масиву результатів.\n    \n-   Фильтр[string.strip\\_tags](filters.string.md#filters.string.strip_tags)видалено.\n    \n-   Аргумент`needle`функций[strpos()](function.strpos.md) [strrpos()](function.strrpos.md) [stripos()](function.stripos.md) [strripos()](function.strripos.md) [strstr()](function.strstr.md) [strchr()](function.strchr.md) [strrchr()](function.strrchr.md) і [stristr()](function.stristr.md)тепер завжди інтерпретуватиметься як рядок. Раніше невеликі потреби інтерпретувалися як кодова точка ASCII. Явний виклик[chr()](function.chr.md)може використовуватись для відновлення попередньої поведінки.\n    \n-   Аргумент`needle`функций[strpos()](function.strpos.md) [strrpos()](function.strrpos.md) [stripos()](function.stripos.md) [strripos()](function.strripos.md) [strstr()](function.strstr.md) [stristr()](function.stristr.md) і [strrchr()](function.strrchr.md)тепер може бути порожнім.\n    \n-   Аргумент`length`функций[substr()](function.substr.md) [substr\\_count()](function.substr-count.md) [substr\\_compare()](function.substr-compare.md) і [iconv\\_substr()](function.iconv-substr.md)тепер може бути\\*\\*`null`**Значения**`null`\\*\\*означає відсутність аргументу довжини, і тому функції повернуть залишок рядка замість порожнього рядка.\n    \n-   Аргумент`length` функції [array\\_splice()](function.array-splice.md)тепер може бути\\*\\*`null`**. Передача значення**`null`\\*\\*означає відсутність аргументу, тому функція видалити все, починаючи від`offset`до кінця масиву.\n    \n-   Аргумент`args`функций[vsprintf()](function.vsprintf.md) [vfprintf()](function.vfprintf.md) і [vprintf()](function.vprintf.md)тепер має бути масивом. Раніше приймався будь-який тип.\n    \n-   Параметр`'salt'` функції [password\\_hash()](function.password-hash.md)більше не підтримується. Якщо використовується опція`'salt'`, генерується попередження, передана сіль ігнорується, а замість неї використовується сгенерована сіль.\n    \n-   Функция[quotemeta()](function.quotemeta.md)тепер повертатиме порожній рядок, якщо було передано порожній рядок. Раніше поверталося\\*\\*`false`\\*\\*\n    \n-   Видалено такі функції:\n    \n    -   [hebrevc()](function.hebrevc.md)\n    -   [convert\\_cyr\\_string()](function.convert-cyr-string.md)\n    -   [money\\_format()](function.money-format.md)\n    -   [ezmlm\\_hash()](function.ezmlm-hash.md)\n    -   [restore\\_include\\_path()](function.restore-include-path.md)\n    -   [get\\_magic\\_quotes\\_gpc()](function.get-magic-quotes-gpc.md)\n    -   [get\\_magic\\_quotes\\_runtime()](function.get-magic-quotes-runtime.md)\n    -   [fgetss()](function.fgetss.md)\n-   \\*\\*`FILTER_SANITIZE_MAGIC_QUOTES`\\*\\*видалено.\n    \n-   Виклик [implode()](function.implode.md)з параметрами у зворотному порядку`($pieces, $glue)`більше не підтримується.\n    \n-   [parse\\_url()](function.parse-url.md)тепер буде розрізняти відсутні та порожні запити та фрагменти:\n    \n    -   `http://example.com/foo → query = null, fragment = null`\n    -   `http://example.com/foo? → query = \"\", fragment = null`\n    -   `http://example.com/foo# → query = null, fragment = \"\"`\n    -   `http://example.com/foo?# → query = \"\", fragment = \"\"`\n    \n    Раніше у всіх випадках query та fragment були\\*\\*`null`\\*\\*\n    \n-   [var\\_dump()](function.var-dump.md) і [debug\\_zval\\_dump()](function.debug-zval-dump.md)тепер друкуватимуть числа з плаваючою точкою, використовуючи[serialize\\_precision](ini.core.md#ini.serialize-precision), а не[precision](ini.core.md#ini.precision). У конфігурації за промовчанням це означає, що цифри з плаваючою точкою тепер друкуються з повною точністю цими функціями налагодження.\n    \n-   Якщо масив, що повертається[\\_\\_sleep()](language.oop5.magic.md#object.sleep), Містить неіснуючі властивості, тепер вони автоматично проігноруються. Раніше такі властивості були б серіалізовані, якби вони мали значення\\*\\*`null`\\*\\*\n    \n-   Локаль за замовчуванням під час запуску тепер завжди буде визначено як`\"C\"`. За замовчуванням локалі не успадковуються з оточення. Раніше для\\*\\*`LC_ALL`**було встановлено значення`\"C\"`, в той час як**`LC_CTYPE`\\*\\*успадковувався від оточення. Однак деякі функції не враховували успадковану локаль без явного виклику[setlocale()](function.setlocale.md). Явний виклик[setlocale()](function.setlocale.md)тепер потрібно завжди, якщо компонент локалі повинен бути змінений зі значенням за замовчуванням.\n    \n-   Застарілий резервний варіант DES в[crypt()](function.crypt.md)був видалений. Якщо в[crypt()](function.crypt.md)передається невідомий формат солі, функція завершиться помилкою з`*0`замість повернення до слабкого хешу DES.\n    \n-   При вказанні значень поза допустимим діапазоном для SHA256/SHA512[crypt()](function.crypt.md)тепер буде видана помилка`*0`замість обмеження до найближчої межі. Це відповідає поведінці glibc.\n    \n-   Результат функцій сортування міг змінитися, якщо масиві є однакові елементи.\n    \n-   Будь-які функції, що приймають callback-функції, які явно не вказані для прийому параметрів посилання, тепер будуть попереджати, якщо використовується callback-функція з посиланнями. Наприклад,[array\\_filter()](function.array-filter.md) і [array\\_reduce()](function.array-reduce.md). Раніше так було більшість функцій, але не всі.\n    \n-   Обгортка HTTP-потоку, використовувана такими функціями, як[file\\_get\\_contents()](function.file-get-contents.md), тепер за промовчанням оголошує HTTP/1.1, а не HTTP/1.0. Не змінює поведінки клієнта, але може змусити сервери реагувати інакше. Щоб зберегти стару поведінку, установіть параметр контексту потоку`'protocol_version'`, наПриклад:\n    \n    ```php\n    <?php\n    $ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);\n    echo file_get_contents('http://example.org', false, $ctx);\n    ?>\n    ```\n    \n-   Виклик [crypt()](function.crypt.md)без явної передачі солі більше не підтримується. Якщо ви хочете створити надійний хеш із автоматично згенерованою сіллю, використовуйте натомість[password\\_hash()](function.password-hash.md)\n    \n-   [substr()](function.substr.md) [mb\\_substr()](function.mb-substr.md) [iconv\\_substr()](function.iconv-substr.md) і [grapheme\\_substr()](function.grapheme-substr.md)тепер послідовно фіксують зміщення межі кордону рядка. Раніше, у деяких випадках, замість порожнього рядка повертався\\*\\*`false`\\*\\*\n    \n-   У Windows функції виконання програм ([proc\\_open()](function.proc-open.md) [exec()](function.exec.md) [popen()](function.popen.md)і т.д.) з використанням оболонки тепер послідовно виконують\\*\\*%comspec% /s /c \"$commandline\"**яка робить те ж саме, що і виконання**$commandline\\*\\*(без додаткових лапок).\n    \n\n### Sysvsem\n\n-   Параметр`auto_release`в[sem\\_get()](function.sem-get.md)був змінений, щоб набувати логічних значень (bool), а не цілі числа (int).\n\n### Tidy\n\n-   Параметр`use_include_path`, який не використовувався внутрішньо, був видалений з[tidy\\_repair\\_string()](tidy.repairstring.md)\n    \n-   [tidy::repairString()](tidy.repairstring.md) і [tidy::repairFile()](tidy.repairfile.md)стали статичними методами\n    \n\n### PHP-лексер (Tokenizer)\n\n-   У лексемах`T_COMMENT`більше не буде символу нового рядка наприкінці. Натомість новий рядок буде частиною наступної лексеми`T_WHITESPACE`. Слід зазначити, що за`T_COMMENT`не завжди слідує пробіл, за ним також може бути`T_CLOSE_TAG`або кінець файлу.\n    \n-   Імена у просторах імен тепер представлені за допомогою`T_NAME_QUALIFIED` `Foo\\Bar` `T_NAME_FULLY_QUALIFIED` `\\Foo\\Bar`) та лексеми`T_NAME_RELATIVE` `namespace\\Foo\\Bar`)) . `T_NS_SEPARATOR`використовується тільки для автономних розділювачів простору імен і лише синтаксично дійсний у поєднанні з оголошеннями групового використання.\n    \n\n### XMLReader\n\n[XMLReader::open()](xmlreader.open.md) і [XMLReader::xml()](xmlreader.xml.md) тепер є статичними методами. Їх, як і раніше, можна викликати як методи екземпляра, але наступні класи повинні оголошувати їх як статичні, якщо вони перевизначають ці методи.\n\n### XML-RPC\n\nМодуль XML-RPC був переміщений до PECL і не є частиною дистрибутива PHP.\n\n### Zip\n\n**`ZipArchive::OPSYS_Z_CPM`** була видалена (у цьому імені була помилка). Використовуйте замість неї **`ZipArchive::OPSYS_CPM`**\n\n### Zlib\n\n-   [gzgetss()](function.gzgetss.md)видалено.\n    \n-   [zlib.output\\_compression](zlib.configuration.md#ini.zlib.output-compression)більше не вимикається автоматично для`Content-Type: image/*`\n    \n\n### Пакети тестів PHP для Windows\n\nСкрипт виконання тестів був перейменований з run-test.php на run-tests.php, щоб відповідати його імені в php-src.\n","title":"Зміни, що ламають зворотну сумісність","contentType":2,"navigation":[{"migration80.new-features.md":"« Нова функціональність"},{"migration80.deprecated.md":"Функціональність, оголошена застарілою в PHP 8.0.x"},{"index.md":"PHP Manual"},{"migration80.md":"Міграція з PHP 7.4.x на PHP 8.0.x"}]}},"__N_SSG":true}