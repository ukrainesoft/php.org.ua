{"pageProps":{"page":{"slug":"ds-map.intersect.md","content":"# Ds\\\\Map::intersect\n\n(PECL ds >= 1.0.0)\n\nDs\\\\Map::intersect — Створює нову колекцію пар, створену перетином з іншою колекцією пар\n\n### Опис\n\n```methodsynopsis\npublic Ds\\Map::intersect(Ds\\Map $map): Ds\\Map\n```\n\nСтворює нову колекцію пар з поточної, що містить елементи, ключі яких присутні як у поточній колекції, так і переданій у параметрі `map`. Іншими словами, повертає копію поточної колекції, з якої видалено всі елементи, ключі яких відсутні в колекції `map`\n\n`A ∩ B = {x : x ∈ A ∧ x ∈ B}`\n\n> **Зауваження** :\n> \n> Значення беруться із поточної колекції пар.\n\n### Список параметрів\n\n`map`\n\nНова колекція типу Map.\n\n### Значення, що повертаються\n\nПеретин поточної колекції та переданої в `map`\n\n### Дивіться також\n\n-   [» Перетин](https://en.wikipedia.org/wiki/Intersection_(set_theory))на Вікіпедія\n\n### Приклади\n\n**Приклад #1 Приклад використання** Ds\\\\Map::intersect()\\*\\*\\*\\*\n\n```php\n<?php\n$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map([\"b\" => 4, \"c\" => 5, \"d\" => 6]);\n\nvar_dump($a->intersect($b));\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nobject(Ds\\Map)#3 (2) {\n  [0]=>\n  object(Ds\\Pair)#4 (2) {\n    [\"key\"]=>\n    string(1) \"b\"\n    [\"value\"]=>\n    int(2)\n  }\n  [1]=>\n  object(Ds\\Pair)#5 (2) {\n    [\"key\"]=>\n    string(1) \"c\"\n    [\"value\"]=>\n    int(3)\n  }\n}\n```\n","title":"Ds\\\\Map::intersect","contentType":2,"navigation":[{"ds-map.hasvalue.md":"« Ds\\\\Map::hasValue"},{"ds-map.isempty.md":"Ds\\\\Map::isEmpty »"},{"index.md":"PHP Manual"},{"class.ds-map.md":"Ds\\\\Map"}]}},"__N_SSG":true}