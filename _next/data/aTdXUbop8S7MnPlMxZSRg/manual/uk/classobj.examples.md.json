{"pageProps":{"page":{"slug":"classobj.examples.md","content":"# Приклади\n\nУ наведеному нижче прикладі ми спочатку визначимо базовий клас і клас його наслідуючий. Базовий клас описує овоч: чи їстівний він і якого кольору. Дочірній клас Spinach додає метод приготування овочів та перевірки, чи був він уже приготовлений.\n\n**Приклад #1 Визначення класів**\n\nОвочі\n\n```php\n<?php\n\nclass Vegetable {\n    public $edible;\n\n    public $color;\n\n    public function __construct($edible, $color = \"green\")\n    {\n        $this->edible = $edible;\n        $this->color = $color;\n    }\n\n    public function isEdible()\n    {\n        return $this->edible;\n    }\n\n    public function getColor()\n    {\n        return $this->color;\n    }\n}\n\n?>\n```\n\nШпинат\n\n```php\n<?php\n\nclass Spinach extends Vegetable {\n    public $cooked = false;\n\n    public function __construct()\n    {\n        parent::__construct(true, \"green\");\n    }\n\n    public function cook()\n    {\n        $this->cooked = true;\n    }\n\n    public function isCooked()\n    {\n        return $this->cooked;\n    }\n}\n\n?>\n```\n\nТепер ми створимо об'єкт кожного класу і роздрукуємо інформацію про них, включаючи порядок їх успадкування. Також ми оголосимо кілька функцій-утиліт, головним чином для зручного виведення результатів.\n\n**Приклад #2 test\\_script.php**\n\n```php\n<?php\n\n// зарегистрировать автозагрузчик для загрузки классов\nspl_autoload_register();\n\nfunction printProperties($obj)\n{\n    foreach (get_object_vars($obj) as $prop => $val) {\n        echo \"\\t$prop = $val\\n\";\n    }\n}\n\nfunction printMethods($obj)\n{\n    $arr = get_class_methods(get_class($obj));\n    foreach ($arr as $method) {\n        echo \"\\tфункция $method()\\n\";\n    }\n}\n\nfunction objectBelongsTo($obj, $class)\n{\n    if (is_subclass_of($obj, $class)) {\n        echo \"Объект принадлежит к классу \" . get_class($obj);\n        echo \", подкласс $class\\n\";\n    } else {\n        echo \"Объект не принадлежит к подклассу $class\\n\";\n    }\n}\n\n// создание 2 объектов\n$veggie = new Vegetable(true, \"blue\");\n$leafy = new Spinach();\n\n// вывод информации об объектах\necho \"вегетарианский: CLASS \" . get_class($veggie) . \"\\n\";\necho \"листовой: CLASS \" . get_class($leafy);\necho \", PARENT \" . get_parent_class($leafy) . \"\\n\";\n\n// показать вегетарианские свойства\necho \"\\nвегетарианский: Свойства\\n\";\nprintProperties($veggie);\n\n// и листовые методы\necho \"\\nleafy: Методы\\n\";\nprintMethods($leafy);\n\necho \"\\nПроисхождение:\\n\";\nobjectBelongsTo($leafy, Spinach::class);\nobjectBelongsTo($leafy, Vegetable::class);\n\n?>\n```\n\nРезультат виконання наведених прикладів:\n\n```\nвегетарианский: CLASS Vegetable\nлистовой: CLASS Spinach, PARENT Vegetable\n\nвегетарианский: Свойства\n        edible = 1\n        color = blue\n\nлистовой: Методы\n        function __construct()\n        function cook()\n        function isCooked()\n        function isEdible()\n        function getColor()\n\nПроисхождение:\nОбъект не принадлежит к подклассу Spinach\nОбъект принадлежит к классу Spinach, подкласс Vegetable\n```\n\nВажливо зауважити, що у наведеному вище прикладі об'єкт $leafy - екземпляр класу **Spinach**, який успадковує клас **Vegetable**\n","title":"Приклади","contentType":2,"navigation":[{"classobj.constants.md":"« Зумовлені константи"},{"ref.classobj.md":"Функції роботи з класами та об'єктами »"},{"index.md":"PHP Manual"},{"book.classobj.md":"Класи та об'єкти"}]}},"__N_SSG":true}