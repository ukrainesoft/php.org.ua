{"pageProps":{"page":{"slug":"functions.user-defined.md","content":"## Функції, визначені користувачем\n\nНаведемо приклад синтаксису, який використовується для опису функцій:\n\n**Псевдокод для демонстрації використання функцій**\n\n```php\n<?php\nfunction foo($arg_1, $arg_2, /* ..., */ $arg_n)\n{\n    echo \"Приклад функции.\\n\";\n    return $retval;\n}\n?>\n```\n\nВсередині функції можна використовувати будь-який коректний PHP-код, у тому числі інші функції та навіть оголошення [класів](language.oop5.basic.md#language.oop5.basic.class)\n\nІмена функцій дотримуються тих самих правил, що й інші мітки в PHP. Коректне ім'я функції починається з букви або символу підкреслення, за яким слідує будь-яка кількість букв, цифр або символів підкреслення. Як регулярний вираз воно може бути виражене так: `^[a-zA-Z_\\x80-\\xff][a-zA-Z0-9_\\x80-\\xff]*$`\n\n**Підказка**\n\nСмотрите также[Посібник з іменування](userlandnaming.md)\n\nФункції не повинні бути визначені до їх використання, *виключаючи* той випадок, коли функції визначаються умовно, як показано у двох наступних прикладах.\n\nУ випадку, коли функція визначається залежно від будь-якої умови, наприклад, як це показано у двох наведених нижче прикладах, обробка опису функції повинна *передувати* її виклик.\n\n**Приклад #2 Функції, що залежать від умов**\n\n```php\n<?php\n\n$makefoo = true;\n\n/* Мы не можем вызвать функцию foo() в этом месте,\n   поскольку она ещё не определена, но мы можем\n   обратиться к bar() */\n\nbar();\n\nif ($makefoo) {\n  function foo()\n  {\n    echo \"Я не существую до тех пор, пока выполнение программы меня не достигнет.\\n\";\n  }\n}\n\n/* Теперь мы благополучно можем вызывать foo(),\n   поскольку $makefoo была интерпретирована как true */\n\nif ($makefoo) foo();\n\nfunction bar()\n{\n  echo \"Я существую сразу с начала старта программы.\\n\";\n}\n\n?>\n```\n\n**Приклад #3 Вкладені функції**\n\n```php\n<?php\nfunction foo()\n{\n  function bar()\n  {\n    echo \"Я не существую пока не будет вызвана foo().\\n\";\n  }\n}\n\n/* Мы пока не можем обратиться к bar(),\n   поскольку она ещё не определена. */\n\nfoo();\n\n/* Теперь мы можем вызвать функцию bar(),\n   обработка foo() сделала её доступной. */\n\nbar();\n\n?>\n```\n\nУсі функції та класи PHP мають глобальну область видимості - вони можуть бути викликані поза функцією, навіть якщо були визначені всередині та навпаки.\n\nPHP не підтримує перевантаження функції, також немає можливості перевизначити або видалити оголошену раніше функцію.\n\n> **Зауваження**: Імена функцій реєстронезалежний для символів ASCII від `A`до`Z`Тим не менш, краще викликати функції так, як вони були оголошені.\n\nФункції PHP підтримують як [списки аргументів змінної довжини](functions.arguments.md#functions.variable-arg-list), так и[значення аргументів за умовчанням](functions.arguments.md#functions.arguments.default)Смотрите также описания функций[func\\_num\\_args()](function.func-num-args.md) [func\\_get\\_arg()](function.func-get-arg.md) і [func\\_get\\_args()](function.func-get-args.md) для детальнішої інформації.\n\nМожна викликати функції PHP рекурсивно.\n\n**Приклад #4 Рекурсивні функції**\n\n```php\n<?php\nfunction recursion($a)\n{\n    if ($a < 20) {\n        echo \"$a\\n\";\n        recursion($a + 1);\n    }\n}\n?>\n```\n\n> **Зауваження**: Рекурсивний виклик методів/процедур з глибиною понад 100-200 рівнів рекурсії може спричинити переповнення стека та призвести до аварійного завершення скрипту. Зокрема, нескінченна рекурсія вважатиметься програмною помилкою.\n","title":"Функції, визначені користувачем","contentType":2,"navigation":[{"language.functions.md":"« Функції"},{"functions.arguments.md":"Аргументи функції »"},{"index.md":"PHP Manual"},{"language.functions.md":"Функції"}]}},"__N_SSG":true}