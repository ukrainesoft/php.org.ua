{"pageProps":{"page":{"slug":"mongodb.security.script_injection.md","content":"# Атака за допомогою ін'єкцій у скриптах\n\nЯкщо ви використовуєте JavaScript, переконайтеся, що всі змінні, які перетинають кордон PHP-JavaScript, передаються в поле `scope` [MongoDB\\\\BSON\\\\Javascript](class.mongodb-bson-javascript.md), а не інтерполуються у рядок JavaScript. Це може виникнути під час використання пропозицій `$where` у запитах, командах mapReduce та group, а також у будь-який інший час, коли ви можете передати JavaScript до бази даних.\n\nНаприклад, припустимо, що ми маємо деякий JavaScript, щоб вітати користувача в журналах бази даних. Ми могли б зробити:\n\n```php\n<?php\n$m = new MongoDB\\Driver\\Manager;\n\n// Не делайте так!!!\n$username = $_GET['field'];\n\n$cmd = new \\MongoDB\\Driver\\Command( [\n    'eval' => \"print('Привет, $username!');\"\n] );\n\n$r = $m->executeCommand( 'dramio', $cmd );\n?>\n```\n\nОднак що, якщо зловмисник передасть JavaScript?\n\n```php\n<?php\n$m = new MongoDB\\Driver\\Manager;\n\n// Не делайте так!!!\n$username = $_GET['field'];\n// $username is set to \"'); db.users.drop(); print('\"\n\n$cmd = new \\MongoDB\\Driver\\Command( [\n    'eval' => \"print('Привет, $username!');\"\n] );\n\n$r = $m->executeCommand( 'dramio', $cmd );\n?>\n```\n\nТепер MongoDB виконає рядок JavaScript `\"print('Привіт, '); db.users.drop(); print('!');\"`. Цю атаку легко уникнути: використовуйте `args` для передачі змінних з PHP до JavaScript:\n\n```php\n<?php\n$m = new MongoDB\\Driver\\Manager;\n\n$_GET['field'] = 'derick';\n$args = [ $_GET['field'] ];\n\n$cmd = new \\MongoDB\\Driver\\Command( [\n    'eval' => \"function greet(username) { print('Привет, ' + username + '!'); }\",\n    'args' => $args,\n] );\n\n$r = $m->executeCommand( 'dramio', $cmd );\n?>\n```\n\nЦе додає аргумент у область JavaScript, яка використовується як аргумент для функції `greet`. Тепер, якщо хтось спробує надіслати шкідливий код, MongoDB надрукує нешкідливо `Вітання, '); db.dropDatabase(); print('!`\n\nВикористання аргументів допомагає запобігти виконанню шкідливого введення базою даних. Тим не менш, ви повинні переконатися, що ваш код не перевернеться і все одно виконає введення! Найкраще уникати виконання *будь-якого*JavaScript на сервере.\n\nНастійно рекомендується уникати речення [» $where clause](https://www.mongodb.com/docs/manual/reference/operator/query/where/#considerations) із запитами, оскільки це суттєво впливає на продуктивність. По можливості використовуйте або звичайні оператори запитів, або [» Aggregation Framework](https://www.mongodb.com/docs/manual/core/aggregation-pipeline)\n\nЯк альтернатива [» MapReduce](https://www.mongodb.com/docs/manual/core/map-reduce/), що використовує JavaScript, розгляньте можливість використання [» Aggregation Framework](https://www.mongodb.com/docs/manual/core/aggregation-pipeline). На відміну від Map/Reduce, він використовує ідіоматичний мову для побудови запитів, без необхідності писати та використовувати повільніший підхід JavaScript, який потрібний для Map/Reduce.\n\nКоманда[» eval](https://www.mongodb.com/docs/manual/reference/command/eval/) застаріла з MongoDB 3.0, і її слід уникати.\n","title":"Атака за допомогою ін'єкцій у скриптах","contentType":2,"navigation":[{"mongodb.security.request_injection.md":"Атака за допомогою ін'єкцій у запиті"},{"book.mongodb.md":"MongoDB\\\\Driver »"},{"index.md":"PHP Manual"},{"mongodb.security.md":"Безпека"}]}},"__N_SSG":true}