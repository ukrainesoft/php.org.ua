{"pageProps":{"page":{"slug":"function.debug-backtrace.md","content":"# debug\\_backtrace\n\n(PHP 4 >= 4.3.0, PHP 5, PHP 7, PHP 8)\n\ndebug\\_backtrace - Генерує стек викликів функцій\n\n### Опис\n\n```methodsynopsis\ndebug_backtrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT, int $limit = 0): array\n```\n\nФункция**debug\\_backtrace()** генерує стек викликів функцій PHP.\n\n### Список параметрів\n\n`options`\n\nЦей параметр – бітова маска для наступних налаштувань:\n\n<table class=\"doctable table\"><caption><strong>Опції <span class=\"function\"><strong>debug_backtrace()</strong></span></strong></caption><tbody class=\"tbody\"><tr><td>DEBUG_BACKTRACE_PROVIDE_OBJECT</td><td>Чи потрібно заповнювати ключ \"object\" (у виході масиві).</td></tr><tr><td>DEBUG_BACKTRACE_IGNORE_ARGS</td><td>Чи потрібно виключити ключ \"args\" (з вихідного масиву) з супутнім виключенням всіх аргументів функцій/методів, щоб зменшити витрату пам'яті.</td></tr></tbody></table>\n\n> **Зауваження** :\n> \n> Можливі чотири комбінації:\n> \n> < /tr>\n> \n> <table class=\"doctable table\"><caption><strong>Опції <span class=\"function\"><strong>debug_backtrace()</strong></span></strong></caption><tbody class=\"tbody\"><tr><td><code class=\"code\">debug_backtrace()</code></td><td rowspan=\"3\" style=\"vertical-align: middle;\">Заповнюються обидва ключі .</td></tr><tr><td><code class=\"code\">debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT)</code></td></tr><tr><td><code class=\" code\">debug_backtrace(1)</code></td></tr><tr><td><code class=\"code\">debug_backtrace(0)</code></td><td style=\" vertical-align: middle;\">Не вмикається ключ <code class=\"literal\">\"object\"</code> і заповнюється ключ <code class=\"literal\">\"args\"</code>.</td></tr><tr><td><code class=\"code\">debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)</code></td><td rowspan=\"2\" style=\"vertical-align: middle;\">Опускається ключ &lt; code class=\"literal\"&gt;\"object\" <em>і</em> ключ <code class=\"literal\">\"args\"</code>.</td></tr><tr><td><code class=\"code\">debug_backtrace(2)</code></td></tr><tr><td><code class=\"code\">debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT|DEBUG_BACKTRACE_IGNORE_ARGS)</code></td><td rowspan=\"2\" style=\"vertical-align: middle;\">Заповнюється ключ <code class=\"literal\">\"object\"</code> <em>і</em> опускається ключ <code class=\"literal\">\"args\"</code>.</td></tr><tr><td><code class=\"code\">debug_backtrace(3)</code></td></tr></tbody></table>\n\n`limit`\n\nЦим параметром можна обмежити кількість функцій, що повертаються. За замовчуванням параметр (`limit`\\= ) — буде виведено весь стек викликів.\n\n### Значення, що повертаються\n\nФункція повертає масив вкладених асоціативних масивів (array). Опис елементів масиву наведено нижче:\n\n**Список можливих елементів масивів, що повертаються функцією **debug\\_backtrace()****\n\n| Имя | Тип | Опис |\n| --- | --- | --- |\n| function | string | Ім'я поточної функції. Дивіться також [\\_\\_FUNCTION\\_\\_](language.constants.predefined.md) |\n| line | int | Поточний номер рядка. Дивіться також [\\_\\_LINE\\_\\_](language.constants.predefined.md) |\n| file | string | Назва поточного файлу. Дивіться також [\\_\\_FILE\\_\\_](language.constants.predefined.md) |\n| class | string | Ім'я поточного [класу](language.oop5.md)Смотрите также[\\_\\_CLASS\\_\\_](language.constants.predefined.md) |\n| object | object | Текущий[об'єкт](language.oop5.md) |\n| type | string | Поточний тип дзвінка функції. Якщо це виклик методу об'єкта, буде повернуто значення \"->\". Якщо це виклик статичного методу класу, то \"::\". Якщо це простий дзвінок функції, нічого не повертається. |\n| args | array | Якщо (функція **debug\\_backtrace()**) викликана всередині функції, у цих ключах буде перераховано аргументи функцій. Якщо дзвінок здійснено всередині файлу, буде перераховано імена включених файлів. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** debug\\_backtrace()\\*\\*\\*\\*\n\n```php\n<?php\n// файл /tmp/a.php\n\nfunction a_test($str)\n{\n    echo \"\\nПривет, $str\";\n    var_dump(debug_backtrace());\n}\n\na_test('друг');\n?>\n\n<?php\n// файл /tmp/b.php\ninclude_once '/tmp/a.php';\n?>\n```\n\nРезультат аналогічний наведеному нижче, якщо запустити /tmp/b.php:\n\n```\nПривет, друг\narray(2) {\n[0]=>\narray(4) {\n    [\"file\"] => string(10) \"/tmp/a.php\"\n    [\"line\"] => int(10)\n    [\"function\"] => string(6) \"a_test\"\n    [\"args\"]=>\n    array(1) {\n      [0] => &string(8) \"друг\"\n    }\n}\n[1]=>\narray(4) {\n    [\"file\"] => string(10) \"/tmp/b.php\"\n    [\"line\"] => int(2)\n    [\"args\"] =>\n    array(1) {\n      [0] => string(10) \"/tmp/a.php\"\n    }\n    [\"function\"] => string(12) \"include_once\"\n  }\n}\n```\n\n### Дивіться також\n\n-   [trigger\\_error()](function.trigger-error.md) \\- Викликає помилку користувача/попередження/повідомлення\n-   [debug\\_print\\_backtrace()](function.debug-print-backtrace.md) \\- Виводить стек викликів функцій\n","title":"debug\\_backtrace","contentType":2,"navigation":[{"ref.errorfunc.md":"« Функції обробки помилок"},{"function.debug-print-backtrace.md":"debug\\_print\\_backtrace »"},{"index.md":"PHP Manual"},{"ref.errorfunc.md":"Функції обробки помилок"}]}},"__N_SSG":true}