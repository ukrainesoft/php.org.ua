{"pageProps":{"page":{"slug":"yaf-route-regex.construct.md","content":"# Yaf\\_Route\\_Regex::\\_\\_construct\n\n(Yaf >=1.0.0)\n\nYaf\\_Route\\_Regex::\\_\\_construct - Конструктор класу Yaf\\_Route\\_Regex\n\n### Опис\n\npublic **Yaf\\_Route\\_Regex::\\_\\_construct**  \nstring`$match`,  \narray`$route`,  \narray`$map`  \narray`$verify`  \nstring`$reverse`  \n) .\n\n### Список параметрів\n\n`match`\n\nГотовий шаблон регулярного виразу використовуватиметься для перевірки відповідності URI запиту; якщо не збігається, [Yaf\\_Route\\_Regex](class.yaf-route-regex.md) поверне **`false`**\n\n`route`\n\nКоли шаблон відповідності відповідає URI запиту, [Yaf\\_Route\\_Regex](class.yaf-route-regex.md) буде вирішувати, якого маршруту m/c/a він належить.\n\nБудь-який з m/c/a у цьому масиві - необов'язковий, якщо ви не призначите будь-яке значення, він перенаправить на маршрут за промовчанням.\n\n`map`\n\nМасив призначення імені збігам (captures).\n\n`verify`\n\n`reverse`\n\nСтрока, используемая для формирования URL, смотрите[Yaf\\_Route\\_Regex::assemble()](yaf-route-regex.assemble.md)\n\n> **Зауваження** :\n> \n> Цей параметр був представлений у версії 2.3.0\n\n### Значення, що повертаються\n\n### Приклади\n\n**Приклад #1 Приклад використання** Yaf\\_Route\\_Regex()\\*\\*\\*\\*\n\n```php\n<?php\n   /**\n    * Добавить маршрут регулярного выражения в стек маршрута Yaf_Router Yaf_Router\n    */\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^/product/([^/]+)/([^/])+#\", // совпадение с URI запроса, начинающегося с \"/product\"\n           array(\n               'controller' => \"product\",  // маршрут на контроллер product,\n           ),\n           array(\n              1 => \"name\",   // теперь вы можете вызвать $request->getParam(\"name\")\n              2 => \"id\",     // для получения первого совпадения в шаблоне.\n           )\n        )\n    );\n?>\n```\n\n**Приклад #2 Приклад використання** Yaf\\_Route\\_Regex (з версії 2.3.0)()\\*\\*\\*\\*\n\n```php\n<?php\n   /**\n    * Использовать результат совпадения в качестве имени MVC\n    */\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^/product/([^/]+)/([^/])+#i\", // совпадение с URI запроса, начинающегося с \"/product\"\n           array(\n              'controller' => \":name\", // маршрут на :name, которому соответствует $1 в результате совпадения как имя контроллера\n           ),\n           array(\n              1 => \"name\",   // теперь вы можете вызвать $request->getParam(\"name\")\n              2 => \"id\",     // для получения первого совпадения в шаблоне.\n           )\n        )\n    );\n?>\n```\n\n**Приклад #3 Приклад використання** Yaf\\_Route\\_Regex із іменованими збігами (з версії 2.3.0)()\\*\\*\\*\\*\n\n```php\n<?php\n   /**\n    * Использовать результат совпадения в качестве имени MVC\n    */\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^/product/(?<name>[^/]+)/([^/])+#i\", //match request uri leading \"/product\"\n           array(\n           'controller' => \":name\", // маршрут на :name,\n                                    // который называется именем группы совпадения 'name' в результате совпадения как имя контроллера\n           ),\n           array(\n              2 => \"id\",     // для получения первого совпадения в шаблоне.\n           )\n        )\n    );\n?>\n```\n\n**Приклад #4 Приклад використання** Yaf\\_Route\\_Regex()\\*\\*\\*\\*\n\n```php\n<?php\n   /**\n    * Добавить маршрут регулярного выражения в стек маршрута Yaf_Router, вызвав addconfig\n    */\n    $config = array(\n        \"name\" => array(\n           \"type\"  => \"regex\",          // маршрут Yaf_Route_Regex\n           \"match\" => \"#(.*)#\",         // совпадение с произвольным запросом URI\n           \"route\" => array(\n               'controller' => \"product\",  // маршрут на контроллер product,\n               'action'     => \"dummy\",    // маршрут на действие dummy\n           ),\n           \"map\" => array(\n              1 => \"uri\",   // теперь вы можете вызвать $request->getParam(\"uri\")\n           ),\n        ),\n    );\n    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(\n        new Yaf_Config_Simple($config));\n?>\n```\n\n### Дивіться також\n\n-   [Yaf\\_Router::addRoute()](yaf-router.addroute.md) \\- Додає новий маршрут до маршрутизатора\n-   [Yaf\\_Router::addConfig()](yaf-router.addconfig.md) \\- Додає налаштовані маршрути до маршрутизатора\n-   [Yaf\\_Route\\_Static](class.yaf-route-static.md)\n-   [Yaf\\_Route\\_Supervar](class.yaf-route-supervar.md)\n-   [Yaf\\_Route\\_Simple](class.yaf-route-simple.md)\n-   [Yaf\\_Route\\_Rewrite](class.yaf-route-rewrite.md)\n-   [Yaf\\_Route\\_Map](class.yaf-route-map.md)\n","title":"Yaf\\_Route\\_Regex::\\_\\_construct","contentType":2,"navigation":[{"yaf-route-regex.assemble.md":"« Yaf\\_Route\\_Regex::assemble"},{"yaf-route-regex.route.md":"Yaf\\_Route\\_Regex::route »"},{"index.md":"PHP Manual"},{"class.yaf-route-regex.md":"Yaf\\_Route\\_Regex"}]}},"__N_SSG":true}