{"pageProps":{"page":{"slug":"function.natsort.md","content":"# natsort\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nnatsort - Сортує масив, використовуючи алгоритм \"natural order\"\n\n### Опис\n\n```methodsynopsis\nnatsort(array &$array): true\n```\n\nФункція реалізує алгоритм сортування, у якому порядок буквенно-цифровых рядків буде звичним людини. Такий алгоритм називається \"natural ordering\". Відмінність алгоритму \"natural ordering\" від звичайних алгоритмів сортування, які застосовуються, наприклад, функцією [sort()](function.sort.md) можна побачити у прикладі нижче.\n\n> **Зауваження** :\n> \n> Якщо обидва порівнювані значення еквівалентні, вони зберігають свій початковий порядок. До PHP 8.0.0 їх відносний порядок у відсортованому масиві не було визначено.\n\n> **Зауваження** :\n> \n> Скидає внутрішній покажчик масиву перший елемент.\n\n### Список параметрів\n\n`array`\n\nВхідний масив\n\n### Значення, що повертаються\n\nФункція завжди повертає **`true`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.2.0 | Тип значення, що повертається тепер **`true`**; раніше було bool. |\n\n### Приклади\n\n**Приклад #1 Простий приклад використання **natsort()****\n\n```php\n<?php\n$array1 = $array2 = array(\"img12.png\", \"img10.png\", \"img2.png\", \"img1.png\");\n\nasort($array1);\necho \"Обычная сортировка\\n\";\nprint_r($array1);\n\nnatsort($array2);\necho \"\\nСортировка natural order\\n\";\nprint_r($array2);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nОбычная сортировка\nArray\n(\n    [3] => img1.png\n    [1] => img10.png\n    [0] => img12.png\n    [2] => img2.png\n)\n\nСортировка natural order\nArray\n(\n    [3] => img1.png\n    [2] => img2.png\n    [1] => img10.png\n    [0] => img12.png\n)\n```\n\nПодробнее смотрите статью Martin Pool[» Natural Order String Comparison](https://github.com/sourcefrog/natsort)\n\n**Приклад #2 Приклади використання різних трюків з **natsort()****\n\n```php\n<?php\necho \"Отрицательные числа\\n\";\n$negative = array('-5','3','-2','0','-1000','9','1');\nprint_r($negative);\nnatsort($negative);\nprint_r($negative);\n\necho \"Отбивка нулями\\n\";\n$zeros = array('09', '8', '10', '009', '011', '0');\nprint_r($zeros);\nnatsort($zeros);\nprint_r($zeros);\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nОтрицательные числа\nArray\n(\n    [0] => -5\n    [1] => 3\n    [2] => -2\n    [3] => 0\n    [4] => -1000\n    [5] => 9\n    [6] => 1\n)\nArray\n(\n    [2] => -2\n    [0] => -5\n    [4] => -1000\n    [3] => 0\n    [6] => 1\n    [1] => 3\n    [5] => 9\n)\n\nОтбивка нулями\nArray\n(\n    [0] => 09\n    [1] => 8\n    [2] => 10\n    [3] => 009\n    [4] => 011\n    [5] => 0\n)\nArray\n(\n    [5] => 0\n    [1] => 8\n    [3] => 009\n    [0] => 09\n    [2] => 10\n    [4] => 011\n)\n```\n\n### Дивіться також\n\n-   [natcasesort()](function.natcasesort.md) \\- Сортує масив алгоритмом природного сортування (natural order) без урахування регістру символів\n-   [Порівняння функцій сортування масивів](array.sorting.md)\n-   [strnatcmp()](function.strnatcmp.md) - Порівняння рядків із використанням алгоритму \"natural order\"\n-   [strnatcasecmp()](function.strnatcasecmp.md) - Порівняння рядків без урахування регістру з використанням алгоритму \"natural order\"\n","title":"natsort","contentType":2,"navigation":[{"function.natcasesort.md":"« natcasesort"},{"function.next.md":"next »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}