{"pageProps":{"page":{"slug":"function.ob-start.md","content":"# ob\\_start\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nob\\_start — Вмикає буферизацію виводу\n\n### Опис\n\n```methodsynopsis\nob_start(callable $callback = null, int $chunk_size = 0, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS): bool\n```\n\nФункція включає буферизацію виведення. Поки буферизація виводу активна, виведення зі скрипту не відправляється, натомість висновок зберігається у внутрішньому буфері. В розділі \" [Який висновок буферизується?](outcontrol.what-output-is-buffered.md) » розказано, який саме висновок це впливає.\n\nБуфери виведення поміщаються у стек, тому функцію **ob\\_start()** можна викликати, поки активний інший буфер. Якщо активовано кілька буферів виведення, висновок фільтрується послідовно через кожен із них у порядку вкладеності. Докладніше про це розказано у розділі «[Вкладені буфери виводу](outcontrol.nesting-output-buffers.md)».\n\nДетальний опис буферів виводу наведено в розділі [Буфери виводу користувача](outcontrol.user-level-output-buffers.md)\n\n### Список параметрів\n\n`callback`\n\nМожна вказати необов'язковий параметр `callback` [callable](language.types.callable.md)). Щоб обійти його, передають значення **`null`**\n\nПараметр`callback` викликається, коли буфер виведення скидається (відправляється), очищається або коли буфер виведення скидається наприкінці скрипта.\n\nСигнатура`callback`\\-функції:\n\n```methodsynopsis\nhandler(string $buffer, int $phase = ?): string\n```\n\n`buffer`\n\nВміст буфера виводу.\n\n`phase`\n\nБитовая маска из семейства констант[**`PHP_OUTPUT_HANDLER_*`**](outcontrol.constants.md#constant.php-output-handler-start) . Докладніше про прапори розказано у розділі «[Прапори, що передаються обробникам виводу](outcontrol.flags-passed-to-output-handlers.md)».\n\nЯкщо параметр `callback` поверне \\*\\*`false`\\*\\*повертається вміст буфера. Докладніше про це розказано у розділі «[Значення оброблювача виводу, що повертаються](outcontrol.output-handler-return-values.md)».\n\n**Увага**\n\nВиклик будь-якої з наведених нижче функцій з обробника висновку видасть фатальну помилку: [ob\\_clean()](function.ob-clean.md) [ob\\_end\\_clean()](function.ob-end-clean.md) [ob\\_end\\_flush()](function.ob-end-flush.md) [ob\\_flush()](function.ob-flush.md) [ob\\_get\\_clean()](function.ob-get-clean.md) [ob\\_get\\_flush()](function.ob-get-flush.md) **ob\\_start()**\n\nПодробнее о`callback`\\-функціях (обробників висновку) розказано в розділах « [Обробники виводу](outcontrol.output-handlers.md) » та «[Робота з оброблювачами виводу](outcontrol.working-with-output-handlers.md)».\n\n`chunk_size`\n\nЯкщо передано необов'язковий параметр `chunk_size`, буфер буде скинутий після кожного блоку коду, розмір буфера якого досяг або перевищив значення параметра `chunk_size`Значение по умолчанию означає, що висновок буферизується до тих пір, поки буфер не буде вимкнений. Докладніше про це розказано у розділі «[Розмір буфера](outcontrol.buffer-size.md)».\n\n`flags`\n\nПараметр`flags` - Це бітова маска, яка управляє операціями, що виконуються з буфером виведення. За замовчуванням дозволено очищення, скидання та видалення буферів виводу, що дозволено встановлювати явно через [прапори керування буфером](outcontrol.constants.md#outcontrol.constants.buffer-control-flags) . Докладніше про це розказано у розділі « [Операції, дозволені для буферів](outcontrol.operations-on-buffers.md) ».\n\nКожен прапор управляє доступом до набору функцій, як описано нижче:\n\n| Константа | Функции |\n| --- | --- |\n| **`PHP_OUTPUT_HANDLER_CLEANABLE`** | [ob\\_clean()](function.ob-clean.md) |\n| **`PHP_OUTPUT_HANDLER_FLUSHABLE`** | [ob\\_end\\_flush()](function.ob-end-flush.md) |\n| **`PHP_OUTPUT_HANDLER_REMOVABLE`** | [ob\\_end\\_clean()](function.ob-end-clean.md) [ob\\_end\\_flush()](function.ob-end-flush.md) [ob\\_get\\_clean()](function.ob-get-clean.md) [ob\\_get\\_flush()](function.ob-get-flush.md) |\n\n### Значення, що повертаються\n\nПовертає **`true`** у разі успішного виконання або \\*\\*`false`\\*\\*в случае возникновения ошибки.\n\n### Приклади\n\n**Приклад #1 Приклад callback-функції, визначеної користувачем**\n\n```php\n<?php\n\nfunction callback($buffer)\n{\n  // заменить все яблоки апельсинами\n  return (str_replace(\"яблоки\", \"апельсины\", $buffer));\n}\n\nob_start(\"callback\");\n\n?>\n<html>\n<body>\n<p>Это всё равно что сравнить яблоки и апельсины.</p>\n</body>\n</html>\n<?php\n\nob_end_flush();\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\n<html>\n<body>\n<p>Это всё равно что сравнить апельсины и апельсины.</p>\n</body>\n</html>\n```\n\n**Приклад #2 Створення буфера виводу, що не стирається.**\n\n```php\n<?php\n\nob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);\n\n?>\n```\n\n### Дивіться також\n\n-   [ob\\_get\\_contents()](function.ob-get-contents.md) \\- Повертає вміст буфера виводу\n-   [ob\\_end\\_clean()](function.ob-end-clean.md) \\- Очищає (стирає) вміст активного буфера виведення та відключає його\n-   [ob\\_end\\_flush()](function.ob-end-flush.md) \\- Скидає (відправляє) значення активного оброблювача виводу, що повертається, і відключає активний буфер виводу\n-   [ob\\_implicit\\_flush()](function.ob-implicit-flush.md) \\- Вмикає/вимикає неявне скидання\n-   [ob\\_gzhandler()](function.ob-gzhandler.md) \\- Стискає буфер виведення в gzip, діючи як callback-функція - параметр функції ob\\_start\n-   [ob\\_iconv\\_handler()](function.ob-iconv-handler.md) \\- Перетворює символи з поточного кодування на кодування вихідного буфера\n-   [mb\\_output\\_handler()](function.mb-output-handler.md) \\- Перетворює кодування символів у буфері виведення, виступаючи в ролі callback-функції\n-   [ob\\_tidyhandler()](function.ob-tidyhandler.md) \\- Функція зворотного виклику ob\\_start для відновлення буфера\n","title":"ob\\_start","contentType":2,"navigation":[{"function.ob-list-handlers.md":"« ob\\_list\\_handlers"},{"function.output-add-rewrite-var.md":"output\\_add\\_rewrite\\_var »"},{"index.md":"PHP Manual"},{"ref.outcontrol.md":"Функції контролю виведення"}]}},"__N_SSG":true}