{"pageProps":{"page":{"slug":"class.eventbuffer.md","content":"# Клас EventBuffer\n\n(PECL event >= 1.5.0)\n\n## Вступ\n\n**EventBuffer** представляє буфер бібліотеки Libevent - допоміжний функціонал для буферизованого вводу/виводу.\n\nБуфери подій зазвичай корисні організації \"буферної\" частини буферизованого мережевого вводу/вывода.\n\n## Огляд класів\n\n```classsynopsis\n\n     \n    \n    \n    \n     \n      class EventBuffer\n     \n     {\n    \n    /* Константы */\n    \n     const\n     int\n      EOL_ANY = 0;\n\n    const\n     int\n      EOL_CRLF = 1;\n\n    const\n     int\n      EOL_CRLF_STRICT = 2;\n\n    const\n     int\n      EOL_LF = 3;\n\n    const\n     int\n      PTR_SET = 0;\n\n    const\n     int\n      PTR_ADD = 1;\n\n    /* Свойства */\n    public\n     readonly\n     int\n      $length;\n\n    public\n     readonly\n     int\n      $contiguous_space;\n\n    /* Методы */\n    \n   public\n   add(\n    string\n     $data\n   ): bool\npublic\n   addBuffer(\n    EventBuffer\n     $buf\n   ): bool\npublic\n   appendFrom(\n    EventBuffer\n     $buf\n   , \n    int\n     $len\n   ): int\npublic\n   __construct()\npublic\n   copyout(\n    string\n     &$data\n   , \n    int\n     $max_bytes\n   ): int\npublic\n   drain(\n    int\n     $len\n   ): bool\npublic\n   enableLocking(): void\npublic\n   expand(\n    int\n     $len\n   ): bool\npublic\n   freeze(\n    bool\n     $at_front\n   ): bool\npublic\n   lock(): void\npublic\n   prepend(\n    string\n     $data\n   ): bool\npublic\n   prependBuffer(\n    EventBuffer\n     $buf\n   ): bool\npublic\n   pullup(\n    int\n     $size\n   ): string\npublic\n   read(\n    int\n     $max_bytes\n   ): string\npublic\n   read(\n    mixed\n     $fd\n   , \n    int\n     $howmuch\n   ): int\npublic\n   readLine(\n    int\n     $eol_style\n   ): string\npublic\n   search(\n    string\n     $what\n   , \n    int\n     $start\n     = -1\n   , \n    int\n     $end\n     = -1\n   ): mixed\npublic\n   searchEol(\n    int\n     $start\n     = -1\n   , \n    int\n     $eol_style\n     = \n     EventBuffer::EOL_ANY\n    \n   ): mixed\npublic\n   substr(\n    int\n     $start\n   , \n    int\n     $length\n    = ?): string\npublic\n   unfreeze(\n    bool\n     $at_front\n   ): bool\npublic\n   unlock(): bool\npublic\n   write(\n    mixed\n     $fd\n   , \n    int\n     $howmuch\n    = ?): int\n\n   }\n```\n\n## Властивості\n\nlength\n\nКількість байт у буфері подій.\n\ncontiguous\\_space\n\nКількість байтів, що зберігаються суміжно у передній частині буфера. Байти в буфері можуть розташовуватися в різних шматках пам'яті; Якість повертає кількість байт що знаходяться, в даний момент, в першому шматку.\n\n## Обумовлені константи\n\n**`EventBuffer::EOL_ANY`**\n\nКінець рядка є будь-якою послідовністю будь-якого числа символів перекладу рядка та повернення каретки. Цей формат не є особливо корисним і існує лише для забезпечення зворотної сумісності.\n\n**`EventBuffer::EOL_CRLF`**\n\nКінець рядка є послідовністю з необов'язкового повернення каретки та перекладу рядка. (тобто або `\"\\r\\n\"`либо`\"\\n\"` .) Цей формат корисний при розборі текстових Інтернет-протоколів, оскільки стандарти зазвичай наказують позначати кінець рядка як `\"\\r\\n\"`, але багато клієнтів використовують просто `\"\\n\"`\n\n**`EventBuffer::EOL_CRLF_STRICT`**\n\nКінець рядка є послідовністю із символів повернення каретки та перекладу рядка. (Тобто . `\"\\r\\n\"` . ASCII-коди **`0x0D`** **`0x0A`**\n\n**`EventBuffer::EOL_LF`**\n\nКінець рядка є символом перекладу рядка. (тобто . `\"\\n\"`. ASCII-код\\*\\*`0x0A`\\*\\*\n\n**`EventBuffer::PTR_SET`**\n\nФлаг используется как аргумент метода**EventBuffer::setPosition()**. Якщо прапор встановлений, то вказівник позиції переміщається на абсолютну позицію буфері.\n\n**`EventBuffer::PTR_ADD`**\n\nТе саме, що і **`EventBuffer::PTR_SET`** , за винятком, що прапор вказує методом **EventBuffer::setPosition()** перемістити позицію вперед на вказану кількість байт.\n\n## Зміст\n\n-   [EventBuffer::add](eventbuffer.add.md)— Додає дані до кінця буфера подій\n-   [EventBuffer::addBuffer](eventbuffer.addbuffer.md)— Переміщує всі дані з буфера екземпляру EventBuffer\n-   [EventBuffer::appendFrom](eventbuffer.appendfrom.md)— Переміщує вказану кількість байтів з вихідного буфера до кінця поточного буфера\n-   [EventBuffer::\\_\\_construct](eventbuffer.construct.md) \\- Створює об'єкт EventBuffer\n-   [EventBuffer::copyout](eventbuffer.copyout.md)— Копіює вказану кількість байтів з початку буфера\n-   [EventBuffer::drain](eventbuffer.drain.md)— Видаляє вказану кількість байтів із початку буфера, нікуди не копіюючи\n-   [EventBuffer::enableLocking](eventbuffer.enablelocking.md) \\- Опис\n-   [EventBuffer::expand](eventbuffer.expand.md) \\- Резервує простір у буфері\n-   [EventBuffer::freeze](eventbuffer.freeze.md)— Запобігає викликам, які змінюють буфер подій у разі успішного виконання\n-   [EventBuffer::lock](eventbuffer.lock.md)— Отримує блокування буфера\n-   [EventBuffer::prepend](eventbuffer.prepend.md)— Записує дані на початок буфера\n-   [EventBuffer::prependBuffer](eventbuffer.prependbuffer.md)— Переміщує всі дані з вихідного буфера на початок поточного буфера\n-   [EventBuffer::pullup](eventbuffer.pullup.md)— Лінеаризує дані в буфері та повертає їх вміст у вигляді рядка\n-   [EventBuffer::read](eventbuffer.read.md)— Читає дані з evbuffer та виснажує прочитані байти\n-   [EventBuffer::readFrom](eventbuffer.readfrom.md)— Читає дані з файлу до кінця буфера\n-   [EventBuffer::readLine](eventbuffer.readline.md)— Витягує рядок із початку буфера\n-   [EventBuffer::search](eventbuffer.search.md) \\- Сканує буфер на наявність рядка\n-   [EventBuffer::searchEol](eventbuffer.searcheol.md) \\- Сканує буфер на наявність кінця рядка\n-   [EventBuffer::substr](eventbuffer.substr.md) \\- Обрізає частину даних буфера\n-   [EventBuffer::unfreeze](eventbuffer.unfreeze.md)— Повторно включає дзвінки, які змінюють буфер подій\n-   [EventBuffer::unlock](eventbuffer.unlock.md)— Знімає блокування, встановлене EventBuffer::lock\n-   [EventBuffer::write](eventbuffer.write.md)— Записує вміст буфера у файл чи сокет\n","title":"Клас EventBuffer","contentType":2,"navigation":[{"eventbase.stop.md":"« EventBase::stop"},{"eventbuffer.add.md":"EventBuffer::add »"},{"index.md":"PHP Manual"},{"book.event.md":"Event"}]}},"__N_SSG":true}