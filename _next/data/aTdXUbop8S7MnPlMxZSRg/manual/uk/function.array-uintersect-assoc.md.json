{"pageProps":{"page":{"slug":"function.array-uintersect-assoc.md","content":"# array\\_uintersect\\_assoc\n\n(PHP 5, PHP 7, PHP 8)\n\narray\\_uintersect\\_assoc - Обчислює перетин масивів з додатковою перевіркою індексів, використовуючи для порівняння значень callback-функцію\n\n### Опис\n\n```methodsynopsis\narray_uintersect_assoc(array $array, array ...$arrays, callable $value_compare_func): array\n```\n\nОбчислює перетин масивів з додатковою перевіркою індексів, використовуючи для порівняння значень callback-функцію.\n\nОбратите внимание, что в отличие от функции[array\\_uintersect()](function.array-uintersect.md) також порівнюються ключі. Значення порівнює callback-функція.\n\n### Список параметрів\n\n`array`\n\nПерший масив.\n\n`arrays`\n\nМасиви для порівняння.\n\n`value_compare_func`\n\nФункція порівняння повинна повертати ціле, яке менше, дорівнює чи більше нуля, якщо перший аргумент є відповідно меншим, рівним чи більшим, ніж другий.\n\n```methodsynopsis\ncallback(mixed $a, mixed $b): int\n```\n\n**Застереження**\n\nВозвращение*нецілих* значень з функції порівняння, таких як число з плаваючою точкою (float), призведе до внутрішнього приведення значення callback-функції, що повертається, до цілого числа (int). Таким чином, значення `0.99`и`0.1` будуть приведені до цілого значення що дозволить порівняти ці значення як рівні.\n\n**Застереження**\n\nCallback-функція сортування повинна обробляти будь-яке значення з будь-якого масиву у будь-якому порядку, незалежно від того, в якому порядку вони були надані спочатку. Причина цього у тому, кожен окремий масив спочатку сортується перед порівнянням коїться з іншими масивами. Наприклад:\n\n```php\n<?php\n\n$arrayA = [\"string\", 1];\n$arrayB = [[\"value\" => 1]];\n// $item1 and $item2 can be any of \"string\", 1 or [\"value\" => 1]\n$compareFunc = static function ($item1, $item2) {\n    $value1 = is_string($item1) ? strlen($item1) : (is_array($item1) ? $item1[\"value\"] : $item1);\n    $value2 = is_string($item2) ? strlen($item2) : (is_array($item2) ? $item2[\"value\"] : $item2);\n    return $value1 <=> $value2;\n};\n\n?>\n```\n\n### Значення, що повертаються\n\nПовертає масив (array), що містить елементи аргументу `array`які є в кожному іншому аргументі.\n\n### Приклади\n\n**Приклад #1 Приклад використання функції** array\\_uintersect\\_assoc()\\*\\*\\*\\*\n\n```php\n<?php\n\n$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");\n\nprint_r(array_uintersect_assoc($array1, $array2, \"strcasecmp\"));\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nArray\n(\n    [a] => green\n)\n```\n\n### Дивіться також\n\n-   [array\\_uintersect()](function.array-uintersect.md) \\- обчислює перетин масивів, використовуючи для порівняння значень callback-функцію\n-   [array\\_intersect\\_assoc()](function.array-intersect-assoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу\n-   [array\\_intersect\\_uassoc()](function.array-intersect-uassoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу, порівнюючи індекси через callback-функцію\n-   [array\\_uintersect\\_uassoc()](function.array-uintersect-uassoc.md) \\- обчислює перетин масивів з додатковою перевіркою індексу, використовуючи для порівняння індексів та значень окремі callback-функції\n","title":"array\\_uintersect\\_assoc","contentType":2,"navigation":[{"function.array-udiff.md":"« array\\_udiff"},{"function.array-uintersect-uassoc.md":"array\\_uintersect\\_uassoc »"},{"index.md":"PHP Manual"},{"ref.array.md":"Функції для роботи з масивами"}]}},"__N_SSG":true}