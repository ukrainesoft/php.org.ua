{"pageProps":{"page":{"slug":"datetimezone.gettransitions.md","content":"# DateTimeZone::getTransitions\n\n# timezone\\_transitions\\_get\n\n(PHP 5 >= 5.2.0, PHP 7, PHP 8)\n\nDateTimeZone::getTransitions -- timezone\\_transitions\\_get — Повертає всі переходи для часового поясу\n\n### Опис\n\nОб'єктно-орієнтований стиль\n\n```methodsynopsis\npublic DateTimeZone::getTransitions(int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false\n```\n\nПроцедурний стиль\n\n```methodsynopsis\ntimezone_transitions_get(DateTimeZone $object, int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false\n```\n\n### Список параметрів\n\n`object`\n\nТільки для процедурного стилю: об'єкт [DateTimeZone](class.datetimezone.md), що повертається [timezone\\_open()](function.timezone-open.md)\n\n`timestampBegin`\n\nПочаткова позначка часу.\n\n`timestampEnd`\n\nКінцева позначка часу.\n\n### Значення, що повертаються\n\nУ разі успішного виконання повертає чисельно індексований масив масивів з усіма переходами або **`false`** у разі виникнення помилки. Об'єкти DateTimeZone, що обертають тип 1 (зсув UTC) і тип 2 (скорочення), не містять переходів і виклик цього методу в такому випадку поверне **`false`**\n\nЕсли задан параметр`timestampBegin`, то перший запис у повертається масиві буде містити елемент переходу на момент параметра `timestampBegin`\n\n**Структура переходів масиву**\n\n| Ключ | Тип | Опис |\n| --- | --- | --- |\n| `ts` | int | Мітка часу Unix |\n| `time` | string | **`DateTimeInterface::ISO8601_EXPANDED`** (PHP 8.2 і пізніші версії) або **`DateTimeInterface::ISO8601`** (PHP 8.1 і раніше версії) строк часу |\n| `offset` | int | Зміщення від UTC за секунди |\n| `isdst` | bool | Чи активний літній час |\n| `abbr` | string | Абревіатура часового поясу |\n\n### Приклади\n\n**Приклад #1 Приклад использования[timezone\\_transitions\\_get()](function.timezone-transitions-get.md)**\n\n```php\n<?php\n$timezone = new DateTimeZone(\"Europe/London\");\n$transitions = $timezone->getTransitions();\nprint_r(array_slice($transitions, 0, 3));\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nArray\n(\n    [0] => Array\n        (\n            [ts] => -9223372036854775808\n            [time] => -292277022657-01-27T08:29:52+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n    [1] => Array\n        (\n            [ts] => -1691964000\n            [time] => 1916-05-21T02:00:00+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n    [2] => Array\n        (\n            [ts] => -1680472800\n            [time] => 1916-10-01T02:00:00+0000\n            [offset] => 0\n            [isdst] =>\n            [abbr] => GMT\n        )\n\n)\n```\n\n**Приклад #2 Приклад использования[timezone\\_transitions\\_get()](function.timezone-transitions-get.md) із заданим параметром `timestampBegin`**\n\n```php\n<?php\n$timezone = new DateTimeZone(\"Europe/London\");\n$transitions = $timezone->getTransitions(time());\nprint_r(array_slice($transitions, 0, 3));\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nArray\n(\n    [0] => Array\n        (\n            [ts] => 1654184161\n            [time] => 2022-06-02T15:36:01+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n    [1] => Array\n        (\n            [ts] => 1667091600\n            [time] => 2022-10-30T01:00:00+0000\n            [offset] => 0\n            [isdst] =>\n            [abbr] => GMT\n        )\n\n    [2] => Array\n        (\n            [ts] => 1679792400\n            [time] => 2023-03-26T01:00:00+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n)\n```\n","title":"DateTimeZone::getTransitions","contentType":2,"navigation":[{"datetimezone.getoffset.md":"« DateTimeZone::getOffset"},{"datetimezone.listabbreviations.md":"DateTimeZone::listAbbreviations »"},{"index.md":"PHP Manual"},{"class.datetimezone.md":"DateTimeZone"}]}},"__N_SSG":true}