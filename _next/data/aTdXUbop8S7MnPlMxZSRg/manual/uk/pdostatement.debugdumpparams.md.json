{"pageProps":{"page":{"slug":"pdostatement.debugdumpparams.md","content":"# PDOStatement::debugDumpParams\n\n(PHP 5 >= 5.1.0, PHP 7, PHP 8, PECL pdo >= 0.9.0)\n\nPDOStatement::debugDumpParams — Виведення інформації про підготовлену SQL-команду з метою налагодження\n\n### Опис\n\n```methodsynopsis\npublic PDOStatement::debugDumpParams(): ?bool\n```\n\nВиводить інформацію про підготовлений запит у вихідний потік. Виводитиметься текст використовуваного `SQL` запиту, кількість задіяних параметрів (`Params`), список параметрів з їх іменами ключів або індексами, їх іменами, індексами у запиті (якщо підтримується в драйвері PDO, інакше -1), типом (`param_type`) у вигляді цілого числа та логічне значення `is_param`\n\nЦе функція налагодження, яка направляє дані на стандартний висновок.\n\n**Підказка**\n\nЯк і все, що виводить результат у браузер, [функції контролю виведення](book.outcontrol.md) можна викликати, щоб перехопити дані, що виводяться цією функцією, і зберігати їх, наприклад у рядок (string).\n\nЦя функція виводить інформацію про параметри запиту, які існують на момент дзвінка. Додаткові параметри не зберігаються у запиті, тому не відображаються.\n\n### Список параметрів\n\nЦя функція не має параметрів.\n\n### Значення, що повертаються\n\nПовертає \\*\\*`null`** або **`false`\\*\\*в случае возникновения ошибки.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 7.2.0 | **PDOStatement::debugDumpParams()** тепер повертає SQL, відправлений до бази даних, зокрема повний необроблений запит (включаючи замінені параметри зі своїми пов'язаними значеннями). Зверніть увагу, що це буде працювати тільки при включеній емуляції запитів, що готуються. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** PDOStatement::debugDumpParams()\\*\\* з іменованими параметрами\\*\\*\n\n```php\n<?php\n/* Выполнение запроса с привязкой PHP переменных */\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour');\n$sth->bindParam(':calories', $calories, PDO::PARAM_INT);\n$sth->bindValue(':colour', $colour, PDO::PARAM_STR, 12);\n$sth->execute();\n\n$sth->debugDumpParams();\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nSQL: [96] SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour\nParams:  2\nKey: Name: [9] :calories\nparamno=-1\nname=[9] \":calories\"\nis_param=1\nparam_type=1\nKey: Name: [7] :colour\nparamno=-1\nname=[7] \":colour\"\nis_param=1\nparam_type=2\n```\n\n**Приклад #2 Приклад використання** PDOStatement::debugDumpParams()\\*\\* з неіменованими (?) параметрами\\*\\*\n\n```php\n<?php\n\n/* Выполнение запроса с привязкой PHP переменных */\n$calories = 150;\n$colour = 'red';\n$name = 'apple';\n\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->bindParam(1, $calories, PDO::PARAM_INT);\n$sth->bindValue(2, $colour, PDO::PARAM_STR);\n$sth->execute();\n\n$sth->debugDumpParams();\n\n?>\n```\n\nРезультат виконання наведеного прикладу:\n\n```\nSQL: [82] SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?\nParams:  2\nKey: Position #0:\nparamno=0\nname=[0] \"\"\nis_param=1\nparam_type=1\nKey: Position #1:\nparamno=1\nname=[0] \"\"\nis_param=1\nparam_type=2\n```\n\n### Дивіться також\n\n-   [PDO::prepare()](pdo.prepare.md) \\- готує запит до виконання та повертає пов'язаний із цим запитом об'єкт\n-   [PDOStatement::bindParam()](pdostatement.bindparam.md) \\- Прив'язує параметр запиту до змінної\n-   [PDOStatement::bindValue()](pdostatement.bindvalue.md) \\- Зв'язує параметр із заданим значенням\n","title":"PDOStatement::debugDumpParams","contentType":2,"navigation":[{"pdostatement.columncount.md":"« PDOStatement::columnCount"},{"pdostatement.errorcode.md":"PDOStatement::errorCode »"},{"index.md":"PHP Manual"},{"class.pdostatement.md":"PDOStatement"}]}},"__N_SSG":true}