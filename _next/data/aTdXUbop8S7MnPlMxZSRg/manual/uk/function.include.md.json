{"pageProps":{"page":{"slug":"function.include.md","content":"## include\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\nВираз `include` включає та виконує зазначений файл.\n\nДокументація нижче також відноситься до виразу [require](function.require.md)\n\nФайли включаються виходячи зі шляху зазначеного файлу, або, якщо шлях не вказано, використовується шлях, вказаний у директиві [include\\_path](ini.core.md#ini.include-path). Якщо файл не знайдено в [include\\_path](ini.core.md#ini.include-path) `include` спробує перевірити директорію, в якій знаходиться поточний скрипт і поточну робочу директорію перед тим, як видати помилку. Конструкція `include` видасть **`E_WARNING`**, если не сможет найти файл; поведение отлично от[require](function.require.md), який видасть **`E_ERROR`**\n\nОбратите внимание, что и`include`и`require` видають додаткову помилку рівня **`E_WARNING`**, якщо до файлу неможливо отримати доступ, перед тим, як видати останню помилку рівня \\*\\*`E_WARNING`** або **`E_ERROR`\\*\\*соответственно.\n\nЯкщо шлях вказаний - абсолютний (починається з літери диска або з `\\` у Windows або з в Unix/Linux системах) або щодо поточної директорії (починається з или `.. .` [include\\_path](ini.core.md#ini.include-path) буде проігноровано взагалі. Наприклад, якщо ім'я файлу починається з `../`, парсер шукатиме в батьківській директорії запитаний файл.\n\nДля додаткової інформації про те, як PHP обробляє файли та шляхи, що включаються, дивіться документацію для директиви [include\\_path](ini.core.md#ini.include-path)\n\nКоли файл вмикається, його код успадковує ту ж [область видимості змінних](language.variables.scope.md), як і рядок, де сталося включення. Всі змінні, доступні на цьому рядку у файлі, що включають, будуть також доступні у файлі, що включається. Проте всі функції та класи, оголошені у файлі, що включається, мають глобальну область видимості.\n\n**Приклад #1 Простий приклад `include`**\n\n```php\nvars.php\n<?php\n\n$color = 'зелёное';\n$fruit = 'яблоко';\n\n?>\n\ntest.php\n<?php\n\necho \"Одно $color $fruit\"; // Одно\n\ninclude 'vars.php';\n\necho \"Одно $color $fruit\"; // Одно зелёное яблоко\n\n?>\n```\n\nЯкщо включення відбувається всередині функції файлу, тоді весь код, що міститься в файлі, буде поводитися так, ніби він був визначений всередині цієї функції. Тобто він буде в тій же області видимості змінних цієї функції. Винятком до цього правила є [магічні константи](language.constants.predefined.md), які виконуються парсером перед тим, як відбувається увімкнення.\n\n**Приклад #2 Увімкнення функції**\n\n```php\n<?php\n\nfunction foo()\n{\n    global $color;\n\n    include 'vars.php';\n\n    echo \"Одно $color $fruit\";\n}\n\n/* vars.php в той же области видимости, что и foo(),  *\n* поэтому $fruit НЕ будет доступен за пределами этой области     *\n* $color доступен, поскольку мы объявили переменную глобальной */\n\nfoo();                    // Одно зелёное яблоко\necho \"Одно $color $fruit\";   // Одно зелёное\n\n?>\n```\n\nКоли файл увімкнеться, парсинг у режимі PHP-коду припиняється і перемикається в режим HTML на початку вказаного файлу і продовжується знову наприкінці. З цієї причини будь-який код всередині файлу, який повинен бути виконаний як код PHP, повинен бути укладений в [коректні теги початку та кінця PHP-коду](language.basic-syntax.phpmode.md)\n\nЯкщо \"[обгортки URL include](filesystem.configuration.md#ini.allow-url-include)\" включені в PHP, ви можете також вказати файл для включення через URL (за допомогою HTTP або інших обробників, що підтримуються - дивіться [Підтримувані протоколи та обгортки](wrappers.md) для списку протоколів замість локального шляху. Якщо цільовий сервер інтерпретує вказаний файл як код PHP, змінні можуть бути передані до файлу, що включається за допомогою рядка URL-запиту при використанні HTTP GET. Це зовсім не те саме, що включення файлу та успадкування батьківської області видимості; скрипт виконується на віддаленому сервері, і результат потім включається до локального скрипту.\n\n**Приклад #3 Приклад`include`через HTTP**\n\n```php\n<?php\n\n/* В этом Прикладе предполагается, что www.example.com настроен на обработку .php\n* файлов, но не .txt. Также, 'Сработает' обозначает, что переменные\n* $foo и $bar доступны внутри включаемого файла. */\n\n// Не сработает; file.txt не обрабатывается www.example.com как PHP\ninclude 'http://www.example.com/file.txt?foo=1&bar=2';\n\n// Не сработает; будет искать файл 'file.php?foo=1&bar=2' в\n// локальной файловой системе.\ninclude 'file.php?foo=1&bar=2';\n\n// Сработает.\ninclude 'http://www.example.com/file.php?foo=1&bar=2';\n?>\n```\n\n**Увага**\n\n# Попередження безпеки\n\nВидалені файли можуть бути оброблені на віддаленій стороні (залежно від розширення файлу і того, що віддалений сервер виконує скрипти PHP чи ні), але це все одно має робити коректний скрипт PHP, тому що він буде оброблений вже на локальному сервері. Якщо файл з віддаленого сервера має бути оброблений і відображений його результат, набагато ефективно скористатися функцією [readfile()](function.readfile.md) В іншому випадку слід дотримуватися особливої ​​обережності, щоб убезпечити віддалений скрипт для отримання коректного та бажаного коду.\n\nСмотрите также раздел[Видалені файли](features.remote-files.md), функції [fopen()](function.fopen.md) і [file()](function.file.md) для додаткової інформації.\n\nОбробка значень, що повертаються: оператор `include` повертає значення `FALSE` у разі виникнення помилки та видає попередження. Успішні включення, поки це не перевизначено у файлі, повертають значення . Можливо виконати вираз [return](function.return.md) всередині файлу, щоб завершити процес виконання в цьому файлі і повернутися до виконання файлу, що включає. Крім того, можливо повернути значення з файлів, що включаються. Ви можете отримати значення включення, якби викликали звичайну функцію. Хоча це неможливо при включенні видаленого файлу, тільки якщо виведення видаленого файлу не містить [коректні теги початку та кінця PHP коду](language.basic-syntax.phpmode.md) (Так само, як і локальний файл). Ви можете визначити необхідні змінні всередині цих тегів і вони будуть представлені залежно від того, який файл вимкнено.\n\nТак как`include` - це спеціальна мовна конструкція, круглі дужки не є обов'язковими навколо аргументу. Будьте уважні при порівнянні значення, що повертається.\n\n**Приклад #4 Порівняння значення, що повертається при include**\n\n```php\n<?php\n// не сработает, интерпретируется как include(('vars.php') == TRUE), то есть include('1')\nif (include('vars.php') == TRUE) {\n    echo 'OK';\n}\n\n// сработает\nif ((include 'vars.php') == TRUE) {\n    echo 'OK';\n}\n?>\n```\n\n**Приклад #5 Вирази `include`и[return](function.return.md)**\n\n```php\nreturn.php\n<?php\n\n$var = 'PHP';\n\nreturn $var;\n\n?>\n\nnoreturn.php\n<?php\n\n$var = 'PHP';\n\n?>\n\ntestreturns.php\n<?php\n\n$foo = include 'return.php';\n\necho $foo; // выведет 'PHP'\n\n$bar = include 'noreturn.php';\n\necho $bar; // выведет 1\n\n?>\n```\n\n`$bar`имеет значение , т.к. Увімкнення файлу відбулося успішно. Зауважте різницю між прикладами зверху. Перший використовує [return](function.return.md) всередині файлу, тоді як другий не використовує. Якщо файл не може бути увімкнений, повертається **`false`** і виникає **`E_WARNING`**\n\nЯкщо у файлі, що вмикається, визначені функції, вони можуть бути використані в головному файлі незалежно від того, чи були вони оголошені до [return](function.return.md) чи після. Якщо файл вмикається двічі, PHP видасть фатальну помилку, оскільки функції вже було визначено. Рекомендується використовувати [include\\_once](function.include-once.md) замість того, щоб перевіряти, чи був файл вже включений.\n\nІнший шлях \"включити\" PHP-файл у змінну - це захопити висновок за допомогою [функцій контролю виведення](ref.outcontrol.md)вместе с`include`НаПриклад:\n\n**Приклад #6 Використання буферизації виводу для включення файлу PHP у рядок**\n\n```php\n<?php\n$string = get_include_contents('somefile.php');\n\nfunction get_include_contents($filename) {\n    if (is_file($filename)) {\n        ob_start();\n        include $filename;\n        return ob_get_clean();\n    }\n    return false;\n}\n\n?>\n```\n\nДля того, щоб включати файли автоматично в скрипти, зверніть увагу на конфігураційні директиви [auto\\_prepend\\_file](ini.core.md#ini.auto-prepend-file) і [auto\\_append\\_file](ini.core.md#ini.auto-append-file)в php.ini.\n\n> **Зауваження**: Оскільки це мовна конструкція, а не функція, її не можна викликати як [змінну функцію](functions.variable-functions.md) або передавати як [іменований аргумент](functions.arguments.md#functions.named-arguments)\n\nСмотрите также[require](function.require.md) [require\\_once](function.require-once.md) [include\\_once](function.include-once.md) [get\\_included\\_files()](function.get-included-files.md) [readfile()](function.readfile.md) [virtual()](function.virtual.md) і [include\\_path](ini.core.md#ini.include-path)\n","title":"include","contentType":2,"navigation":[{"function.require.md":"« require"},{"function.require-once.md":"require\\_once »"},{"index.md":"PHP Manual"},{"language.control-structures.md":"Керуючі конструкції"}]}},"__N_SSG":true}