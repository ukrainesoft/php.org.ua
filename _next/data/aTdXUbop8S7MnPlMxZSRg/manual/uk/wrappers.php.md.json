{"pageProps":{"page":{"slug":"wrappers.php.md","content":"# php://\n\nphp:// — Доступ до різних потоків введення-виводу\n\n### Опис\n\nPHP надає кілька різноманітних потоків введення-виводу, які дозволяють отримати доступ до власних потоків введення-виводу PHP, до дескрипторів стандартного введення, виведення та потоку помилок, до тимчасових файлових потоків у пам'яті та на диску, та фільтрів, які можуть маніпулювати іншими файловими ресурсами у міру їхнього зчитування або запису.\n\n#### php://stdin, php://stdout та php://stderr\n\nphp://stdin, php://stdout та php://stderr дозволяють отримати прямий доступ до відповідних потоків введення або виведення процесу PHP. Потік вказує на копію файлового дескриптора, так що якщо ви відкриєте php://stdin і потім закриєте його, ви закриєте тільки вашу копію дескриптора. Актуальний потік, на який посилається **`STDIN`**, залишається незмінним. Рекомендується просто використовувати константи **`STDIN`** **`STDOUT`** і **`STDERR`** замість ручного відкриття потоків, використовуючи ці обгортки.\n\nПотік php://stdin призначений лише читання, тоді як php://stdout і php://stderr призначені лише запису.\n\n#### php://input\n\nphp://input є потоком тільки для читання, який дозволяє читати необроблені дані з тіла запиту. php://input недоступний у POST-запитах з `enctype=\"multipart/form-data\"`якщо опція [enable\\_post\\_data\\_reading](ini.core.md#ini.enable-post-data-reading)включена.\n\n#### php://output\n\nphp://output є потоком тільки для запису, який дозволяє вам записати дані у вихідний буфер аналогічно, як це роблять функції [print](function.print.md) і [echo](function.echo.md)\n\n#### php://fd\n\nphp://fd надає прямий доступ до вказаного файлового дескриптора. Наприклад, php://fd/3 відноситься до файлового дескриптора 3.\n\n#### php://memory та php://temp\n\nphp://memory та php://temp є потоками для читання/запису і дозволяють зберігати тимчасові дані у файлоподібній обгортці. Єдина різниця між ними полягає в тому, що php://memory завжди зберігатиме дані в оперативній пам'яті, тоді як php://temp буде використовувати тимчасовий файл у тому випадку, коли обсяг інформації, що зберігається, досягне заданого ліміту (за замовчуванням 2 Мб) . Розташування цього тимчасового файлу визначається аналогічно функції [sys\\_get\\_temp\\_dir()](function.sys-get-temp-dir.md)\n\nРозмір ліміту для php://temp може встановлюватися шляхом додавання `/maxmemory:NN`, где`NN` — це максимальний розмір даних у байтах для зберігання пам'яті перед використанням тимчасового файла.\n\n**Застереження**\n\nМодулям PHP може знадобитися стандартний потік введення-виводу і вони можуть спробувати перетворити заданий потік на стандартний потік введення-виведення. Це перетворення може завершитися помилкою для потоків пам'яті, оскільки для такого приведення потрібна функція **fopencookie()** мови Сі. Така функція мови Сі *недоступна* у операційних системах Windows.\n\n#### php://filter\n\nphp://filter - це вид мета-обгортки, призначений для вирішення застосування [фільтрів](filters.md) до потоку під час відкриття. Це корисно для функціонально повних файлових функцій, таких як [readfile()](function.readfile.md) [file()](function.file.md) і [file\\_get\\_contents()](function.file-get-contents.md)де немає можливості застосувати фільтр до потоку до того, як вміст буде прочитаний.\n\nПотік php://filter приймає такі параметри як частину свого шляху. В одному шляху можна вказати кілька ланцюжків фільтрів. Будь ласка, ознайомтеся з прикладами та особливостями використання цих параметрів.\n\n**Параметри для php://filter**\n\n| Название | Опис |\n| --- | --- |\n| `resource=<потік для фільтрації>` | Цей параметр є потрібним. Він показує потоку, що його потрібно відфільтрувати. |\n| `read=<список фільтрів для застосування до ланцюжка читання>` | Цей параметр є необов'язковим. Одне або кілька імен фільтрів може бути вказано тут, розділених вертикальною межею (\\` |\n| `write=<список фільтрів для застосування до ланцюжка запису>` | Цей параметр є необов'язковим. Одне або кілька імен фільтрів може бути вказано тут, розділених вертикальною межею (\\` |\n| `<список фільтрів для застосування до обох ланцюжків читання та запису>` | Будь-який список фільтрів, які використовуються без префіксів `read=`или`write=`, буде застосовано до обох потоків на читання та запис за необхідності. |\n\n### Опції\n\n**Основна інформація (для `php://filter` дивіться інформацію по обгортці, яка піддається фільтрації)**\n\n| Атрибут | Поддержка |\n| --- | --- |\n| Обмеження по [allow\\_url\\_fopen](filesystem.configuration.md#ini.allow-url-fopen) | Ні |\n| Обмеження по [allow\\_url\\_include](filesystem.configuration.md#ini.allow-url-include) | тільки `php://input` `php://stdin` `php://memory`и`php://temp` |\n| Читання | тільки `php://stdin` `php://input` `php://fd` `php://memory`и`php://temp` |\n| Запис | тільки `php://stdout` `php://stderr` `php://output` `php://fd` `php://memory`и`php://temp` |\n| Додавання | тільки `php://stdout` `php://stderr` `php://output` `php://fd` `php://memory`и`php://temp`. . (еквівалентно запису) |\n| Одночасне читання та запис | тільки `php://fd` `php://memory`и`php://temp` |\n| Поддержка[stat()](function.stat.md) | ні. Проте, `php://memory`и`php://temp` підтримують [fstat()](function.fstat.md) |\n| Поддержка[unlink()](function.unlink.md) | Ні |\n| Поддержка[rename()](function.rename.md) | Ні |\n| Поддержка[mkdir()](function.mkdir.md) | Ні |\n| Поддержка[rmdir()](function.rmdir.md) | Ні |\n| Поддержка[stream\\_select()](function.stream-select.md) | тільки `php://stdin` `php://stdout` `php://stderr` `php://fd`и`php://temp` |\n\n### Приклади\n\n**Приклад #1 php://temp/maxmemory**\n\nЦей необов'язковий параметр дозволяє встановити ліміт пам'яті, перш ніж php://temp почне використовувати тимчасовий файл.\n\n```php\n<?php\n// Установка предела в 5 MB.\n$fiveMBs = 5 * 1024 * 1024;\n$fp = fopen(\"php://temp/maxmemory:$fiveMBs\", 'r+');\n\nfputs($fp, \"hello\\n\");\n\n// Читаем то, что мы записали.\nrewind($fp);\necho stream_get_contents($fp);\n?>\n```\n\n**Приклад #2 php://filter/resource=<потік для фільтрації>**\n\nЦей параметр повинен бути розташований наприкінці вашої специфікації php://filter і повинен вказувати на потік, який ви хочете фільтрувати.\n\n```php\n<?php\n/* Это просто эквивалентно:\n  readfile(\"http://www.example.com\");\n  так как на самом деле фильтры не указаны */\n\nreadfile(\"php://filter/resource=http://www.example.com\");\n?>\n```\n\n**Приклад #3 php://filter/read=<список фільтрів для застосування до ланцюжка читання>**\n\nЦей параметр приймає один або більше імен фільтрів, розділених вертикальною рисою\n\n```php\n<?php\n/* Этот скрипт выведет содержимое\n  www.example.com полностью в верхнем регистре */\nreadfile(\"php://filter/read=string.toupper/resource=http://www.example.com\");\n\n/* Этот скрипт делает тоже самое, что вверхний, но\n  будет также кодировать алгоритмом ROT13 */\nreadfile(\"php://filter/read=string.toupper|string.rot13/resource=http://www.example.com\");\n?>\n```\n\n**Приклад #4 php://filter/write=<список фільтрів для застосування до ланцюжка запису>**\n\nЦей параметр приймає один або більше імен фільтрів, розділених вертикальною рисою\n\n```php\n<?php\n/* Этот скрипт будет фильтровать строку \"Hello World\"\n  через фильтр rot13, затем записывать результат в\n  файл example.txt в текущей директории */\nfile_put_contents(\"php://filter/write=string.rot13/resource=example.txt\",\"Hello World\");\n?>\n```\n\n**Приклад #5 php://memory та php://temp не можна перевикористовувати**\n\nphp://memory та php://temp не можна перевикористовувати, тобто після закриття потоків неможливо послатися на них знову.\n\n```php\nfile_put_contents('php://memory', 'PHP');\necho file_get_contents('php://memory'); // ничего не напечатает\n```\n","title":"php://","contentType":2,"navigation":[{"wrappers.ftp.md":"« ftp://"},{"wrappers.compression.md":"zlib:// »"},{"index.md":"PHP Manual"},{"wrappers.md":"Підтримувані протоколи та обгортки"}]}},"__N_SSG":true}