{"pageProps":{"page":{"slug":"phar.buildfromiterator.md","content":"# Phar::buildFromIterator\n\n(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 2.0.0)\n\nPhar::buildFromIterator - Створює phar-архів з ітератора\n\n### Опис\n\n```methodsynopsis\npublic Phar::buildFromIterator(Traversable $iterator, ?string $baseDirectory = null): array\n```\n\n> **Зауваження** :\n> \n> Для коректної роботи з об'єктами [Phar](class.phar.md) цьому методу необхідне встановлення значення php.ini `phar.readonly`в . В іншому випадку, буде викинуто виняток [PharException](class.pharexception.md)\n\nЗаповнює phar-архів із ітератора. Підтримуються ітератори двох типів: такі, де відображається відповідність імені файлу всередині phar-архіву до файлу на диску, і такі як DirectoryIterator, які повертають об'єкти SplFileInfo. Для ітераторів, які повертають об'єкти SplFileInfo, другий параметр є обов'язковим.\n\n### Список параметрів\n\n`iterator`\n\nБудь-який ітератор, який або асоціативно відображає шляхи до файлів усередині phar-архіву до файлів на диску, або повертає об'єкти SplFileInfo.\n\n`baseDirectory`\n\nДля ітераторів, що повертають об'єкти SplFileInfo, - частина повного шляху кожного файлу, яка має бути видалена під час його додавання до phar-архіву.\n\n### Значення, що повертаються\n\n**Phar::buildFromIterator()** повертає асоціативний масив, у якому відображаються відповідності шляху до файлу всередині архіву до шляху до файлу у файловій системі.\n\n### Помилки\n\nЦей метод викидає виняток [UnexpectedValueException](class.unexpectedvalueexception.md)коли ітератор повертає некоректні значення, такі як цілий ключ замість рядка. Виняток [BadMethodCallException](class.badmethodcallexception.md) буде кинуто, коли ітератор, що базується на SplFileInfo, використовується без параметра `baseDirectory`Исключение[PharException](class.pharexception.md) викидається у разі помилок збереження phar-архіву.\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.1.0 | **Phar::buildFromIterator()** більше не повертає значення **`false`** |\n| 8.0.0 | `baseDirectory` тепер допускає значення null. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** Phar::buildFromIterator()\\*\\* з об'єктами SplFileInfo\\*\\*\n\nДля більшості phar-архівів, архів буде відображати фактичну структуру директорії, а другий тип ітератора буде найбільш корисним. Наприклад, він буде корисним для створення phar-архіву, що містить файли зі структурою директорій як у цьому прикладі:\n\n/шлях/до/проекту/ config/ dist.xml debug.xml lib/ file1.php file2.php src/ processthing.php www/ index.php cli/ index.php\n\nДля додавання цих файлів до phar-архів \"project.phar\" може бути використаний наступний код:\n\n```php\n<?php\n// создать с псевдонимом \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n$phar->buildFromIterator(\n    new RecursiveIteratorIterator(\n     new RecursiveDirectoryIterator('/путь/к/проекту')),\n    '/путь/к/проекту');\n$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));\n?>\n```\n\nПісля цього файл project.phar можна використовувати негайно. Такі значення як стиснення та метадані не встановлюються методом **Phar::buildFromIterator()** та можуть бути встановлені після створення phar-архіву.\n\nЯк цікаве зауваження можна відзначити, що **Phar::buildFromIterator()** також може бути використаний для копіювання вмісту існуючого phar-архіву, оскільки клас Phar є нащадком [DirectoryIterator](class.directoryiterator.md) :\n\n```php\n<?php\n// создать с псевдонимом \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n$phar->buildFromIterator(\n    new RecursiveIteratorIterator(\n     new Phar('/путь/к/anotherphar.phar')),\n    'phar:///путь/к/anotherphar.phar/путь/к/проекту');\n$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));\n?>\n```\n\n**Приклад #2 Приклад використання** Phar::buildFromIterator()\\*\\* з іншими типами ітераторів\\*\\*\n\nДругий тип передбачає використання будь-якого ітератора, що повертаються значення якого відображають відповідність імені файлу всередині phar-архіву до файлу на диску, як у випадку з [ArrayIterator](class.arrayiterator.md) :\n\n```php\n<?php\n// создать с псевдонимом \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n$phar->buildFromIterator(\n    new ArrayIterator(\n     array(\n        'путь/внутри/архива/file.php' => dirname(__FILE__) . '/somefile.php',\n        'друго/путь/внутри/архива/file.jpg' => fopen('/путь/к/bigfile.jpg', 'rb'),\n     )));\n$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));\n?>\n```\n\n### Дивіться також\n\n-   [Phar::buildFromDirectory()](phar.buildfromdirectory.md) \\- Створює phar-архів із файлів, розташованих усередині директорії\n","title":"Phar::buildFromIterator","contentType":2,"navigation":[{"phar.buildfromdirectory.md":"« Phar::buildFromDirectory"},{"phar.cancompress.md":"Phar::canCompress »"},{"index.md":"PHP Manual"},{"class.phar.md":"Phar"}]}},"__N_SSG":true}