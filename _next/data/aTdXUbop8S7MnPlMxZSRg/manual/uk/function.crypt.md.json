{"pageProps":{"page":{"slug":"function.crypt.md","content":"# crypt\n\n(PHP 4, PHP 5, PHP 7, PHP 8)\n\ncrypt — Незворотне хешування рядка\n\n**Увага**\n\nЦя функція (поки що) небезпечна для обробки даних у двійковій формі!\n\n### Опис\n\n```methodsynopsis\ncrypt(string $string, string $salt): string\n```\n\n**crypt()** повертає хешований рядок, отриманий за допомогою стандартного алгоритму UNIX, заснованого на DES або іншого алгоритму. Функція [password\\_verify()](function.password-verify.md)совместима с**crypt()**. Отже, хеші паролів, створені **crypt()**, можуть бути використані в [password\\_verify()](function.password-verify.md)\n\nДо версії PHP 8.0.0 параметр `salt` був необов'язковим. Однак функція **crypt()** створює слабкий хеш без параметра `salt`, а без нього видає помилку рівня **`E_NOTICE`**. Переконайтеся, що ви використовуєте досить складну сіль для кращої безпеки.\n\nФункция[password\\_hash()](function.password-hash.md) використовує складний хеш, генерує складну сіль і застосовує правильно кількість раундів хешування автоматично . [password\\_hash()](function.password-hash.md) є простою обгорткою над **crypt()** та сумісна з існуючими хешами паролів. Тому вітається використання [password\\_hash()](function.password-hash.md)\n\nВид хешування визначається переданим аргументом salt (сіль). Якщо сіль не вказана, буде автоматично згенерована стандартна випадкова двосимвольна (DES) або дванадцятисимвольна (MD5) сіль, залежно від доступності алгоритму MD5 crypt(). Обумовлена ​​константа **`CRYPT_SALT_LENGTH`** дозволяє визначити максимально доступну довжину солі відповідно до алгоритмів, що використовуються.\n\nСтандартная функция**crypt()** на основі DES повертає сіль як перші два символи рядка, що повертається. Крім того, вона використовує лише перші вісім символів рядка `string`тому довгі рядки, що починаються з тих же восьми символів, згенерують один і той же результат (при використанні однакової солі).\n\nПідтримуються такі типи хешей:\n\n-   **`CRYPT_STD_DES`** - Стандартне DES-шифрування з двосимвольною сіллю з алфавіту \"./0-9A-Za-z\"./0-9A-Za-z\". Використання інших символів у солі спричинить відмову роботи crypt().\n-   **`CRYPT_EXT_DES`** - Розширене DES-шифрування. \"Сіль\" є 9-символьним рядком, що складається з символу підкреслення, за яким слідують 4 символи лічильника ітерації та 4 символи солі. Кожен із цих 4-символьних рядків кодує 24 біти, найменший символ першим. Значення від до`63`кодуються як`./0-9A-Za-z`. Використання неприпустимих символів у солі призведе до помилки crypt().\n-   \\*\\*`CRYPT_MD5`\\*\\*- MD5-шифрування з 12-символьною сіллю, що починається з $1$\n-   **`CRYPT_BLOWFISH`** - Blowfish-шифрування з наступною сіллю: \"$2a$\", \"$2x$\" або \"$2y$\", ваговий параметр із двох цифр, \"$\" та 22 цифри з алфавіту \"./0-9A-Za-z \". Використання інших символів у солі спричинить повернення порожнього рядка. Ваговий параметр з двох цифр є двійковим логарифмом лічильника ітерацій нижчележачого хешируючого алгоритму, заснованого на Blowfish, і повинен бути в діапазоні 04-31, значення поза даним діапазоном викликають відмову crypt(). Хеші \"$2x$\" потенційно слабкі; Хеші \"$2a$\" сумісні та пом'якшують цю слабкість. Для нових хешей слід використовувати $2y$.\n-   **`CRYPT_SHA256`** - хеш SHA-256 з шістнадцятисимвольною сіллю, що починається з $5$. Якщо рядок із сіллю починається з 'rounds=$', число N буде використано для позначення кількості раундів хешування, за аналогією з ваговим параметром Blowfish. За умовчанням кількість раундів, що використовується, дорівнює 5000, мінімально доступно 1000 і максимально 999,999,999. Будь-яке значення поза цим діапазоном буде усічено до найближчого ліміту.\n-   **`CRYPT_SHA512`** - хеш SHA-512 з шістнадцятисимвольною сіллю, що починається з $6$. Якщо рядок із сіллю починається з 'rounds=$', число N буде використано для позначення кількості раундів хешування, за аналогією з ваговим параметром Blowfish. За умовчанням кількість раундів, що використовується, дорівнює 5000, мінімально доступно 1000 і максимально 999,999,999. Будь-яке значення поза цим діапазоном буде усічено до найближчого ліміту.\n\n### Список параметрів\n\n`string`\n\nХешований рядок.\n\n**Застереження**\n\nПри использовании алгоритма\\*\\*`CRYPT_BLOWFISH`\\*\\*, параметр`string` обрізається до 72 байт.\n\n`salt`\n\nПараметр із сіллю, на якій буде засновано хешування. Якщо не вказано, поведінка визначається за наявністю реалізованих алгоритмів у системі та може призвести до несподіваних результатів.\n\n### Значення, що повертаються\n\nПовертає хешований рядок або рядок коротше 13 символів, що гарантовано відрізняється від солі у разі виникнення помилки.\n\n**Увага**\n\nПри валідації паролів повинні використовуватись функції порівняння рядків, стійкі до атаки за часом, для порівняння виведення функції **crypt()** із відомим хешом. У PHP для цього є функція [hash\\_equals()](function.hash-equals.md)\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | `salt` більше не є необов'язковим. |\n\n### Приклади\n\n**Приклад #1 Приклад використання** crypt()\\*\\*\\*\\*\n\n```php\n<?php\n// соль будет сгенерирована автоматически; не рекомендуется\n$user_input = 'rasmuslerdorf';\n$hashed_password = '$6$rounds=1000000$NJy4rIPjpOaU$0ACEYGg/aKCY3v8O8AfyiO7CTfZQ8/W231Qfh2tRLmfdvFD6XfHk12u6hMr9cYIA4hnpjLNSTRtUwYr9km9Ij/';\n\n// Проверка существующего хеша crypt() способом, совместимым с программами, не использующими PHP.\nif (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {\n   echo \"Пароль верен!\";\n}\n?>\n```\n\n**Приклад #2 Использование**crypt()\\*\\* з різними видами хешей\\*\\*\n\n```php\n<?php\n/* Приведённая соль является только Прикладом. Не используйте эту же соль в вашем коде.\n   Вы должны сгенерировать уникальную и правильную соль для каждого пароля.\n*/\necho 'Стандартный DES: ',\n    crypt('rasmuslerdorf', 'rl'),\n    \"\\n\";\necho 'Расширенный DES: ',\n    crypt('rasmuslerdorf', '_J9..rasm'),\n    \"\\n\";\necho 'MD5:          ',\n    crypt('rasmuslerdorf', '$1$rasmusle$'),\n    \"\\n\";\necho 'Blowfish:     ',\n    crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$'),\n    \"\\n\";\necho 'SHA-256:      ',\n    crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$'),\n    \"\\n\";\necho 'SHA-512:      ',\n    crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$'),\n    \"\\n\";\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nСтандартный DES: rl.3StKT.4T8M\nРасширенный DES: _J9..rasmBYk8r9AiWNc\nMD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0\nBlowfish:     $2y$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi\nSHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6\nSHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21\n```\n\n### Примітки\n\n> **Зауваження**: Функція розшифровки відсутня. **crypt()** використовує незворотний алгоритм хешування.\n\n### Дивіться також\n\n-   [hash\\_equals()](function.hash-equals.md) \\- Порівнює рядки без ризику атаки за часом\n-   [password\\_hash()](function.password-hash.md) \\- Створює хеш пароля\n-   Сторінка керівництва Unix за вашою функцією crypt\n","title":"crypt","contentType":2,"navigation":[{"function.crc32.md":"« crc32"},{"function.echo.md":"echo »"},{"index.md":"PHP Manual"},{"ref.strings.md":"Функції для роботи з рядками"}]}},"__N_SSG":true}