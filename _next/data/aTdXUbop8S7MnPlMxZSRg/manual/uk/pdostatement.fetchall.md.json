{"pageProps":{"page":{"slug":"pdostatement.fetchall.md","content":"# PDOStatement::fetchAll\n\n(PHP 5 >= 5.1.0, PHP 7, PHP 8, PECL pdo >= 0.1.0)\n\nPDOStatement::fetchAll — Вибирає рядки, що залишилися, з набору результатів\n\n### Опис\n\n```methodsynopsis\npublic PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT): array\n```\n\n```methodsynopsis\npublic PDOStatement::fetchAll(int $mode = PDO::FETCH_COLUMN, int $column): array\n```\n\n```methodsynopsis\npublic PDOStatement::fetchAll(int $mode = PDO::FETCH_CLASS, string $class, ?array $constructorArgs): array\n```\n\n```methodsynopsis\npublic PDOStatement::fetchAll(int $mode = PDO::FETCH_FUNC, callable $callback): array\n```\n\n### Список параметрів\n\n`mode`\n\nВизначає вміст масиву, що повертається. Докладніше можна дізнатися з документації до методу [PDOStatement::fetch()](pdostatement.fetch.md)По умолчанию параметр принимает значение\\*\\*`PDO::ATTR_DEFAULT_FETCH_MODE`\\*\\* (яке у свою чергу має умовчання **`PDO::FETCH_BOTH`**) .\n\nЩоб вибрати значення лише одного стовпця, передайте як значення цього параметра константу \\*\\*`PDO::FETCH_COLUMN`\\*\\*С помощью параметра`column` можна встановити стовпець, з якого потрібно витягти дані.\n\nЯкщо потрібно витягти лише унікальні рядки одного стовпця, потрібно передати побітове АБО констант **`PDO::FETCH_COLUMN`** і **`PDO::FETCH_UNIQUE`**\n\nЩоб отримати асоціативний масив рядків, згрупований за значеннями певного стовпця, потрібно передати побітове АБО констант **`PDO::FETCH_COLUMN`** і **`PDO::FETCH_GROUP`**\n\nНаступні параметри динамічні і залежать від режиму вибірки. Вони не можуть використовуватися разом із іменованими параметрами.\n\n`column`\n\nВикористовується з **`PDO::FETCH_COLUMN`**. Повертає зазначений стовпець з індексом, що починається з 0.\n\n`class`\n\nВикористовується з **`PDO::FETCH_CLASS`**. Повертає екземпляри зазначеного класу, зіставляючи стовпці кожного рядка із іменованими властивостями класу.\n\n`constructorArgs`\n\nАргументи конструктора користувача класу, коли параметр `mode`равен\\*\\*`PDO::FETCH_CLASS`\\*\\*\n\n`callback`\n\nВикористовується з **`PDO::FETCH_FUNC`**. Повертає результати виклику вказаної функції, використовуючи стовпці кожного рядка як параметри виклику.\n\n### Значення, що повертаються\n\nМетод**PDOStatement::fetchAll()** повертає масив, що містить всі рядки результуючого набору. Масив представляє кожен рядок у вигляді масиву значень одного стовпця, або у вигляді об'єкта, імена властивостей якого збігаються з іменами стовпців.\n\nВикористання цього для вилучення рядків великих результуючих наборів може згубно позначитися на продуктивності системи та мережевих ресурсів. Замість отримання всіх даних та їх обробки в PHP рекомендується використовувати вбудовані засоби СУБД. Наприклад, використання виразів WHERE та ORDER BY мови SQL може зменшити розмір результуючого набору.\n\n### Помилки\n\nВидає помилку рівня **`E_WARNING`**, якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_WARNING`**\n\nВикидає виняток [PDOException](class.pdoexception.md), якщо атрибуту **`PDO::ATTR_ERRMODE`**установлено значение**`PDO::ERRMODE_EXCEPTION`**\n\n### список змін\n\n| Версия | Опис |\n| --- | --- |\n| 8.0.0 | Метод тепер завжди повертає масив (array), раніше у разі виникнення помилки могло повертатися **`false`** |\n\n### Приклади\n\n**Приклад #1 Вилучення всіх рядків результуючого набору, що залишилися.**\n\n```php\n<?php\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n/* Извлечение всех оставшихся строк результирующего набора */\nprint \"Извлечение всех оставшихся строк результирующего набора:\\n\";\n$result = $sth->fetchAll();\nprint_r($result);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nИзвлечение всех оставшихся строк результирующего набора:\nArray\n(\n    [0] => Array\n        (\n            [name] => apple\n            [0] => apple\n            [colour] => red\n            [1] => red\n        )\n\n    [1] => Array\n        (\n            [name] => pear\n            [0] => pear\n            [colour] => green\n            [1] => green\n        )\n\n    [2] => Array\n        (\n            [name] => watermelon\n            [0] => watermelon\n            [colour] => pink\n            [1] => pink\n        )\n)\n```\n\n**Приклад #2 Вилучення всіх значень одного стовпця результуючого набору**\n\nУ наступному прикладі показано, як витягти з результуючого набору значення лише одного стовпця, навіть якщо рядки містять значення кількох стовпців.\n\n```php\n<?php\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n/* Извлечение всех значений первого столбца */\n$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);\nvar_dump($result);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\nArray(3)\n(\n    [0] =>\n    string(5) => apple\n    [1] =>\n    string(4) => pear\n    [2] =>\n    string(10) => watermelon\n)\n```\n\n**Приклад #3 Угруповання рядків за значеннями одного стовпця**\n\nУ наведеному нижче прикладі показано, як отримати асоціативний масив рядків результуючого набору, згрупованих за значеннями зазначеного стовпця. Масив містить три ключі: значення `apple`и`pear` є масивами, що містять два різні кольори; в той же час `watermelon` буде масивом, що містить лише один колір.\n\n```php\n<?php\n$insert = $dbh->prepare(\"INSERT INTO fruit(name, colour) VALUES (?, ?)\");\n$insert->execute(array('apple', 'green'));\n$insert->execute(array('pear', 'yellow'));\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n/* Группируем записи по значениям первого столбца */\nvar_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(3) {\n  [\"apple\"]=>\n  array(2) {\n    [0]=>\n    string(5) \"green\"\n    [1]=>\n    string(3) \"red\"\n  }\n  [\"pear\"]=>\n  array(2) {\n    [0]=>\n    string(5) \"green\"\n    [1]=>\n    string(6) \"yellow\"\n  }\n  [\"watermelon\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"pink\"\n  }\n}\n```\n\n**Приклад #4 Створення об'єкта для кожного рядка**\n\nУ наступному прикладі показано поведінку методу у режимі вибірки **`PDO::FETCH_CLASS`**\n\n```php\n<?php\nclass fruit {\n    public $name;\n    public $colour;\n}\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n$result = $sth->fetchAll(PDO::FETCH_CLASS, \"fruit\");\nvar_dump($result);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(3) {\n  [0]=>\n  object(fruit)#1 (2) {\n    [\"name\"]=>\n    string(5) \"apple\"\n    [\"colour\"]=>\n    string(5) \"green\"\n  }\n  [1]=>\n  object(fruit)#2 (2) {\n    [\"name\"]=>\n    string(4) \"pear\"\n    [\"colour\"]=>\n    string(6) \"yellow\"\n  }\n  [2]=>\n  object(fruit)#3 (2) {\n    [\"name\"]=>\n    string(10) \"watermelon\"\n    [\"colour\"]=>\n    string(4) \"pink\"\n  }\n  [3]=>\n  object(fruit)#4 (2) {\n    [\"name\"]=>\n    string(5) \"apple\"\n    [\"colour\"]=>\n    string(3) \"red\"\n  }\n  [4]=>\n  object(fruit)#5 (2) {\n    [\"name\"]=>\n    string(4) \"pear\"\n    [\"colour\"]=>\n    string(5) \"green\"\n  }\n}\n```\n\n**Приклад #5 Виклик функції для кожного рядка**\n\nУ наступному прикладі показано поведінку методу у режимі вибірки **`PDO::FETCH_FUNC`**\n\n```php\n<?php\nfunction fruit($name, $colour) {\n    return \"{$name}: {$colour}\";\n}\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n$result = $sth->fetchAll(PDO::FETCH_FUNC, \"fruit\");\nvar_dump($result);\n?>\n```\n\nВисновок наведеного прикладу буде схожим на:\n\n```\narray(3) {\n  [0]=>\n  string(12) \"apple: green\"\n  [1]=>\n  string(12) \"pear: yellow\"\n  [2]=>\n  string(16) \"watermelon: pink\"\n  [3]=>\n  string(10) \"apple: red\"\n  [4]=>\n  string(11) \"pear: green\"\n}\n```\n\n### Дивіться також\n\n-   [PDO::query()](pdo.query.md) \\- готує та виконує вираз SQL без заповнювачів\n-   [PDOStatement::fetch()](pdostatement.fetch.md) \\- Вилучення наступного рядка з результуючого набору\n-   [PDOStatement::fetchColumn()](pdostatement.fetchcolumn.md) \\- Повертає дані одного стовпця наступного рядка результуючого набору\n-   [PDO::prepare()](pdo.prepare.md) \\- готує запит до виконання та повертає пов'язаний із цим запитом об'єкт\n-   [PDOStatement::setFetchMode()](pdostatement.setfetchmode.md) \\- Встановлює режим вибірки за промовчанням для об'єкта запиту\n","title":"PDOStatement::fetchAll","contentType":2,"navigation":[{"pdostatement.fetch.md":"« PDOStatement::fetch"},{"pdostatement.fetchcolumn.md":"PDOStatement::fetchColumn »"},{"index.md":"PHP Manual"},{"class.pdostatement.md":"PDOStatement"}]}},"__N_SSG":true}