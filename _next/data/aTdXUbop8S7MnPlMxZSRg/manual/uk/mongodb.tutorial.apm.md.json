{"pageProps":{"page":{"slug":"mongodb.tutorial.apm.md","content":"# Моніторинг продуктивності програми (Application Performance Monitoring або APM)\n\nДрайвер MongoDB містить API передплатника подій, який дозволяє програмам відстежувати команди та внутрішню активність, що стосується [» Специфікації виявлення та моніторингу серверів](https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst). У цьому посібнику буде продемонстровано моніторинг команд за допомогою інтерфейсу [MongoDB\\\\Driver\\\\Monitoring\\\\CommandSubscriber](class.mongodb-driver-monitoring-commandsubscriber.md)\n\nІнтерфейс [MongoDB\\\\Driver\\\\Monitoring\\\\CommandSubscriber](class.mongodb-driver-monitoring-commandsubscriber.md)определяет три метода:`commandStarted` `commandSucceeded`и`commandFailed`. Кожен із них приймає один параметр `event` класу, що відповідає потрібній події. Наприклад, `commandSucceeded`принимает аргумент`$event`класса[MongoDB\\\\Driver\\\\Monitoring\\\\CommandSucceededEvent](class.mongodb-driver-monitoring-commandsucceededevent.md)\n\nУ цьому посібнику ви реалізуємо передплатника, який створює список профілювань усіх запитів та середнього часу їх виконання.\n\n## Клас передплатник Scaffolding\n\nМи почнемо з шаблону для нашого передплатника:\n\n```php\n<?php\n\nclass QueryTimeCollector implements \\MongoDB\\Driver\\Monitoring\\CommandSubscriber\n{\n    public function commandStarted( \\MongoDB\\Driver\\Monitoring\\CommandStartedEvent $event ): void\n    {\n    }\n\n    public function commandSucceeded( \\MongoDB\\Driver\\Monitoring\\CommandSucceededEvent $event ): void\n    {\n    }\n\n    public function commandFailed( \\MongoDB\\Driver\\Monitoring\\CommandFailedEvent $event ): void\n    {\n    }\n}\n\n?>\n```\n\n## Реєстрація передплатника\n\nЯк тільки об'єкт передплатник створено, необхідно його зареєструвати в драйвері системи моніторингу. Реєстрація здійснюється методом [MongoDB\\\\Driver\\\\Monitoring\\\\addSubscriber()](function.mongodb.driver.monitoring.addsubscriber.md) або [MongoDB\\\\Driver\\\\Manager::addSubscriber()](mongodb-driver-manager.addsubscriber.md) для реєстрації передплатника глобально або за допомогою певного класу Manager відповідно.\n\n```php\n<?php\n\n\\MongoDB\\Driver\\Monitoring\\addSubscriber( new QueryTimeCollector() );\n\n?>\n```\n\n## Реалізуємо логіку\n\nТепер займемося реалізацією логіки класу передплатника. Для порівняння двох подій, що належать до успішно виконаної команди (commandStarted and commandSucceeded), кожен об'єкт події надає поле `requestId`\n\nДля запису середнього часу виконання запиту ми почнемо з відстеження команди `find` у події підтримуєтьсяпідпис. Ми будемо додавати елемент до масиву `pendingCommands` з індексом відповідним `requestId` та значенням, що відповідає запиту.\n\nКоли ми отримаємо відповідну подію commandSucceeded з відповідним `requestId`, ми додамо час виконання (з `durationMicros`) до загального часу та збільшимо лічильник операцій.\n\nЯкщо ми отримаємо подію commandFailed, ми просто видалимо відповідний запис з `pendingCommands`\n\n```php\n<?php\n\nclass QueryTimeCollector implements \\MongoDB\\Driver\\Monitoring\\CommandSubscriber\n{\n    private $pendingCommands = [];\n    private $queryShapeStats = [];\n\n    /* Создаёт форму запроса из аргумента фильтра. В данный момент учитываются\n     * только поля верхнего уровня. */\n    private function createQueryShape( array $filter )\n    {\n        return json_encode( array_keys( $filter ) );\n    }\n\n    public function commandStarted( \\MongoDB\\Driver\\Monitoring\\CommandStartedEvent $event ): void\n    {\n        if ( array_key_exists( 'find', (array) $event->getCommand() ) )\n        {\n            $queryShape = $this->createQueryShape( (array) $event->getCommand()->filter );\n            $this->pendingCommands[$event->getRequestId()] = $queryShape;\n        }\n    }\n\n    public function commandSucceeded( \\MongoDB\\Driver\\Monitoring\\CommandSucceededEvent $event ): void\n    {\n        $requestId = $event->getRequestId();\n        if ( array_key_exists( $requestId, $this->pendingCommands ) )\n        {\n            $this->queryShapeStats[$this->pendingCommands[$requestId]]['count']++;\n            $this->queryShapeStats[$this->pendingCommands[$requestId]]['duration'] += $event->getDurationMicros();\n            unset( $this->pendingCommands[$requestId] );\n        }\n    }\n\n    public function commandFailed( \\MongoDB\\Driver\\Monitoring\\CommandFailedEvent $event ): void\n    {\n        if ( array_key_exists( $event->getRequestId(), $this->pendingCommands ) )\n        {\n            unset( $this->pendingCommands[$event->getRequestId()] );\n        }\n    }\n\n    public function __destruct()\n    {\n        foreach( $this->queryShapeStats as $shape => $stats )\n        {\n            echo \"Shape: \", $shape, \" (\", $stats['count'], \")\\n  \",\n                $stats['duration'] / $stats['count'], \"µs\\n\\n\";\n        }\n    }\n}\n\n$m = new \\MongoDB\\Driver\\Manager( 'mongodb://localhost:27016' );\n\n/* Добавляем подписчика */\n\\MongoDB\\Driver\\Monitoring\\addSubscriber( new QueryTimeCollector() );\n\n/* Запускаем пачку запросов */\n$query = new \\MongoDB\\Driver\\Query( [\n    'region_slug' => 'scotland-highlands', 'age' => [ '$gte' => 20 ]\n] );\n$cursor = $m->executeQuery( 'dramio.whisky', $query );\n\n$query = new \\MongoDB\\Driver\\Query( [\n    'region_slug' => 'scotland-lowlands', 'age' => [ '$gte' => 15 ]\n] );\n$cursor = $m->executeQuery( 'dramio.whisky', $query );\n\n$query = new \\MongoDB\\Driver\\Query( [ 'region_slug' => 'scotland-lowlands' ] );\n$cursor = $m->executeQuery( 'dramio.whisky', $query );\n\n?>\n```\n","title":"Моніторинг продуктивності програми (Application Performance Monitoring або APM)","contentType":2,"navigation":[{"mongodb.tutorial.library.md":"Робота бібліотеки PHP з драйвером MongoDB (PHPLIB)"},{"mongodb.architecture.md":"Архітектура та внутрішній пристрій драйвера »"},{"index.md":"PHP Manual"},{"mongodb.tutorial.md":"Навчальні матеріали"}]}},"__N_SSG":true}